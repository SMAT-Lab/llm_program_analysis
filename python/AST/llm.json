{
  "value": "import ast\nimport logging\nfrom enum import Enum, EnumMeta\nfrom json import JSONDecodeError\nfrom types import MappingProxyType\nfrom typing import TYPE_CHECKING, Any, List, Literal, NamedTuple\n\nfrom pydantic import SecretStr\n\nfrom backend.integrations.providers import ProviderName\n\nif TYPE_CHECKING:\n    from enum import _EnumMemberT\n\nimport anthropic\nimport ollama\nimport openai\nfrom groq import Groq\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.util import json\nfrom backend.util.settings import BehaveAs, Settings\n\nlogger = logging.getLogger(__name__)\n\nLLMProviderName = Literal[\n    ProviderName.ANTHROPIC,\n    ProviderName.GROQ,\n    ProviderName.OLLAMA,\n    ProviderName.OPENAI,\n    ProviderName.OPEN_ROUTER,\n]\nAICredentials = CredentialsMetaInput[LLMProviderName, Literal[\"api_key\"]]\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n    provider=\"openai\",\n    api_key=SecretStr(\"mock-openai-api-key\"),\n    title=\"Mock OpenAI API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}\n\n\ndef AICredentialsField() -> AICredentials:\n    return CredentialsField(\n        description=\"API key for the LLM provider.\",\n        discriminator=\"model\",\n        discriminator_mapping={\n            model.value: model.metadata.provider for model in LlmModel\n        },\n    )\n\n\nclass ModelMetadata(NamedTuple):\n    provider: str\n    context_window: int\n\n\nclass LlmModelMeta(EnumMeta):\n    @property\n    def __members__(\n        self: type[\"_EnumMemberT\"],\n    ) -> MappingProxyType[str, \"_EnumMemberT\"]:\n        if Settings().config.behave_as == BehaveAs.LOCAL:\n            members = super().__members__\n            return members\n        else:\n            removed_providers = [\"ollama\"]\n            existing_members = super().__members__\n            members = {\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }\n            return MappingProxyType(members)\n\n\nclass LlmModel(str, Enum, metaclass=LlmModelMeta):\n    # OpenAI models\n    O1_PREVIEW = \"o1-preview\"\n    O1_MINI = \"o1-mini\"\n    GPT4O_MINI = \"gpt-4o-mini\"\n    GPT4O = \"gpt-4o\"\n    GPT4_TURBO = \"gpt-4-turbo\"\n    GPT3_5_TURBO = \"gpt-3.5-turbo\"\n    # Anthropic models\n    CLAUDE_3_5_SONNET = \"claude-3-5-sonnet-latest\"\n    CLAUDE_3_HAIKU = \"claude-3-haiku-20240307\"\n    # Groq models\n    LLAMA3_8B = \"llama3-8b-8192\"\n    LLAMA3_70B = \"llama3-70b-8192\"\n    MIXTRAL_8X7B = \"mixtral-8x7b-32768\"\n    GEMMA_7B = \"gemma-7b-it\"\n    GEMMA2_9B = \"gemma2-9b-it\"\n    # New Groq models (Preview)\n    LLAMA3_1_405B = \"llama-3.1-405b-reasoning\"\n    LLAMA3_1_70B = \"llama-3.1-70b-versatile\"\n    LLAMA3_1_8B = \"llama-3.1-8b-instant\"\n    # Ollama models\n    OLLAMA_LLAMA3_8B = \"llama3\"\n    OLLAMA_LLAMA3_405B = \"llama3.1:405b\"\n    OLLAMA_DOLPHIN = \"dolphin-mistral:latest\"\n    # OpenRouter models\n    GEMINI_FLASH_1_5_8B = \"google/gemini-flash-1.5\"\n    GROK_BETA = \"x-ai/grok-beta\"\n    MISTRAL_NEMO = \"mistralai/mistral-nemo\"\n    COHERE_COMMAND_R_08_2024 = \"cohere/command-r-08-2024\"\n    COHERE_COMMAND_R_PLUS_08_2024 = \"cohere/command-r-plus-08-2024\"\n    EVA_QWEN_2_5_32B = \"eva-unit-01/eva-qwen-2.5-32b\"\n    DEEPSEEK_CHAT = \"deepseek/deepseek-chat\"\n    PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE = (\n        \"perplexity/llama-3.1-sonar-large-128k-online\"\n    )\n    QWEN_QWQ_32B_PREVIEW = \"qwen/qwq-32b-preview\"\n    NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B = \"nousresearch/hermes-3-llama-3.1-405b\"\n    NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B = \"nousresearch/hermes-3-llama-3.1-70b\"\n    AMAZON_NOVA_LITE_V1 = \"amazon/nova-lite-v1\"\n    AMAZON_NOVA_MICRO_V1 = \"amazon/nova-micro-v1\"\n    AMAZON_NOVA_PRO_V1 = \"amazon/nova-pro-v1\"\n    MICROSOFT_WIZARDLM_2_8X22B = \"microsoft/wizardlm-2-8x22b\"\n    GRYPHE_MYTHOMAX_L2_13B = \"gryphe/mythomax-l2-13b\"\n\n    @property\n    def metadata(self) -> ModelMetadata:\n        return MODEL_METADATA[self]\n\n    @property\n    def provider(self) -> str:\n        return self.metadata.provider\n\n    @property\n    def context_window(self) -> int:\n        return self.metadata.context_window\n\n\nMODEL_METADATA = {\n    LlmModel.O1_PREVIEW: ModelMetadata(\"openai\", 32000),\n    LlmModel.O1_MINI: ModelMetadata(\"openai\", 62000),\n    LlmModel.GPT4O_MINI: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT4O: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT4_TURBO: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT3_5_TURBO: ModelMetadata(\"openai\", 16385),\n    LlmModel.CLAUDE_3_5_SONNET: ModelMetadata(\"anthropic\", 200000),\n    LlmModel.CLAUDE_3_HAIKU: ModelMetadata(\"anthropic\", 200000),\n    LlmModel.LLAMA3_8B: ModelMetadata(\"groq\", 8192),\n    LlmModel.LLAMA3_70B: ModelMetadata(\"groq\", 8192),\n    LlmModel.MIXTRAL_8X7B: ModelMetadata(\"groq\", 32768),\n    LlmModel.GEMMA_7B: ModelMetadata(\"groq\", 8192),\n    LlmModel.GEMMA2_9B: ModelMetadata(\"groq\", 8192),\n    LlmModel.LLAMA3_1_405B: ModelMetadata(\"groq\", 8192),\n    # Limited to 16k during preview\n    LlmModel.LLAMA3_1_70B: ModelMetadata(\"groq\", 131072),\n    LlmModel.LLAMA3_1_8B: ModelMetadata(\"groq\", 131072),\n    LlmModel.OLLAMA_LLAMA3_8B: ModelMetadata(\"ollama\", 8192),\n    LlmModel.OLLAMA_LLAMA3_405B: ModelMetadata(\"ollama\", 8192),\n    LlmModel.OLLAMA_DOLPHIN: ModelMetadata(\"ollama\", 32768),\n    LlmModel.GEMINI_FLASH_1_5_8B: ModelMetadata(\"open_router\", 8192),\n    LlmModel.GROK_BETA: ModelMetadata(\"open_router\", 8192),\n    LlmModel.MISTRAL_NEMO: ModelMetadata(\"open_router\", 4000),\n    LlmModel.COHERE_COMMAND_R_08_2024: ModelMetadata(\"open_router\", 4000),\n    LlmModel.COHERE_COMMAND_R_PLUS_08_2024: ModelMetadata(\"open_router\", 4000),\n    LlmModel.EVA_QWEN_2_5_32B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.DEEPSEEK_CHAT: ModelMetadata(\"open_router\", 8192),\n    LlmModel.PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE: ModelMetadata(\n        \"open_router\", 8192\n    ),\n    LlmModel.QWEN_QWQ_32B_PREVIEW: ModelMetadata(\"open_router\", 4000),\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_LITE_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_MICRO_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_PRO_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.MICROSOFT_WIZARDLM_2_8X22B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.GRYPHE_MYTHOMAX_L2_13B: ModelMetadata(\"open_router\", 4000),\n}\n\nfor model in LlmModel:\n    if model not in MODEL_METADATA:\n        raise ValueError(f\"Missing MODEL_METADATA metadata for model: {model}\")\n\n\nclass MessageRole(str, Enum):\n    SYSTEM = \"system\"\n    USER = \"user\"\n    ASSISTANT = \"assistant\"\n\n\nclass Message(BlockSchema):\n    role: MessageRole\n    content: str\n\n\nclass AIStructuredResponseGeneratorBlock(Block):\n    class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"The prompt to send to the language model.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        expected_format: dict[str, str] = SchemaField(\n            description=\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        conversation_history: list[Message] = SchemaField(\n            default=[],\n            description=\"The conversation history to provide context for the prompt.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        response: dict[str, Any] = SchemaField(\n            description=\"The response object generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n            description=\"Call a Large Language Model (LLM) to generate formatted object based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AIStructuredResponseGeneratorBlock.Input,\n            output_schema=AIStructuredResponseGeneratorBlock.Output,\n            test_input={\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"expected_format\": {\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                },\n                \"prompt\": \"User prompt\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", {\"key1\": \"key1Value\", \"key2\": \"key2Value\"}),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )\n            },\n        )\n\n    @staticmethod\n    def llm_call(\n        credentials: APIKeyCredentials,\n        llm_model: LlmModel,\n        prompt: list[dict],\n        json_format: bool,\n        max_tokens: int | None = None,\n        ollama_host: str = \"localhost:11434\",\n    ) -> tuple[str, int, int]:\n        \"\"\"\n        Args:\n            api_key: API key for the LLM provider.\n            llm_model: The LLM model to use.\n            prompt: The prompt to send to the LLM.\n            json_format: Whether the response should be in JSON format.\n            max_tokens: The maximum number of tokens to generate in the chat completion.\n            ollama_host: The host for ollama to use\n\n        Returns:\n            The response from the LLM.\n            The number of tokens used in the prompt.\n            The number of tokens used in the completion.\n        \"\"\"\n        provider = llm_model.metadata.provider\n\n        if provider == \"openai\":\n            oai_client = openai.OpenAI(api_key=credentials.api_key.get_secret_value())\n            response_format = None\n\n            if llm_model in [LlmModel.O1_MINI, LlmModel.O1_PREVIEW]:\n                sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n                usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n                prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]\n            elif json_format:\n                response_format = {\"type\": \"json_object\"}\n\n            response = oai_client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"anthropic\":\n            system_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            sysprompt = \" \".join(system_messages)\n\n            messages = []\n            last_role = None\n            for p in prompt:\n                if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]\n\n            client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())\n            try:\n                resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )\n\n                if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")\n\n                return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )\n            except anthropic.APIError as e:\n                error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)\n        elif provider == \"groq\":\n            client = Groq(api_key=credentials.api_key.get_secret_value())\n            response_format = {\"type\": \"json_object\"} if json_format else None\n            response = client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"ollama\":\n            client = ollama.Client(host=ollama_host)\n            sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n            response = client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )\n            return (\n                response.get(\"response\") or \"\",\n                response.get(\"prompt_eval_count\") or 0,\n                response.get(\"eval_count\") or 0,\n            )\n        elif provider == \"open_router\":\n            client = openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )\n\n            response = client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )\n\n            # If there's no response, raise an error\n            if not response.choices:\n                if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        else:\n            raise ValueError(f\"Unsupported LLM provider: {provider}\")\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        logger.debug(f\"Calling LLM with input data: {input_data}\")\n        prompt = [p.model_dump() for p in input_data.conversation_history]\n\n        def trim_prompt(s: str) -> str:\n            lines = s.strip().split(\"\\n\")\n            return \"\\n\".join([line.strip().lstrip(\"|\") for line in lines])\n\n        values = input_data.prompt_values\n        if values:\n            input_data.prompt = input_data.prompt.format(**values)\n            input_data.sys_prompt = input_data.sys_prompt.format(**values)\n\n        if input_data.sys_prompt:\n            prompt.append({\"role\": \"system\", \"content\": input_data.sys_prompt})\n\n        if input_data.expected_format:\n            expected_format = [\n                f'\"{k}\": \"{v}\"' for k, v in input_data.expected_format.items()\n            ]\n            format_prompt = \",\\n  \".join(expected_format)\n            sys_prompt = trim_prompt(\n                f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"\n            )\n            prompt.append({\"role\": \"system\", \"content\": sys_prompt})\n\n        if input_data.prompt:\n            prompt.append({\"role\": \"user\", \"content\": input_data.prompt})\n\n        def parse_response(resp: str) -> tuple[dict[str, Any], str | None]:\n            try:\n                parsed = json.loads(resp)\n                if not isinstance(parsed, dict):\n                    return {}, f\"Expected a dictionary, but got {type(parsed)}\"\n                miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys())\n                if miss_keys:\n                    return parsed, f\"Missing keys: {miss_keys}\"\n                return parsed, None\n            except JSONDecodeError as e:\n                return {}, f\"JSON decode error: {e}\"\n\n        logger.info(f\"LLM request: {prompt}\")\n        retry_prompt = \"\"\n        llm_model = input_data.model\n\n        for retry_count in range(input_data.retry):\n            try:\n                response_text, input_token, output_token = self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )\n                self.merge_stats(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )\n                logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")\n\n                if input_data.expected_format:\n                    parsed_dict, parsed_error = parse_response(response_text)\n                    if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return\n                else:\n                    yield \"response\", {\"response\": response_text}\n                    return\n\n                retry_prompt = trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )\n                prompt.append({\"role\": \"user\", \"content\": retry_prompt})\n            except Exception as e:\n                logger.exception(f\"Error calling LLM: {e}\")\n                retry_prompt = f\"Error calling LLM: {e}\"\n            finally:\n                self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )\n\n        raise RuntimeError(retry_prompt)\n\n\nclass AITextGeneratorBlock(Block):\n    class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n\n    class Output(BlockSchema):\n        response: str = SchemaField(\n            description=\"The response generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"1f292d4a-41a4-4977-9684-7c8d560b9f91\",\n            description=\"Call a Large Language Model (LLM) to generate a string based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AITextGeneratorBlock.Input,\n            output_schema=AITextGeneratorBlock.Output,\n            test_input={\n                \"prompt\": \"User prompt\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", \"Response text\"),\n            test_mock={\"llm_call\": lambda *args, **kwargs: \"Response text\"},\n        )\n\n    def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> str:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response[\"response\"]\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        object_input_data = AIStructuredResponseGeneratorBlock.Input(\n            **{attr: getattr(input_data, attr) for attr in input_data.model_fields},\n            expected_format={},\n        )\n        yield \"response\", self.llm_call(object_input_data, credentials)\n\n\nclass SummaryStyle(Enum):\n    CONCISE = \"concise\"\n    DETAILED = \"detailed\"\n    BULLET_POINTS = \"bullet points\"\n    NUMBERED_LIST = \"numbered list\"\n\n\nclass AITextSummarizerBlock(Block):\n    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"The text to summarize.\",\n            placeholder=\"Enter the text to summarize here...\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for summarizing the text.\",\n        )\n        focus: str = SchemaField(\n            title=\"Focus\",\n            default=\"general information\",\n            description=\"The topic to focus on in the summary\",\n        )\n        style: SummaryStyle = SchemaField(\n            title=\"Summary Style\",\n            default=SummaryStyle.CONCISE,\n            description=\"The style of the summary to generate.\",\n        )\n        credentials: AICredentials = AICredentialsField()\n        # TODO: Make this dynamic\n        max_tokens: int = SchemaField(\n            title=\"Max Tokens\",\n            default=4096,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n            ge=1,\n        )\n        chunk_overlap: int = SchemaField(\n            title=\"Chunk Overlap\",\n            default=100,\n            description=\"The number of overlapping tokens between chunks to maintain context.\",\n            ge=0,\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        summary: str = SchemaField(description=\"The final summary of the text.\")\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"a0a69be1-4528-491c-a85a-a4ab6873e3f0\",\n            description=\"Utilize a Large Language Model (LLM) to summarize a long text.\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AITextSummarizerBlock.Input,\n            output_schema=AITextSummarizerBlock.Output,\n            test_input={\n                \"text\": \"Lorem ipsum...\" * 100,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"summary\", \"Final summary of a long text\"),\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )\n            },\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        for output in self._run(input_data, credentials):\n            yield output\n\n    def _run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        chunks = self._split_text(\n            input_data.text, input_data.max_tokens, input_data.chunk_overlap\n        )\n        summaries = []\n\n        for chunk in chunks:\n            chunk_summary = self._summarize_chunk(chunk, input_data, credentials)\n            summaries.append(chunk_summary)\n\n        final_summary = self._combine_summaries(summaries, input_data, credentials)\n        yield \"summary\", final_summary\n\n    @staticmethod\n    def _split_text(text: str, max_tokens: int, overlap: int) -> list[str]:\n        words = text.split()\n        chunks = []\n        chunk_size = max_tokens - overlap\n\n        for i in range(0, len(words), chunk_size):\n            chunk = \" \".join(words[i : i + max_tokens])\n            chunks.append(chunk)\n\n        return chunks\n\n    def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> dict:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response\n\n    def _summarize_chunk(\n        self, chunk: str, input_data: Input, credentials: APIKeyCredentials\n    ) -> str:\n        prompt = f\"Summarize the following text in a {input_data.style} form. Focus your summary on the topic of `{input_data.focus}` if present, otherwise just provide a general summary:\\n\\n```{chunk}```\"\n\n        llm_response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=prompt,\n                credentials=input_data.credentials,\n                model=input_data.model,\n                expected_format={\"summary\": \"The summary of the given text.\"},\n            ),\n            credentials=credentials,\n        )\n\n        return llm_response[\"summary\"]\n\n    def _combine_summaries(\n        self, summaries: list[str], input_data: Input, credentials: APIKeyCredentials\n    ) -> str:\n        combined_text = \"\\n\\n\".join(summaries)\n\n        if len(combined_text.split()) <= input_data.max_tokens:\n            prompt = f\"Provide a final summary of the following section summaries in a {input_data.style} form, focus your summary on the topic of `{input_data.focus}` if present:\\n\\n ```{combined_text}```\\n\\n Just respond with the final_summary in the format specified.\"\n\n            llm_response = self.llm_call(\n                AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                ),\n                credentials=credentials,\n            )\n\n            return llm_response[\"final_summary\"]\n        else:\n            # If combined summaries are still too long, recursively summarize\n            return self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send(None)[\n                1\n            ]  # Get the first yielded value\n\n\nclass AIConversationBlock(Block):\n    class Input(BlockSchema):\n        messages: List[Message] = SchemaField(\n            description=\"List of messages in the conversation.\", min_length=1\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for the conversation.\",\n        )\n        credentials: AICredentials = AICredentialsField()\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        response: str = SchemaField(\n            description=\"The model's response to the conversation.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"32a87eab-381e-4dd4-bdb8-4c47151be35a\",\n            description=\"Advanced LLM call that takes a list of messages and sends them to the language model.\",\n            categories={BlockCategory.AI},\n            input_schema=AIConversationBlock.Input,\n            output_schema=AIConversationBlock.Output,\n            test_input={\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ],\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\n                \"response\",\n                \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\",\n            ),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"\n            },\n        )\n\n    def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> str:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response[\"response\"]\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=\"\",\n                credentials=input_data.credentials,\n                model=input_data.model,\n                conversation_history=input_data.messages,\n                max_tokens=input_data.max_tokens,\n                expected_format={},\n            ),\n            credentials=credentials,\n        )\n\n        yield \"response\", response\n\n\nclass AIListGeneratorBlock(Block):\n    class Input(BlockSchema):\n        focus: str | None = SchemaField(\n            description=\"The focus of the list to generate.\",\n            placeholder=\"The top 5 most interesting news stories in the data.\",\n            default=None,\n            advanced=False,\n        )\n        source_data: str | None = SchemaField(\n            description=\"The data to generate the list from.\",\n            placeholder=\"News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.\",\n            default=None,\n            advanced=False,\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for generating the list.\",\n            advanced=True,\n        )\n        credentials: AICredentials = AICredentialsField()\n        max_retries: int = SchemaField(\n            default=3,\n            description=\"Maximum number of retries for generating a valid list.\",\n            ge=1,\n            le=5,\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        generated_list: List[str] = SchemaField(description=\"The generated list.\")\n        list_item: str = SchemaField(\n            description=\"Each individual item in the list.\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if the list generation failed.\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"9c0b0450-d199-458b-a731-072189dd6593\",\n            description=\"Generate a Python list based on the given prompt using a Large Language Model (LLM).\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AIListGeneratorBlock.Input,\n            output_schema=AIListGeneratorBlock.Output,\n            test_input={\n                \"focus\": \"planets\",\n                \"source_data\": (\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                ),\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"max_retries\": 3,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"generated_list\",\n                    [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n                ),\n                (\"list_item\", \"Zylora Prime\"),\n                (\"list_item\", \"Kharon-9\"),\n                (\"list_item\", \"Vortexia\"),\n                (\"list_item\", \"Oceara\"),\n                (\"list_item\", \"Draknos\"),\n            ],\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                },\n            },\n        )\n\n    @staticmethod\n    def llm_call(\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> dict[str, str]:\n        llm_block = AIStructuredResponseGeneratorBlock()\n        response = llm_block.run_once(input_data, \"response\", credentials=credentials)\n        return response\n\n    @staticmethod\n    def string_to_list(string):\n        \"\"\"\n        Converts a string representation of a list into an actual Python list object.\n        \"\"\"\n        logger.debug(f\"Converting string to list. Input string: {string}\")\n        try:\n            # Use ast.literal_eval to safely evaluate the string\n            python_list = ast.literal_eval(string)\n            if isinstance(python_list, list):\n                logger.debug(f\"Successfully converted string to list: {python_list}\")\n                return python_list\n            else:\n                logger.error(f\"The provided string '{string}' is not a valid list\")\n                raise ValueError(f\"The provided string '{string}' is not a valid list.\")\n        except (SyntaxError, ValueError) as e:\n            logger.error(f\"Failed to convert string to list: {e}\")\n            raise ValueError(\"Invalid list format. Could not convert to list.\")\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        logger.debug(f\"Starting AIListGeneratorBlock.run with input data: {input_data}\")\n\n        # Check for API key\n        api_key_check = credentials.api_key.get_secret_value()\n        if not api_key_check:\n            raise ValueError(\"No LLM API key provided.\")\n\n        # Prepare the system prompt\n        sys_prompt = \"\"\"You are a Python list generator. Your task is to generate a Python list based on the user's prompt. \n            |Respond ONLY with a valid python list. \n            |The list can contain strings, numbers, or nested lists as appropriate. \n            |Do not include any explanations or additional text.\n\n            |Valid Example string formats:\n\n            |Example 1:\n            |```\n            |['1', '2', '3', '4']\n            |```\n\n            |Example 2:\n            |```\n            |[['1', '2'], ['3', '4'], ['5', '6']]\n            |```\n\n            |Example 3:\n            |```\n            |['1', ['2', '3'], ['4', ['5', '6']]]\n            |```\n\n            |Example 4:\n            |```\n            |['a', 'b', 'c']\n            |```\n\n            |Example 5:\n            |```\n            |['1', '2.5', 'string', 'True', ['False', 'None']]\n            |```\n\n            |Do not include any explanations or additional text, just respond with the list in the format specified above.\n            \"\"\"\n        # If a focus is provided, add it to the prompt\n        if input_data.focus:\n            prompt = f\"Generate a list with the following focus:\\n<focus>\\n\\n{input_data.focus}</focus>\"\n        else:\n            # If there's source data\n            if input_data.source_data:\n                prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"\n            else:\n                # No focus or source data provided, generat a random list\n                prompt = \"Generate a random list.\"\n\n        # If the source data is provided, add it to the prompt\n        if input_data.source_data:\n            prompt += f\"\\n\\nUse the following source data to generate the list from:\\n\\n<source_data>\\n\\n{input_data.source_data}</source_data>\\n\\nDo not invent fictional data that is not present in the source data.\"\n        # Else, tell the LLM to synthesize the data\n        else:\n            prompt += \"\\n\\nInvent the data to generate the list from.\"\n\n        for attempt in range(input_data.max_retries):\n            try:\n                logger.debug(\"Calling LLM\")\n                llm_response = self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )\n\n                logger.debug(f\"LLM response: {llm_response}\")\n\n                # Extract Response string\n                response_string = llm_response[\"response\"]\n                logger.debug(f\"Response string: {response_string}\")\n\n                # Convert the string to a Python list\n                logger.debug(\"Converting string to Python list\")\n                parsed_list = self.string_to_list(response_string)\n                logger.debug(f\"Parsed list: {parsed_list}\")\n\n                # If we reach here, we have a valid Python list\n                logger.debug(\"Successfully generated a valid Python list\")\n                yield \"generated_list\", parsed_list\n\n                # Yield each item in the list\n                for item in parsed_list:\n                    yield \"list_item\", item\n                return\n\n            except Exception as e:\n                logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")\n                if attempt == input_data.max_retries - 1:\n                    logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )\n                else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")\n\n        logger.debug(\"AIListGeneratorBlock.run completed\")",
  "children": [
    {
      "value": "import ast",
      "children": [
        {
          "value": "ast",
          "children": [
            {
              "value": "ast",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from enum import Enum, EnumMeta",
      "children": [
        {
          "value": "enum",
          "children": [
            {
              "value": "enum",
              "children": []
            }
          ]
        },
        {
          "value": "Enum",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        },
        {
          "value": "EnumMeta",
          "children": [
            {
              "value": "EnumMeta",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from json import JSONDecodeError",
      "children": [
        {
          "value": "json",
          "children": [
            {
              "value": "json",
              "children": []
            }
          ]
        },
        {
          "value": "JSONDecodeError",
          "children": [
            {
              "value": "JSONDecodeError",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from types import MappingProxyType",
      "children": [
        {
          "value": "types",
          "children": [
            {
              "value": "types",
              "children": []
            }
          ]
        },
        {
          "value": "MappingProxyType",
          "children": [
            {
              "value": "MappingProxyType",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import TYPE_CHECKING, Any, List, Literal, NamedTuple",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "TYPE_CHECKING",
          "children": [
            {
              "value": "TYPE_CHECKING",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "List",
          "children": [
            {
              "value": "List",
              "children": []
            }
          ]
        },
        {
          "value": "Literal",
          "children": [
            {
              "value": "Literal",
              "children": []
            }
          ]
        },
        {
          "value": "NamedTuple",
          "children": [
            {
              "value": "NamedTuple",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from pydantic import SecretStr",
      "children": [
        {
          "value": "pydantic",
          "children": [
            {
              "value": "pydantic",
              "children": []
            }
          ]
        },
        {
          "value": "SecretStr",
          "children": [
            {
              "value": "SecretStr",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.providers import ProviderName",
      "children": [
        {
          "value": "backend.integrations.providers",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "providers",
              "children": []
            }
          ]
        },
        {
          "value": "ProviderName",
          "children": [
            {
              "value": "ProviderName",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "if TYPE_CHECKING:\n    from enum import _EnumMemberT",
      "children": [
        {
          "value": "TYPE_CHECKING",
          "children": []
        },
        {
          "value": "from enum import _EnumMemberT",
          "children": [
            {
              "value": "from enum import _EnumMemberT",
              "children": [
                {
                  "value": "enum",
                  "children": [
                    {
                      "value": "enum",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "_EnumMemberT",
                  "children": [
                    {
                      "value": "_EnumMemberT",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "import anthropic",
      "children": [
        {
          "value": "anthropic",
          "children": [
            {
              "value": "anthropic",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import ollama",
      "children": [
        {
          "value": "ollama",
          "children": [
            {
              "value": "ollama",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import openai",
      "children": [
        {
          "value": "openai",
          "children": [
            {
              "value": "openai",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from groq import Groq",
      "children": [
        {
          "value": "groq",
          "children": [
            {
              "value": "groq",
              "children": []
            }
          ]
        },
        {
          "value": "Groq",
          "children": [
            {
              "value": "Groq",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        },
        {
          "value": "Block",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "BlockCategory",
          "children": [
            {
              "value": "BlockCategory",
              "children": []
            }
          ]
        },
        {
          "value": "BlockOutput",
          "children": [
            {
              "value": "BlockOutput",
              "children": []
            }
          ]
        },
        {
          "value": "BlockSchema",
          "children": [
            {
              "value": "BlockSchema",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "APIKeyCredentials",
          "children": [
            {
              "value": "APIKeyCredentials",
              "children": []
            }
          ]
        },
        {
          "value": "CredentialsField",
          "children": [
            {
              "value": "CredentialsField",
              "children": []
            }
          ]
        },
        {
          "value": "CredentialsMetaInput",
          "children": [
            {
              "value": "CredentialsMetaInput",
              "children": []
            }
          ]
        },
        {
          "value": "SchemaField",
          "children": [
            {
              "value": "SchemaField",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util import json",
      "children": [
        {
          "value": "backend.util",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            }
          ]
        },
        {
          "value": "json",
          "children": [
            {
              "value": "json",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import BehaveAs, Settings",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "BehaveAs",
          "children": [
            {
              "value": "BehaveAs",
              "children": []
            }
          ]
        },
        {
          "value": "Settings",
          "children": [
            {
              "value": "Settings",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "LLMProviderName = Literal[\n    ProviderName.ANTHROPIC,\n    ProviderName.GROQ,\n    ProviderName.OLLAMA,\n    ProviderName.OPENAI,\n    ProviderName.OPEN_ROUTER,\n]",
      "children": [
        {
          "value": "LLMProviderName = Literal[\n    ProviderName.ANTHROPIC,\n    ProviderName.GROQ,\n    ProviderName.OLLAMA,\n    ProviderName.OPENAI,\n    ProviderName.OPEN_ROUTER,\n]",
          "children": [
            {
              "value": "LLMProviderName",
              "children": []
            },
            {
              "value": "Literal[\n    ProviderName.ANTHROPIC,\n    ProviderName.GROQ,\n    ProviderName.OLLAMA,\n    ProviderName.OPENAI,\n    ProviderName.OPEN_ROUTER,\n]",
              "children": [
                {
                  "value": "Literal",
                  "children": []
                },
                {
                  "value": "ProviderName.ANTHROPIC",
                  "children": [
                    {
                      "value": "ProviderName",
                      "children": []
                    },
                    {
                      "value": "ANTHROPIC",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "ProviderName.GROQ",
                  "children": [
                    {
                      "value": "ProviderName",
                      "children": []
                    },
                    {
                      "value": "GROQ",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "ProviderName.OLLAMA",
                  "children": [
                    {
                      "value": "ProviderName",
                      "children": []
                    },
                    {
                      "value": "OLLAMA",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "ProviderName.OPENAI",
                  "children": [
                    {
                      "value": "ProviderName",
                      "children": []
                    },
                    {
                      "value": "OPENAI",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "ProviderName.OPEN_ROUTER",
                  "children": [
                    {
                      "value": "ProviderName",
                      "children": []
                    },
                    {
                      "value": "OPEN_ROUTER",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "AICredentials = CredentialsMetaInput[LLMProviderName, Literal[\"api_key\"]]",
      "children": [
        {
          "value": "AICredentials = CredentialsMetaInput[LLMProviderName, Literal[\"api_key\"]]",
          "children": [
            {
              "value": "AICredentials",
              "children": []
            },
            {
              "value": "CredentialsMetaInput[LLMProviderName, Literal[\"api_key\"]]",
              "children": [
                {
                  "value": "CredentialsMetaInput",
                  "children": []
                },
                {
                  "value": "LLMProviderName",
                  "children": []
                },
                {
                  "value": "Literal[\"api_key\"]",
                  "children": [
                    {
                      "value": "Literal",
                      "children": []
                    },
                    {
                      "value": "\"api_key\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "api_key",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n    provider=\"openai\",\n    api_key=SecretStr(\"mock-openai-api-key\"),\n    title=\"Mock OpenAI API key\",\n    expires_at=None,\n)",
      "children": [
        {
          "value": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n    provider=\"openai\",\n    api_key=SecretStr(\"mock-openai-api-key\"),\n    title=\"Mock OpenAI API key\",\n    expires_at=None,\n)",
          "children": [
            {
              "value": "TEST_CREDENTIALS",
              "children": []
            },
            {
              "value": "APIKeyCredentials(\n    id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n    provider=\"openai\",\n    api_key=SecretStr(\"mock-openai-api-key\"),\n    title=\"Mock OpenAI API key\",\n    expires_at=None,\n)",
              "children": [
                {
                  "value": "APIKeyCredentials",
                  "children": []
                },
                {
                  "value": "(\n    id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n    provider=\"openai\",\n    api_key=SecretStr(\"mock-openai-api-key\"),\n    title=\"Mock OpenAI API key\",\n    expires_at=None,\n)",
                  "children": [
                    {
                      "value": "id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\"",
                      "children": [
                        {
                          "value": "id",
                          "children": []
                        },
                        {
                          "value": "\"ed55ac19-356e-4243-a6cb-bc599e9b716f\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "ed55ac19-356e-4243-a6cb-bc599e9b716f",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "provider=\"openai\"",
                      "children": [
                        {
                          "value": "provider",
                          "children": []
                        },
                        {
                          "value": "\"openai\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "openai",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "api_key=SecretStr(\"mock-openai-api-key\")",
                      "children": [
                        {
                          "value": "api_key",
                          "children": []
                        },
                        {
                          "value": "SecretStr(\"mock-openai-api-key\")",
                          "children": [
                            {
                              "value": "SecretStr",
                              "children": []
                            },
                            {
                              "value": "(\"mock-openai-api-key\")",
                              "children": [
                                {
                                  "value": "\"mock-openai-api-key\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "mock-openai-api-key",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "title=\"Mock OpenAI API key\"",
                      "children": [
                        {
                          "value": "title",
                          "children": []
                        },
                        {
                          "value": "\"Mock OpenAI API key\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Mock OpenAI API key",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expires_at=None",
                      "children": [
                        {
                          "value": "expires_at",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}",
      "children": [
        {
          "value": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}",
          "children": [
            {
              "value": "TEST_CREDENTIALS_INPUT",
              "children": []
            },
            {
              "value": "{\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}",
              "children": [
                {
                  "value": "\"provider\": TEST_CREDENTIALS.provider",
                  "children": [
                    {
                      "value": "\"provider\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "provider",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "TEST_CREDENTIALS.provider",
                      "children": [
                        {
                          "value": "TEST_CREDENTIALS",
                          "children": []
                        },
                        {
                          "value": "provider",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"id\": TEST_CREDENTIALS.id",
                  "children": [
                    {
                      "value": "\"id\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "id",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "TEST_CREDENTIALS.id",
                      "children": [
                        {
                          "value": "TEST_CREDENTIALS",
                          "children": []
                        },
                        {
                          "value": "id",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"type\": TEST_CREDENTIALS.type",
                  "children": [
                    {
                      "value": "\"type\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "type",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "TEST_CREDENTIALS.type",
                      "children": [
                        {
                          "value": "TEST_CREDENTIALS",
                          "children": []
                        },
                        {
                          "value": "type",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"title\": TEST_CREDENTIALS.title",
                  "children": [
                    {
                      "value": "\"title\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "title",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "TEST_CREDENTIALS.title",
                      "children": [
                        {
                          "value": "TEST_CREDENTIALS",
                          "children": []
                        },
                        {
                          "value": "title",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def AICredentialsField() -> AICredentials:\n    return CredentialsField(\n        description=\"API key for the LLM provider.\",\n        discriminator=\"model\",\n        discriminator_mapping={\n            model.value: model.metadata.provider for model in LlmModel\n        },\n    )",
      "children": [
        {
          "value": "AICredentialsField",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "AICredentials",
          "children": [
            {
              "value": "AICredentials",
              "children": []
            }
          ]
        },
        {
          "value": "return CredentialsField(\n        description=\"API key for the LLM provider.\",\n        discriminator=\"model\",\n        discriminator_mapping={\n            model.value: model.metadata.provider for model in LlmModel\n        },\n    )",
          "children": [
            {
              "value": "return CredentialsField(\n        description=\"API key for the LLM provider.\",\n        discriminator=\"model\",\n        discriminator_mapping={\n            model.value: model.metadata.provider for model in LlmModel\n        },\n    )",
              "children": [
                {
                  "value": "CredentialsField(\n        description=\"API key for the LLM provider.\",\n        discriminator=\"model\",\n        discriminator_mapping={\n            model.value: model.metadata.provider for model in LlmModel\n        },\n    )",
                  "children": [
                    {
                      "value": "CredentialsField",
                      "children": []
                    },
                    {
                      "value": "(\n        description=\"API key for the LLM provider.\",\n        discriminator=\"model\",\n        discriminator_mapping={\n            model.value: model.metadata.provider for model in LlmModel\n        },\n    )",
                      "children": [
                        {
                          "value": "description=\"API key for the LLM provider.\"",
                          "children": [
                            {
                              "value": "description",
                              "children": []
                            },
                            {
                              "value": "\"API key for the LLM provider.\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "API key for the LLM provider.",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "discriminator=\"model\"",
                          "children": [
                            {
                              "value": "discriminator",
                              "children": []
                            },
                            {
                              "value": "\"model\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "model",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "discriminator_mapping={\n            model.value: model.metadata.provider for model in LlmModel\n        }",
                          "children": [
                            {
                              "value": "discriminator_mapping",
                              "children": []
                            },
                            {
                              "value": "{\n            model.value: model.metadata.provider for model in LlmModel\n        }",
                              "children": [
                                {
                                  "value": "model.value: model.metadata.provider",
                                  "children": [
                                    {
                                      "value": "model.value",
                                      "children": [
                                        {
                                          "value": "model",
                                          "children": []
                                        },
                                        {
                                          "value": "value",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "model.metadata.provider",
                                      "children": [
                                        {
                                          "value": "model.metadata",
                                          "children": [
                                            {
                                              "value": "model",
                                              "children": []
                                            },
                                            {
                                              "value": "metadata",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "provider",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for model in LlmModel",
                                  "children": [
                                    {
                                      "value": "model",
                                      "children": []
                                    },
                                    {
                                      "value": "LlmModel",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class ModelMetadata(NamedTuple):\n    provider: str\n    context_window: int",
      "children": [
        {
          "value": "ModelMetadata",
          "children": []
        },
        {
          "value": "(NamedTuple)",
          "children": [
            {
              "value": "NamedTuple",
              "children": []
            }
          ]
        },
        {
          "value": "provider: str\n    context_window: int",
          "children": [
            {
              "value": "provider: str",
              "children": [
                {
                  "value": "provider: str",
                  "children": [
                    {
                      "value": "provider",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "context_window: int",
              "children": [
                {
                  "value": "context_window: int",
                  "children": [
                    {
                      "value": "context_window",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class LlmModelMeta(EnumMeta):\n    @property\n    def __members__(\n        self: type[\"_EnumMemberT\"],\n    ) -> MappingProxyType[str, \"_EnumMemberT\"]:\n        if Settings().config.behave_as == BehaveAs.LOCAL:\n            members = super().__members__\n            return members\n        else:\n            removed_providers = [\"ollama\"]\n            existing_members = super().__members__\n            members = {\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }\n            return MappingProxyType(members)",
      "children": [
        {
          "value": "LlmModelMeta",
          "children": []
        },
        {
          "value": "(EnumMeta)",
          "children": [
            {
              "value": "EnumMeta",
              "children": []
            }
          ]
        },
        {
          "value": "@property\n    def __members__(\n        self: type[\"_EnumMemberT\"],\n    ) -> MappingProxyType[str, \"_EnumMemberT\"]:\n        if Settings().config.behave_as == BehaveAs.LOCAL:\n            members = super().__members__\n            return members\n        else:\n            removed_providers = [\"ollama\"]\n            existing_members = super().__members__\n            members = {\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }\n            return MappingProxyType(members)",
          "children": [
            {
              "value": "@property\n    def __members__(\n        self: type[\"_EnumMemberT\"],\n    ) -> MappingProxyType[str, \"_EnumMemberT\"]:\n        if Settings().config.behave_as == BehaveAs.LOCAL:\n            members = super().__members__\n            return members\n        else:\n            removed_providers = [\"ollama\"]\n            existing_members = super().__members__\n            members = {\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }\n            return MappingProxyType(members)",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def __members__(\n        self: type[\"_EnumMemberT\"],\n    ) -> MappingProxyType[str, \"_EnumMemberT\"]:\n        if Settings().config.behave_as == BehaveAs.LOCAL:\n            members = super().__members__\n            return members\n        else:\n            removed_providers = [\"ollama\"]\n            existing_members = super().__members__\n            members = {\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }\n            return MappingProxyType(members)",
                  "children": [
                    {
                      "value": "__members__",
                      "children": []
                    },
                    {
                      "value": "(\n        self: type[\"_EnumMemberT\"],\n    )",
                      "children": [
                        {
                          "value": "self: type[\"_EnumMemberT\"]",
                          "children": [
                            {
                              "value": "self",
                              "children": []
                            },
                            {
                              "value": "type[\"_EnumMemberT\"]",
                              "children": [
                                {
                                  "value": "type[\"_EnumMemberT\"]",
                                  "children": [
                                    {
                                      "value": "type",
                                      "children": []
                                    },
                                    {
                                      "value": "[\"_EnumMemberT\"]",
                                      "children": [
                                        {
                                          "value": "\"_EnumMemberT\"",
                                          "children": [
                                            {
                                              "value": "\"_EnumMemberT\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_EnumMemberT",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "MappingProxyType[str, \"_EnumMemberT\"]",
                      "children": [
                        {
                          "value": "MappingProxyType[str, \"_EnumMemberT\"]",
                          "children": [
                            {
                              "value": "MappingProxyType",
                              "children": []
                            },
                            {
                              "value": "[str, \"_EnumMemberT\"]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"_EnumMemberT\"",
                                  "children": [
                                    {
                                      "value": "\"_EnumMemberT\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "_EnumMemberT",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if Settings().config.behave_as == BehaveAs.LOCAL:\n            members = super().__members__\n            return members\n        else:\n            removed_providers = [\"ollama\"]\n            existing_members = super().__members__\n            members = {\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }\n            return MappingProxyType(members)",
                      "children": [
                        {
                          "value": "if Settings().config.behave_as == BehaveAs.LOCAL:\n            members = super().__members__\n            return members\n        else:\n            removed_providers = [\"ollama\"]\n            existing_members = super().__members__\n            members = {\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }\n            return MappingProxyType(members)",
                          "children": [
                            {
                              "value": "Settings().config.behave_as == BehaveAs.LOCAL",
                              "children": [
                                {
                                  "value": "Settings().config.behave_as",
                                  "children": [
                                    {
                                      "value": "Settings().config",
                                      "children": [
                                        {
                                          "value": "Settings()",
                                          "children": [
                                            {
                                              "value": "Settings",
                                              "children": []
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "config",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "behave_as",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "BehaveAs.LOCAL",
                                  "children": [
                                    {
                                      "value": "BehaveAs",
                                      "children": []
                                    },
                                    {
                                      "value": "LOCAL",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "members = super().__members__\n            return members",
                              "children": [
                                {
                                  "value": "members = super().__members__",
                                  "children": [
                                    {
                                      "value": "members = super().__members__",
                                      "children": [
                                        {
                                          "value": "members",
                                          "children": []
                                        },
                                        {
                                          "value": "super().__members__",
                                          "children": [
                                            {
                                              "value": "super()",
                                              "children": [
                                                {
                                                  "value": "super",
                                                  "children": []
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "__members__",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return members",
                                  "children": [
                                    {
                                      "value": "members",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "else:\n            removed_providers = [\"ollama\"]\n            existing_members = super().__members__\n            members = {\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }\n            return MappingProxyType(members)",
                              "children": [
                                {
                                  "value": "removed_providers = [\"ollama\"]\n            existing_members = super().__members__\n            members = {\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }\n            return MappingProxyType(members)",
                                  "children": [
                                    {
                                      "value": "removed_providers = [\"ollama\"]",
                                      "children": [
                                        {
                                          "value": "removed_providers = [\"ollama\"]",
                                          "children": [
                                            {
                                              "value": "removed_providers",
                                              "children": []
                                            },
                                            {
                                              "value": "[\"ollama\"]",
                                              "children": [
                                                {
                                                  "value": "\"ollama\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ollama",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "existing_members = super().__members__",
                                      "children": [
                                        {
                                          "value": "existing_members = super().__members__",
                                          "children": [
                                            {
                                              "value": "existing_members",
                                              "children": []
                                            },
                                            {
                                              "value": "super().__members__",
                                              "children": [
                                                {
                                                  "value": "super()",
                                                  "children": [
                                                    {
                                                      "value": "super",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "__members__",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "members = {\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }",
                                      "children": [
                                        {
                                          "value": "members = {\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }",
                                          "children": [
                                            {
                                              "value": "members",
                                              "children": []
                                            },
                                            {
                                              "value": "{\n                name: member\n                for name, member in existing_members.items()\n                if LlmModel[name].provider not in removed_providers\n            }",
                                              "children": [
                                                {
                                                  "value": "name: member",
                                                  "children": [
                                                    {
                                                      "value": "name",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "member",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "for name, member in existing_members.items()",
                                                  "children": [
                                                    {
                                                      "value": "name, member",
                                                      "children": [
                                                        {
                                                          "value": "name",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "member",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "existing_members.items()",
                                                      "children": [
                                                        {
                                                          "value": "existing_members.items",
                                                          "children": [
                                                            {
                                                              "value": "existing_members",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "items",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "()",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "if LlmModel[name].provider not in removed_providers",
                                                  "children": [
                                                    {
                                                      "value": "LlmModel[name].provider not in removed_providers",
                                                      "children": [
                                                        {
                                                          "value": "LlmModel[name].provider",
                                                          "children": [
                                                            {
                                                              "value": "LlmModel[name]",
                                                              "children": [
                                                                {
                                                                  "value": "LlmModel",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "name",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "provider",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "removed_providers",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "return MappingProxyType(members)",
                                      "children": [
                                        {
                                          "value": "MappingProxyType(members)",
                                          "children": [
                                            {
                                              "value": "MappingProxyType",
                                              "children": []
                                            },
                                            {
                                              "value": "(members)",
                                              "children": [
                                                {
                                                  "value": "members",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class LlmModel(str, Enum, metaclass=LlmModelMeta):\n    # OpenAI models\n    O1_PREVIEW = \"o1-preview\"\n    O1_MINI = \"o1-mini\"\n    GPT4O_MINI = \"gpt-4o-mini\"\n    GPT4O = \"gpt-4o\"\n    GPT4_TURBO = \"gpt-4-turbo\"\n    GPT3_5_TURBO = \"gpt-3.5-turbo\"\n    # Anthropic models\n    CLAUDE_3_5_SONNET = \"claude-3-5-sonnet-latest\"\n    CLAUDE_3_HAIKU = \"claude-3-haiku-20240307\"\n    # Groq models\n    LLAMA3_8B = \"llama3-8b-8192\"\n    LLAMA3_70B = \"llama3-70b-8192\"\n    MIXTRAL_8X7B = \"mixtral-8x7b-32768\"\n    GEMMA_7B = \"gemma-7b-it\"\n    GEMMA2_9B = \"gemma2-9b-it\"\n    # New Groq models (Preview)\n    LLAMA3_1_405B = \"llama-3.1-405b-reasoning\"\n    LLAMA3_1_70B = \"llama-3.1-70b-versatile\"\n    LLAMA3_1_8B = \"llama-3.1-8b-instant\"\n    # Ollama models\n    OLLAMA_LLAMA3_8B = \"llama3\"\n    OLLAMA_LLAMA3_405B = \"llama3.1:405b\"\n    OLLAMA_DOLPHIN = \"dolphin-mistral:latest\"\n    # OpenRouter models\n    GEMINI_FLASH_1_5_8B = \"google/gemini-flash-1.5\"\n    GROK_BETA = \"x-ai/grok-beta\"\n    MISTRAL_NEMO = \"mistralai/mistral-nemo\"\n    COHERE_COMMAND_R_08_2024 = \"cohere/command-r-08-2024\"\n    COHERE_COMMAND_R_PLUS_08_2024 = \"cohere/command-r-plus-08-2024\"\n    EVA_QWEN_2_5_32B = \"eva-unit-01/eva-qwen-2.5-32b\"\n    DEEPSEEK_CHAT = \"deepseek/deepseek-chat\"\n    PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE = (\n        \"perplexity/llama-3.1-sonar-large-128k-online\"\n    )\n    QWEN_QWQ_32B_PREVIEW = \"qwen/qwq-32b-preview\"\n    NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B = \"nousresearch/hermes-3-llama-3.1-405b\"\n    NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B = \"nousresearch/hermes-3-llama-3.1-70b\"\n    AMAZON_NOVA_LITE_V1 = \"amazon/nova-lite-v1\"\n    AMAZON_NOVA_MICRO_V1 = \"amazon/nova-micro-v1\"\n    AMAZON_NOVA_PRO_V1 = \"amazon/nova-pro-v1\"\n    MICROSOFT_WIZARDLM_2_8X22B = \"microsoft/wizardlm-2-8x22b\"\n    GRYPHE_MYTHOMAX_L2_13B = \"gryphe/mythomax-l2-13b\"\n\n    @property\n    def metadata(self) -> ModelMetadata:\n        return MODEL_METADATA[self]\n\n    @property\n    def provider(self) -> str:\n        return self.metadata.provider\n\n    @property\n    def context_window(self) -> int:\n        return self.metadata.context_window",
      "children": [
        {
          "value": "LlmModel",
          "children": []
        },
        {
          "value": "(str, Enum, metaclass=LlmModelMeta)",
          "children": [
            {
              "value": "str",
              "children": []
            },
            {
              "value": "Enum",
              "children": []
            },
            {
              "value": "metaclass=LlmModelMeta",
              "children": [
                {
                  "value": "metaclass",
                  "children": []
                },
                {
                  "value": "LlmModelMeta",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "# OpenAI models",
          "children": []
        },
        {
          "value": "O1_PREVIEW = \"o1-preview\"\n    O1_MINI = \"o1-mini\"\n    GPT4O_MINI = \"gpt-4o-mini\"\n    GPT4O = \"gpt-4o\"\n    GPT4_TURBO = \"gpt-4-turbo\"\n    GPT3_5_TURBO = \"gpt-3.5-turbo\"\n    # Anthropic models\n    CLAUDE_3_5_SONNET = \"claude-3-5-sonnet-latest\"\n    CLAUDE_3_HAIKU = \"claude-3-haiku-20240307\"\n    # Groq models\n    LLAMA3_8B = \"llama3-8b-8192\"\n    LLAMA3_70B = \"llama3-70b-8192\"\n    MIXTRAL_8X7B = \"mixtral-8x7b-32768\"\n    GEMMA_7B = \"gemma-7b-it\"\n    GEMMA2_9B = \"gemma2-9b-it\"\n    # New Groq models (Preview)\n    LLAMA3_1_405B = \"llama-3.1-405b-reasoning\"\n    LLAMA3_1_70B = \"llama-3.1-70b-versatile\"\n    LLAMA3_1_8B = \"llama-3.1-8b-instant\"\n    # Ollama models\n    OLLAMA_LLAMA3_8B = \"llama3\"\n    OLLAMA_LLAMA3_405B = \"llama3.1:405b\"\n    OLLAMA_DOLPHIN = \"dolphin-mistral:latest\"\n    # OpenRouter models\n    GEMINI_FLASH_1_5_8B = \"google/gemini-flash-1.5\"\n    GROK_BETA = \"x-ai/grok-beta\"\n    MISTRAL_NEMO = \"mistralai/mistral-nemo\"\n    COHERE_COMMAND_R_08_2024 = \"cohere/command-r-08-2024\"\n    COHERE_COMMAND_R_PLUS_08_2024 = \"cohere/command-r-plus-08-2024\"\n    EVA_QWEN_2_5_32B = \"eva-unit-01/eva-qwen-2.5-32b\"\n    DEEPSEEK_CHAT = \"deepseek/deepseek-chat\"\n    PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE = (\n        \"perplexity/llama-3.1-sonar-large-128k-online\"\n    )\n    QWEN_QWQ_32B_PREVIEW = \"qwen/qwq-32b-preview\"\n    NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B = \"nousresearch/hermes-3-llama-3.1-405b\"\n    NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B = \"nousresearch/hermes-3-llama-3.1-70b\"\n    AMAZON_NOVA_LITE_V1 = \"amazon/nova-lite-v1\"\n    AMAZON_NOVA_MICRO_V1 = \"amazon/nova-micro-v1\"\n    AMAZON_NOVA_PRO_V1 = \"amazon/nova-pro-v1\"\n    MICROSOFT_WIZARDLM_2_8X22B = \"microsoft/wizardlm-2-8x22b\"\n    GRYPHE_MYTHOMAX_L2_13B = \"gryphe/mythomax-l2-13b\"\n\n    @property\n    def metadata(self) -> ModelMetadata:\n        return MODEL_METADATA[self]\n\n    @property\n    def provider(self) -> str:\n        return self.metadata.provider\n\n    @property\n    def context_window(self) -> int:\n        return self.metadata.context_window",
          "children": [
            {
              "value": "O1_PREVIEW = \"o1-preview\"",
              "children": [
                {
                  "value": "O1_PREVIEW = \"o1-preview\"",
                  "children": [
                    {
                      "value": "O1_PREVIEW",
                      "children": []
                    },
                    {
                      "value": "\"o1-preview\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "o1-preview",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "O1_MINI = \"o1-mini\"",
              "children": [
                {
                  "value": "O1_MINI = \"o1-mini\"",
                  "children": [
                    {
                      "value": "O1_MINI",
                      "children": []
                    },
                    {
                      "value": "\"o1-mini\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "o1-mini",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "GPT4O_MINI = \"gpt-4o-mini\"",
              "children": [
                {
                  "value": "GPT4O_MINI = \"gpt-4o-mini\"",
                  "children": [
                    {
                      "value": "GPT4O_MINI",
                      "children": []
                    },
                    {
                      "value": "\"gpt-4o-mini\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "gpt-4o-mini",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "GPT4O = \"gpt-4o\"",
              "children": [
                {
                  "value": "GPT4O = \"gpt-4o\"",
                  "children": [
                    {
                      "value": "GPT4O",
                      "children": []
                    },
                    {
                      "value": "\"gpt-4o\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "gpt-4o",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "GPT4_TURBO = \"gpt-4-turbo\"",
              "children": [
                {
                  "value": "GPT4_TURBO = \"gpt-4-turbo\"",
                  "children": [
                    {
                      "value": "GPT4_TURBO",
                      "children": []
                    },
                    {
                      "value": "\"gpt-4-turbo\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "gpt-4-turbo",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "GPT3_5_TURBO = \"gpt-3.5-turbo\"",
              "children": [
                {
                  "value": "GPT3_5_TURBO = \"gpt-3.5-turbo\"",
                  "children": [
                    {
                      "value": "GPT3_5_TURBO",
                      "children": []
                    },
                    {
                      "value": "\"gpt-3.5-turbo\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "gpt-3.5-turbo",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Anthropic models",
              "children": []
            },
            {
              "value": "CLAUDE_3_5_SONNET = \"claude-3-5-sonnet-latest\"",
              "children": [
                {
                  "value": "CLAUDE_3_5_SONNET = \"claude-3-5-sonnet-latest\"",
                  "children": [
                    {
                      "value": "CLAUDE_3_5_SONNET",
                      "children": []
                    },
                    {
                      "value": "\"claude-3-5-sonnet-latest\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "claude-3-5-sonnet-latest",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "CLAUDE_3_HAIKU = \"claude-3-haiku-20240307\"",
              "children": [
                {
                  "value": "CLAUDE_3_HAIKU = \"claude-3-haiku-20240307\"",
                  "children": [
                    {
                      "value": "CLAUDE_3_HAIKU",
                      "children": []
                    },
                    {
                      "value": "\"claude-3-haiku-20240307\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "claude-3-haiku-20240307",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Groq models",
              "children": []
            },
            {
              "value": "LLAMA3_8B = \"llama3-8b-8192\"",
              "children": [
                {
                  "value": "LLAMA3_8B = \"llama3-8b-8192\"",
                  "children": [
                    {
                      "value": "LLAMA3_8B",
                      "children": []
                    },
                    {
                      "value": "\"llama3-8b-8192\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "llama3-8b-8192",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "LLAMA3_70B = \"llama3-70b-8192\"",
              "children": [
                {
                  "value": "LLAMA3_70B = \"llama3-70b-8192\"",
                  "children": [
                    {
                      "value": "LLAMA3_70B",
                      "children": []
                    },
                    {
                      "value": "\"llama3-70b-8192\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "llama3-70b-8192",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "MIXTRAL_8X7B = \"mixtral-8x7b-32768\"",
              "children": [
                {
                  "value": "MIXTRAL_8X7B = \"mixtral-8x7b-32768\"",
                  "children": [
                    {
                      "value": "MIXTRAL_8X7B",
                      "children": []
                    },
                    {
                      "value": "\"mixtral-8x7b-32768\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "mixtral-8x7b-32768",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "GEMMA_7B = \"gemma-7b-it\"",
              "children": [
                {
                  "value": "GEMMA_7B = \"gemma-7b-it\"",
                  "children": [
                    {
                      "value": "GEMMA_7B",
                      "children": []
                    },
                    {
                      "value": "\"gemma-7b-it\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "gemma-7b-it",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "GEMMA2_9B = \"gemma2-9b-it\"",
              "children": [
                {
                  "value": "GEMMA2_9B = \"gemma2-9b-it\"",
                  "children": [
                    {
                      "value": "GEMMA2_9B",
                      "children": []
                    },
                    {
                      "value": "\"gemma2-9b-it\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "gemma2-9b-it",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# New Groq models (Preview)",
              "children": []
            },
            {
              "value": "LLAMA3_1_405B = \"llama-3.1-405b-reasoning\"",
              "children": [
                {
                  "value": "LLAMA3_1_405B = \"llama-3.1-405b-reasoning\"",
                  "children": [
                    {
                      "value": "LLAMA3_1_405B",
                      "children": []
                    },
                    {
                      "value": "\"llama-3.1-405b-reasoning\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "llama-3.1-405b-reasoning",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "LLAMA3_1_70B = \"llama-3.1-70b-versatile\"",
              "children": [
                {
                  "value": "LLAMA3_1_70B = \"llama-3.1-70b-versatile\"",
                  "children": [
                    {
                      "value": "LLAMA3_1_70B",
                      "children": []
                    },
                    {
                      "value": "\"llama-3.1-70b-versatile\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "llama-3.1-70b-versatile",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "LLAMA3_1_8B = \"llama-3.1-8b-instant\"",
              "children": [
                {
                  "value": "LLAMA3_1_8B = \"llama-3.1-8b-instant\"",
                  "children": [
                    {
                      "value": "LLAMA3_1_8B",
                      "children": []
                    },
                    {
                      "value": "\"llama-3.1-8b-instant\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "llama-3.1-8b-instant",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Ollama models",
              "children": []
            },
            {
              "value": "OLLAMA_LLAMA3_8B = \"llama3\"",
              "children": [
                {
                  "value": "OLLAMA_LLAMA3_8B = \"llama3\"",
                  "children": [
                    {
                      "value": "OLLAMA_LLAMA3_8B",
                      "children": []
                    },
                    {
                      "value": "\"llama3\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "llama3",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "OLLAMA_LLAMA3_405B = \"llama3.1:405b\"",
              "children": [
                {
                  "value": "OLLAMA_LLAMA3_405B = \"llama3.1:405b\"",
                  "children": [
                    {
                      "value": "OLLAMA_LLAMA3_405B",
                      "children": []
                    },
                    {
                      "value": "\"llama3.1:405b\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "llama3.1:405b",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "OLLAMA_DOLPHIN = \"dolphin-mistral:latest\"",
              "children": [
                {
                  "value": "OLLAMA_DOLPHIN = \"dolphin-mistral:latest\"",
                  "children": [
                    {
                      "value": "OLLAMA_DOLPHIN",
                      "children": []
                    },
                    {
                      "value": "\"dolphin-mistral:latest\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "dolphin-mistral:latest",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# OpenRouter models",
              "children": []
            },
            {
              "value": "GEMINI_FLASH_1_5_8B = \"google/gemini-flash-1.5\"",
              "children": [
                {
                  "value": "GEMINI_FLASH_1_5_8B = \"google/gemini-flash-1.5\"",
                  "children": [
                    {
                      "value": "GEMINI_FLASH_1_5_8B",
                      "children": []
                    },
                    {
                      "value": "\"google/gemini-flash-1.5\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "google/gemini-flash-1.5",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "GROK_BETA = \"x-ai/grok-beta\"",
              "children": [
                {
                  "value": "GROK_BETA = \"x-ai/grok-beta\"",
                  "children": [
                    {
                      "value": "GROK_BETA",
                      "children": []
                    },
                    {
                      "value": "\"x-ai/grok-beta\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "x-ai/grok-beta",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "MISTRAL_NEMO = \"mistralai/mistral-nemo\"",
              "children": [
                {
                  "value": "MISTRAL_NEMO = \"mistralai/mistral-nemo\"",
                  "children": [
                    {
                      "value": "MISTRAL_NEMO",
                      "children": []
                    },
                    {
                      "value": "\"mistralai/mistral-nemo\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "mistralai/mistral-nemo",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "COHERE_COMMAND_R_08_2024 = \"cohere/command-r-08-2024\"",
              "children": [
                {
                  "value": "COHERE_COMMAND_R_08_2024 = \"cohere/command-r-08-2024\"",
                  "children": [
                    {
                      "value": "COHERE_COMMAND_R_08_2024",
                      "children": []
                    },
                    {
                      "value": "\"cohere/command-r-08-2024\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "cohere/command-r-08-2024",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "COHERE_COMMAND_R_PLUS_08_2024 = \"cohere/command-r-plus-08-2024\"",
              "children": [
                {
                  "value": "COHERE_COMMAND_R_PLUS_08_2024 = \"cohere/command-r-plus-08-2024\"",
                  "children": [
                    {
                      "value": "COHERE_COMMAND_R_PLUS_08_2024",
                      "children": []
                    },
                    {
                      "value": "\"cohere/command-r-plus-08-2024\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "cohere/command-r-plus-08-2024",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "EVA_QWEN_2_5_32B = \"eva-unit-01/eva-qwen-2.5-32b\"",
              "children": [
                {
                  "value": "EVA_QWEN_2_5_32B = \"eva-unit-01/eva-qwen-2.5-32b\"",
                  "children": [
                    {
                      "value": "EVA_QWEN_2_5_32B",
                      "children": []
                    },
                    {
                      "value": "\"eva-unit-01/eva-qwen-2.5-32b\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "eva-unit-01/eva-qwen-2.5-32b",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "DEEPSEEK_CHAT = \"deepseek/deepseek-chat\"",
              "children": [
                {
                  "value": "DEEPSEEK_CHAT = \"deepseek/deepseek-chat\"",
                  "children": [
                    {
                      "value": "DEEPSEEK_CHAT",
                      "children": []
                    },
                    {
                      "value": "\"deepseek/deepseek-chat\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "deepseek/deepseek-chat",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE = (\n        \"perplexity/llama-3.1-sonar-large-128k-online\"\n    )",
              "children": [
                {
                  "value": "PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE = (\n        \"perplexity/llama-3.1-sonar-large-128k-online\"\n    )",
                  "children": [
                    {
                      "value": "PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE",
                      "children": []
                    },
                    {
                      "value": "(\n        \"perplexity/llama-3.1-sonar-large-128k-online\"\n    )",
                      "children": [
                        {
                          "value": "\"perplexity/llama-3.1-sonar-large-128k-online\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "perplexity/llama-3.1-sonar-large-128k-online",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "QWEN_QWQ_32B_PREVIEW = \"qwen/qwq-32b-preview\"",
              "children": [
                {
                  "value": "QWEN_QWQ_32B_PREVIEW = \"qwen/qwq-32b-preview\"",
                  "children": [
                    {
                      "value": "QWEN_QWQ_32B_PREVIEW",
                      "children": []
                    },
                    {
                      "value": "\"qwen/qwq-32b-preview\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "qwen/qwq-32b-preview",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B = \"nousresearch/hermes-3-llama-3.1-405b\"",
              "children": [
                {
                  "value": "NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B = \"nousresearch/hermes-3-llama-3.1-405b\"",
                  "children": [
                    {
                      "value": "NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B",
                      "children": []
                    },
                    {
                      "value": "\"nousresearch/hermes-3-llama-3.1-405b\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "nousresearch/hermes-3-llama-3.1-405b",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B = \"nousresearch/hermes-3-llama-3.1-70b\"",
              "children": [
                {
                  "value": "NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B = \"nousresearch/hermes-3-llama-3.1-70b\"",
                  "children": [
                    {
                      "value": "NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B",
                      "children": []
                    },
                    {
                      "value": "\"nousresearch/hermes-3-llama-3.1-70b\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "nousresearch/hermes-3-llama-3.1-70b",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "AMAZON_NOVA_LITE_V1 = \"amazon/nova-lite-v1\"",
              "children": [
                {
                  "value": "AMAZON_NOVA_LITE_V1 = \"amazon/nova-lite-v1\"",
                  "children": [
                    {
                      "value": "AMAZON_NOVA_LITE_V1",
                      "children": []
                    },
                    {
                      "value": "\"amazon/nova-lite-v1\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "amazon/nova-lite-v1",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "AMAZON_NOVA_MICRO_V1 = \"amazon/nova-micro-v1\"",
              "children": [
                {
                  "value": "AMAZON_NOVA_MICRO_V1 = \"amazon/nova-micro-v1\"",
                  "children": [
                    {
                      "value": "AMAZON_NOVA_MICRO_V1",
                      "children": []
                    },
                    {
                      "value": "\"amazon/nova-micro-v1\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "amazon/nova-micro-v1",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "AMAZON_NOVA_PRO_V1 = \"amazon/nova-pro-v1\"",
              "children": [
                {
                  "value": "AMAZON_NOVA_PRO_V1 = \"amazon/nova-pro-v1\"",
                  "children": [
                    {
                      "value": "AMAZON_NOVA_PRO_V1",
                      "children": []
                    },
                    {
                      "value": "\"amazon/nova-pro-v1\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "amazon/nova-pro-v1",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "MICROSOFT_WIZARDLM_2_8X22B = \"microsoft/wizardlm-2-8x22b\"",
              "children": [
                {
                  "value": "MICROSOFT_WIZARDLM_2_8X22B = \"microsoft/wizardlm-2-8x22b\"",
                  "children": [
                    {
                      "value": "MICROSOFT_WIZARDLM_2_8X22B",
                      "children": []
                    },
                    {
                      "value": "\"microsoft/wizardlm-2-8x22b\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "microsoft/wizardlm-2-8x22b",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "GRYPHE_MYTHOMAX_L2_13B = \"gryphe/mythomax-l2-13b\"",
              "children": [
                {
                  "value": "GRYPHE_MYTHOMAX_L2_13B = \"gryphe/mythomax-l2-13b\"",
                  "children": [
                    {
                      "value": "GRYPHE_MYTHOMAX_L2_13B",
                      "children": []
                    },
                    {
                      "value": "\"gryphe/mythomax-l2-13b\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "gryphe/mythomax-l2-13b",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@property\n    def metadata(self) -> ModelMetadata:\n        return MODEL_METADATA[self]",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def metadata(self) -> ModelMetadata:\n        return MODEL_METADATA[self]",
                  "children": [
                    {
                      "value": "metadata",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return MODEL_METADATA[self]",
                      "children": [
                        {
                          "value": "return MODEL_METADATA[self]",
                          "children": [
                            {
                              "value": "MODEL_METADATA[self]",
                              "children": [
                                {
                                  "value": "MODEL_METADATA",
                                  "children": []
                                },
                                {
                                  "value": "self",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@property\n    def provider(self) -> str:\n        return self.metadata.provider",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def provider(self) -> str:\n        return self.metadata.provider",
                  "children": [
                    {
                      "value": "provider",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return self.metadata.provider",
                      "children": [
                        {
                          "value": "return self.metadata.provider",
                          "children": [
                            {
                              "value": "self.metadata.provider",
                              "children": [
                                {
                                  "value": "self.metadata",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "metadata",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "provider",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@property\n    def context_window(self) -> int:\n        return self.metadata.context_window",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def context_window(self) -> int:\n        return self.metadata.context_window",
                  "children": [
                    {
                      "value": "context_window",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return self.metadata.context_window",
                      "children": [
                        {
                          "value": "return self.metadata.context_window",
                          "children": [
                            {
                              "value": "self.metadata.context_window",
                              "children": [
                                {
                                  "value": "self.metadata",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "metadata",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "context_window",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "MODEL_METADATA = {\n    LlmModel.O1_PREVIEW: ModelMetadata(\"openai\", 32000),\n    LlmModel.O1_MINI: ModelMetadata(\"openai\", 62000),\n    LlmModel.GPT4O_MINI: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT4O: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT4_TURBO: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT3_5_TURBO: ModelMetadata(\"openai\", 16385),\n    LlmModel.CLAUDE_3_5_SONNET: ModelMetadata(\"anthropic\", 200000),\n    LlmModel.CLAUDE_3_HAIKU: ModelMetadata(\"anthropic\", 200000),\n    LlmModel.LLAMA3_8B: ModelMetadata(\"groq\", 8192),\n    LlmModel.LLAMA3_70B: ModelMetadata(\"groq\", 8192),\n    LlmModel.MIXTRAL_8X7B: ModelMetadata(\"groq\", 32768),\n    LlmModel.GEMMA_7B: ModelMetadata(\"groq\", 8192),\n    LlmModel.GEMMA2_9B: ModelMetadata(\"groq\", 8192),\n    LlmModel.LLAMA3_1_405B: ModelMetadata(\"groq\", 8192),\n    # Limited to 16k during preview\n    LlmModel.LLAMA3_1_70B: ModelMetadata(\"groq\", 131072),\n    LlmModel.LLAMA3_1_8B: ModelMetadata(\"groq\", 131072),\n    LlmModel.OLLAMA_LLAMA3_8B: ModelMetadata(\"ollama\", 8192),\n    LlmModel.OLLAMA_LLAMA3_405B: ModelMetadata(\"ollama\", 8192),\n    LlmModel.OLLAMA_DOLPHIN: ModelMetadata(\"ollama\", 32768),\n    LlmModel.GEMINI_FLASH_1_5_8B: ModelMetadata(\"open_router\", 8192),\n    LlmModel.GROK_BETA: ModelMetadata(\"open_router\", 8192),\n    LlmModel.MISTRAL_NEMO: ModelMetadata(\"open_router\", 4000),\n    LlmModel.COHERE_COMMAND_R_08_2024: ModelMetadata(\"open_router\", 4000),\n    LlmModel.COHERE_COMMAND_R_PLUS_08_2024: ModelMetadata(\"open_router\", 4000),\n    LlmModel.EVA_QWEN_2_5_32B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.DEEPSEEK_CHAT: ModelMetadata(\"open_router\", 8192),\n    LlmModel.PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE: ModelMetadata(\n        \"open_router\", 8192\n    ),\n    LlmModel.QWEN_QWQ_32B_PREVIEW: ModelMetadata(\"open_router\", 4000),\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_LITE_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_MICRO_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_PRO_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.MICROSOFT_WIZARDLM_2_8X22B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.GRYPHE_MYTHOMAX_L2_13B: ModelMetadata(\"open_router\", 4000),\n}",
      "children": [
        {
          "value": "MODEL_METADATA = {\n    LlmModel.O1_PREVIEW: ModelMetadata(\"openai\", 32000),\n    LlmModel.O1_MINI: ModelMetadata(\"openai\", 62000),\n    LlmModel.GPT4O_MINI: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT4O: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT4_TURBO: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT3_5_TURBO: ModelMetadata(\"openai\", 16385),\n    LlmModel.CLAUDE_3_5_SONNET: ModelMetadata(\"anthropic\", 200000),\n    LlmModel.CLAUDE_3_HAIKU: ModelMetadata(\"anthropic\", 200000),\n    LlmModel.LLAMA3_8B: ModelMetadata(\"groq\", 8192),\n    LlmModel.LLAMA3_70B: ModelMetadata(\"groq\", 8192),\n    LlmModel.MIXTRAL_8X7B: ModelMetadata(\"groq\", 32768),\n    LlmModel.GEMMA_7B: ModelMetadata(\"groq\", 8192),\n    LlmModel.GEMMA2_9B: ModelMetadata(\"groq\", 8192),\n    LlmModel.LLAMA3_1_405B: ModelMetadata(\"groq\", 8192),\n    # Limited to 16k during preview\n    LlmModel.LLAMA3_1_70B: ModelMetadata(\"groq\", 131072),\n    LlmModel.LLAMA3_1_8B: ModelMetadata(\"groq\", 131072),\n    LlmModel.OLLAMA_LLAMA3_8B: ModelMetadata(\"ollama\", 8192),\n    LlmModel.OLLAMA_LLAMA3_405B: ModelMetadata(\"ollama\", 8192),\n    LlmModel.OLLAMA_DOLPHIN: ModelMetadata(\"ollama\", 32768),\n    LlmModel.GEMINI_FLASH_1_5_8B: ModelMetadata(\"open_router\", 8192),\n    LlmModel.GROK_BETA: ModelMetadata(\"open_router\", 8192),\n    LlmModel.MISTRAL_NEMO: ModelMetadata(\"open_router\", 4000),\n    LlmModel.COHERE_COMMAND_R_08_2024: ModelMetadata(\"open_router\", 4000),\n    LlmModel.COHERE_COMMAND_R_PLUS_08_2024: ModelMetadata(\"open_router\", 4000),\n    LlmModel.EVA_QWEN_2_5_32B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.DEEPSEEK_CHAT: ModelMetadata(\"open_router\", 8192),\n    LlmModel.PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE: ModelMetadata(\n        \"open_router\", 8192\n    ),\n    LlmModel.QWEN_QWQ_32B_PREVIEW: ModelMetadata(\"open_router\", 4000),\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_LITE_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_MICRO_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_PRO_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.MICROSOFT_WIZARDLM_2_8X22B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.GRYPHE_MYTHOMAX_L2_13B: ModelMetadata(\"open_router\", 4000),\n}",
          "children": [
            {
              "value": "MODEL_METADATA",
              "children": []
            },
            {
              "value": "{\n    LlmModel.O1_PREVIEW: ModelMetadata(\"openai\", 32000),\n    LlmModel.O1_MINI: ModelMetadata(\"openai\", 62000),\n    LlmModel.GPT4O_MINI: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT4O: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT4_TURBO: ModelMetadata(\"openai\", 128000),\n    LlmModel.GPT3_5_TURBO: ModelMetadata(\"openai\", 16385),\n    LlmModel.CLAUDE_3_5_SONNET: ModelMetadata(\"anthropic\", 200000),\n    LlmModel.CLAUDE_3_HAIKU: ModelMetadata(\"anthropic\", 200000),\n    LlmModel.LLAMA3_8B: ModelMetadata(\"groq\", 8192),\n    LlmModel.LLAMA3_70B: ModelMetadata(\"groq\", 8192),\n    LlmModel.MIXTRAL_8X7B: ModelMetadata(\"groq\", 32768),\n    LlmModel.GEMMA_7B: ModelMetadata(\"groq\", 8192),\n    LlmModel.GEMMA2_9B: ModelMetadata(\"groq\", 8192),\n    LlmModel.LLAMA3_1_405B: ModelMetadata(\"groq\", 8192),\n    # Limited to 16k during preview\n    LlmModel.LLAMA3_1_70B: ModelMetadata(\"groq\", 131072),\n    LlmModel.LLAMA3_1_8B: ModelMetadata(\"groq\", 131072),\n    LlmModel.OLLAMA_LLAMA3_8B: ModelMetadata(\"ollama\", 8192),\n    LlmModel.OLLAMA_LLAMA3_405B: ModelMetadata(\"ollama\", 8192),\n    LlmModel.OLLAMA_DOLPHIN: ModelMetadata(\"ollama\", 32768),\n    LlmModel.GEMINI_FLASH_1_5_8B: ModelMetadata(\"open_router\", 8192),\n    LlmModel.GROK_BETA: ModelMetadata(\"open_router\", 8192),\n    LlmModel.MISTRAL_NEMO: ModelMetadata(\"open_router\", 4000),\n    LlmModel.COHERE_COMMAND_R_08_2024: ModelMetadata(\"open_router\", 4000),\n    LlmModel.COHERE_COMMAND_R_PLUS_08_2024: ModelMetadata(\"open_router\", 4000),\n    LlmModel.EVA_QWEN_2_5_32B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.DEEPSEEK_CHAT: ModelMetadata(\"open_router\", 8192),\n    LlmModel.PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE: ModelMetadata(\n        \"open_router\", 8192\n    ),\n    LlmModel.QWEN_QWQ_32B_PREVIEW: ModelMetadata(\"open_router\", 4000),\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_LITE_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_MICRO_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.AMAZON_NOVA_PRO_V1: ModelMetadata(\"open_router\", 4000),\n    LlmModel.MICROSOFT_WIZARDLM_2_8X22B: ModelMetadata(\"open_router\", 4000),\n    LlmModel.GRYPHE_MYTHOMAX_L2_13B: ModelMetadata(\"open_router\", 4000),\n}",
              "children": [
                {
                  "value": "LlmModel.O1_PREVIEW: ModelMetadata(\"openai\", 32000)",
                  "children": [
                    {
                      "value": "LlmModel.O1_PREVIEW",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "O1_PREVIEW",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"openai\", 32000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"openai\", 32000)",
                          "children": [
                            {
                              "value": "\"openai\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "openai",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "32000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.O1_MINI: ModelMetadata(\"openai\", 62000)",
                  "children": [
                    {
                      "value": "LlmModel.O1_MINI",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "O1_MINI",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"openai\", 62000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"openai\", 62000)",
                          "children": [
                            {
                              "value": "\"openai\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "openai",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "62000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.GPT4O_MINI: ModelMetadata(\"openai\", 128000)",
                  "children": [
                    {
                      "value": "LlmModel.GPT4O_MINI",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "GPT4O_MINI",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"openai\", 128000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"openai\", 128000)",
                          "children": [
                            {
                              "value": "\"openai\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "openai",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "128000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.GPT4O: ModelMetadata(\"openai\", 128000)",
                  "children": [
                    {
                      "value": "LlmModel.GPT4O",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "GPT4O",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"openai\", 128000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"openai\", 128000)",
                          "children": [
                            {
                              "value": "\"openai\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "openai",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "128000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.GPT4_TURBO: ModelMetadata(\"openai\", 128000)",
                  "children": [
                    {
                      "value": "LlmModel.GPT4_TURBO",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "GPT4_TURBO",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"openai\", 128000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"openai\", 128000)",
                          "children": [
                            {
                              "value": "\"openai\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "openai",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "128000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.GPT3_5_TURBO: ModelMetadata(\"openai\", 16385)",
                  "children": [
                    {
                      "value": "LlmModel.GPT3_5_TURBO",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "GPT3_5_TURBO",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"openai\", 16385)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"openai\", 16385)",
                          "children": [
                            {
                              "value": "\"openai\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "openai",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "16385",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.CLAUDE_3_5_SONNET: ModelMetadata(\"anthropic\", 200000)",
                  "children": [
                    {
                      "value": "LlmModel.CLAUDE_3_5_SONNET",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "CLAUDE_3_5_SONNET",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"anthropic\", 200000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"anthropic\", 200000)",
                          "children": [
                            {
                              "value": "\"anthropic\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "anthropic",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "200000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.CLAUDE_3_HAIKU: ModelMetadata(\"anthropic\", 200000)",
                  "children": [
                    {
                      "value": "LlmModel.CLAUDE_3_HAIKU",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "CLAUDE_3_HAIKU",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"anthropic\", 200000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"anthropic\", 200000)",
                          "children": [
                            {
                              "value": "\"anthropic\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "anthropic",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "200000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.LLAMA3_8B: ModelMetadata(\"groq\", 8192)",
                  "children": [
                    {
                      "value": "LlmModel.LLAMA3_8B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "LLAMA3_8B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"groq\", 8192)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"groq\", 8192)",
                          "children": [
                            {
                              "value": "\"groq\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "groq",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "8192",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.LLAMA3_70B: ModelMetadata(\"groq\", 8192)",
                  "children": [
                    {
                      "value": "LlmModel.LLAMA3_70B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "LLAMA3_70B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"groq\", 8192)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"groq\", 8192)",
                          "children": [
                            {
                              "value": "\"groq\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "groq",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "8192",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.MIXTRAL_8X7B: ModelMetadata(\"groq\", 32768)",
                  "children": [
                    {
                      "value": "LlmModel.MIXTRAL_8X7B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "MIXTRAL_8X7B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"groq\", 32768)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"groq\", 32768)",
                          "children": [
                            {
                              "value": "\"groq\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "groq",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "32768",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.GEMMA_7B: ModelMetadata(\"groq\", 8192)",
                  "children": [
                    {
                      "value": "LlmModel.GEMMA_7B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "GEMMA_7B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"groq\", 8192)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"groq\", 8192)",
                          "children": [
                            {
                              "value": "\"groq\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "groq",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "8192",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.GEMMA2_9B: ModelMetadata(\"groq\", 8192)",
                  "children": [
                    {
                      "value": "LlmModel.GEMMA2_9B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "GEMMA2_9B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"groq\", 8192)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"groq\", 8192)",
                          "children": [
                            {
                              "value": "\"groq\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "groq",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "8192",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.LLAMA3_1_405B: ModelMetadata(\"groq\", 8192)",
                  "children": [
                    {
                      "value": "LlmModel.LLAMA3_1_405B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "LLAMA3_1_405B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"groq\", 8192)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"groq\", 8192)",
                          "children": [
                            {
                              "value": "\"groq\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "groq",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "8192",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Limited to 16k during preview",
                  "children": []
                },
                {
                  "value": "LlmModel.LLAMA3_1_70B: ModelMetadata(\"groq\", 131072)",
                  "children": [
                    {
                      "value": "LlmModel.LLAMA3_1_70B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "LLAMA3_1_70B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"groq\", 131072)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"groq\", 131072)",
                          "children": [
                            {
                              "value": "\"groq\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "groq",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "131072",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.LLAMA3_1_8B: ModelMetadata(\"groq\", 131072)",
                  "children": [
                    {
                      "value": "LlmModel.LLAMA3_1_8B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "LLAMA3_1_8B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"groq\", 131072)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"groq\", 131072)",
                          "children": [
                            {
                              "value": "\"groq\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "groq",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "131072",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.OLLAMA_LLAMA3_8B: ModelMetadata(\"ollama\", 8192)",
                  "children": [
                    {
                      "value": "LlmModel.OLLAMA_LLAMA3_8B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "OLLAMA_LLAMA3_8B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"ollama\", 8192)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"ollama\", 8192)",
                          "children": [
                            {
                              "value": "\"ollama\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "ollama",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "8192",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.OLLAMA_LLAMA3_405B: ModelMetadata(\"ollama\", 8192)",
                  "children": [
                    {
                      "value": "LlmModel.OLLAMA_LLAMA3_405B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "OLLAMA_LLAMA3_405B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"ollama\", 8192)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"ollama\", 8192)",
                          "children": [
                            {
                              "value": "\"ollama\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "ollama",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "8192",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.OLLAMA_DOLPHIN: ModelMetadata(\"ollama\", 32768)",
                  "children": [
                    {
                      "value": "LlmModel.OLLAMA_DOLPHIN",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "OLLAMA_DOLPHIN",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"ollama\", 32768)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"ollama\", 32768)",
                          "children": [
                            {
                              "value": "\"ollama\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "ollama",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "32768",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.GEMINI_FLASH_1_5_8B: ModelMetadata(\"open_router\", 8192)",
                  "children": [
                    {
                      "value": "LlmModel.GEMINI_FLASH_1_5_8B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "GEMINI_FLASH_1_5_8B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 8192)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 8192)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "8192",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.GROK_BETA: ModelMetadata(\"open_router\", 8192)",
                  "children": [
                    {
                      "value": "LlmModel.GROK_BETA",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "GROK_BETA",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 8192)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 8192)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "8192",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.MISTRAL_NEMO: ModelMetadata(\"open_router\", 4000)",
                  "children": [
                    {
                      "value": "LlmModel.MISTRAL_NEMO",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "MISTRAL_NEMO",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 4000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 4000)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.COHERE_COMMAND_R_08_2024: ModelMetadata(\"open_router\", 4000)",
                  "children": [
                    {
                      "value": "LlmModel.COHERE_COMMAND_R_08_2024",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "COHERE_COMMAND_R_08_2024",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 4000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 4000)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.COHERE_COMMAND_R_PLUS_08_2024: ModelMetadata(\"open_router\", 4000)",
                  "children": [
                    {
                      "value": "LlmModel.COHERE_COMMAND_R_PLUS_08_2024",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "COHERE_COMMAND_R_PLUS_08_2024",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 4000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 4000)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.EVA_QWEN_2_5_32B: ModelMetadata(\"open_router\", 4000)",
                  "children": [
                    {
                      "value": "LlmModel.EVA_QWEN_2_5_32B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "EVA_QWEN_2_5_32B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 4000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 4000)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.DEEPSEEK_CHAT: ModelMetadata(\"open_router\", 8192)",
                  "children": [
                    {
                      "value": "LlmModel.DEEPSEEK_CHAT",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "DEEPSEEK_CHAT",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 8192)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 8192)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "8192",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE: ModelMetadata(\n        \"open_router\", 8192\n    )",
                  "children": [
                    {
                      "value": "LlmModel.PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\n        \"open_router\", 8192\n    )",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\n        \"open_router\", 8192\n    )",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "8192",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.QWEN_QWQ_32B_PREVIEW: ModelMetadata(\"open_router\", 4000)",
                  "children": [
                    {
                      "value": "LlmModel.QWEN_QWQ_32B_PREVIEW",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "QWEN_QWQ_32B_PREVIEW",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 4000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 4000)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B: ModelMetadata(\"open_router\", 4000)",
                  "children": [
                    {
                      "value": "LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 4000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 4000)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B: ModelMetadata(\"open_router\", 4000)",
                  "children": [
                    {
                      "value": "LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 4000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 4000)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.AMAZON_NOVA_LITE_V1: ModelMetadata(\"open_router\", 4000)",
                  "children": [
                    {
                      "value": "LlmModel.AMAZON_NOVA_LITE_V1",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "AMAZON_NOVA_LITE_V1",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 4000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 4000)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.AMAZON_NOVA_MICRO_V1: ModelMetadata(\"open_router\", 4000)",
                  "children": [
                    {
                      "value": "LlmModel.AMAZON_NOVA_MICRO_V1",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "AMAZON_NOVA_MICRO_V1",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 4000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 4000)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.AMAZON_NOVA_PRO_V1: ModelMetadata(\"open_router\", 4000)",
                  "children": [
                    {
                      "value": "LlmModel.AMAZON_NOVA_PRO_V1",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "AMAZON_NOVA_PRO_V1",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 4000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 4000)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.MICROSOFT_WIZARDLM_2_8X22B: ModelMetadata(\"open_router\", 4000)",
                  "children": [
                    {
                      "value": "LlmModel.MICROSOFT_WIZARDLM_2_8X22B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "MICROSOFT_WIZARDLM_2_8X22B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 4000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 4000)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "LlmModel.GRYPHE_MYTHOMAX_L2_13B: ModelMetadata(\"open_router\", 4000)",
                  "children": [
                    {
                      "value": "LlmModel.GRYPHE_MYTHOMAX_L2_13B",
                      "children": [
                        {
                          "value": "LlmModel",
                          "children": []
                        },
                        {
                          "value": "GRYPHE_MYTHOMAX_L2_13B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ModelMetadata(\"open_router\", 4000)",
                      "children": [
                        {
                          "value": "ModelMetadata",
                          "children": []
                        },
                        {
                          "value": "(\"open_router\", 4000)",
                          "children": [
                            {
                              "value": "\"open_router\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "open_router",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "for model in LlmModel:\n    if model not in MODEL_METADATA:\n        raise ValueError(f\"Missing MODEL_METADATA metadata for model: {model}\")",
      "children": [
        {
          "value": "model",
          "children": []
        },
        {
          "value": "LlmModel",
          "children": []
        },
        {
          "value": "if model not in MODEL_METADATA:\n        raise ValueError(f\"Missing MODEL_METADATA metadata for model: {model}\")",
          "children": [
            {
              "value": "if model not in MODEL_METADATA:\n        raise ValueError(f\"Missing MODEL_METADATA metadata for model: {model}\")",
              "children": [
                {
                  "value": "model not in MODEL_METADATA",
                  "children": [
                    {
                      "value": "model",
                      "children": []
                    },
                    {
                      "value": "MODEL_METADATA",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(f\"Missing MODEL_METADATA metadata for model: {model}\")",
                  "children": [
                    {
                      "value": "raise ValueError(f\"Missing MODEL_METADATA metadata for model: {model}\")",
                      "children": [
                        {
                          "value": "ValueError(f\"Missing MODEL_METADATA metadata for model: {model}\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(f\"Missing MODEL_METADATA metadata for model: {model}\")",
                              "children": [
                                {
                                  "value": "f\"Missing MODEL_METADATA metadata for model: {model}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Missing MODEL_METADATA metadata for model:",
                                      "children": []
                                    },
                                    {
                                      "value": "{model}",
                                      "children": [
                                        {
                                          "value": "model",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class MessageRole(str, Enum):\n    SYSTEM = \"system\"\n    USER = \"user\"\n    ASSISTANT = \"assistant\"",
      "children": [
        {
          "value": "MessageRole",
          "children": []
        },
        {
          "value": "(str, Enum)",
          "children": [
            {
              "value": "str",
              "children": []
            },
            {
              "value": "Enum",
              "children": []
            }
          ]
        },
        {
          "value": "SYSTEM = \"system\"\n    USER = \"user\"\n    ASSISTANT = \"assistant\"",
          "children": [
            {
              "value": "SYSTEM = \"system\"",
              "children": [
                {
                  "value": "SYSTEM = \"system\"",
                  "children": [
                    {
                      "value": "SYSTEM",
                      "children": []
                    },
                    {
                      "value": "\"system\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "system",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "USER = \"user\"",
              "children": [
                {
                  "value": "USER = \"user\"",
                  "children": [
                    {
                      "value": "USER",
                      "children": []
                    },
                    {
                      "value": "\"user\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "user",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ASSISTANT = \"assistant\"",
              "children": [
                {
                  "value": "ASSISTANT = \"assistant\"",
                  "children": [
                    {
                      "value": "ASSISTANT",
                      "children": []
                    },
                    {
                      "value": "\"assistant\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "assistant",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class Message(BlockSchema):\n    role: MessageRole\n    content: str",
      "children": [
        {
          "value": "Message",
          "children": []
        },
        {
          "value": "(BlockSchema)",
          "children": [
            {
              "value": "BlockSchema",
              "children": []
            }
          ]
        },
        {
          "value": "role: MessageRole\n    content: str",
          "children": [
            {
              "value": "role: MessageRole",
              "children": [
                {
                  "value": "role: MessageRole",
                  "children": [
                    {
                      "value": "role",
                      "children": []
                    },
                    {
                      "value": "MessageRole",
                      "children": [
                        {
                          "value": "MessageRole",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "content: str",
              "children": [
                {
                  "value": "content: str",
                  "children": [
                    {
                      "value": "content",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class AIStructuredResponseGeneratorBlock(Block):\n    class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"The prompt to send to the language model.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        expected_format: dict[str, str] = SchemaField(\n            description=\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        conversation_history: list[Message] = SchemaField(\n            default=[],\n            description=\"The conversation history to provide context for the prompt.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        response: dict[str, Any] = SchemaField(\n            description=\"The response object generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n            description=\"Call a Large Language Model (LLM) to generate formatted object based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AIStructuredResponseGeneratorBlock.Input,\n            output_schema=AIStructuredResponseGeneratorBlock.Output,\n            test_input={\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"expected_format\": {\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                },\n                \"prompt\": \"User prompt\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", {\"key1\": \"key1Value\", \"key2\": \"key2Value\"}),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )\n            },\n        )\n\n    @staticmethod\n    def llm_call(\n        credentials: APIKeyCredentials,\n        llm_model: LlmModel,\n        prompt: list[dict],\n        json_format: bool,\n        max_tokens: int | None = None,\n        ollama_host: str = \"localhost:11434\",\n    ) -> tuple[str, int, int]:\n        \"\"\"\n        Args:\n            api_key: API key for the LLM provider.\n            llm_model: The LLM model to use.\n            prompt: The prompt to send to the LLM.\n            json_format: Whether the response should be in JSON format.\n            max_tokens: The maximum number of tokens to generate in the chat completion.\n            ollama_host: The host for ollama to use\n\n        Returns:\n            The response from the LLM.\n            The number of tokens used in the prompt.\n            The number of tokens used in the completion.\n        \"\"\"\n        provider = llm_model.metadata.provider\n\n        if provider == \"openai\":\n            oai_client = openai.OpenAI(api_key=credentials.api_key.get_secret_value())\n            response_format = None\n\n            if llm_model in [LlmModel.O1_MINI, LlmModel.O1_PREVIEW]:\n                sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n                usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n                prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]\n            elif json_format:\n                response_format = {\"type\": \"json_object\"}\n\n            response = oai_client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"anthropic\":\n            system_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            sysprompt = \" \".join(system_messages)\n\n            messages = []\n            last_role = None\n            for p in prompt:\n                if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]\n\n            client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())\n            try:\n                resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )\n\n                if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")\n\n                return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )\n            except anthropic.APIError as e:\n                error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)\n        elif provider == \"groq\":\n            client = Groq(api_key=credentials.api_key.get_secret_value())\n            response_format = {\"type\": \"json_object\"} if json_format else None\n            response = client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"ollama\":\n            client = ollama.Client(host=ollama_host)\n            sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n            response = client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )\n            return (\n                response.get(\"response\") or \"\",\n                response.get(\"prompt_eval_count\") or 0,\n                response.get(\"eval_count\") or 0,\n            )\n        elif provider == \"open_router\":\n            client = openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )\n\n            response = client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )\n\n            # If there's no response, raise an error\n            if not response.choices:\n                if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        else:\n            raise ValueError(f\"Unsupported LLM provider: {provider}\")\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        logger.debug(f\"Calling LLM with input data: {input_data}\")\n        prompt = [p.model_dump() for p in input_data.conversation_history]\n\n        def trim_prompt(s: str) -> str:\n            lines = s.strip().split(\"\\n\")\n            return \"\\n\".join([line.strip().lstrip(\"|\") for line in lines])\n\n        values = input_data.prompt_values\n        if values:\n            input_data.prompt = input_data.prompt.format(**values)\n            input_data.sys_prompt = input_data.sys_prompt.format(**values)\n\n        if input_data.sys_prompt:\n            prompt.append({\"role\": \"system\", \"content\": input_data.sys_prompt})\n\n        if input_data.expected_format:\n            expected_format = [\n                f'\"{k}\": \"{v}\"' for k, v in input_data.expected_format.items()\n            ]\n            format_prompt = \",\\n  \".join(expected_format)\n            sys_prompt = trim_prompt(\n                f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"\n            )\n            prompt.append({\"role\": \"system\", \"content\": sys_prompt})\n\n        if input_data.prompt:\n            prompt.append({\"role\": \"user\", \"content\": input_data.prompt})\n\n        def parse_response(resp: str) -> tuple[dict[str, Any], str | None]:\n            try:\n                parsed = json.loads(resp)\n                if not isinstance(parsed, dict):\n                    return {}, f\"Expected a dictionary, but got {type(parsed)}\"\n                miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys())\n                if miss_keys:\n                    return parsed, f\"Missing keys: {miss_keys}\"\n                return parsed, None\n            except JSONDecodeError as e:\n                return {}, f\"JSON decode error: {e}\"\n\n        logger.info(f\"LLM request: {prompt}\")\n        retry_prompt = \"\"\n        llm_model = input_data.model\n\n        for retry_count in range(input_data.retry):\n            try:\n                response_text, input_token, output_token = self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )\n                self.merge_stats(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )\n                logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")\n\n                if input_data.expected_format:\n                    parsed_dict, parsed_error = parse_response(response_text)\n                    if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return\n                else:\n                    yield \"response\", {\"response\": response_text}\n                    return\n\n                retry_prompt = trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )\n                prompt.append({\"role\": \"user\", \"content\": retry_prompt})\n            except Exception as e:\n                logger.exception(f\"Error calling LLM: {e}\")\n                retry_prompt = f\"Error calling LLM: {e}\"\n            finally:\n                self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )\n\n        raise RuntimeError(retry_prompt)",
      "children": [
        {
          "value": "AIStructuredResponseGeneratorBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"The prompt to send to the language model.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        expected_format: dict[str, str] = SchemaField(\n            description=\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        conversation_history: list[Message] = SchemaField(\n            default=[],\n            description=\"The conversation history to provide context for the prompt.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        response: dict[str, Any] = SchemaField(\n            description=\"The response object generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n            description=\"Call a Large Language Model (LLM) to generate formatted object based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AIStructuredResponseGeneratorBlock.Input,\n            output_schema=AIStructuredResponseGeneratorBlock.Output,\n            test_input={\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"expected_format\": {\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                },\n                \"prompt\": \"User prompt\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", {\"key1\": \"key1Value\", \"key2\": \"key2Value\"}),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )\n            },\n        )\n\n    @staticmethod\n    def llm_call(\n        credentials: APIKeyCredentials,\n        llm_model: LlmModel,\n        prompt: list[dict],\n        json_format: bool,\n        max_tokens: int | None = None,\n        ollama_host: str = \"localhost:11434\",\n    ) -> tuple[str, int, int]:\n        \"\"\"\n        Args:\n            api_key: API key for the LLM provider.\n            llm_model: The LLM model to use.\n            prompt: The prompt to send to the LLM.\n            json_format: Whether the response should be in JSON format.\n            max_tokens: The maximum number of tokens to generate in the chat completion.\n            ollama_host: The host for ollama to use\n\n        Returns:\n            The response from the LLM.\n            The number of tokens used in the prompt.\n            The number of tokens used in the completion.\n        \"\"\"\n        provider = llm_model.metadata.provider\n\n        if provider == \"openai\":\n            oai_client = openai.OpenAI(api_key=credentials.api_key.get_secret_value())\n            response_format = None\n\n            if llm_model in [LlmModel.O1_MINI, LlmModel.O1_PREVIEW]:\n                sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n                usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n                prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]\n            elif json_format:\n                response_format = {\"type\": \"json_object\"}\n\n            response = oai_client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"anthropic\":\n            system_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            sysprompt = \" \".join(system_messages)\n\n            messages = []\n            last_role = None\n            for p in prompt:\n                if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]\n\n            client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())\n            try:\n                resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )\n\n                if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")\n\n                return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )\n            except anthropic.APIError as e:\n                error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)\n        elif provider == \"groq\":\n            client = Groq(api_key=credentials.api_key.get_secret_value())\n            response_format = {\"type\": \"json_object\"} if json_format else None\n            response = client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"ollama\":\n            client = ollama.Client(host=ollama_host)\n            sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n            response = client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )\n            return (\n                response.get(\"response\") or \"\",\n                response.get(\"prompt_eval_count\") or 0,\n                response.get(\"eval_count\") or 0,\n            )\n        elif provider == \"open_router\":\n            client = openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )\n\n            response = client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )\n\n            # If there's no response, raise an error\n            if not response.choices:\n                if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        else:\n            raise ValueError(f\"Unsupported LLM provider: {provider}\")\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        logger.debug(f\"Calling LLM with input data: {input_data}\")\n        prompt = [p.model_dump() for p in input_data.conversation_history]\n\n        def trim_prompt(s: str) -> str:\n            lines = s.strip().split(\"\\n\")\n            return \"\\n\".join([line.strip().lstrip(\"|\") for line in lines])\n\n        values = input_data.prompt_values\n        if values:\n            input_data.prompt = input_data.prompt.format(**values)\n            input_data.sys_prompt = input_data.sys_prompt.format(**values)\n\n        if input_data.sys_prompt:\n            prompt.append({\"role\": \"system\", \"content\": input_data.sys_prompt})\n\n        if input_data.expected_format:\n            expected_format = [\n                f'\"{k}\": \"{v}\"' for k, v in input_data.expected_format.items()\n            ]\n            format_prompt = \",\\n  \".join(expected_format)\n            sys_prompt = trim_prompt(\n                f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"\n            )\n            prompt.append({\"role\": \"system\", \"content\": sys_prompt})\n\n        if input_data.prompt:\n            prompt.append({\"role\": \"user\", \"content\": input_data.prompt})\n\n        def parse_response(resp: str) -> tuple[dict[str, Any], str | None]:\n            try:\n                parsed = json.loads(resp)\n                if not isinstance(parsed, dict):\n                    return {}, f\"Expected a dictionary, but got {type(parsed)}\"\n                miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys())\n                if miss_keys:\n                    return parsed, f\"Missing keys: {miss_keys}\"\n                return parsed, None\n            except JSONDecodeError as e:\n                return {}, f\"JSON decode error: {e}\"\n\n        logger.info(f\"LLM request: {prompt}\")\n        retry_prompt = \"\"\n        llm_model = input_data.model\n\n        for retry_count in range(input_data.retry):\n            try:\n                response_text, input_token, output_token = self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )\n                self.merge_stats(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )\n                logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")\n\n                if input_data.expected_format:\n                    parsed_dict, parsed_error = parse_response(response_text)\n                    if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return\n                else:\n                    yield \"response\", {\"response\": response_text}\n                    return\n\n                retry_prompt = trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )\n                prompt.append({\"role\": \"user\", \"content\": retry_prompt})\n            except Exception as e:\n                logger.exception(f\"Error calling LLM: {e}\")\n                retry_prompt = f\"Error calling LLM: {e}\"\n            finally:\n                self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )\n\n        raise RuntimeError(retry_prompt)",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"The prompt to send to the language model.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        expected_format: dict[str, str] = SchemaField(\n            description=\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        conversation_history: list[Message] = SchemaField(\n            default=[],\n            description=\"The conversation history to provide context for the prompt.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "prompt: str = SchemaField(\n            description=\"The prompt to send to the language model.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        expected_format: dict[str, str] = SchemaField(\n            description=\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        conversation_history: list[Message] = SchemaField(\n            default=[],\n            description=\"The conversation history to provide context for the prompt.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                  "children": [
                    {
                      "value": "prompt: str = SchemaField(\n            description=\"The prompt to send to the language model.\",\n            placeholder=\"Enter your prompt here...\",\n        )",
                      "children": [
                        {
                          "value": "prompt: str = SchemaField(\n            description=\"The prompt to send to the language model.\",\n            placeholder=\"Enter your prompt here...\",\n        )",
                          "children": [
                            {
                              "value": "prompt",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The prompt to send to the language model.\",\n            placeholder=\"Enter your prompt here...\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The prompt to send to the language model.\",\n            placeholder=\"Enter your prompt here...\",\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The prompt to send to the language model.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The prompt to send to the language model.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The prompt to send to the language model.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "placeholder=\"Enter your prompt here...\"",
                                      "children": [
                                        {
                                          "value": "placeholder",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Enter your prompt here...\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Enter your prompt here...",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expected_format: dict[str, str] = SchemaField(\n            description=\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\",\n        )",
                      "children": [
                        {
                          "value": "expected_format: dict[str, str] = SchemaField(\n            description=\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\",\n        )",
                          "children": [
                            {
                              "value": "expected_format",
                              "children": []
                            },
                            {
                              "value": "dict[str, str]",
                              "children": [
                                {
                                  "value": "dict[str, str]",
                                  "children": [
                                    {
                                      "value": "dict",
                                      "children": []
                                    },
                                    {
                                      "value": "[str, str]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\",\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Expected format of the response. If provided, the response will be validated against this format. \"\n            \"The keys should be the expected fields in the response, and the values should be the description of the field.\"",
                                          "children": [
                                            {
                                              "value": "\"Expected format of the response. If provided, the response will be validated against this format. \"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Expected format of the response. If provided, the response will be validated against this format.",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"The keys should be the expected fields in the response, and the values should be the description of the field.\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "The keys should be the expected fields in the response, and the values should be the description of the field.",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )",
                      "children": [
                        {
                          "value": "model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )",
                          "children": [
                            {
                              "value": "model",
                              "children": []
                            },
                            {
                              "value": "LlmModel",
                              "children": [
                                {
                                  "value": "LlmModel",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"LLM Model\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"LLM Model\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "LLM Model",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=LlmModel.GPT4_TURBO",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "LlmModel.GPT4_TURBO",
                                          "children": [
                                            {
                                              "value": "LlmModel",
                                              "children": []
                                            },
                                            {
                                              "value": "GPT4_TURBO",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The language model to use for answering the prompt.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The language model to use for answering the prompt.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The language model to use for answering the prompt.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "advanced=False",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "False",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: AICredentials = AICredentialsField()",
                      "children": [
                        {
                          "value": "credentials: AICredentials = AICredentialsField()",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "AICredentials",
                              "children": [
                                {
                                  "value": "AICredentials",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "AICredentialsField()",
                              "children": [
                                {
                                  "value": "AICredentialsField",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )",
                      "children": [
                        {
                          "value": "sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )",
                          "children": [
                            {
                              "value": "sys_prompt",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"System Prompt\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"System Prompt\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "System Prompt",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The system prompt to provide additional context to the model.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The system prompt to provide additional context to the model.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The system prompt to provide additional context to the model.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "conversation_history: list[Message] = SchemaField(\n            default=[],\n            description=\"The conversation history to provide context for the prompt.\",\n        )",
                      "children": [
                        {
                          "value": "conversation_history: list[Message] = SchemaField(\n            default=[],\n            description=\"The conversation history to provide context for the prompt.\",\n        )",
                          "children": [
                            {
                              "value": "conversation_history",
                              "children": []
                            },
                            {
                              "value": "list[Message]",
                              "children": [
                                {
                                  "value": "list[Message]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[Message]",
                                      "children": [
                                        {
                                          "value": "Message",
                                          "children": [
                                            {
                                              "value": "Message",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            default=[],\n            description=\"The conversation history to provide context for the prompt.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            default=[],\n            description=\"The conversation history to provide context for the prompt.\",\n        )",
                                  "children": [
                                    {
                                      "value": "default=[]",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "[]",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The conversation history to provide context for the prompt.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The conversation history to provide context for the prompt.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The conversation history to provide context for the prompt.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )",
                      "children": [
                        {
                          "value": "retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )",
                          "children": [
                            {
                              "value": "retry",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"Retry Count\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Retry Count\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Retry Count",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=3",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "3",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"Number of times to retry the LLM call if the response does not match the expected format.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Number of times to retry the LLM call if the response does not match the expected format.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Number of times to retry the LLM call if the response does not match the expected format.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )",
                      "children": [
                        {
                          "value": "prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )",
                          "children": [
                            {
                              "value": "prompt_values",
                              "children": []
                            },
                            {
                              "value": "dict[str, str]",
                              "children": [
                                {
                                  "value": "dict[str, str]",
                                  "children": [
                                    {
                                      "value": "dict",
                                      "children": []
                                    },
                                    {
                                      "value": "[str, str]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )",
                                  "children": [
                                    {
                                      "value": "advanced=False",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "False",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default={}",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "{}",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"Values used to fill in the prompt.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Values used to fill in the prompt.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Values used to fill in the prompt.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                      "children": [
                        {
                          "value": "max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                          "children": [
                            {
                              "value": "max_tokens",
                              "children": []
                            },
                            {
                              "value": "int | None",
                              "children": [
                                {
                                  "value": "int | None",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                                  "children": [
                                    {
                                      "value": "advanced=True",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=None",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The maximum number of tokens to generate in the chat completion.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The maximum number of tokens to generate in the chat completion.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The maximum number of tokens to generate in the chat completion.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                      "children": [
                        {
                          "value": "ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                          "children": [
                            {
                              "value": "ollama_host",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                                  "children": [
                                    {
                                      "value": "advanced=True",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"localhost:11434\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"localhost:11434\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "localhost:11434",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"Ollama host for local  models\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Ollama host for local  models\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Ollama host for local  models",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        response: dict[str, Any] = SchemaField(\n            description=\"The response object generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "response: dict[str, Any] = SchemaField(\n            description=\"The response object generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")",
                  "children": [
                    {
                      "value": "response: dict[str, Any] = SchemaField(\n            description=\"The response object generated by the language model.\"\n        )",
                      "children": [
                        {
                          "value": "response: dict[str, Any] = SchemaField(\n            description=\"The response object generated by the language model.\"\n        )",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "dict[str, Any]",
                              "children": [
                                {
                                  "value": "dict[str, Any]",
                                  "children": [
                                    {
                                      "value": "dict",
                                      "children": []
                                    },
                                    {
                                      "value": "[str, Any]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "Any",
                                          "children": [
                                            {
                                              "value": "Any",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The response object generated by the language model.\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The response object generated by the language model.\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The response object generated by the language model.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The response object generated by the language model.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The response object generated by the language model.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "error: str = SchemaField(description=\"Error message if the API call failed.\")",
                      "children": [
                        {
                          "value": "error: str = SchemaField(description=\"Error message if the API call failed.\")",
                          "children": [
                            {
                              "value": "error",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Error message if the API call failed.\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Error message if the API call failed.\")",
                                  "children": [
                                    {
                                      "value": "description=\"Error message if the API call failed.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Error message if the API call failed.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Error message if the API call failed.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n            description=\"Call a Large Language Model (LLM) to generate formatted object based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AIStructuredResponseGeneratorBlock.Input,\n            output_schema=AIStructuredResponseGeneratorBlock.Output,\n            test_input={\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"expected_format\": {\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                },\n                \"prompt\": \"User prompt\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", {\"key1\": \"key1Value\", \"key2\": \"key2Value\"}),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )\n            },\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n            description=\"Call a Large Language Model (LLM) to generate formatted object based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AIStructuredResponseGeneratorBlock.Input,\n            output_schema=AIStructuredResponseGeneratorBlock.Output,\n            test_input={\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"expected_format\": {\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                },\n                \"prompt\": \"User prompt\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", {\"key1\": \"key1Value\", \"key2\": \"key2Value\"}),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )\n            },\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n            description=\"Call a Large Language Model (LLM) to generate formatted object based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AIStructuredResponseGeneratorBlock.Input,\n            output_schema=AIStructuredResponseGeneratorBlock.Output,\n            test_input={\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"expected_format\": {\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                },\n                \"prompt\": \"User prompt\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", {\"key1\": \"key1Value\", \"key2\": \"key2Value\"}),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )\n            },\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n            description=\"Call a Large Language Model (LLM) to generate formatted object based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AIStructuredResponseGeneratorBlock.Input,\n            output_schema=AIStructuredResponseGeneratorBlock.Output,\n            test_input={\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"expected_format\": {\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                },\n                \"prompt\": \"User prompt\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", {\"key1\": \"key1Value\", \"key2\": \"key2Value\"}),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )\n            },\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\",\n            description=\"Call a Large Language Model (LLM) to generate formatted object based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AIStructuredResponseGeneratorBlock.Input,\n            output_schema=AIStructuredResponseGeneratorBlock.Output,\n            test_input={\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"expected_format\": {\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                },\n                \"prompt\": \"User prompt\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", {\"key1\": \"key1Value\", \"key2\": \"key2Value\"}),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )\n            },\n        )",
                              "children": [
                                {
                                  "value": "id=\"ed55ac19-356e-4243-a6cb-bc599e9b716f\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"ed55ac19-356e-4243-a6cb-bc599e9b716f\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "ed55ac19-356e-4243-a6cb-bc599e9b716f",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "description=\"Call a Large Language Model (LLM) to generate formatted object based on the given prompt.\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Call a Large Language Model (LLM) to generate formatted object based on the given prompt.\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Call a Large Language Model (LLM) to generate formatted object based on the given prompt.",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.AI}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.AI}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.AI",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "AI",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=AIStructuredResponseGeneratorBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "AIStructuredResponseGeneratorBlock.Input",
                                      "children": [
                                        {
                                          "value": "AIStructuredResponseGeneratorBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema=AIStructuredResponseGeneratorBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "AIStructuredResponseGeneratorBlock.Output",
                                      "children": [
                                        {
                                          "value": "AIStructuredResponseGeneratorBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_input={\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"expected_format\": {\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                },\n                \"prompt\": \"User prompt\",\n            }",
                                  "children": [
                                    {
                                      "value": "test_input",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"expected_format\": {\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                },\n                \"prompt\": \"User prompt\",\n            }",
                                      "children": [
                                        {
                                          "value": "\"model\": LlmModel.GPT4_TURBO",
                                          "children": [
                                            {
                                              "value": "\"model\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "model",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "LlmModel.GPT4_TURBO",
                                              "children": [
                                                {
                                                  "value": "LlmModel",
                                                  "children": []
                                                },
                                                {
                                                  "value": "GPT4_TURBO",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"credentials\": TEST_CREDENTIALS_INPUT",
                                          "children": [
                                            {
                                              "value": "\"credentials\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "TEST_CREDENTIALS_INPUT",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"expected_format\": {\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                }",
                                          "children": [
                                            {
                                              "value": "\"expected_format\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "expected_format",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{\n                    \"key1\": \"value1\",\n                    \"key2\": \"value2\",\n                }",
                                              "children": [
                                                {
                                                  "value": "\"key1\": \"value1\"",
                                                  "children": [
                                                    {
                                                      "value": "\"key1\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "key1",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"value1\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "value1",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"key2\": \"value2\"",
                                                  "children": [
                                                    {
                                                      "value": "\"key2\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "key2",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"value2\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "value2",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"prompt\": \"User prompt\"",
                                          "children": [
                                            {
                                              "value": "\"prompt\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "prompt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"User prompt\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "User prompt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_credentials=TEST_CREDENTIALS",
                                  "children": [
                                    {
                                      "value": "test_credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "TEST_CREDENTIALS",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "test_output=(\"response\", {\"key1\": \"key1Value\", \"key2\": \"key2Value\"})",
                                  "children": [
                                    {
                                      "value": "test_output",
                                      "children": []
                                    },
                                    {
                                      "value": "(\"response\", {\"key1\": \"key1Value\", \"key2\": \"key2Value\"})",
                                      "children": [
                                        {
                                          "value": "\"response\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "response",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "{\"key1\": \"key1Value\", \"key2\": \"key2Value\"}",
                                          "children": [
                                            {
                                              "value": "\"key1\": \"key1Value\"",
                                              "children": [
                                                {
                                                  "value": "\"key1\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "key1",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"key1Value\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "key1Value",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"key2\": \"key2Value\"",
                                              "children": [
                                                {
                                                  "value": "\"key2\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "key2",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"key2Value\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "key2Value",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_mock={\n                \"llm_call\": lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )\n            }",
                                  "children": [
                                    {
                                      "value": "test_mock",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"llm_call\": lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )\n            }",
                                      "children": [
                                        {
                                          "value": "\"llm_call\": lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )",
                                          "children": [
                                            {
                                              "value": "\"llm_call\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "llm_call",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "lambda *args, **kwargs: (\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )",
                                              "children": [
                                                {
                                                  "value": "*args, **kwargs",
                                                  "children": [
                                                    {
                                                      "value": "*args",
                                                      "children": [
                                                        {
                                                          "value": "args",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "**kwargs",
                                                      "children": [
                                                        {
                                                          "value": "kwargs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                    json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    ),\n                    0,\n                    0,\n                )",
                                                  "children": [
                                                    {
                                                      "value": "json.dumps(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "json.dumps",
                                                          "children": [
                                                            {
                                                              "value": "json",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "dumps",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(\n                        {\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "{\n                            \"key1\": \"key1Value\",\n                            \"key2\": \"key2Value\",\n                        }",
                                                              "children": [
                                                                {
                                                                  "value": "\"key1\": \"key1Value\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"key1\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "key1",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "\"key1Value\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "key1Value",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"key2\": \"key2Value\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"key2\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "key2",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "\"key2Value\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "key2Value",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def llm_call(\n        credentials: APIKeyCredentials,\n        llm_model: LlmModel,\n        prompt: list[dict],\n        json_format: bool,\n        max_tokens: int | None = None,\n        ollama_host: str = \"localhost:11434\",\n    ) -> tuple[str, int, int]:\n        \"\"\"\n        Args:\n            api_key: API key for the LLM provider.\n            llm_model: The LLM model to use.\n            prompt: The prompt to send to the LLM.\n            json_format: Whether the response should be in JSON format.\n            max_tokens: The maximum number of tokens to generate in the chat completion.\n            ollama_host: The host for ollama to use\n\n        Returns:\n            The response from the LLM.\n            The number of tokens used in the prompt.\n            The number of tokens used in the completion.\n        \"\"\"\n        provider = llm_model.metadata.provider\n\n        if provider == \"openai\":\n            oai_client = openai.OpenAI(api_key=credentials.api_key.get_secret_value())\n            response_format = None\n\n            if llm_model in [LlmModel.O1_MINI, LlmModel.O1_PREVIEW]:\n                sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n                usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n                prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]\n            elif json_format:\n                response_format = {\"type\": \"json_object\"}\n\n            response = oai_client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"anthropic\":\n            system_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            sysprompt = \" \".join(system_messages)\n\n            messages = []\n            last_role = None\n            for p in prompt:\n                if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]\n\n            client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())\n            try:\n                resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )\n\n                if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")\n\n                return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )\n            except anthropic.APIError as e:\n                error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)\n        elif provider == \"groq\":\n            client = Groq(api_key=credentials.api_key.get_secret_value())\n            response_format = {\"type\": \"json_object\"} if json_format else None\n            response = client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"ollama\":\n            client = ollama.Client(host=ollama_host)\n            sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n            response = client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )\n            return (\n                response.get(\"response\") or \"\",\n                response.get(\"prompt_eval_count\") or 0,\n                response.get(\"eval_count\") or 0,\n            )\n        elif provider == \"open_router\":\n            client = openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )\n\n            response = client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )\n\n            # If there's no response, raise an error\n            if not response.choices:\n                if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        else:\n            raise ValueError(f\"Unsupported LLM provider: {provider}\")",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def llm_call(\n        credentials: APIKeyCredentials,\n        llm_model: LlmModel,\n        prompt: list[dict],\n        json_format: bool,\n        max_tokens: int | None = None,\n        ollama_host: str = \"localhost:11434\",\n    ) -> tuple[str, int, int]:\n        \"\"\"\n        Args:\n            api_key: API key for the LLM provider.\n            llm_model: The LLM model to use.\n            prompt: The prompt to send to the LLM.\n            json_format: Whether the response should be in JSON format.\n            max_tokens: The maximum number of tokens to generate in the chat completion.\n            ollama_host: The host for ollama to use\n\n        Returns:\n            The response from the LLM.\n            The number of tokens used in the prompt.\n            The number of tokens used in the completion.\n        \"\"\"\n        provider = llm_model.metadata.provider\n\n        if provider == \"openai\":\n            oai_client = openai.OpenAI(api_key=credentials.api_key.get_secret_value())\n            response_format = None\n\n            if llm_model in [LlmModel.O1_MINI, LlmModel.O1_PREVIEW]:\n                sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n                usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n                prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]\n            elif json_format:\n                response_format = {\"type\": \"json_object\"}\n\n            response = oai_client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"anthropic\":\n            system_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            sysprompt = \" \".join(system_messages)\n\n            messages = []\n            last_role = None\n            for p in prompt:\n                if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]\n\n            client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())\n            try:\n                resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )\n\n                if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")\n\n                return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )\n            except anthropic.APIError as e:\n                error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)\n        elif provider == \"groq\":\n            client = Groq(api_key=credentials.api_key.get_secret_value())\n            response_format = {\"type\": \"json_object\"} if json_format else None\n            response = client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"ollama\":\n            client = ollama.Client(host=ollama_host)\n            sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n            response = client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )\n            return (\n                response.get(\"response\") or \"\",\n                response.get(\"prompt_eval_count\") or 0,\n                response.get(\"eval_count\") or 0,\n            )\n        elif provider == \"open_router\":\n            client = openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )\n\n            response = client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )\n\n            # If there's no response, raise an error\n            if not response.choices:\n                if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        else:\n            raise ValueError(f\"Unsupported LLM provider: {provider}\")",
                  "children": [
                    {
                      "value": "llm_call",
                      "children": []
                    },
                    {
                      "value": "(\n        credentials: APIKeyCredentials,\n        llm_model: LlmModel,\n        prompt: list[dict],\n        json_format: bool,\n        max_tokens: int | None = None,\n        ollama_host: str = \"localhost:11434\",\n    )",
                      "children": [
                        {
                          "value": "credentials: APIKeyCredentials",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "APIKeyCredentials",
                              "children": [
                                {
                                  "value": "APIKeyCredentials",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "llm_model: LlmModel",
                          "children": [
                            {
                              "value": "llm_model",
                              "children": []
                            },
                            {
                              "value": "LlmModel",
                              "children": [
                                {
                                  "value": "LlmModel",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "prompt: list[dict]",
                          "children": [
                            {
                              "value": "prompt",
                              "children": []
                            },
                            {
                              "value": "list[dict]",
                              "children": [
                                {
                                  "value": "list[dict]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[dict]",
                                      "children": [
                                        {
                                          "value": "dict",
                                          "children": [
                                            {
                                              "value": "dict",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "json_format: bool",
                          "children": [
                            {
                              "value": "json_format",
                              "children": []
                            },
                            {
                              "value": "bool",
                              "children": [
                                {
                                  "value": "bool",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "max_tokens: int | None = None",
                          "children": [
                            {
                              "value": "max_tokens",
                              "children": []
                            },
                            {
                              "value": "int | None",
                              "children": [
                                {
                                  "value": "int | None",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ollama_host: str = \"localhost:11434\"",
                          "children": [
                            {
                              "value": "ollama_host",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"localhost:11434\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "localhost:11434",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tuple[str, int, int]",
                      "children": [
                        {
                          "value": "tuple[str, int, int]",
                          "children": [
                            {
                              "value": "tuple",
                              "children": []
                            },
                            {
                              "value": "[str, int, int]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "int",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "int",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "\"\"\"\n        Args:\n            api_key: API key for the LLM provider.\n            llm_model: The LLM model to use.\n            prompt: The prompt to send to the LLM.\n            json_format: Whether the response should be in JSON format.\n            max_tokens: The maximum number of tokens to generate in the chat completion.\n            ollama_host: The host for ollama to use\n\n        Returns:\n            The response from the LLM.\n            The number of tokens used in the prompt.\n            The number of tokens used in the completion.\n        \"\"\"\n        provider = llm_model.metadata.provider\n\n        if provider == \"openai\":\n            oai_client = openai.OpenAI(api_key=credentials.api_key.get_secret_value())\n            response_format = None\n\n            if llm_model in [LlmModel.O1_MINI, LlmModel.O1_PREVIEW]:\n                sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n                usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n                prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]\n            elif json_format:\n                response_format = {\"type\": \"json_object\"}\n\n            response = oai_client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"anthropic\":\n            system_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            sysprompt = \" \".join(system_messages)\n\n            messages = []\n            last_role = None\n            for p in prompt:\n                if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]\n\n            client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())\n            try:\n                resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )\n\n                if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")\n\n                return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )\n            except anthropic.APIError as e:\n                error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)\n        elif provider == \"groq\":\n            client = Groq(api_key=credentials.api_key.get_secret_value())\n            response_format = {\"type\": \"json_object\"} if json_format else None\n            response = client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"ollama\":\n            client = ollama.Client(host=ollama_host)\n            sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n            response = client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )\n            return (\n                response.get(\"response\") or \"\",\n                response.get(\"prompt_eval_count\") or 0,\n                response.get(\"eval_count\") or 0,\n            )\n        elif provider == \"open_router\":\n            client = openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )\n\n            response = client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )\n\n            # If there's no response, raise an error\n            if not response.choices:\n                if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        else:\n            raise ValueError(f\"Unsupported LLM provider: {provider}\")",
                      "children": [
                        {
                          "value": "\"\"\"\n        Args:\n            api_key: API key for the LLM provider.\n            llm_model: The LLM model to use.\n            prompt: The prompt to send to the LLM.\n            json_format: Whether the response should be in JSON format.\n            max_tokens: The maximum number of tokens to generate in the chat completion.\n            ollama_host: The host for ollama to use\n\n        Returns:\n            The response from the LLM.\n            The number of tokens used in the prompt.\n            The number of tokens used in the completion.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"\n        Args:\n            api_key: API key for the LLM provider.\n            llm_model: The LLM model to use.\n            prompt: The prompt to send to the LLM.\n            json_format: Whether the response should be in JSON format.\n            max_tokens: The maximum number of tokens to generate in the chat completion.\n            ollama_host: The host for ollama to use\n\n        Returns:\n            The response from the LLM.\n            The number of tokens used in the prompt.\n            The number of tokens used in the completion.\n        \"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Args:\n            api_key: API key for the LLM provider.\n            llm_model: The LLM model to use.\n            prompt: The prompt to send to the LLM.\n            json_format: Whether the response should be in JSON format.\n            max_tokens: The maximum number of tokens to generate in the chat completion.\n            ollama_host: The host for ollama to use\n\n        Returns:\n            The response from the LLM.\n            The number of tokens used in the prompt.\n            The number of tokens used in the completion.",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "provider = llm_model.metadata.provider",
                          "children": [
                            {
                              "value": "provider = llm_model.metadata.provider",
                              "children": [
                                {
                                  "value": "provider",
                                  "children": []
                                },
                                {
                                  "value": "llm_model.metadata.provider",
                                  "children": [
                                    {
                                      "value": "llm_model.metadata",
                                      "children": [
                                        {
                                          "value": "llm_model",
                                          "children": []
                                        },
                                        {
                                          "value": "metadata",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "provider",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if provider == \"openai\":\n            oai_client = openai.OpenAI(api_key=credentials.api_key.get_secret_value())\n            response_format = None\n\n            if llm_model in [LlmModel.O1_MINI, LlmModel.O1_PREVIEW]:\n                sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n                usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n                prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]\n            elif json_format:\n                response_format = {\"type\": \"json_object\"}\n\n            response = oai_client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"anthropic\":\n            system_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            sysprompt = \" \".join(system_messages)\n\n            messages = []\n            last_role = None\n            for p in prompt:\n                if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]\n\n            client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())\n            try:\n                resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )\n\n                if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")\n\n                return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )\n            except anthropic.APIError as e:\n                error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)\n        elif provider == \"groq\":\n            client = Groq(api_key=credentials.api_key.get_secret_value())\n            response_format = {\"type\": \"json_object\"} if json_format else None\n            response = client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        elif provider == \"ollama\":\n            client = ollama.Client(host=ollama_host)\n            sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n            response = client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )\n            return (\n                response.get(\"response\") or \"\",\n                response.get(\"prompt_eval_count\") or 0,\n                response.get(\"eval_count\") or 0,\n            )\n        elif provider == \"open_router\":\n            client = openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )\n\n            response = client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )\n\n            # If there's no response, raise an error\n            if not response.choices:\n                if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )\n        else:\n            raise ValueError(f\"Unsupported LLM provider: {provider}\")",
                          "children": [
                            {
                              "value": "provider == \"openai\"",
                              "children": [
                                {
                                  "value": "provider",
                                  "children": []
                                },
                                {
                                  "value": "\"openai\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "openai",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "oai_client = openai.OpenAI(api_key=credentials.api_key.get_secret_value())\n            response_format = None\n\n            if llm_model in [LlmModel.O1_MINI, LlmModel.O1_PREVIEW]:\n                sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n                usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n                prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]\n            elif json_format:\n                response_format = {\"type\": \"json_object\"}\n\n            response = oai_client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )",
                              "children": [
                                {
                                  "value": "oai_client = openai.OpenAI(api_key=credentials.api_key.get_secret_value())",
                                  "children": [
                                    {
                                      "value": "oai_client = openai.OpenAI(api_key=credentials.api_key.get_secret_value())",
                                      "children": [
                                        {
                                          "value": "oai_client",
                                          "children": []
                                        },
                                        {
                                          "value": "openai.OpenAI(api_key=credentials.api_key.get_secret_value())",
                                          "children": [
                                            {
                                              "value": "openai.OpenAI",
                                              "children": [
                                                {
                                                  "value": "openai",
                                                  "children": []
                                                },
                                                {
                                                  "value": "OpenAI",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(api_key=credentials.api_key.get_secret_value())",
                                              "children": [
                                                {
                                                  "value": "api_key=credentials.api_key.get_secret_value()",
                                                  "children": [
                                                    {
                                                      "value": "api_key",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "credentials.api_key.get_secret_value()",
                                                      "children": [
                                                        {
                                                          "value": "credentials.api_key.get_secret_value",
                                                          "children": [
                                                            {
                                                              "value": "credentials.api_key",
                                                              "children": [
                                                                {
                                                                  "value": "credentials",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "api_key",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "get_secret_value",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "()",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "response_format = None",
                                  "children": [
                                    {
                                      "value": "response_format = None",
                                      "children": [
                                        {
                                          "value": "response_format",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "if llm_model in [LlmModel.O1_MINI, LlmModel.O1_PREVIEW]:\n                sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n                usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n                prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]\n            elif json_format:\n                response_format = {\"type\": \"json_object\"}",
                                  "children": [
                                    {
                                      "value": "llm_model in [LlmModel.O1_MINI, LlmModel.O1_PREVIEW]",
                                      "children": [
                                        {
                                          "value": "llm_model",
                                          "children": []
                                        },
                                        {
                                          "value": "[LlmModel.O1_MINI, LlmModel.O1_PREVIEW]",
                                          "children": [
                                            {
                                              "value": "LlmModel.O1_MINI",
                                              "children": [
                                                {
                                                  "value": "LlmModel",
                                                  "children": []
                                                },
                                                {
                                                  "value": "O1_MINI",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "LlmModel.O1_PREVIEW",
                                              "children": [
                                                {
                                                  "value": "LlmModel",
                                                  "children": []
                                                },
                                                {
                                                  "value": "O1_PREVIEW",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n                usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n                prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]",
                                      "children": [
                                        {
                                          "value": "sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]",
                                          "children": [
                                            {
                                              "value": "sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]",
                                              "children": [
                                                {
                                                  "value": "sys_messages",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]",
                                                  "children": [
                                                    {
                                                      "value": "p[\"content\"]",
                                                      "children": [
                                                        {
                                                          "value": "p",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"content\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "content",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for p in prompt",
                                                      "children": [
                                                        {
                                                          "value": "p",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "prompt",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "if p[\"role\"] == \"system\"",
                                                      "children": [
                                                        {
                                                          "value": "p[\"role\"] == \"system\"",
                                                          "children": [
                                                            {
                                                              "value": "p[\"role\"]",
                                                              "children": [
                                                                {
                                                                  "value": "p",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"role\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "role",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"system\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "system",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]",
                                          "children": [
                                            {
                                              "value": "usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]",
                                              "children": [
                                                {
                                                  "value": "usr_messages",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]",
                                                  "children": [
                                                    {
                                                      "value": "p[\"content\"]",
                                                      "children": [
                                                        {
                                                          "value": "p",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"content\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "content",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for p in prompt",
                                                      "children": [
                                                        {
                                                          "value": "p",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "prompt",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "if p[\"role\"] != \"system\"",
                                                      "children": [
                                                        {
                                                          "value": "p[\"role\"] != \"system\"",
                                                          "children": [
                                                            {
                                                              "value": "p[\"role\"]",
                                                              "children": [
                                                                {
                                                                  "value": "p",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"role\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "role",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"system\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "system",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]",
                                          "children": [
                                            {
                                              "value": "prompt = [\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]",
                                              "children": [
                                                {
                                                  "value": "prompt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[\n                    {\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)},\n                    {\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)},\n                ]",
                                                  "children": [
                                                    {
                                                      "value": "{\"role\": \"user\", \"content\": \"\\n\".join(sys_messages)}",
                                                      "children": [
                                                        {
                                                          "value": "\"role\": \"user\"",
                                                          "children": [
                                                            {
                                                              "value": "\"role\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "role",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"user\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "user",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"content\": \"\\n\".join(sys_messages)",
                                                          "children": [
                                                            {
                                                              "value": "\"content\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "content",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"\\n\".join(sys_messages)",
                                                              "children": [
                                                                {
                                                                  "value": "\"\\n\".join",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"\\n\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\\n",
                                                                          "children": [
                                                                            {
                                                                              "value": "\\n",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "join",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "(sys_messages)",
                                                                  "children": [
                                                                    {
                                                                      "value": "sys_messages",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "{\"role\": \"user\", \"content\": \"\\n\".join(usr_messages)}",
                                                      "children": [
                                                        {
                                                          "value": "\"role\": \"user\"",
                                                          "children": [
                                                            {
                                                              "value": "\"role\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "role",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"user\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "user",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"content\": \"\\n\".join(usr_messages)",
                                                          "children": [
                                                            {
                                                              "value": "\"content\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "content",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"\\n\".join(usr_messages)",
                                                              "children": [
                                                                {
                                                                  "value": "\"\\n\".join",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"\\n\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\\n",
                                                                          "children": [
                                                                            {
                                                                              "value": "\\n",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "join",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "(usr_messages)",
                                                                  "children": [
                                                                    {
                                                                      "value": "usr_messages",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "elif json_format:\n                response_format = {\"type\": \"json_object\"}",
                                      "children": [
                                        {
                                          "value": "json_format",
                                          "children": []
                                        },
                                        {
                                          "value": "response_format = {\"type\": \"json_object\"}",
                                          "children": [
                                            {
                                              "value": "response_format = {\"type\": \"json_object\"}",
                                              "children": [
                                                {
                                                  "value": "response_format = {\"type\": \"json_object\"}",
                                                  "children": [
                                                    {
                                                      "value": "response_format",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{\"type\": \"json_object\"}",
                                                      "children": [
                                                        {
                                                          "value": "\"type\": \"json_object\"",
                                                          "children": [
                                                            {
                                                              "value": "\"type\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "type",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"json_object\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "json_object",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "response = oai_client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )",
                                  "children": [
                                    {
                                      "value": "response = oai_client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )",
                                      "children": [
                                        {
                                          "value": "response",
                                          "children": []
                                        },
                                        {
                                          "value": "oai_client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )",
                                          "children": [
                                            {
                                              "value": "oai_client.chat.completions.create",
                                              "children": [
                                                {
                                                  "value": "oai_client.chat.completions",
                                                  "children": [
                                                    {
                                                      "value": "oai_client.chat",
                                                      "children": [
                                                        {
                                                          "value": "oai_client",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "chat",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "completions",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "create",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_completion_tokens=max_tokens,\n            )",
                                              "children": [
                                                {
                                                  "value": "model=llm_model.value",
                                                  "children": [
                                                    {
                                                      "value": "model",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "llm_model.value",
                                                      "children": [
                                                        {
                                                          "value": "llm_model",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "value",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "messages=prompt",
                                                  "children": [
                                                    {
                                                      "value": "messages",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "prompt",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "# type: ignore",
                                                  "children": []
                                                },
                                                {
                                                  "value": "response_format=response_format",
                                                  "children": [
                                                    {
                                                      "value": "response_format",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "response_format",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "# type: ignore",
                                                  "children": []
                                                },
                                                {
                                                  "value": "max_completion_tokens=max_tokens",
                                                  "children": [
                                                    {
                                                      "value": "max_completion_tokens",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "max_tokens",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )",
                                  "children": [
                                    {
                                      "value": "(\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )",
                                      "children": [
                                        {
                                          "value": "response.choices[0].message.content or \"\"",
                                          "children": [
                                            {
                                              "value": "response.choices[0].message.content",
                                              "children": [
                                                {
                                                  "value": "response.choices[0].message",
                                                  "children": [
                                                    {
                                                      "value": "response.choices[0]",
                                                      "children": [
                                                        {
                                                          "value": "response.choices",
                                                          "children": [
                                                            {
                                                              "value": "response",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "choices",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "0",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "message",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "content",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "response.usage.prompt_tokens if response.usage else 0",
                                          "children": [
                                            {
                                              "value": "response.usage.prompt_tokens",
                                              "children": [
                                                {
                                                  "value": "response.usage",
                                                  "children": [
                                                    {
                                                      "value": "response",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "usage",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prompt_tokens",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "response.usage",
                                              "children": [
                                                {
                                                  "value": "response",
                                                  "children": []
                                                },
                                                {
                                                  "value": "usage",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "0",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "response.usage.completion_tokens if response.usage else 0",
                                          "children": [
                                            {
                                              "value": "response.usage.completion_tokens",
                                              "children": [
                                                {
                                                  "value": "response.usage",
                                                  "children": [
                                                    {
                                                      "value": "response",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "usage",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "completion_tokens",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "response.usage",
                                              "children": [
                                                {
                                                  "value": "response",
                                                  "children": []
                                                },
                                                {
                                                  "value": "usage",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "0",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif provider == \"anthropic\":\n            system_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            sysprompt = \" \".join(system_messages)\n\n            messages = []\n            last_role = None\n            for p in prompt:\n                if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]\n\n            client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())\n            try:\n                resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )\n\n                if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")\n\n                return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )\n            except anthropic.APIError as e:\n                error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)",
                              "children": [
                                {
                                  "value": "provider == \"anthropic\"",
                                  "children": [
                                    {
                                      "value": "provider",
                                      "children": []
                                    },
                                    {
                                      "value": "\"anthropic\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "anthropic",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "system_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            sysprompt = \" \".join(system_messages)\n\n            messages = []\n            last_role = None\n            for p in prompt:\n                if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]\n\n            client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())\n            try:\n                resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )\n\n                if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")\n\n                return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )\n            except anthropic.APIError as e:\n                error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)",
                                  "children": [
                                    {
                                      "value": "system_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]",
                                      "children": [
                                        {
                                          "value": "system_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]",
                                          "children": [
                                            {
                                              "value": "system_messages",
                                              "children": []
                                            },
                                            {
                                              "value": "[p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]",
                                              "children": [
                                                {
                                                  "value": "p[\"content\"]",
                                                  "children": [
                                                    {
                                                      "value": "p",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"content\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "content",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "for p in prompt",
                                                  "children": [
                                                    {
                                                      "value": "p",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "prompt",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "if p[\"role\"] == \"system\"",
                                                  "children": [
                                                    {
                                                      "value": "p[\"role\"] == \"system\"",
                                                      "children": [
                                                        {
                                                          "value": "p[\"role\"]",
                                                          "children": [
                                                            {
                                                              "value": "p",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"role\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "role",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"system\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "system",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "sysprompt = \" \".join(system_messages)",
                                      "children": [
                                        {
                                          "value": "sysprompt = \" \".join(system_messages)",
                                          "children": [
                                            {
                                              "value": "sysprompt",
                                              "children": []
                                            },
                                            {
                                              "value": "\" \".join(system_messages)",
                                              "children": [
                                                {
                                                  "value": "\" \".join",
                                                  "children": [
                                                    {
                                                      "value": "\" \"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "join",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(system_messages)",
                                                  "children": [
                                                    {
                                                      "value": "system_messages",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "messages = []",
                                      "children": [
                                        {
                                          "value": "messages = []",
                                          "children": [
                                            {
                                              "value": "messages",
                                              "children": []
                                            },
                                            {
                                              "value": "[]",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "last_role = None",
                                      "children": [
                                        {
                                          "value": "last_role = None",
                                          "children": [
                                            {
                                              "value": "last_role",
                                              "children": []
                                            },
                                            {
                                              "value": "None",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for p in prompt:\n                if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]",
                                      "children": [
                                        {
                                          "value": "p",
                                          "children": []
                                        },
                                        {
                                          "value": "prompt",
                                          "children": []
                                        },
                                        {
                                          "value": "if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]",
                                          "children": [
                                            {
                                              "value": "if p[\"role\"] in [\"user\", \"assistant\"]:\n                    if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]",
                                              "children": [
                                                {
                                                  "value": "p[\"role\"] in [\"user\", \"assistant\"]",
                                                  "children": [
                                                    {
                                                      "value": "p[\"role\"]",
                                                      "children": [
                                                        {
                                                          "value": "p",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"role\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "role",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "[\"user\", \"assistant\"]",
                                                      "children": [
                                                        {
                                                          "value": "\"user\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "user",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"assistant\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "assistant",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]",
                                                  "children": [
                                                    {
                                                      "value": "if p[\"role\"] != last_role:\n                        messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]\n                    else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]",
                                                      "children": [
                                                        {
                                                          "value": "p[\"role\"] != last_role",
                                                          "children": [
                                                            {
                                                              "value": "p[\"role\"]",
                                                              "children": [
                                                                {
                                                                  "value": "p",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"role\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "role",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "last_role",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})\n                        last_role = p[\"role\"]",
                                                          "children": [
                                                            {
                                                              "value": "messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})",
                                                              "children": [
                                                                {
                                                                  "value": "messages.append({\"role\": p[\"role\"], \"content\": p[\"content\"]})",
                                                                  "children": [
                                                                    {
                                                                      "value": "messages.append",
                                                                      "children": [
                                                                        {
                                                                          "value": "messages",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "append",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "({\"role\": p[\"role\"], \"content\": p[\"content\"]})",
                                                                      "children": [
                                                                        {
                                                                          "value": "{\"role\": p[\"role\"], \"content\": p[\"content\"]}",
                                                                          "children": [
                                                                            {
                                                                              "value": "\"role\": p[\"role\"]",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\"role\"",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "\"",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "role",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "\"",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "p[\"role\"]",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "p",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "\"role\"",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "\"",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "role",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "\"",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "\"content\": p[\"content\"]",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\"content\"",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "\"",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "content",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "\"",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "p[\"content\"]",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "p",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "\"content\"",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "\"",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "content",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "\"",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "last_role = p[\"role\"]",
                                                              "children": [
                                                                {
                                                                  "value": "last_role = p[\"role\"]",
                                                                  "children": [
                                                                    {
                                                                      "value": "last_role",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "p[\"role\"]",
                                                                      "children": [
                                                                        {
                                                                          "value": "p",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"role\"",
                                                                          "children": [
                                                                            {
                                                                              "value": "\"",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "role",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "\"",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "else:\n                        # If the role is the same as the last one, combine the content\n                        messages[-1][\"content\"] += \"\\n\" + p[\"content\"]",
                                                          "children": [
                                                            {
                                                              "value": "# If the role is the same as the last one, combine the content",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "messages[-1][\"content\"] += \"\\n\" + p[\"content\"]",
                                                              "children": [
                                                                {
                                                                  "value": "messages[-1][\"content\"] += \"\\n\" + p[\"content\"]",
                                                                  "children": [
                                                                    {
                                                                      "value": "messages[-1][\"content\"] += \"\\n\" + p[\"content\"]",
                                                                      "children": [
                                                                        {
                                                                          "value": "messages[-1][\"content\"]",
                                                                          "children": [
                                                                            {
                                                                              "value": "messages[-1]",
                                                                              "children": [
                                                                                {
                                                                                  "value": "messages",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "-1",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "1",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "\"content\"",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "content",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "\"\\n\" + p[\"content\"]",
                                                                          "children": [
                                                                            {
                                                                              "value": "\"\\n\"",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "\\n",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "\\n",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "p[\"content\"]",
                                                                              "children": [
                                                                                {
                                                                                  "value": "p",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "\"content\"",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "\"",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "content",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "\"",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())",
                                      "children": [
                                        {
                                          "value": "client = anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())",
                                          "children": [
                                            {
                                              "value": "client",
                                              "children": []
                                            },
                                            {
                                              "value": "anthropic.Anthropic(api_key=credentials.api_key.get_secret_value())",
                                              "children": [
                                                {
                                                  "value": "anthropic.Anthropic",
                                                  "children": [
                                                    {
                                                      "value": "anthropic",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Anthropic",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(api_key=credentials.api_key.get_secret_value())",
                                                  "children": [
                                                    {
                                                      "value": "api_key=credentials.api_key.get_secret_value()",
                                                      "children": [
                                                        {
                                                          "value": "api_key",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "credentials.api_key.get_secret_value()",
                                                          "children": [
                                                            {
                                                              "value": "credentials.api_key.get_secret_value",
                                                              "children": [
                                                                {
                                                                  "value": "credentials.api_key",
                                                                  "children": [
                                                                    {
                                                                      "value": "credentials",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "api_key",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "get_secret_value",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "try:\n                resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )\n\n                if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")\n\n                return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )\n            except anthropic.APIError as e:\n                error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)",
                                      "children": [
                                        {
                                          "value": "resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )\n\n                if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")\n\n                return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )",
                                          "children": [
                                            {
                                              "value": "resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )",
                                              "children": [
                                                {
                                                  "value": "resp = client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )",
                                                  "children": [
                                                    {
                                                      "value": "resp",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "client.messages.create(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )",
                                                      "children": [
                                                        {
                                                          "value": "client.messages.create",
                                                          "children": [
                                                            {
                                                              "value": "client.messages",
                                                              "children": [
                                                                {
                                                                  "value": "client",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "messages",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "create",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(\n                    model=llm_model.value,\n                    system=sysprompt,\n                    messages=messages,\n                    max_tokens=max_tokens or 8192,\n                )",
                                                          "children": [
                                                            {
                                                              "value": "model=llm_model.value",
                                                              "children": [
                                                                {
                                                                  "value": "model",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "llm_model.value",
                                                                  "children": [
                                                                    {
                                                                      "value": "llm_model",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "value",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "system=sysprompt",
                                                              "children": [
                                                                {
                                                                  "value": "system",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "sysprompt",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "messages=messages",
                                                              "children": [
                                                                {
                                                                  "value": "messages",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "messages",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "max_tokens=max_tokens or 8192",
                                                              "children": [
                                                                {
                                                                  "value": "max_tokens",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "max_tokens or 8192",
                                                                  "children": [
                                                                    {
                                                                      "value": "max_tokens",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "8192",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "if not resp.content:\n                    raise ValueError(\"No content returned from Anthropic.\")",
                                              "children": [
                                                {
                                                  "value": "not resp.content",
                                                  "children": [
                                                    {
                                                      "value": "resp.content",
                                                      "children": [
                                                        {
                                                          "value": "resp",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "content",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "raise ValueError(\"No content returned from Anthropic.\")",
                                                  "children": [
                                                    {
                                                      "value": "raise ValueError(\"No content returned from Anthropic.\")",
                                                      "children": [
                                                        {
                                                          "value": "ValueError(\"No content returned from Anthropic.\")",
                                                          "children": [
                                                            {
                                                              "value": "ValueError",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(\"No content returned from Anthropic.\")",
                                                              "children": [
                                                                {
                                                                  "value": "\"No content returned from Anthropic.\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "No content returned from Anthropic.",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "return (\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )",
                                              "children": [
                                                {
                                                  "value": "(\n                    (\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    ),\n                    resp.usage.input_tokens,\n                    resp.usage.output_tokens,\n                )",
                                                  "children": [
                                                    {
                                                      "value": "(\n                        resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "resp.content[0].name\n                        if isinstance(resp.content[0], anthropic.types.ToolUseBlock)\n                        else resp.content[0].text",
                                                          "children": [
                                                            {
                                                              "value": "resp.content[0].name",
                                                              "children": [
                                                                {
                                                                  "value": "resp.content[0]",
                                                                  "children": [
                                                                    {
                                                                      "value": "resp.content",
                                                                      "children": [
                                                                        {
                                                                          "value": "resp",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "content",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "0",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "name",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "isinstance(resp.content[0], anthropic.types.ToolUseBlock)",
                                                              "children": [
                                                                {
                                                                  "value": "isinstance",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(resp.content[0], anthropic.types.ToolUseBlock)",
                                                                  "children": [
                                                                    {
                                                                      "value": "resp.content[0]",
                                                                      "children": [
                                                                        {
                                                                          "value": "resp.content",
                                                                          "children": [
                                                                            {
                                                                              "value": "resp",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "content",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "0",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "anthropic.types.ToolUseBlock",
                                                                      "children": [
                                                                        {
                                                                          "value": "anthropic.types",
                                                                          "children": [
                                                                            {
                                                                              "value": "anthropic",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "types",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "ToolUseBlock",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "resp.content[0].text",
                                                              "children": [
                                                                {
                                                                  "value": "resp.content[0]",
                                                                  "children": [
                                                                    {
                                                                      "value": "resp.content",
                                                                      "children": [
                                                                        {
                                                                          "value": "resp",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "content",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "0",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "text",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "resp.usage.input_tokens",
                                                      "children": [
                                                        {
                                                          "value": "resp.usage",
                                                          "children": [
                                                            {
                                                              "value": "resp",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "usage",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "input_tokens",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "resp.usage.output_tokens",
                                                      "children": [
                                                        {
                                                          "value": "resp.usage",
                                                          "children": [
                                                            {
                                                              "value": "resp",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "usage",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "output_tokens",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "except anthropic.APIError as e:\n                error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)",
                                          "children": [
                                            {
                                              "value": "anthropic.APIError as e",
                                              "children": [
                                                {
                                                  "value": "anthropic.APIError",
                                                  "children": [
                                                    {
                                                      "value": "anthropic",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "APIError",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "e",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "error_message = f\"Anthropic API error: {str(e)}\"\n                logger.error(error_message)\n                raise ValueError(error_message)",
                                              "children": [
                                                {
                                                  "value": "error_message = f\"Anthropic API error: {str(e)}\"",
                                                  "children": [
                                                    {
                                                      "value": "error_message = f\"Anthropic API error: {str(e)}\"",
                                                      "children": [
                                                        {
                                                          "value": "error_message",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "f\"Anthropic API error: {str(e)}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Anthropic API error:",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{str(e)}",
                                                              "children": [
                                                                {
                                                                  "value": "str(e)",
                                                                  "children": [
                                                                    {
                                                                      "value": "str",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "(e)",
                                                                      "children": [
                                                                        {
                                                                          "value": "e",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "logger.error(error_message)",
                                                  "children": [
                                                    {
                                                      "value": "logger.error(error_message)",
                                                      "children": [
                                                        {
                                                          "value": "logger.error",
                                                          "children": [
                                                            {
                                                              "value": "logger",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "error",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(error_message)",
                                                          "children": [
                                                            {
                                                              "value": "error_message",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "raise ValueError(error_message)",
                                                  "children": [
                                                    {
                                                      "value": "ValueError(error_message)",
                                                      "children": [
                                                        {
                                                          "value": "ValueError",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(error_message)",
                                                          "children": [
                                                            {
                                                              "value": "error_message",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif provider == \"groq\":\n            client = Groq(api_key=credentials.api_key.get_secret_value())\n            response_format = {\"type\": \"json_object\"} if json_format else None\n            response = client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )",
                              "children": [
                                {
                                  "value": "provider == \"groq\"",
                                  "children": [
                                    {
                                      "value": "provider",
                                      "children": []
                                    },
                                    {
                                      "value": "\"groq\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "groq",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "client = Groq(api_key=credentials.api_key.get_secret_value())\n            response_format = {\"type\": \"json_object\"} if json_format else None\n            response = client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )",
                                  "children": [
                                    {
                                      "value": "client = Groq(api_key=credentials.api_key.get_secret_value())",
                                      "children": [
                                        {
                                          "value": "client = Groq(api_key=credentials.api_key.get_secret_value())",
                                          "children": [
                                            {
                                              "value": "client",
                                              "children": []
                                            },
                                            {
                                              "value": "Groq(api_key=credentials.api_key.get_secret_value())",
                                              "children": [
                                                {
                                                  "value": "Groq",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(api_key=credentials.api_key.get_secret_value())",
                                                  "children": [
                                                    {
                                                      "value": "api_key=credentials.api_key.get_secret_value()",
                                                      "children": [
                                                        {
                                                          "value": "api_key",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "credentials.api_key.get_secret_value()",
                                                          "children": [
                                                            {
                                                              "value": "credentials.api_key.get_secret_value",
                                                              "children": [
                                                                {
                                                                  "value": "credentials.api_key",
                                                                  "children": [
                                                                    {
                                                                      "value": "credentials",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "api_key",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "get_secret_value",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "response_format = {\"type\": \"json_object\"} if json_format else None",
                                      "children": [
                                        {
                                          "value": "response_format = {\"type\": \"json_object\"} if json_format else None",
                                          "children": [
                                            {
                                              "value": "response_format",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"type\": \"json_object\"} if json_format else None",
                                              "children": [
                                                {
                                                  "value": "{\"type\": \"json_object\"}",
                                                  "children": [
                                                    {
                                                      "value": "\"type\": \"json_object\"",
                                                      "children": [
                                                        {
                                                          "value": "\"type\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "type",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"json_object\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "json_object",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "json_format",
                                                  "children": []
                                                },
                                                {
                                                  "value": "None",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "response = client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )",
                                      "children": [
                                        {
                                          "value": "response = client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )",
                                          "children": [
                                            {
                                              "value": "response",
                                              "children": []
                                            },
                                            {
                                              "value": "client.chat.completions.create(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )",
                                              "children": [
                                                {
                                                  "value": "client.chat.completions.create",
                                                  "children": [
                                                    {
                                                      "value": "client.chat.completions",
                                                      "children": [
                                                        {
                                                          "value": "client.chat",
                                                          "children": [
                                                            {
                                                              "value": "client",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "chat",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "completions",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "create",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                response_format=response_format,  # type: ignore\n                max_tokens=max_tokens,\n            )",
                                                  "children": [
                                                    {
                                                      "value": "model=llm_model.value",
                                                      "children": [
                                                        {
                                                          "value": "model",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "llm_model.value",
                                                          "children": [
                                                            {
                                                              "value": "llm_model",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "value",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "messages=prompt",
                                                      "children": [
                                                        {
                                                          "value": "messages",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "prompt",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "# type: ignore",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "response_format=response_format",
                                                      "children": [
                                                        {
                                                          "value": "response_format",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "response_format",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "# type: ignore",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "max_tokens=max_tokens",
                                                      "children": [
                                                        {
                                                          "value": "max_tokens",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "max_tokens",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )",
                                      "children": [
                                        {
                                          "value": "(\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )",
                                          "children": [
                                            {
                                              "value": "response.choices[0].message.content or \"\"",
                                              "children": [
                                                {
                                                  "value": "response.choices[0].message.content",
                                                  "children": [
                                                    {
                                                      "value": "response.choices[0].message",
                                                      "children": [
                                                        {
                                                          "value": "response.choices[0]",
                                                          "children": [
                                                            {
                                                              "value": "response.choices",
                                                              "children": [
                                                                {
                                                                  "value": "response",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "choices",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "0",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "message",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "content",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "response.usage.prompt_tokens if response.usage else 0",
                                              "children": [
                                                {
                                                  "value": "response.usage.prompt_tokens",
                                                  "children": [
                                                    {
                                                      "value": "response.usage",
                                                      "children": [
                                                        {
                                                          "value": "response",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "usage",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "prompt_tokens",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "response.usage",
                                                  "children": [
                                                    {
                                                      "value": "response",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "usage",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "response.usage.completion_tokens if response.usage else 0",
                                              "children": [
                                                {
                                                  "value": "response.usage.completion_tokens",
                                                  "children": [
                                                    {
                                                      "value": "response.usage",
                                                      "children": [
                                                        {
                                                          "value": "response",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "usage",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "completion_tokens",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "response.usage",
                                                  "children": [
                                                    {
                                                      "value": "response",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "usage",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif provider == \"ollama\":\n            client = ollama.Client(host=ollama_host)\n            sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n            response = client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )\n            return (\n                response.get(\"response\") or \"\",\n                response.get(\"prompt_eval_count\") or 0,\n                response.get(\"eval_count\") or 0,\n            )",
                              "children": [
                                {
                                  "value": "provider == \"ollama\"",
                                  "children": [
                                    {
                                      "value": "provider",
                                      "children": []
                                    },
                                    {
                                      "value": "\"ollama\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "ollama",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "client = ollama.Client(host=ollama_host)\n            sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]\n            usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]\n            response = client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )\n            return (\n                response.get(\"response\") or \"\",\n                response.get(\"prompt_eval_count\") or 0,\n                response.get(\"eval_count\") or 0,\n            )",
                                  "children": [
                                    {
                                      "value": "client = ollama.Client(host=ollama_host)",
                                      "children": [
                                        {
                                          "value": "client = ollama.Client(host=ollama_host)",
                                          "children": [
                                            {
                                              "value": "client",
                                              "children": []
                                            },
                                            {
                                              "value": "ollama.Client(host=ollama_host)",
                                              "children": [
                                                {
                                                  "value": "ollama.Client",
                                                  "children": [
                                                    {
                                                      "value": "ollama",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Client",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(host=ollama_host)",
                                                  "children": [
                                                    {
                                                      "value": "host=ollama_host",
                                                      "children": [
                                                        {
                                                          "value": "host",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ollama_host",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]",
                                      "children": [
                                        {
                                          "value": "sys_messages = [p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]",
                                          "children": [
                                            {
                                              "value": "sys_messages",
                                              "children": []
                                            },
                                            {
                                              "value": "[p[\"content\"] for p in prompt if p[\"role\"] == \"system\"]",
                                              "children": [
                                                {
                                                  "value": "p[\"content\"]",
                                                  "children": [
                                                    {
                                                      "value": "p",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"content\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "content",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "for p in prompt",
                                                  "children": [
                                                    {
                                                      "value": "p",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "prompt",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "if p[\"role\"] == \"system\"",
                                                  "children": [
                                                    {
                                                      "value": "p[\"role\"] == \"system\"",
                                                      "children": [
                                                        {
                                                          "value": "p[\"role\"]",
                                                          "children": [
                                                            {
                                                              "value": "p",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"role\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "role",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"system\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "system",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]",
                                      "children": [
                                        {
                                          "value": "usr_messages = [p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]",
                                          "children": [
                                            {
                                              "value": "usr_messages",
                                              "children": []
                                            },
                                            {
                                              "value": "[p[\"content\"] for p in prompt if p[\"role\"] != \"system\"]",
                                              "children": [
                                                {
                                                  "value": "p[\"content\"]",
                                                  "children": [
                                                    {
                                                      "value": "p",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"content\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "content",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "for p in prompt",
                                                  "children": [
                                                    {
                                                      "value": "p",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "prompt",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "if p[\"role\"] != \"system\"",
                                                  "children": [
                                                    {
                                                      "value": "p[\"role\"] != \"system\"",
                                                      "children": [
                                                        {
                                                          "value": "p[\"role\"]",
                                                          "children": [
                                                            {
                                                              "value": "p",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"role\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "role",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"system\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "system",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "response = client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )",
                                      "children": [
                                        {
                                          "value": "response = client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )",
                                          "children": [
                                            {
                                              "value": "response",
                                              "children": []
                                            },
                                            {
                                              "value": "client.generate(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )",
                                              "children": [
                                                {
                                                  "value": "client.generate",
                                                  "children": [
                                                    {
                                                      "value": "client",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "generate",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                model=llm_model.value,\n                prompt=f\"{sys_messages}\\n\\n{usr_messages}\",\n                stream=False,\n            )",
                                                  "children": [
                                                    {
                                                      "value": "model=llm_model.value",
                                                      "children": [
                                                        {
                                                          "value": "model",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "llm_model.value",
                                                          "children": [
                                                            {
                                                              "value": "llm_model",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "value",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "prompt=f\"{sys_messages}\\n\\n{usr_messages}\"",
                                                      "children": [
                                                        {
                                                          "value": "prompt",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "f\"{sys_messages}\\n\\n{usr_messages}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{sys_messages}",
                                                              "children": [
                                                                {
                                                                  "value": "sys_messages",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\\n\\n",
                                                              "children": [
                                                                {
                                                                  "value": "\\n",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\\n",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{usr_messages}",
                                                              "children": [
                                                                {
                                                                  "value": "usr_messages",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "stream=False",
                                                      "children": [
                                                        {
                                                          "value": "stream",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "False",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "return (\n                response.get(\"response\") or \"\",\n                response.get(\"prompt_eval_count\") or 0,\n                response.get(\"eval_count\") or 0,\n            )",
                                      "children": [
                                        {
                                          "value": "(\n                response.get(\"response\") or \"\",\n                response.get(\"prompt_eval_count\") or 0,\n                response.get(\"eval_count\") or 0,\n            )",
                                          "children": [
                                            {
                                              "value": "response.get(\"response\") or \"\"",
                                              "children": [
                                                {
                                                  "value": "response.get(\"response\")",
                                                  "children": [
                                                    {
                                                      "value": "response.get",
                                                      "children": [
                                                        {
                                                          "value": "response",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "get",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\"response\")",
                                                      "children": [
                                                        {
                                                          "value": "\"response\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "response",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "response.get(\"prompt_eval_count\") or 0",
                                              "children": [
                                                {
                                                  "value": "response.get(\"prompt_eval_count\")",
                                                  "children": [
                                                    {
                                                      "value": "response.get",
                                                      "children": [
                                                        {
                                                          "value": "response",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "get",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\"prompt_eval_count\")",
                                                      "children": [
                                                        {
                                                          "value": "\"prompt_eval_count\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "prompt_eval_count",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "response.get(\"eval_count\") or 0",
                                              "children": [
                                                {
                                                  "value": "response.get(\"eval_count\")",
                                                  "children": [
                                                    {
                                                      "value": "response.get",
                                                      "children": [
                                                        {
                                                          "value": "response",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "get",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\"eval_count\")",
                                                      "children": [
                                                        {
                                                          "value": "\"eval_count\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "eval_count",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif provider == \"open_router\":\n            client = openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )\n\n            response = client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )\n\n            # If there's no response, raise an error\n            if not response.choices:\n                if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )",
                              "children": [
                                {
                                  "value": "provider == \"open_router\"",
                                  "children": [
                                    {
                                      "value": "provider",
                                      "children": []
                                    },
                                    {
                                      "value": "\"open_router\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "open_router",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "client = openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )\n\n            response = client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )\n\n            # If there's no response, raise an error\n            if not response.choices:\n                if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")\n\n            return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )",
                                  "children": [
                                    {
                                      "value": "client = openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )",
                                      "children": [
                                        {
                                          "value": "client = openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )",
                                          "children": [
                                            {
                                              "value": "client",
                                              "children": []
                                            },
                                            {
                                              "value": "openai.OpenAI(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )",
                                              "children": [
                                                {
                                                  "value": "openai.OpenAI",
                                                  "children": [
                                                    {
                                                      "value": "openai",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "OpenAI",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                base_url=\"https://openrouter.ai/api/v1\",\n                api_key=credentials.api_key.get_secret_value(),\n            )",
                                                  "children": [
                                                    {
                                                      "value": "base_url=\"https://openrouter.ai/api/v1\"",
                                                      "children": [
                                                        {
                                                          "value": "base_url",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"https://openrouter.ai/api/v1\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "https://openrouter.ai/api/v1",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "api_key=credentials.api_key.get_secret_value()",
                                                      "children": [
                                                        {
                                                          "value": "api_key",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "credentials.api_key.get_secret_value()",
                                                          "children": [
                                                            {
                                                              "value": "credentials.api_key.get_secret_value",
                                                              "children": [
                                                                {
                                                                  "value": "credentials.api_key",
                                                                  "children": [
                                                                    {
                                                                      "value": "credentials",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "api_key",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "get_secret_value",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "response = client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )",
                                      "children": [
                                        {
                                          "value": "response = client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )",
                                          "children": [
                                            {
                                              "value": "response",
                                              "children": []
                                            },
                                            {
                                              "value": "client.chat.completions.create(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )",
                                              "children": [
                                                {
                                                  "value": "client.chat.completions.create",
                                                  "children": [
                                                    {
                                                      "value": "client.chat.completions",
                                                      "children": [
                                                        {
                                                          "value": "client.chat",
                                                          "children": [
                                                            {
                                                              "value": "client",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "chat",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "completions",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "create",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                },\n                model=llm_model.value,\n                messages=prompt,  # type: ignore\n                max_tokens=max_tokens,\n            )",
                                                  "children": [
                                                    {
                                                      "value": "extra_headers={\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                }",
                                                      "children": [
                                                        {
                                                          "value": "extra_headers",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{\n                    \"HTTP-Referer\": \"https://agpt.co\",\n                    \"X-Title\": \"AutoGPT\",\n                }",
                                                          "children": [
                                                            {
                                                              "value": "\"HTTP-Referer\": \"https://agpt.co\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"HTTP-Referer\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "HTTP-Referer",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"https://agpt.co\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "https://agpt.co",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"X-Title\": \"AutoGPT\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"X-Title\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "X-Title",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"AutoGPT\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "AutoGPT",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "model=llm_model.value",
                                                      "children": [
                                                        {
                                                          "value": "model",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "llm_model.value",
                                                          "children": [
                                                            {
                                                              "value": "llm_model",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "value",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "messages=prompt",
                                                      "children": [
                                                        {
                                                          "value": "messages",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "prompt",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "# type: ignore",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "max_tokens=max_tokens",
                                                      "children": [
                                                        {
                                                          "value": "max_tokens",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "max_tokens",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# If there's no response, raise an error",
                                      "children": []
                                    },
                                    {
                                      "value": "if not response.choices:\n                if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")",
                                      "children": [
                                        {
                                          "value": "not response.choices",
                                          "children": [
                                            {
                                              "value": "response.choices",
                                              "children": [
                                                {
                                                  "value": "response",
                                                  "children": []
                                                },
                                                {
                                                  "value": "choices",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")",
                                          "children": [
                                            {
                                              "value": "if response:\n                    raise ValueError(f\"OpenRouter error: {response}\")\n                else:\n                    raise ValueError(\"No response from OpenRouter.\")",
                                              "children": [
                                                {
                                                  "value": "response",
                                                  "children": []
                                                },
                                                {
                                                  "value": "raise ValueError(f\"OpenRouter error: {response}\")",
                                                  "children": [
                                                    {
                                                      "value": "raise ValueError(f\"OpenRouter error: {response}\")",
                                                      "children": [
                                                        {
                                                          "value": "ValueError(f\"OpenRouter error: {response}\")",
                                                          "children": [
                                                            {
                                                              "value": "ValueError",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(f\"OpenRouter error: {response}\")",
                                                              "children": [
                                                                {
                                                                  "value": "f\"OpenRouter error: {response}\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "f\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "OpenRouter error:",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "{response}",
                                                                      "children": [
                                                                        {
                                                                          "value": "response",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "else:\n                    raise ValueError(\"No response from OpenRouter.\")",
                                                  "children": [
                                                    {
                                                      "value": "raise ValueError(\"No response from OpenRouter.\")",
                                                      "children": [
                                                        {
                                                          "value": "raise ValueError(\"No response from OpenRouter.\")",
                                                          "children": [
                                                            {
                                                              "value": "ValueError(\"No response from OpenRouter.\")",
                                                              "children": [
                                                                {
                                                                  "value": "ValueError",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(\"No response from OpenRouter.\")",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"No response from OpenRouter.\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "No response from OpenRouter.",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "return (\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )",
                                      "children": [
                                        {
                                          "value": "(\n                response.choices[0].message.content or \"\",\n                response.usage.prompt_tokens if response.usage else 0,\n                response.usage.completion_tokens if response.usage else 0,\n            )",
                                          "children": [
                                            {
                                              "value": "response.choices[0].message.content or \"\"",
                                              "children": [
                                                {
                                                  "value": "response.choices[0].message.content",
                                                  "children": [
                                                    {
                                                      "value": "response.choices[0].message",
                                                      "children": [
                                                        {
                                                          "value": "response.choices[0]",
                                                          "children": [
                                                            {
                                                              "value": "response.choices",
                                                              "children": [
                                                                {
                                                                  "value": "response",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "choices",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "0",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "message",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "content",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "response.usage.prompt_tokens if response.usage else 0",
                                              "children": [
                                                {
                                                  "value": "response.usage.prompt_tokens",
                                                  "children": [
                                                    {
                                                      "value": "response.usage",
                                                      "children": [
                                                        {
                                                          "value": "response",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "usage",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "prompt_tokens",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "response.usage",
                                                  "children": [
                                                    {
                                                      "value": "response",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "usage",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "response.usage.completion_tokens if response.usage else 0",
                                              "children": [
                                                {
                                                  "value": "response.usage.completion_tokens",
                                                  "children": [
                                                    {
                                                      "value": "response.usage",
                                                      "children": [
                                                        {
                                                          "value": "response",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "usage",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "completion_tokens",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "response.usage",
                                                  "children": [
                                                    {
                                                      "value": "response",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "usage",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "else:\n            raise ValueError(f\"Unsupported LLM provider: {provider}\")",
                              "children": [
                                {
                                  "value": "raise ValueError(f\"Unsupported LLM provider: {provider}\")",
                                  "children": [
                                    {
                                      "value": "raise ValueError(f\"Unsupported LLM provider: {provider}\")",
                                      "children": [
                                        {
                                          "value": "ValueError(f\"Unsupported LLM provider: {provider}\")",
                                          "children": [
                                            {
                                              "value": "ValueError",
                                              "children": []
                                            },
                                            {
                                              "value": "(f\"Unsupported LLM provider: {provider}\")",
                                              "children": [
                                                {
                                                  "value": "f\"Unsupported LLM provider: {provider}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Unsupported LLM provider:",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{provider}",
                                                      "children": [
                                                        {
                                                          "value": "provider",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        logger.debug(f\"Calling LLM with input data: {input_data}\")\n        prompt = [p.model_dump() for p in input_data.conversation_history]\n\n        def trim_prompt(s: str) -> str:\n            lines = s.strip().split(\"\\n\")\n            return \"\\n\".join([line.strip().lstrip(\"|\") for line in lines])\n\n        values = input_data.prompt_values\n        if values:\n            input_data.prompt = input_data.prompt.format(**values)\n            input_data.sys_prompt = input_data.sys_prompt.format(**values)\n\n        if input_data.sys_prompt:\n            prompt.append({\"role\": \"system\", \"content\": input_data.sys_prompt})\n\n        if input_data.expected_format:\n            expected_format = [\n                f'\"{k}\": \"{v}\"' for k, v in input_data.expected_format.items()\n            ]\n            format_prompt = \",\\n  \".join(expected_format)\n            sys_prompt = trim_prompt(\n                f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"\n            )\n            prompt.append({\"role\": \"system\", \"content\": sys_prompt})\n\n        if input_data.prompt:\n            prompt.append({\"role\": \"user\", \"content\": input_data.prompt})\n\n        def parse_response(resp: str) -> tuple[dict[str, Any], str | None]:\n            try:\n                parsed = json.loads(resp)\n                if not isinstance(parsed, dict):\n                    return {}, f\"Expected a dictionary, but got {type(parsed)}\"\n                miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys())\n                if miss_keys:\n                    return parsed, f\"Missing keys: {miss_keys}\"\n                return parsed, None\n            except JSONDecodeError as e:\n                return {}, f\"JSON decode error: {e}\"\n\n        logger.info(f\"LLM request: {prompt}\")\n        retry_prompt = \"\"\n        llm_model = input_data.model\n\n        for retry_count in range(input_data.retry):\n            try:\n                response_text, input_token, output_token = self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )\n                self.merge_stats(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )\n                logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")\n\n                if input_data.expected_format:\n                    parsed_dict, parsed_error = parse_response(response_text)\n                    if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return\n                else:\n                    yield \"response\", {\"response\": response_text}\n                    return\n\n                retry_prompt = trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )\n                prompt.append({\"role\": \"user\", \"content\": retry_prompt})\n            except Exception as e:\n                logger.exception(f\"Error calling LLM: {e}\")\n                retry_prompt = f\"Error calling LLM: {e}\"\n            finally:\n                self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )\n\n        raise RuntimeError(retry_prompt)",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "*",
                      "children": []
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "logger.debug(f\"Calling LLM with input data: {input_data}\")\n        prompt = [p.model_dump() for p in input_data.conversation_history]\n\n        def trim_prompt(s: str) -> str:\n            lines = s.strip().split(\"\\n\")\n            return \"\\n\".join([line.strip().lstrip(\"|\") for line in lines])\n\n        values = input_data.prompt_values\n        if values:\n            input_data.prompt = input_data.prompt.format(**values)\n            input_data.sys_prompt = input_data.sys_prompt.format(**values)\n\n        if input_data.sys_prompt:\n            prompt.append({\"role\": \"system\", \"content\": input_data.sys_prompt})\n\n        if input_data.expected_format:\n            expected_format = [\n                f'\"{k}\": \"{v}\"' for k, v in input_data.expected_format.items()\n            ]\n            format_prompt = \",\\n  \".join(expected_format)\n            sys_prompt = trim_prompt(\n                f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"\n            )\n            prompt.append({\"role\": \"system\", \"content\": sys_prompt})\n\n        if input_data.prompt:\n            prompt.append({\"role\": \"user\", \"content\": input_data.prompt})\n\n        def parse_response(resp: str) -> tuple[dict[str, Any], str | None]:\n            try:\n                parsed = json.loads(resp)\n                if not isinstance(parsed, dict):\n                    return {}, f\"Expected a dictionary, but got {type(parsed)}\"\n                miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys())\n                if miss_keys:\n                    return parsed, f\"Missing keys: {miss_keys}\"\n                return parsed, None\n            except JSONDecodeError as e:\n                return {}, f\"JSON decode error: {e}\"\n\n        logger.info(f\"LLM request: {prompt}\")\n        retry_prompt = \"\"\n        llm_model = input_data.model\n\n        for retry_count in range(input_data.retry):\n            try:\n                response_text, input_token, output_token = self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )\n                self.merge_stats(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )\n                logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")\n\n                if input_data.expected_format:\n                    parsed_dict, parsed_error = parse_response(response_text)\n                    if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return\n                else:\n                    yield \"response\", {\"response\": response_text}\n                    return\n\n                retry_prompt = trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )\n                prompt.append({\"role\": \"user\", \"content\": retry_prompt})\n            except Exception as e:\n                logger.exception(f\"Error calling LLM: {e}\")\n                retry_prompt = f\"Error calling LLM: {e}\"\n            finally:\n                self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )\n\n        raise RuntimeError(retry_prompt)",
                  "children": [
                    {
                      "value": "logger.debug(f\"Calling LLM with input data: {input_data}\")",
                      "children": [
                        {
                          "value": "logger.debug(f\"Calling LLM with input data: {input_data}\")",
                          "children": [
                            {
                              "value": "logger.debug",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "debug",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"Calling LLM with input data: {input_data}\")",
                              "children": [
                                {
                                  "value": "f\"Calling LLM with input data: {input_data}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Calling LLM with input data:",
                                      "children": []
                                    },
                                    {
                                      "value": "{input_data}",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "prompt = [p.model_dump() for p in input_data.conversation_history]",
                      "children": [
                        {
                          "value": "prompt = [p.model_dump() for p in input_data.conversation_history]",
                          "children": [
                            {
                              "value": "prompt",
                              "children": []
                            },
                            {
                              "value": "[p.model_dump() for p in input_data.conversation_history]",
                              "children": [
                                {
                                  "value": "p.model_dump()",
                                  "children": [
                                    {
                                      "value": "p.model_dump",
                                      "children": [
                                        {
                                          "value": "p",
                                          "children": []
                                        },
                                        {
                                          "value": "model_dump",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "for p in input_data.conversation_history",
                                  "children": [
                                    {
                                      "value": "p",
                                      "children": []
                                    },
                                    {
                                      "value": "input_data.conversation_history",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "conversation_history",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "def trim_prompt(s: str) -> str:\n            lines = s.strip().split(\"\\n\")\n            return \"\\n\".join([line.strip().lstrip(\"|\") for line in lines])",
                      "children": [
                        {
                          "value": "trim_prompt",
                          "children": []
                        },
                        {
                          "value": "(s: str)",
                          "children": [
                            {
                              "value": "s: str",
                              "children": [
                                {
                                  "value": "s",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "lines = s.strip().split(\"\\n\")\n            return \"\\n\".join([line.strip().lstrip(\"|\") for line in lines])",
                          "children": [
                            {
                              "value": "lines = s.strip().split(\"\\n\")",
                              "children": [
                                {
                                  "value": "lines = s.strip().split(\"\\n\")",
                                  "children": [
                                    {
                                      "value": "lines",
                                      "children": []
                                    },
                                    {
                                      "value": "s.strip().split(\"\\n\")",
                                      "children": [
                                        {
                                          "value": "s.strip().split",
                                          "children": [
                                            {
                                              "value": "s.strip()",
                                              "children": [
                                                {
                                                  "value": "s.strip",
                                                  "children": [
                                                    {
                                                      "value": "s",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "strip",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "split",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"\\n\")",
                                          "children": [
                                            {
                                              "value": "\"\\n\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\\n",
                                                  "children": [
                                                    {
                                                      "value": "\\n",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "return \"\\n\".join([line.strip().lstrip(\"|\") for line in lines])",
                              "children": [
                                {
                                  "value": "\"\\n\".join([line.strip().lstrip(\"|\") for line in lines])",
                                  "children": [
                                    {
                                      "value": "\"\\n\".join",
                                      "children": [
                                        {
                                          "value": "\"\\n\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": [
                                                {
                                                  "value": "\\n",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "join",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "([line.strip().lstrip(\"|\") for line in lines])",
                                      "children": [
                                        {
                                          "value": "[line.strip().lstrip(\"|\") for line in lines]",
                                          "children": [
                                            {
                                              "value": "line.strip().lstrip(\"|\")",
                                              "children": [
                                                {
                                                  "value": "line.strip().lstrip",
                                                  "children": [
                                                    {
                                                      "value": "line.strip()",
                                                      "children": [
                                                        {
                                                          "value": "line.strip",
                                                          "children": [
                                                            {
                                                              "value": "line",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "strip",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "()",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "lstrip",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\"|\")",
                                                  "children": [
                                                    {
                                                      "value": "\"|\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "|",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "for line in lines",
                                              "children": [
                                                {
                                                  "value": "line",
                                                  "children": []
                                                },
                                                {
                                                  "value": "lines",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "values = input_data.prompt_values",
                      "children": [
                        {
                          "value": "values = input_data.prompt_values",
                          "children": [
                            {
                              "value": "values",
                              "children": []
                            },
                            {
                              "value": "input_data.prompt_values",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "prompt_values",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if values:\n            input_data.prompt = input_data.prompt.format(**values)\n            input_data.sys_prompt = input_data.sys_prompt.format(**values)",
                      "children": [
                        {
                          "value": "values",
                          "children": []
                        },
                        {
                          "value": "input_data.prompt = input_data.prompt.format(**values)\n            input_data.sys_prompt = input_data.sys_prompt.format(**values)",
                          "children": [
                            {
                              "value": "input_data.prompt = input_data.prompt.format(**values)",
                              "children": [
                                {
                                  "value": "input_data.prompt = input_data.prompt.format(**values)",
                                  "children": [
                                    {
                                      "value": "input_data.prompt",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "prompt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "input_data.prompt.format(**values)",
                                      "children": [
                                        {
                                          "value": "input_data.prompt.format",
                                          "children": [
                                            {
                                              "value": "input_data.prompt",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "prompt",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "format",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(**values)",
                                          "children": [
                                            {
                                              "value": "**values",
                                              "children": [
                                                {
                                                  "value": "values",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "input_data.sys_prompt = input_data.sys_prompt.format(**values)",
                              "children": [
                                {
                                  "value": "input_data.sys_prompt = input_data.sys_prompt.format(**values)",
                                  "children": [
                                    {
                                      "value": "input_data.sys_prompt",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "sys_prompt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "input_data.sys_prompt.format(**values)",
                                      "children": [
                                        {
                                          "value": "input_data.sys_prompt.format",
                                          "children": [
                                            {
                                              "value": "input_data.sys_prompt",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "sys_prompt",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "format",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(**values)",
                                          "children": [
                                            {
                                              "value": "**values",
                                              "children": [
                                                {
                                                  "value": "values",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if input_data.sys_prompt:\n            prompt.append({\"role\": \"system\", \"content\": input_data.sys_prompt})",
                      "children": [
                        {
                          "value": "input_data.sys_prompt",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "sys_prompt",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "prompt.append({\"role\": \"system\", \"content\": input_data.sys_prompt})",
                          "children": [
                            {
                              "value": "prompt.append({\"role\": \"system\", \"content\": input_data.sys_prompt})",
                              "children": [
                                {
                                  "value": "prompt.append({\"role\": \"system\", \"content\": input_data.sys_prompt})",
                                  "children": [
                                    {
                                      "value": "prompt.append",
                                      "children": [
                                        {
                                          "value": "prompt",
                                          "children": []
                                        },
                                        {
                                          "value": "append",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "({\"role\": \"system\", \"content\": input_data.sys_prompt})",
                                      "children": [
                                        {
                                          "value": "{\"role\": \"system\", \"content\": input_data.sys_prompt}",
                                          "children": [
                                            {
                                              "value": "\"role\": \"system\"",
                                              "children": [
                                                {
                                                  "value": "\"role\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "role",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"system\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "system",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"content\": input_data.sys_prompt",
                                              "children": [
                                                {
                                                  "value": "\"content\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "content",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "input_data.sys_prompt",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "sys_prompt",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if input_data.expected_format:\n            expected_format = [\n                f'\"{k}\": \"{v}\"' for k, v in input_data.expected_format.items()\n            ]\n            format_prompt = \",\\n  \".join(expected_format)\n            sys_prompt = trim_prompt(\n                f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"\n            )\n            prompt.append({\"role\": \"system\", \"content\": sys_prompt})",
                      "children": [
                        {
                          "value": "input_data.expected_format",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "expected_format",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "expected_format = [\n                f'\"{k}\": \"{v}\"' for k, v in input_data.expected_format.items()\n            ]\n            format_prompt = \",\\n  \".join(expected_format)\n            sys_prompt = trim_prompt(\n                f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"\n            )\n            prompt.append({\"role\": \"system\", \"content\": sys_prompt})",
                          "children": [
                            {
                              "value": "expected_format = [\n                f'\"{k}\": \"{v}\"' for k, v in input_data.expected_format.items()\n            ]",
                              "children": [
                                {
                                  "value": "expected_format = [\n                f'\"{k}\": \"{v}\"' for k, v in input_data.expected_format.items()\n            ]",
                                  "children": [
                                    {
                                      "value": "expected_format",
                                      "children": []
                                    },
                                    {
                                      "value": "[\n                f'\"{k}\": \"{v}\"' for k, v in input_data.expected_format.items()\n            ]",
                                      "children": [
                                        {
                                          "value": "f'\"{k}\": \"{v}\"'",
                                          "children": [
                                            {
                                              "value": "f'",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "{k}",
                                              "children": [
                                                {
                                                  "value": "k",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\": \"",
                                              "children": []
                                            },
                                            {
                                              "value": "{v}",
                                              "children": [
                                                {
                                                  "value": "v",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "'",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "for k, v in input_data.expected_format.items()",
                                          "children": [
                                            {
                                              "value": "k, v",
                                              "children": [
                                                {
                                                  "value": "k",
                                                  "children": []
                                                },
                                                {
                                                  "value": "v",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "input_data.expected_format.items()",
                                              "children": [
                                                {
                                                  "value": "input_data.expected_format.items",
                                                  "children": [
                                                    {
                                                      "value": "input_data.expected_format",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "expected_format",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "items",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "format_prompt = \",\\n  \".join(expected_format)",
                              "children": [
                                {
                                  "value": "format_prompt = \",\\n  \".join(expected_format)",
                                  "children": [
                                    {
                                      "value": "format_prompt",
                                      "children": []
                                    },
                                    {
                                      "value": "\",\\n  \".join(expected_format)",
                                      "children": [
                                        {
                                          "value": "\",\\n  \".join",
                                          "children": [
                                            {
                                              "value": "\",\\n  \"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": ",\\n",
                                                  "children": [
                                                    {
                                                      "value": "\\n",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "join",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(expected_format)",
                                          "children": [
                                            {
                                              "value": "expected_format",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "sys_prompt = trim_prompt(\n                f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"\n            )",
                              "children": [
                                {
                                  "value": "sys_prompt = trim_prompt(\n                f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"\n            )",
                                  "children": [
                                    {
                                      "value": "sys_prompt",
                                      "children": []
                                    },
                                    {
                                      "value": "trim_prompt(\n                f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"\n            )",
                                      "children": [
                                        {
                                          "value": "trim_prompt",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n                f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"\n            )",
                                          "children": [
                                            {
                                              "value": "f\"\"\"\n                  |Reply strictly only in the following JSON format:\n                  |{{\n                  |  {format_prompt}\n                  |}}\n                \"\"\"",
                                              "children": [
                                                {
                                                  "value": "f\"\"\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "|Reply strictly only in the following JSON format:\n                  |{{\n                  |",
                                                  "children": [
                                                    {
                                                      "value": "{{",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "{format_prompt}",
                                                  "children": [
                                                    {
                                                      "value": "format_prompt",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "|}}",
                                                  "children": [
                                                    {
                                                      "value": "}}",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"\"\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "prompt.append({\"role\": \"system\", \"content\": sys_prompt})",
                              "children": [
                                {
                                  "value": "prompt.append({\"role\": \"system\", \"content\": sys_prompt})",
                                  "children": [
                                    {
                                      "value": "prompt.append",
                                      "children": [
                                        {
                                          "value": "prompt",
                                          "children": []
                                        },
                                        {
                                          "value": "append",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "({\"role\": \"system\", \"content\": sys_prompt})",
                                      "children": [
                                        {
                                          "value": "{\"role\": \"system\", \"content\": sys_prompt}",
                                          "children": [
                                            {
                                              "value": "\"role\": \"system\"",
                                              "children": [
                                                {
                                                  "value": "\"role\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "role",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"system\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "system",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"content\": sys_prompt",
                                              "children": [
                                                {
                                                  "value": "\"content\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "content",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "sys_prompt",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if input_data.prompt:\n            prompt.append({\"role\": \"user\", \"content\": input_data.prompt})",
                      "children": [
                        {
                          "value": "input_data.prompt",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "prompt",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "prompt.append({\"role\": \"user\", \"content\": input_data.prompt})",
                          "children": [
                            {
                              "value": "prompt.append({\"role\": \"user\", \"content\": input_data.prompt})",
                              "children": [
                                {
                                  "value": "prompt.append({\"role\": \"user\", \"content\": input_data.prompt})",
                                  "children": [
                                    {
                                      "value": "prompt.append",
                                      "children": [
                                        {
                                          "value": "prompt",
                                          "children": []
                                        },
                                        {
                                          "value": "append",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "({\"role\": \"user\", \"content\": input_data.prompt})",
                                      "children": [
                                        {
                                          "value": "{\"role\": \"user\", \"content\": input_data.prompt}",
                                          "children": [
                                            {
                                              "value": "\"role\": \"user\"",
                                              "children": [
                                                {
                                                  "value": "\"role\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "role",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"user\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "user",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"content\": input_data.prompt",
                                              "children": [
                                                {
                                                  "value": "\"content\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "content",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "input_data.prompt",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "prompt",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "def parse_response(resp: str) -> tuple[dict[str, Any], str | None]:\n            try:\n                parsed = json.loads(resp)\n                if not isinstance(parsed, dict):\n                    return {}, f\"Expected a dictionary, but got {type(parsed)}\"\n                miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys())\n                if miss_keys:\n                    return parsed, f\"Missing keys: {miss_keys}\"\n                return parsed, None\n            except JSONDecodeError as e:\n                return {}, f\"JSON decode error: {e}\"",
                      "children": [
                        {
                          "value": "parse_response",
                          "children": []
                        },
                        {
                          "value": "(resp: str)",
                          "children": [
                            {
                              "value": "resp: str",
                              "children": [
                                {
                                  "value": "resp",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "tuple[dict[str, Any], str | None]",
                          "children": [
                            {
                              "value": "tuple[dict[str, Any], str | None]",
                              "children": [
                                {
                                  "value": "tuple",
                                  "children": []
                                },
                                {
                                  "value": "[dict[str, Any], str | None]",
                                  "children": [
                                    {
                                      "value": "dict[str, Any]",
                                      "children": [
                                        {
                                          "value": "dict[str, Any]",
                                          "children": [
                                            {
                                              "value": "dict",
                                              "children": []
                                            },
                                            {
                                              "value": "[str, Any]",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": [
                                                    {
                                                      "value": "str",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "Any",
                                                  "children": [
                                                    {
                                                      "value": "Any",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "str | None",
                                      "children": [
                                        {
                                          "value": "str | None",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            },
                                            {
                                              "value": "None",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "try:\n                parsed = json.loads(resp)\n                if not isinstance(parsed, dict):\n                    return {}, f\"Expected a dictionary, but got {type(parsed)}\"\n                miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys())\n                if miss_keys:\n                    return parsed, f\"Missing keys: {miss_keys}\"\n                return parsed, None\n            except JSONDecodeError as e:\n                return {}, f\"JSON decode error: {e}\"",
                          "children": [
                            {
                              "value": "try:\n                parsed = json.loads(resp)\n                if not isinstance(parsed, dict):\n                    return {}, f\"Expected a dictionary, but got {type(parsed)}\"\n                miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys())\n                if miss_keys:\n                    return parsed, f\"Missing keys: {miss_keys}\"\n                return parsed, None\n            except JSONDecodeError as e:\n                return {}, f\"JSON decode error: {e}\"",
                              "children": [
                                {
                                  "value": "parsed = json.loads(resp)\n                if not isinstance(parsed, dict):\n                    return {}, f\"Expected a dictionary, but got {type(parsed)}\"\n                miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys())\n                if miss_keys:\n                    return parsed, f\"Missing keys: {miss_keys}\"\n                return parsed, None",
                                  "children": [
                                    {
                                      "value": "parsed = json.loads(resp)",
                                      "children": [
                                        {
                                          "value": "parsed = json.loads(resp)",
                                          "children": [
                                            {
                                              "value": "parsed",
                                              "children": []
                                            },
                                            {
                                              "value": "json.loads(resp)",
                                              "children": [
                                                {
                                                  "value": "json.loads",
                                                  "children": [
                                                    {
                                                      "value": "json",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "loads",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(resp)",
                                                  "children": [
                                                    {
                                                      "value": "resp",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if not isinstance(parsed, dict):\n                    return {}, f\"Expected a dictionary, but got {type(parsed)}\"",
                                      "children": [
                                        {
                                          "value": "not isinstance(parsed, dict)",
                                          "children": [
                                            {
                                              "value": "isinstance(parsed, dict)",
                                              "children": [
                                                {
                                                  "value": "isinstance",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(parsed, dict)",
                                                  "children": [
                                                    {
                                                      "value": "parsed",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "dict",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "return {}, f\"Expected a dictionary, but got {type(parsed)}\"",
                                          "children": [
                                            {
                                              "value": "return {}, f\"Expected a dictionary, but got {type(parsed)}\"",
                                              "children": [
                                                {
                                                  "value": "{}, f\"Expected a dictionary, but got {type(parsed)}\"",
                                                  "children": [
                                                    {
                                                      "value": "{}",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "f\"Expected a dictionary, but got {type(parsed)}\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Expected a dictionary, but got",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{type(parsed)}",
                                                          "children": [
                                                            {
                                                              "value": "type(parsed)",
                                                              "children": [
                                                                {
                                                                  "value": "type",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(parsed)",
                                                                  "children": [
                                                                    {
                                                                      "value": "parsed",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys())",
                                      "children": [
                                        {
                                          "value": "miss_keys = set(input_data.expected_format.keys()) - set(parsed.keys())",
                                          "children": [
                                            {
                                              "value": "miss_keys",
                                              "children": []
                                            },
                                            {
                                              "value": "set(input_data.expected_format.keys()) - set(parsed.keys())",
                                              "children": [
                                                {
                                                  "value": "set(input_data.expected_format.keys())",
                                                  "children": [
                                                    {
                                                      "value": "set",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(input_data.expected_format.keys())",
                                                      "children": [
                                                        {
                                                          "value": "input_data.expected_format.keys()",
                                                          "children": [
                                                            {
                                                              "value": "input_data.expected_format.keys",
                                                              "children": [
                                                                {
                                                                  "value": "input_data.expected_format",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "expected_format",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "keys",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "set(parsed.keys())",
                                                  "children": [
                                                    {
                                                      "value": "set",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(parsed.keys())",
                                                      "children": [
                                                        {
                                                          "value": "parsed.keys()",
                                                          "children": [
                                                            {
                                                              "value": "parsed.keys",
                                                              "children": [
                                                                {
                                                                  "value": "parsed",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "keys",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if miss_keys:\n                    return parsed, f\"Missing keys: {miss_keys}\"",
                                      "children": [
                                        {
                                          "value": "miss_keys",
                                          "children": []
                                        },
                                        {
                                          "value": "return parsed, f\"Missing keys: {miss_keys}\"",
                                          "children": [
                                            {
                                              "value": "return parsed, f\"Missing keys: {miss_keys}\"",
                                              "children": [
                                                {
                                                  "value": "parsed, f\"Missing keys: {miss_keys}\"",
                                                  "children": [
                                                    {
                                                      "value": "parsed",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "f\"Missing keys: {miss_keys}\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Missing keys:",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{miss_keys}",
                                                          "children": [
                                                            {
                                                              "value": "miss_keys",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "return parsed, None",
                                      "children": [
                                        {
                                          "value": "parsed, None",
                                          "children": [
                                            {
                                              "value": "parsed",
                                              "children": []
                                            },
                                            {
                                              "value": "None",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "except JSONDecodeError as e:\n                return {}, f\"JSON decode error: {e}\"",
                                  "children": [
                                    {
                                      "value": "JSONDecodeError as e",
                                      "children": [
                                        {
                                          "value": "JSONDecodeError",
                                          "children": []
                                        },
                                        {
                                          "value": "e",
                                          "children": [
                                            {
                                              "value": "e",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "return {}, f\"JSON decode error: {e}\"",
                                      "children": [
                                        {
                                          "value": "return {}, f\"JSON decode error: {e}\"",
                                          "children": [
                                            {
                                              "value": "{}, f\"JSON decode error: {e}\"",
                                              "children": [
                                                {
                                                  "value": "{}",
                                                  "children": []
                                                },
                                                {
                                                  "value": "f\"JSON decode error: {e}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "JSON decode error:",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{e}",
                                                      "children": [
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.info(f\"LLM request: {prompt}\")",
                      "children": [
                        {
                          "value": "logger.info(f\"LLM request: {prompt}\")",
                          "children": [
                            {
                              "value": "logger.info",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "info",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"LLM request: {prompt}\")",
                              "children": [
                                {
                                  "value": "f\"LLM request: {prompt}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "LLM request:",
                                      "children": []
                                    },
                                    {
                                      "value": "{prompt}",
                                      "children": [
                                        {
                                          "value": "prompt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "retry_prompt = \"\"",
                      "children": [
                        {
                          "value": "retry_prompt = \"\"",
                          "children": [
                            {
                              "value": "retry_prompt",
                              "children": []
                            },
                            {
                              "value": "\"\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "llm_model = input_data.model",
                      "children": [
                        {
                          "value": "llm_model = input_data.model",
                          "children": [
                            {
                              "value": "llm_model",
                              "children": []
                            },
                            {
                              "value": "input_data.model",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "model",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for retry_count in range(input_data.retry):\n            try:\n                response_text, input_token, output_token = self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )\n                self.merge_stats(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )\n                logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")\n\n                if input_data.expected_format:\n                    parsed_dict, parsed_error = parse_response(response_text)\n                    if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return\n                else:\n                    yield \"response\", {\"response\": response_text}\n                    return\n\n                retry_prompt = trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )\n                prompt.append({\"role\": \"user\", \"content\": retry_prompt})\n            except Exception as e:\n                logger.exception(f\"Error calling LLM: {e}\")\n                retry_prompt = f\"Error calling LLM: {e}\"\n            finally:\n                self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )",
                      "children": [
                        {
                          "value": "retry_count",
                          "children": []
                        },
                        {
                          "value": "range(input_data.retry)",
                          "children": [
                            {
                              "value": "range",
                              "children": []
                            },
                            {
                              "value": "(input_data.retry)",
                              "children": [
                                {
                                  "value": "input_data.retry",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "retry",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "try:\n                response_text, input_token, output_token = self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )\n                self.merge_stats(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )\n                logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")\n\n                if input_data.expected_format:\n                    parsed_dict, parsed_error = parse_response(response_text)\n                    if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return\n                else:\n                    yield \"response\", {\"response\": response_text}\n                    return\n\n                retry_prompt = trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )\n                prompt.append({\"role\": \"user\", \"content\": retry_prompt})\n            except Exception as e:\n                logger.exception(f\"Error calling LLM: {e}\")\n                retry_prompt = f\"Error calling LLM: {e}\"\n            finally:\n                self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )",
                          "children": [
                            {
                              "value": "try:\n                response_text, input_token, output_token = self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )\n                self.merge_stats(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )\n                logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")\n\n                if input_data.expected_format:\n                    parsed_dict, parsed_error = parse_response(response_text)\n                    if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return\n                else:\n                    yield \"response\", {\"response\": response_text}\n                    return\n\n                retry_prompt = trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )\n                prompt.append({\"role\": \"user\", \"content\": retry_prompt})\n            except Exception as e:\n                logger.exception(f\"Error calling LLM: {e}\")\n                retry_prompt = f\"Error calling LLM: {e}\"\n            finally:\n                self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )",
                              "children": [
                                {
                                  "value": "response_text, input_token, output_token = self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )\n                self.merge_stats(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )\n                logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")\n\n                if input_data.expected_format:\n                    parsed_dict, parsed_error = parse_response(response_text)\n                    if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return\n                else:\n                    yield \"response\", {\"response\": response_text}\n                    return\n\n                retry_prompt = trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )\n                prompt.append({\"role\": \"user\", \"content\": retry_prompt})",
                                  "children": [
                                    {
                                      "value": "response_text, input_token, output_token = self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )",
                                      "children": [
                                        {
                                          "value": "response_text, input_token, output_token = self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )",
                                          "children": [
                                            {
                                              "value": "response_text, input_token, output_token",
                                              "children": [
                                                {
                                                  "value": "response_text",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_token",
                                                  "children": []
                                                },
                                                {
                                                  "value": "output_token",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "self.llm_call(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )",
                                              "children": [
                                                {
                                                  "value": "self.llm_call",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "llm_call",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                    credentials=credentials,\n                    llm_model=llm_model,\n                    prompt=prompt,\n                    json_format=bool(input_data.expected_format),\n                    ollama_host=input_data.ollama_host,\n                    max_tokens=input_data.max_tokens,\n                )",
                                                  "children": [
                                                    {
                                                      "value": "credentials=credentials",
                                                      "children": [
                                                        {
                                                          "value": "credentials",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "credentials",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "llm_model=llm_model",
                                                      "children": [
                                                        {
                                                          "value": "llm_model",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "llm_model",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "prompt=prompt",
                                                      "children": [
                                                        {
                                                          "value": "prompt",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "prompt",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "json_format=bool(input_data.expected_format)",
                                                      "children": [
                                                        {
                                                          "value": "json_format",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "bool(input_data.expected_format)",
                                                          "children": [
                                                            {
                                                              "value": "bool",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(input_data.expected_format)",
                                                              "children": [
                                                                {
                                                                  "value": "input_data.expected_format",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "expected_format",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "ollama_host=input_data.ollama_host",
                                                      "children": [
                                                        {
                                                          "value": "ollama_host",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_data.ollama_host",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "ollama_host",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "max_tokens=input_data.max_tokens",
                                                      "children": [
                                                        {
                                                          "value": "max_tokens",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_data.max_tokens",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "max_tokens",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.merge_stats(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )",
                                      "children": [
                                        {
                                          "value": "self.merge_stats(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )",
                                          "children": [
                                            {
                                              "value": "self.merge_stats",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "merge_stats",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                    {\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }\n                )",
                                              "children": [
                                                {
                                                  "value": "{\n                        \"input_token_count\": input_token,\n                        \"output_token_count\": output_token,\n                    }",
                                                  "children": [
                                                    {
                                                      "value": "\"input_token_count\": input_token",
                                                      "children": [
                                                        {
                                                          "value": "\"input_token_count\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "input_token_count",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "input_token",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"output_token_count\": output_token",
                                                      "children": [
                                                        {
                                                          "value": "\"output_token_count\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "output_token_count",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "output_token",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")",
                                      "children": [
                                        {
                                          "value": "logger.info(f\"LLM attempt-{retry_count} response: {response_text}\")",
                                          "children": [
                                            {
                                              "value": "logger.info",
                                              "children": [
                                                {
                                                  "value": "logger",
                                                  "children": []
                                                },
                                                {
                                                  "value": "info",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(f\"LLM attempt-{retry_count} response: {response_text}\")",
                                              "children": [
                                                {
                                                  "value": "f\"LLM attempt-{retry_count} response: {response_text}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "LLM attempt-",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{retry_count}",
                                                      "children": [
                                                        {
                                                          "value": "retry_count",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "response:",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{response_text}",
                                                      "children": [
                                                        {
                                                          "value": "response_text",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if input_data.expected_format:\n                    parsed_dict, parsed_error = parse_response(response_text)\n                    if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return\n                else:\n                    yield \"response\", {\"response\": response_text}\n                    return",
                                      "children": [
                                        {
                                          "value": "input_data.expected_format",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "expected_format",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "parsed_dict, parsed_error = parse_response(response_text)\n                    if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return",
                                          "children": [
                                            {
                                              "value": "parsed_dict, parsed_error = parse_response(response_text)",
                                              "children": [
                                                {
                                                  "value": "parsed_dict, parsed_error = parse_response(response_text)",
                                                  "children": [
                                                    {
                                                      "value": "parsed_dict, parsed_error",
                                                      "children": [
                                                        {
                                                          "value": "parsed_dict",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "parsed_error",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "parse_response(response_text)",
                                                      "children": [
                                                        {
                                                          "value": "parse_response",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(response_text)",
                                                          "children": [
                                                            {
                                                              "value": "response_text",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "if not parsed_error:\n                        yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return",
                                              "children": [
                                                {
                                                  "value": "not parsed_error",
                                                  "children": [
                                                    {
                                                      "value": "parsed_error",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }\n                        return",
                                                  "children": [
                                                    {
                                                      "value": "yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }",
                                                      "children": [
                                                        {
                                                          "value": "yield \"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }",
                                                          "children": [
                                                            {
                                                              "value": "\"response\", {\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }",
                                                              "children": [
                                                                {
                                                                  "value": "\"response\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "response",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "{\n                            k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )\n                            for k, v in parsed_dict.items()\n                        }",
                                                                  "children": [
                                                                    {
                                                                      "value": "k: (\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )",
                                                                      "children": [
                                                                        {
                                                                          "value": "k",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "(\n                                json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)\n                            )",
                                                                          "children": [
                                                                            {
                                                                              "value": "json.loads(v)\n                                if isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")\n                                else (\", \".join(v) if isinstance(v, list) else v)",
                                                                              "children": [
                                                                                {
                                                                                  "value": "json.loads(v)",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "json.loads",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "json",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "loads",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "value": "(v)",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "v",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "isinstance(v, str)\n                                and v.startswith(\"[\")\n                                and v.endswith(\"]\")",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "isinstance(v, str)\n                                and v.startswith(\"[\")",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "isinstance(v, str)",
                                                                                          "children": [
                                                                                            {
                                                                                              "value": "isinstance",
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "value": "(v, str)",
                                                                                              "children": [
                                                                                                {
                                                                                                  "value": "v",
                                                                                                  "children": []
                                                                                                },
                                                                                                {
                                                                                                  "value": "str",
                                                                                                  "children": []
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "value": "v.startswith(\"[\")",
                                                                                          "children": [
                                                                                            {
                                                                                              "value": "v.startswith",
                                                                                              "children": [
                                                                                                {
                                                                                                  "value": "v",
                                                                                                  "children": []
                                                                                                },
                                                                                                {
                                                                                                  "value": "startswith",
                                                                                                  "children": []
                                                                                                }
                                                                                              ]
                                                                                            },
                                                                                            {
                                                                                              "value": "(\"[\")",
                                                                                              "children": [
                                                                                                {
                                                                                                  "value": "\"[\"",
                                                                                                  "children": [
                                                                                                    {
                                                                                                      "value": "\"",
                                                                                                      "children": []
                                                                                                    },
                                                                                                    {
                                                                                                      "value": "[",
                                                                                                      "children": []
                                                                                                    },
                                                                                                    {
                                                                                                      "value": "\"",
                                                                                                      "children": []
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "value": "v.endswith(\"]\")",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "v.endswith",
                                                                                          "children": [
                                                                                            {
                                                                                              "value": "v",
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "value": "endswith",
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "value": "(\"]\")",
                                                                                          "children": [
                                                                                            {
                                                                                              "value": "\"]\"",
                                                                                              "children": [
                                                                                                {
                                                                                                  "value": "\"",
                                                                                                  "children": []
                                                                                                },
                                                                                                {
                                                                                                  "value": "]",
                                                                                                  "children": []
                                                                                                },
                                                                                                {
                                                                                                  "value": "\"",
                                                                                                  "children": []
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "(\", \".join(v) if isinstance(v, list) else v)",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "\", \".join(v) if isinstance(v, list) else v",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "\", \".join(v)",
                                                                                          "children": [
                                                                                            {
                                                                                              "value": "\", \".join",
                                                                                              "children": [
                                                                                                {
                                                                                                  "value": "\", \"",
                                                                                                  "children": [
                                                                                                    {
                                                                                                      "value": "\"",
                                                                                                      "children": []
                                                                                                    },
                                                                                                    {
                                                                                                      "value": ",",
                                                                                                      "children": []
                                                                                                    },
                                                                                                    {
                                                                                                      "value": "\"",
                                                                                                      "children": []
                                                                                                    }
                                                                                                  ]
                                                                                                },
                                                                                                {
                                                                                                  "value": "join",
                                                                                                  "children": []
                                                                                                }
                                                                                              ]
                                                                                            },
                                                                                            {
                                                                                              "value": "(v)",
                                                                                              "children": [
                                                                                                {
                                                                                                  "value": "v",
                                                                                                  "children": []
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "value": "isinstance(v, list)",
                                                                                          "children": [
                                                                                            {
                                                                                              "value": "isinstance",
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "value": "(v, list)",
                                                                                              "children": [
                                                                                                {
                                                                                                  "value": "v",
                                                                                                  "children": []
                                                                                                },
                                                                                                {
                                                                                                  "value": "list",
                                                                                                  "children": []
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "value": "v",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "for k, v in parsed_dict.items()",
                                                                      "children": [
                                                                        {
                                                                          "value": "k, v",
                                                                          "children": [
                                                                            {
                                                                              "value": "k",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "v",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "parsed_dict.items()",
                                                                          "children": [
                                                                            {
                                                                              "value": "parsed_dict.items",
                                                                              "children": [
                                                                                {
                                                                                  "value": "parsed_dict",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "items",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "()",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "return",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "else:\n                    yield \"response\", {\"response\": response_text}\n                    return",
                                          "children": [
                                            {
                                              "value": "yield \"response\", {\"response\": response_text}\n                    return",
                                              "children": [
                                                {
                                                  "value": "yield \"response\", {\"response\": response_text}",
                                                  "children": [
                                                    {
                                                      "value": "yield \"response\", {\"response\": response_text}",
                                                      "children": [
                                                        {
                                                          "value": "\"response\", {\"response\": response_text}",
                                                          "children": [
                                                            {
                                                              "value": "\"response\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "response",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{\"response\": response_text}",
                                                              "children": [
                                                                {
                                                                  "value": "\"response\": response_text",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"response\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "response",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "response_text",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "return",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "retry_prompt = trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )",
                                      "children": [
                                        {
                                          "value": "retry_prompt = trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )",
                                          "children": [
                                            {
                                              "value": "retry_prompt",
                                              "children": []
                                            },
                                            {
                                              "value": "trim_prompt(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )",
                                              "children": [
                                                {
                                                  "value": "trim_prompt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\n                    f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"\n                )",
                                                  "children": [
                                                    {
                                                      "value": "f\"\"\"\n                  |This is your previous error response:\n                  |--\n                  |{response_text}\n                  |--\n                  |\n                  |And this is the error:\n                  |--\n                  |{parsed_error}\n                  |--\n                \"\"\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"\"\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "|This is your previous error response:\n                  |--\n                  |",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{response_text}",
                                                          "children": [
                                                            {
                                                              "value": "response_text",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "|--\n                  |\n                  |And this is the error:\n                  |--\n                  |",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{parsed_error}",
                                                          "children": [
                                                            {
                                                              "value": "parsed_error",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "|--",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"\"\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "prompt.append({\"role\": \"user\", \"content\": retry_prompt})",
                                      "children": [
                                        {
                                          "value": "prompt.append({\"role\": \"user\", \"content\": retry_prompt})",
                                          "children": [
                                            {
                                              "value": "prompt.append",
                                              "children": [
                                                {
                                                  "value": "prompt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "append",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "({\"role\": \"user\", \"content\": retry_prompt})",
                                              "children": [
                                                {
                                                  "value": "{\"role\": \"user\", \"content\": retry_prompt}",
                                                  "children": [
                                                    {
                                                      "value": "\"role\": \"user\"",
                                                      "children": [
                                                        {
                                                          "value": "\"role\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "role",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"user\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "user",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"content\": retry_prompt",
                                                      "children": [
                                                        {
                                                          "value": "\"content\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "content",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "retry_prompt",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "except Exception as e:\n                logger.exception(f\"Error calling LLM: {e}\")\n                retry_prompt = f\"Error calling LLM: {e}\"",
                                  "children": [
                                    {
                                      "value": "Exception as e",
                                      "children": [
                                        {
                                          "value": "Exception",
                                          "children": []
                                        },
                                        {
                                          "value": "e",
                                          "children": [
                                            {
                                              "value": "e",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "logger.exception(f\"Error calling LLM: {e}\")\n                retry_prompt = f\"Error calling LLM: {e}\"",
                                      "children": [
                                        {
                                          "value": "logger.exception(f\"Error calling LLM: {e}\")",
                                          "children": [
                                            {
                                              "value": "logger.exception(f\"Error calling LLM: {e}\")",
                                              "children": [
                                                {
                                                  "value": "logger.exception",
                                                  "children": [
                                                    {
                                                      "value": "logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "exception",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(f\"Error calling LLM: {e}\")",
                                                  "children": [
                                                    {
                                                      "value": "f\"Error calling LLM: {e}\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Error calling LLM:",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{e}",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "retry_prompt = f\"Error calling LLM: {e}\"",
                                          "children": [
                                            {
                                              "value": "retry_prompt = f\"Error calling LLM: {e}\"",
                                              "children": [
                                                {
                                                  "value": "retry_prompt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "f\"Error calling LLM: {e}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Error calling LLM:",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{e}",
                                                      "children": [
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "finally:\n                self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )",
                                  "children": [
                                    {
                                      "value": "self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )",
                                      "children": [
                                        {
                                          "value": "self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )",
                                          "children": [
                                            {
                                              "value": "self.merge_stats(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )",
                                              "children": [
                                                {
                                                  "value": "self.merge_stats",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "merge_stats",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                    {\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }\n                )",
                                                  "children": [
                                                    {
                                                      "value": "{\n                        \"llm_call_count\": retry_count + 1,\n                        \"llm_retry_count\": retry_count,\n                    }",
                                                      "children": [
                                                        {
                                                          "value": "\"llm_call_count\": retry_count + 1",
                                                          "children": [
                                                            {
                                                              "value": "\"llm_call_count\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "llm_call_count",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "retry_count + 1",
                                                              "children": [
                                                                {
                                                                  "value": "retry_count",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "1",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"llm_retry_count\": retry_count",
                                                          "children": [
                                                            {
                                                              "value": "\"llm_retry_count\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "llm_retry_count",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "retry_count",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise RuntimeError(retry_prompt)",
                      "children": [
                        {
                          "value": "RuntimeError(retry_prompt)",
                          "children": [
                            {
                              "value": "RuntimeError",
                              "children": []
                            },
                            {
                              "value": "(retry_prompt)",
                              "children": [
                                {
                                  "value": "retry_prompt",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class AITextGeneratorBlock(Block):\n    class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n\n    class Output(BlockSchema):\n        response: str = SchemaField(\n            description=\"The response generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"1f292d4a-41a4-4977-9684-7c8d560b9f91\",\n            description=\"Call a Large Language Model (LLM) to generate a string based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AITextGeneratorBlock.Input,\n            output_schema=AITextGeneratorBlock.Output,\n            test_input={\n                \"prompt\": \"User prompt\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", \"Response text\"),\n            test_mock={\"llm_call\": lambda *args, **kwargs: \"Response text\"},\n        )\n\n    def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> str:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response[\"response\"]\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        object_input_data = AIStructuredResponseGeneratorBlock.Input(\n            **{attr: getattr(input_data, attr) for attr in input_data.model_fields},\n            expected_format={},\n        )\n        yield \"response\", self.llm_call(object_input_data, credentials)",
      "children": [
        {
          "value": "AITextGeneratorBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n\n    class Output(BlockSchema):\n        response: str = SchemaField(\n            description=\"The response generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"1f292d4a-41a4-4977-9684-7c8d560b9f91\",\n            description=\"Call a Large Language Model (LLM) to generate a string based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AITextGeneratorBlock.Input,\n            output_schema=AITextGeneratorBlock.Output,\n            test_input={\n                \"prompt\": \"User prompt\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", \"Response text\"),\n            test_mock={\"llm_call\": lambda *args, **kwargs: \"Response text\"},\n        )\n\n    def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> str:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response[\"response\"]\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        object_input_data = AIStructuredResponseGeneratorBlock.Input(\n            **{attr: getattr(input_data, attr) for attr in input_data.model_fields},\n            expected_format={},\n        )\n        yield \"response\", self.llm_call(object_input_data, credentials)",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "prompt: str = SchemaField(\n            description=\"The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.\",\n            placeholder=\"Enter your prompt here...\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )\n        credentials: AICredentials = AICredentialsField()\n        sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )\n        retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )\n        prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                  "children": [
                    {
                      "value": "prompt: str = SchemaField(\n            description=\"The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.\",\n            placeholder=\"Enter your prompt here...\",\n        )",
                      "children": [
                        {
                          "value": "prompt: str = SchemaField(\n            description=\"The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.\",\n            placeholder=\"Enter your prompt here...\",\n        )",
                          "children": [
                            {
                              "value": "prompt",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.\",\n            placeholder=\"Enter your prompt here...\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.\",\n            placeholder=\"Enter your prompt here...\",\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The prompt to send to the language model. You can use any of the {keys} from Prompt Values to fill in the prompt with values from the prompt values dictionary by putting them in curly braces.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "placeholder=\"Enter your prompt here...\"",
                                      "children": [
                                        {
                                          "value": "placeholder",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Enter your prompt here...\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Enter your prompt here...",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )",
                      "children": [
                        {
                          "value": "model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )",
                          "children": [
                            {
                              "value": "model",
                              "children": []
                            },
                            {
                              "value": "LlmModel",
                              "children": [
                                {
                                  "value": "LlmModel",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for answering the prompt.\",\n            advanced=False,\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"LLM Model\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"LLM Model\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "LLM Model",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=LlmModel.GPT4_TURBO",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "LlmModel.GPT4_TURBO",
                                          "children": [
                                            {
                                              "value": "LlmModel",
                                              "children": []
                                            },
                                            {
                                              "value": "GPT4_TURBO",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The language model to use for answering the prompt.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The language model to use for answering the prompt.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The language model to use for answering the prompt.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "advanced=False",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "False",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: AICredentials = AICredentialsField()",
                      "children": [
                        {
                          "value": "credentials: AICredentials = AICredentialsField()",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "AICredentials",
                              "children": [
                                {
                                  "value": "AICredentials",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "AICredentialsField()",
                              "children": [
                                {
                                  "value": "AICredentialsField",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )",
                      "children": [
                        {
                          "value": "sys_prompt: str = SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )",
                          "children": [
                            {
                              "value": "sys_prompt",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"System Prompt\",\n            default=\"\",\n            description=\"The system prompt to provide additional context to the model.\",\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"System Prompt\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"System Prompt\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "System Prompt",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The system prompt to provide additional context to the model.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The system prompt to provide additional context to the model.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The system prompt to provide additional context to the model.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )",
                      "children": [
                        {
                          "value": "retry: int = SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )",
                          "children": [
                            {
                              "value": "retry",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"Retry Count\",\n            default=3,\n            description=\"Number of times to retry the LLM call if the response does not match the expected format.\",\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"Retry Count\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Retry Count\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Retry Count",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=3",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "3",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"Number of times to retry the LLM call if the response does not match the expected format.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Number of times to retry the LLM call if the response does not match the expected format.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Number of times to retry the LLM call if the response does not match the expected format.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )",
                      "children": [
                        {
                          "value": "prompt_values: dict[str, str] = SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )",
                          "children": [
                            {
                              "value": "prompt_values",
                              "children": []
                            },
                            {
                              "value": "dict[str, str]",
                              "children": [
                                {
                                  "value": "dict[str, str]",
                                  "children": [
                                    {
                                      "value": "dict",
                                      "children": []
                                    },
                                    {
                                      "value": "[str, str]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            advanced=False, default={}, description=\"Values used to fill in the prompt.\"\n        )",
                                  "children": [
                                    {
                                      "value": "advanced=False",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "False",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default={}",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "{}",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"Values used to fill in the prompt.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Values used to fill in the prompt.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Values used to fill in the prompt.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                      "children": [
                        {
                          "value": "ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                          "children": [
                            {
                              "value": "ollama_host",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                                  "children": [
                                    {
                                      "value": "advanced=True",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"localhost:11434\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"localhost:11434\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "localhost:11434",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"Ollama host for local  models\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Ollama host for local  models\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Ollama host for local  models",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                      "children": [
                        {
                          "value": "max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                          "children": [
                            {
                              "value": "max_tokens",
                              "children": []
                            },
                            {
                              "value": "int | None",
                              "children": [
                                {
                                  "value": "int | None",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                                  "children": [
                                    {
                                      "value": "advanced=True",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=None",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The maximum number of tokens to generate in the chat completion.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The maximum number of tokens to generate in the chat completion.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The maximum number of tokens to generate in the chat completion.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        response: str = SchemaField(\n            description=\"The response generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "response: str = SchemaField(\n            description=\"The response generated by the language model.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")",
                  "children": [
                    {
                      "value": "response: str = SchemaField(\n            description=\"The response generated by the language model.\"\n        )",
                      "children": [
                        {
                          "value": "response: str = SchemaField(\n            description=\"The response generated by the language model.\"\n        )",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The response generated by the language model.\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The response generated by the language model.\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The response generated by the language model.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The response generated by the language model.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The response generated by the language model.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "error: str = SchemaField(description=\"Error message if the API call failed.\")",
                      "children": [
                        {
                          "value": "error: str = SchemaField(description=\"Error message if the API call failed.\")",
                          "children": [
                            {
                              "value": "error",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Error message if the API call failed.\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Error message if the API call failed.\")",
                                  "children": [
                                    {
                                      "value": "description=\"Error message if the API call failed.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Error message if the API call failed.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Error message if the API call failed.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"1f292d4a-41a4-4977-9684-7c8d560b9f91\",\n            description=\"Call a Large Language Model (LLM) to generate a string based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AITextGeneratorBlock.Input,\n            output_schema=AITextGeneratorBlock.Output,\n            test_input={\n                \"prompt\": \"User prompt\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", \"Response text\"),\n            test_mock={\"llm_call\": lambda *args, **kwargs: \"Response text\"},\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"1f292d4a-41a4-4977-9684-7c8d560b9f91\",\n            description=\"Call a Large Language Model (LLM) to generate a string based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AITextGeneratorBlock.Input,\n            output_schema=AITextGeneratorBlock.Output,\n            test_input={\n                \"prompt\": \"User prompt\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", \"Response text\"),\n            test_mock={\"llm_call\": lambda *args, **kwargs: \"Response text\"},\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"1f292d4a-41a4-4977-9684-7c8d560b9f91\",\n            description=\"Call a Large Language Model (LLM) to generate a string based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AITextGeneratorBlock.Input,\n            output_schema=AITextGeneratorBlock.Output,\n            test_input={\n                \"prompt\": \"User prompt\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", \"Response text\"),\n            test_mock={\"llm_call\": lambda *args, **kwargs: \"Response text\"},\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"1f292d4a-41a4-4977-9684-7c8d560b9f91\",\n            description=\"Call a Large Language Model (LLM) to generate a string based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AITextGeneratorBlock.Input,\n            output_schema=AITextGeneratorBlock.Output,\n            test_input={\n                \"prompt\": \"User prompt\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", \"Response text\"),\n            test_mock={\"llm_call\": lambda *args, **kwargs: \"Response text\"},\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"1f292d4a-41a4-4977-9684-7c8d560b9f91\",\n            description=\"Call a Large Language Model (LLM) to generate a string based on the given prompt.\",\n            categories={BlockCategory.AI},\n            input_schema=AITextGeneratorBlock.Input,\n            output_schema=AITextGeneratorBlock.Output,\n            test_input={\n                \"prompt\": \"User prompt\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"response\", \"Response text\"),\n            test_mock={\"llm_call\": lambda *args, **kwargs: \"Response text\"},\n        )",
                              "children": [
                                {
                                  "value": "id=\"1f292d4a-41a4-4977-9684-7c8d560b9f91\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"1f292d4a-41a4-4977-9684-7c8d560b9f91\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "1f292d4a-41a4-4977-9684-7c8d560b9f91",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "description=\"Call a Large Language Model (LLM) to generate a string based on the given prompt.\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Call a Large Language Model (LLM) to generate a string based on the given prompt.\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Call a Large Language Model (LLM) to generate a string based on the given prompt.",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.AI}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.AI}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.AI",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "AI",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=AITextGeneratorBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "AITextGeneratorBlock.Input",
                                      "children": [
                                        {
                                          "value": "AITextGeneratorBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema=AITextGeneratorBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "AITextGeneratorBlock.Output",
                                      "children": [
                                        {
                                          "value": "AITextGeneratorBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_input={\n                \"prompt\": \"User prompt\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            }",
                                  "children": [
                                    {
                                      "value": "test_input",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"prompt\": \"User prompt\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            }",
                                      "children": [
                                        {
                                          "value": "\"prompt\": \"User prompt\"",
                                          "children": [
                                            {
                                              "value": "\"prompt\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "prompt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"User prompt\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "User prompt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"credentials\": TEST_CREDENTIALS_INPUT",
                                          "children": [
                                            {
                                              "value": "\"credentials\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "TEST_CREDENTIALS_INPUT",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_credentials=TEST_CREDENTIALS",
                                  "children": [
                                    {
                                      "value": "test_credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "TEST_CREDENTIALS",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "test_output=(\"response\", \"Response text\")",
                                  "children": [
                                    {
                                      "value": "test_output",
                                      "children": []
                                    },
                                    {
                                      "value": "(\"response\", \"Response text\")",
                                      "children": [
                                        {
                                          "value": "\"response\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "response",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"Response text\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Response text",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_mock={\"llm_call\": lambda *args, **kwargs: \"Response text\"}",
                                  "children": [
                                    {
                                      "value": "test_mock",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"llm_call\": lambda *args, **kwargs: \"Response text\"}",
                                      "children": [
                                        {
                                          "value": "\"llm_call\": lambda *args, **kwargs: \"Response text\"",
                                          "children": [
                                            {
                                              "value": "\"llm_call\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "llm_call",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "lambda *args, **kwargs: \"Response text\"",
                                              "children": [
                                                {
                                                  "value": "*args, **kwargs",
                                                  "children": [
                                                    {
                                                      "value": "*args",
                                                      "children": [
                                                        {
                                                          "value": "args",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "**kwargs",
                                                      "children": [
                                                        {
                                                          "value": "kwargs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"Response text\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Response text",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> str:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response[\"response\"]",
              "children": [
                {
                  "value": "llm_call",
                  "children": []
                },
                {
                  "value": "(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: AIStructuredResponseGeneratorBlock.Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "AIStructuredResponseGeneratorBlock.Input",
                          "children": [
                            {
                              "value": "AIStructuredResponseGeneratorBlock.Input",
                              "children": [
                                {
                                  "value": "AIStructuredResponseGeneratorBlock",
                                  "children": []
                                },
                                {
                                  "value": "Input",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response[\"response\"]",
                  "children": [
                    {
                      "value": "block = AIStructuredResponseGeneratorBlock()",
                      "children": [
                        {
                          "value": "block = AIStructuredResponseGeneratorBlock()",
                          "children": [
                            {
                              "value": "block",
                              "children": []
                            },
                            {
                              "value": "AIStructuredResponseGeneratorBlock()",
                              "children": [
                                {
                                  "value": "AIStructuredResponseGeneratorBlock",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "response = block.run_once(input_data, \"response\", credentials=credentials)",
                      "children": [
                        {
                          "value": "response = block.run_once(input_data, \"response\", credentials=credentials)",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "block.run_once(input_data, \"response\", credentials=credentials)",
                              "children": [
                                {
                                  "value": "block.run_once",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "run_once",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(input_data, \"response\", credentials=credentials)",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "\"response\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "response",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "credentials=credentials",
                                      "children": [
                                        {
                                          "value": "credentials",
                                          "children": []
                                        },
                                        {
                                          "value": "credentials",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.merge_stats(block.execution_stats)",
                      "children": [
                        {
                          "value": "self.merge_stats(block.execution_stats)",
                          "children": [
                            {
                              "value": "self.merge_stats",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "merge_stats",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(block.execution_stats)",
                              "children": [
                                {
                                  "value": "block.execution_stats",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "execution_stats",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return response[\"response\"]",
                      "children": [
                        {
                          "value": "response[\"response\"]",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "\"response\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "response",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        object_input_data = AIStructuredResponseGeneratorBlock.Input(\n            **{attr: getattr(input_data, attr) for attr in input_data.model_fields},\n            expected_format={},\n        )\n        yield \"response\", self.llm_call(object_input_data, credentials)",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "*",
                      "children": []
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "object_input_data = AIStructuredResponseGeneratorBlock.Input(\n            **{attr: getattr(input_data, attr) for attr in input_data.model_fields},\n            expected_format={},\n        )\n        yield \"response\", self.llm_call(object_input_data, credentials)",
                  "children": [
                    {
                      "value": "object_input_data = AIStructuredResponseGeneratorBlock.Input(\n            **{attr: getattr(input_data, attr) for attr in input_data.model_fields},\n            expected_format={},\n        )",
                      "children": [
                        {
                          "value": "object_input_data = AIStructuredResponseGeneratorBlock.Input(\n            **{attr: getattr(input_data, attr) for attr in input_data.model_fields},\n            expected_format={},\n        )",
                          "children": [
                            {
                              "value": "object_input_data",
                              "children": []
                            },
                            {
                              "value": "AIStructuredResponseGeneratorBlock.Input(\n            **{attr: getattr(input_data, attr) for attr in input_data.model_fields},\n            expected_format={},\n        )",
                              "children": [
                                {
                                  "value": "AIStructuredResponseGeneratorBlock.Input",
                                  "children": [
                                    {
                                      "value": "AIStructuredResponseGeneratorBlock",
                                      "children": []
                                    },
                                    {
                                      "value": "Input",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            **{attr: getattr(input_data, attr) for attr in input_data.model_fields},\n            expected_format={},\n        )",
                                  "children": [
                                    {
                                      "value": "**{attr: getattr(input_data, attr) for attr in input_data.model_fields}",
                                      "children": [
                                        {
                                          "value": "{attr: getattr(input_data, attr) for attr in input_data.model_fields}",
                                          "children": [
                                            {
                                              "value": "attr: getattr(input_data, attr)",
                                              "children": [
                                                {
                                                  "value": "attr",
                                                  "children": []
                                                },
                                                {
                                                  "value": "getattr(input_data, attr)",
                                                  "children": [
                                                    {
                                                      "value": "getattr",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(input_data, attr)",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "attr",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "for attr in input_data.model_fields",
                                              "children": [
                                                {
                                                  "value": "attr",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_data.model_fields",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "model_fields",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "expected_format={}",
                                      "children": [
                                        {
                                          "value": "expected_format",
                                          "children": []
                                        },
                                        {
                                          "value": "{}",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "yield \"response\", self.llm_call(object_input_data, credentials)",
                      "children": [
                        {
                          "value": "yield \"response\", self.llm_call(object_input_data, credentials)",
                          "children": [
                            {
                              "value": "\"response\", self.llm_call(object_input_data, credentials)",
                              "children": [
                                {
                                  "value": "\"response\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "response",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.llm_call(object_input_data, credentials)",
                                  "children": [
                                    {
                                      "value": "self.llm_call",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "llm_call",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(object_input_data, credentials)",
                                      "children": [
                                        {
                                          "value": "object_input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "credentials",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class SummaryStyle(Enum):\n    CONCISE = \"concise\"\n    DETAILED = \"detailed\"\n    BULLET_POINTS = \"bullet points\"\n    NUMBERED_LIST = \"numbered list\"",
      "children": [
        {
          "value": "SummaryStyle",
          "children": []
        },
        {
          "value": "(Enum)",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        },
        {
          "value": "CONCISE = \"concise\"\n    DETAILED = \"detailed\"\n    BULLET_POINTS = \"bullet points\"\n    NUMBERED_LIST = \"numbered list\"",
          "children": [
            {
              "value": "CONCISE = \"concise\"",
              "children": [
                {
                  "value": "CONCISE = \"concise\"",
                  "children": [
                    {
                      "value": "CONCISE",
                      "children": []
                    },
                    {
                      "value": "\"concise\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "concise",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "DETAILED = \"detailed\"",
              "children": [
                {
                  "value": "DETAILED = \"detailed\"",
                  "children": [
                    {
                      "value": "DETAILED",
                      "children": []
                    },
                    {
                      "value": "\"detailed\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "detailed",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "BULLET_POINTS = \"bullet points\"",
              "children": [
                {
                  "value": "BULLET_POINTS = \"bullet points\"",
                  "children": [
                    {
                      "value": "BULLET_POINTS",
                      "children": []
                    },
                    {
                      "value": "\"bullet points\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "bullet points",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "NUMBERED_LIST = \"numbered list\"",
              "children": [
                {
                  "value": "NUMBERED_LIST = \"numbered list\"",
                  "children": [
                    {
                      "value": "NUMBERED_LIST",
                      "children": []
                    },
                    {
                      "value": "\"numbered list\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "numbered list",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class AITextSummarizerBlock(Block):\n    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"The text to summarize.\",\n            placeholder=\"Enter the text to summarize here...\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for summarizing the text.\",\n        )\n        focus: str = SchemaField(\n            title=\"Focus\",\n            default=\"general information\",\n            description=\"The topic to focus on in the summary\",\n        )\n        style: SummaryStyle = SchemaField(\n            title=\"Summary Style\",\n            default=SummaryStyle.CONCISE,\n            description=\"The style of the summary to generate.\",\n        )\n        credentials: AICredentials = AICredentialsField()\n        # TODO: Make this dynamic\n        max_tokens: int = SchemaField(\n            title=\"Max Tokens\",\n            default=4096,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n            ge=1,\n        )\n        chunk_overlap: int = SchemaField(\n            title=\"Chunk Overlap\",\n            default=100,\n            description=\"The number of overlapping tokens between chunks to maintain context.\",\n            ge=0,\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        summary: str = SchemaField(description=\"The final summary of the text.\")\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"a0a69be1-4528-491c-a85a-a4ab6873e3f0\",\n            description=\"Utilize a Large Language Model (LLM) to summarize a long text.\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AITextSummarizerBlock.Input,\n            output_schema=AITextSummarizerBlock.Output,\n            test_input={\n                \"text\": \"Lorem ipsum...\" * 100,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"summary\", \"Final summary of a long text\"),\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )\n            },\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        for output in self._run(input_data, credentials):\n            yield output\n\n    def _run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        chunks = self._split_text(\n            input_data.text, input_data.max_tokens, input_data.chunk_overlap\n        )\n        summaries = []\n\n        for chunk in chunks:\n            chunk_summary = self._summarize_chunk(chunk, input_data, credentials)\n            summaries.append(chunk_summary)\n\n        final_summary = self._combine_summaries(summaries, input_data, credentials)\n        yield \"summary\", final_summary\n\n    @staticmethod\n    def _split_text(text: str, max_tokens: int, overlap: int) -> list[str]:\n        words = text.split()\n        chunks = []\n        chunk_size = max_tokens - overlap\n\n        for i in range(0, len(words), chunk_size):\n            chunk = \" \".join(words[i : i + max_tokens])\n            chunks.append(chunk)\n\n        return chunks\n\n    def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> dict:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response\n\n    def _summarize_chunk(\n        self, chunk: str, input_data: Input, credentials: APIKeyCredentials\n    ) -> str:\n        prompt = f\"Summarize the following text in a {input_data.style} form. Focus your summary on the topic of `{input_data.focus}` if present, otherwise just provide a general summary:\\n\\n```{chunk}```\"\n\n        llm_response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=prompt,\n                credentials=input_data.credentials,\n                model=input_data.model,\n                expected_format={\"summary\": \"The summary of the given text.\"},\n            ),\n            credentials=credentials,\n        )\n\n        return llm_response[\"summary\"]\n\n    def _combine_summaries(\n        self, summaries: list[str], input_data: Input, credentials: APIKeyCredentials\n    ) -> str:\n        combined_text = \"\\n\\n\".join(summaries)\n\n        if len(combined_text.split()) <= input_data.max_tokens:\n            prompt = f\"Provide a final summary of the following section summaries in a {input_data.style} form, focus your summary on the topic of `{input_data.focus}` if present:\\n\\n ```{combined_text}```\\n\\n Just respond with the final_summary in the format specified.\"\n\n            llm_response = self.llm_call(\n                AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                ),\n                credentials=credentials,\n            )\n\n            return llm_response[\"final_summary\"]\n        else:\n            # If combined summaries are still too long, recursively summarize\n            return self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send(None)[\n                1\n            ]  # Get the first yielded value",
      "children": [
        {
          "value": "AITextSummarizerBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"The text to summarize.\",\n            placeholder=\"Enter the text to summarize here...\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for summarizing the text.\",\n        )\n        focus: str = SchemaField(\n            title=\"Focus\",\n            default=\"general information\",\n            description=\"The topic to focus on in the summary\",\n        )\n        style: SummaryStyle = SchemaField(\n            title=\"Summary Style\",\n            default=SummaryStyle.CONCISE,\n            description=\"The style of the summary to generate.\",\n        )\n        credentials: AICredentials = AICredentialsField()\n        # TODO: Make this dynamic\n        max_tokens: int = SchemaField(\n            title=\"Max Tokens\",\n            default=4096,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n            ge=1,\n        )\n        chunk_overlap: int = SchemaField(\n            title=\"Chunk Overlap\",\n            default=100,\n            description=\"The number of overlapping tokens between chunks to maintain context.\",\n            ge=0,\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        summary: str = SchemaField(description=\"The final summary of the text.\")\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"a0a69be1-4528-491c-a85a-a4ab6873e3f0\",\n            description=\"Utilize a Large Language Model (LLM) to summarize a long text.\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AITextSummarizerBlock.Input,\n            output_schema=AITextSummarizerBlock.Output,\n            test_input={\n                \"text\": \"Lorem ipsum...\" * 100,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"summary\", \"Final summary of a long text\"),\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )\n            },\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        for output in self._run(input_data, credentials):\n            yield output\n\n    def _run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        chunks = self._split_text(\n            input_data.text, input_data.max_tokens, input_data.chunk_overlap\n        )\n        summaries = []\n\n        for chunk in chunks:\n            chunk_summary = self._summarize_chunk(chunk, input_data, credentials)\n            summaries.append(chunk_summary)\n\n        final_summary = self._combine_summaries(summaries, input_data, credentials)\n        yield \"summary\", final_summary\n\n    @staticmethod\n    def _split_text(text: str, max_tokens: int, overlap: int) -> list[str]:\n        words = text.split()\n        chunks = []\n        chunk_size = max_tokens - overlap\n\n        for i in range(0, len(words), chunk_size):\n            chunk = \" \".join(words[i : i + max_tokens])\n            chunks.append(chunk)\n\n        return chunks\n\n    def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> dict:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response\n\n    def _summarize_chunk(\n        self, chunk: str, input_data: Input, credentials: APIKeyCredentials\n    ) -> str:\n        prompt = f\"Summarize the following text in a {input_data.style} form. Focus your summary on the topic of `{input_data.focus}` if present, otherwise just provide a general summary:\\n\\n```{chunk}```\"\n\n        llm_response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=prompt,\n                credentials=input_data.credentials,\n                model=input_data.model,\n                expected_format={\"summary\": \"The summary of the given text.\"},\n            ),\n            credentials=credentials,\n        )\n\n        return llm_response[\"summary\"]\n\n    def _combine_summaries(\n        self, summaries: list[str], input_data: Input, credentials: APIKeyCredentials\n    ) -> str:\n        combined_text = \"\\n\\n\".join(summaries)\n\n        if len(combined_text.split()) <= input_data.max_tokens:\n            prompt = f\"Provide a final summary of the following section summaries in a {input_data.style} form, focus your summary on the topic of `{input_data.focus}` if present:\\n\\n ```{combined_text}```\\n\\n Just respond with the final_summary in the format specified.\"\n\n            llm_response = self.llm_call(\n                AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                ),\n                credentials=credentials,\n            )\n\n            return llm_response[\"final_summary\"]\n        else:\n            # If combined summaries are still too long, recursively summarize\n            return self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send(None)[\n                1\n            ]  # Get the first yielded value",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"The text to summarize.\",\n            placeholder=\"Enter the text to summarize here...\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for summarizing the text.\",\n        )\n        focus: str = SchemaField(\n            title=\"Focus\",\n            default=\"general information\",\n            description=\"The topic to focus on in the summary\",\n        )\n        style: SummaryStyle = SchemaField(\n            title=\"Summary Style\",\n            default=SummaryStyle.CONCISE,\n            description=\"The style of the summary to generate.\",\n        )\n        credentials: AICredentials = AICredentialsField()\n        # TODO: Make this dynamic\n        max_tokens: int = SchemaField(\n            title=\"Max Tokens\",\n            default=4096,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n            ge=1,\n        )\n        chunk_overlap: int = SchemaField(\n            title=\"Chunk Overlap\",\n            default=100,\n            description=\"The number of overlapping tokens between chunks to maintain context.\",\n            ge=0,\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "text: str = SchemaField(\n            description=\"The text to summarize.\",\n            placeholder=\"Enter the text to summarize here...\",\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for summarizing the text.\",\n        )\n        focus: str = SchemaField(\n            title=\"Focus\",\n            default=\"general information\",\n            description=\"The topic to focus on in the summary\",\n        )\n        style: SummaryStyle = SchemaField(\n            title=\"Summary Style\",\n            default=SummaryStyle.CONCISE,\n            description=\"The style of the summary to generate.\",\n        )\n        credentials: AICredentials = AICredentialsField()\n        # TODO: Make this dynamic\n        max_tokens: int = SchemaField(\n            title=\"Max Tokens\",\n            default=4096,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n            ge=1,\n        )\n        chunk_overlap: int = SchemaField(\n            title=\"Chunk Overlap\",\n            default=100,\n            description=\"The number of overlapping tokens between chunks to maintain context.\",\n            ge=0,\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                  "children": [
                    {
                      "value": "text: str = SchemaField(\n            description=\"The text to summarize.\",\n            placeholder=\"Enter the text to summarize here...\",\n        )",
                      "children": [
                        {
                          "value": "text: str = SchemaField(\n            description=\"The text to summarize.\",\n            placeholder=\"Enter the text to summarize here...\",\n        )",
                          "children": [
                            {
                              "value": "text",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The text to summarize.\",\n            placeholder=\"Enter the text to summarize here...\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The text to summarize.\",\n            placeholder=\"Enter the text to summarize here...\",\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The text to summarize.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The text to summarize.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The text to summarize.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "placeholder=\"Enter the text to summarize here...\"",
                                      "children": [
                                        {
                                          "value": "placeholder",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Enter the text to summarize here...\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Enter the text to summarize here...",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for summarizing the text.\",\n        )",
                      "children": [
                        {
                          "value": "model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for summarizing the text.\",\n        )",
                          "children": [
                            {
                              "value": "model",
                              "children": []
                            },
                            {
                              "value": "LlmModel",
                              "children": [
                                {
                                  "value": "LlmModel",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for summarizing the text.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for summarizing the text.\",\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"LLM Model\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"LLM Model\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "LLM Model",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=LlmModel.GPT4_TURBO",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "LlmModel.GPT4_TURBO",
                                          "children": [
                                            {
                                              "value": "LlmModel",
                                              "children": []
                                            },
                                            {
                                              "value": "GPT4_TURBO",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The language model to use for summarizing the text.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The language model to use for summarizing the text.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The language model to use for summarizing the text.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "focus: str = SchemaField(\n            title=\"Focus\",\n            default=\"general information\",\n            description=\"The topic to focus on in the summary\",\n        )",
                      "children": [
                        {
                          "value": "focus: str = SchemaField(\n            title=\"Focus\",\n            default=\"general information\",\n            description=\"The topic to focus on in the summary\",\n        )",
                          "children": [
                            {
                              "value": "focus",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"Focus\",\n            default=\"general information\",\n            description=\"The topic to focus on in the summary\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"Focus\",\n            default=\"general information\",\n            description=\"The topic to focus on in the summary\",\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"Focus\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Focus\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Focus",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"general information\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"general information\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "general information",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The topic to focus on in the summary\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The topic to focus on in the summary\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The topic to focus on in the summary",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "style: SummaryStyle = SchemaField(\n            title=\"Summary Style\",\n            default=SummaryStyle.CONCISE,\n            description=\"The style of the summary to generate.\",\n        )",
                      "children": [
                        {
                          "value": "style: SummaryStyle = SchemaField(\n            title=\"Summary Style\",\n            default=SummaryStyle.CONCISE,\n            description=\"The style of the summary to generate.\",\n        )",
                          "children": [
                            {
                              "value": "style",
                              "children": []
                            },
                            {
                              "value": "SummaryStyle",
                              "children": [
                                {
                                  "value": "SummaryStyle",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"Summary Style\",\n            default=SummaryStyle.CONCISE,\n            description=\"The style of the summary to generate.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"Summary Style\",\n            default=SummaryStyle.CONCISE,\n            description=\"The style of the summary to generate.\",\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"Summary Style\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Summary Style\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Summary Style",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=SummaryStyle.CONCISE",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "SummaryStyle.CONCISE",
                                          "children": [
                                            {
                                              "value": "SummaryStyle",
                                              "children": []
                                            },
                                            {
                                              "value": "CONCISE",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The style of the summary to generate.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The style of the summary to generate.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The style of the summary to generate.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: AICredentials = AICredentialsField()",
                      "children": [
                        {
                          "value": "credentials: AICredentials = AICredentialsField()",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "AICredentials",
                              "children": [
                                {
                                  "value": "AICredentials",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "AICredentialsField()",
                              "children": [
                                {
                                  "value": "AICredentialsField",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# TODO: Make this dynamic",
                      "children": []
                    },
                    {
                      "value": "max_tokens: int = SchemaField(\n            title=\"Max Tokens\",\n            default=4096,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n            ge=1,\n        )",
                      "children": [
                        {
                          "value": "max_tokens: int = SchemaField(\n            title=\"Max Tokens\",\n            default=4096,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n            ge=1,\n        )",
                          "children": [
                            {
                              "value": "max_tokens",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"Max Tokens\",\n            default=4096,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n            ge=1,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"Max Tokens\",\n            default=4096,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n            ge=1,\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"Max Tokens\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Max Tokens\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Max Tokens",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=4096",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "4096",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The maximum number of tokens to generate in the chat completion.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The maximum number of tokens to generate in the chat completion.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The maximum number of tokens to generate in the chat completion.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ge=1",
                                      "children": [
                                        {
                                          "value": "ge",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "chunk_overlap: int = SchemaField(\n            title=\"Chunk Overlap\",\n            default=100,\n            description=\"The number of overlapping tokens between chunks to maintain context.\",\n            ge=0,\n        )",
                      "children": [
                        {
                          "value": "chunk_overlap: int = SchemaField(\n            title=\"Chunk Overlap\",\n            default=100,\n            description=\"The number of overlapping tokens between chunks to maintain context.\",\n            ge=0,\n        )",
                          "children": [
                            {
                              "value": "chunk_overlap",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"Chunk Overlap\",\n            default=100,\n            description=\"The number of overlapping tokens between chunks to maintain context.\",\n            ge=0,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"Chunk Overlap\",\n            default=100,\n            description=\"The number of overlapping tokens between chunks to maintain context.\",\n            ge=0,\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"Chunk Overlap\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Chunk Overlap\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Chunk Overlap",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=100",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "100",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The number of overlapping tokens between chunks to maintain context.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The number of overlapping tokens between chunks to maintain context.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The number of overlapping tokens between chunks to maintain context.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ge=0",
                                      "children": [
                                        {
                                          "value": "ge",
                                          "children": []
                                        },
                                        {
                                          "value": "0",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                      "children": [
                        {
                          "value": "ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                          "children": [
                            {
                              "value": "ollama_host",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                                  "children": [
                                    {
                                      "value": "advanced=True",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"localhost:11434\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"localhost:11434\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "localhost:11434",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"Ollama host for local  models\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Ollama host for local  models\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Ollama host for local  models",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        summary: str = SchemaField(description=\"The final summary of the text.\")\n        error: str = SchemaField(description=\"Error message if the API call failed.\")",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "summary: str = SchemaField(description=\"The final summary of the text.\")\n        error: str = SchemaField(description=\"Error message if the API call failed.\")",
                  "children": [
                    {
                      "value": "summary: str = SchemaField(description=\"The final summary of the text.\")",
                      "children": [
                        {
                          "value": "summary: str = SchemaField(description=\"The final summary of the text.\")",
                          "children": [
                            {
                              "value": "summary",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"The final summary of the text.\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"The final summary of the text.\")",
                                  "children": [
                                    {
                                      "value": "description=\"The final summary of the text.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The final summary of the text.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The final summary of the text.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "error: str = SchemaField(description=\"Error message if the API call failed.\")",
                      "children": [
                        {
                          "value": "error: str = SchemaField(description=\"Error message if the API call failed.\")",
                          "children": [
                            {
                              "value": "error",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Error message if the API call failed.\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Error message if the API call failed.\")",
                                  "children": [
                                    {
                                      "value": "description=\"Error message if the API call failed.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Error message if the API call failed.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Error message if the API call failed.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"a0a69be1-4528-491c-a85a-a4ab6873e3f0\",\n            description=\"Utilize a Large Language Model (LLM) to summarize a long text.\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AITextSummarizerBlock.Input,\n            output_schema=AITextSummarizerBlock.Output,\n            test_input={\n                \"text\": \"Lorem ipsum...\" * 100,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"summary\", \"Final summary of a long text\"),\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )\n            },\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"a0a69be1-4528-491c-a85a-a4ab6873e3f0\",\n            description=\"Utilize a Large Language Model (LLM) to summarize a long text.\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AITextSummarizerBlock.Input,\n            output_schema=AITextSummarizerBlock.Output,\n            test_input={\n                \"text\": \"Lorem ipsum...\" * 100,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"summary\", \"Final summary of a long text\"),\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )\n            },\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"a0a69be1-4528-491c-a85a-a4ab6873e3f0\",\n            description=\"Utilize a Large Language Model (LLM) to summarize a long text.\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AITextSummarizerBlock.Input,\n            output_schema=AITextSummarizerBlock.Output,\n            test_input={\n                \"text\": \"Lorem ipsum...\" * 100,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"summary\", \"Final summary of a long text\"),\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )\n            },\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"a0a69be1-4528-491c-a85a-a4ab6873e3f0\",\n            description=\"Utilize a Large Language Model (LLM) to summarize a long text.\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AITextSummarizerBlock.Input,\n            output_schema=AITextSummarizerBlock.Output,\n            test_input={\n                \"text\": \"Lorem ipsum...\" * 100,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"summary\", \"Final summary of a long text\"),\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )\n            },\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"a0a69be1-4528-491c-a85a-a4ab6873e3f0\",\n            description=\"Utilize a Large Language Model (LLM) to summarize a long text.\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AITextSummarizerBlock.Input,\n            output_schema=AITextSummarizerBlock.Output,\n            test_input={\n                \"text\": \"Lorem ipsum...\" * 100,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\"summary\", \"Final summary of a long text\"),\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )\n            },\n        )",
                              "children": [
                                {
                                  "value": "id=\"a0a69be1-4528-491c-a85a-a4ab6873e3f0\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"a0a69be1-4528-491c-a85a-a4ab6873e3f0\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "a0a69be1-4528-491c-a85a-a4ab6873e3f0",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "description=\"Utilize a Large Language Model (LLM) to summarize a long text.\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Utilize a Large Language Model (LLM) to summarize a long text.\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Utilize a Large Language Model (LLM) to summarize a long text.",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.AI, BlockCategory.TEXT}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.AI, BlockCategory.TEXT}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.AI",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "AI",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "BlockCategory.TEXT",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "TEXT",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=AITextSummarizerBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "AITextSummarizerBlock.Input",
                                      "children": [
                                        {
                                          "value": "AITextSummarizerBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema=AITextSummarizerBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "AITextSummarizerBlock.Output",
                                      "children": [
                                        {
                                          "value": "AITextSummarizerBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_input={\n                \"text\": \"Lorem ipsum...\" * 100,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            }",
                                  "children": [
                                    {
                                      "value": "test_input",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"text\": \"Lorem ipsum...\" * 100,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            }",
                                      "children": [
                                        {
                                          "value": "\"text\": \"Lorem ipsum...\" * 100",
                                          "children": [
                                            {
                                              "value": "\"text\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "text",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"Lorem ipsum...\" * 100",
                                              "children": [
                                                {
                                                  "value": "\"Lorem ipsum...\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Lorem ipsum...",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "100",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"credentials\": TEST_CREDENTIALS_INPUT",
                                          "children": [
                                            {
                                              "value": "\"credentials\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "TEST_CREDENTIALS_INPUT",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_credentials=TEST_CREDENTIALS",
                                  "children": [
                                    {
                                      "value": "test_credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "TEST_CREDENTIALS",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "test_output=(\"summary\", \"Final summary of a long text\")",
                                  "children": [
                                    {
                                      "value": "test_output",
                                      "children": []
                                    },
                                    {
                                      "value": "(\"summary\", \"Final summary of a long text\")",
                                      "children": [
                                        {
                                          "value": "\"summary\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "summary",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"Final summary of a long text\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Final summary of a long text",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_mock={\n                \"llm_call\": lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )\n            }",
                                  "children": [
                                    {
                                      "value": "test_mock",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"llm_call\": lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )\n            }",
                                      "children": [
                                        {
                                          "value": "\"llm_call\": lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )",
                                          "children": [
                                            {
                                              "value": "\"llm_call\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "llm_call",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "lambda input_data, credentials: (\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )",
                                              "children": [
                                                {
                                                  "value": "input_data, credentials",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "credentials",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                    {\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}\n                )",
                                                  "children": [
                                                    {
                                                      "value": "{\"final_summary\": \"Final summary of a long text\"}\n                    if \"final_summary\" in input_data.expected_format\n                    else {\"summary\": \"Summary of a chunk of text\"}",
                                                      "children": [
                                                        {
                                                          "value": "{\"final_summary\": \"Final summary of a long text\"}",
                                                          "children": [
                                                            {
                                                              "value": "\"final_summary\": \"Final summary of a long text\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"final_summary\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "final_summary",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"Final summary of a long text\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "Final summary of a long text",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"final_summary\" in input_data.expected_format",
                                                          "children": [
                                                            {
                                                              "value": "\"final_summary\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "final_summary",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "input_data.expected_format",
                                                              "children": [
                                                                {
                                                                  "value": "input_data",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "expected_format",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "{\"summary\": \"Summary of a chunk of text\"}",
                                                          "children": [
                                                            {
                                                              "value": "\"summary\": \"Summary of a chunk of text\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"summary\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "summary",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"Summary of a chunk of text\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "Summary of a chunk of text",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        for output in self._run(input_data, credentials):\n            yield output",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "*",
                      "children": []
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "for output in self._run(input_data, credentials):\n            yield output",
                  "children": [
                    {
                      "value": "for output in self._run(input_data, credentials):\n            yield output",
                      "children": [
                        {
                          "value": "output",
                          "children": []
                        },
                        {
                          "value": "self._run(input_data, credentials)",
                          "children": [
                            {
                              "value": "self._run",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "_run",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(input_data, credentials)",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "credentials",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "yield output",
                          "children": [
                            {
                              "value": "yield output",
                              "children": [
                                {
                                  "value": "yield output",
                                  "children": [
                                    {
                                      "value": "output",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def _run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        chunks = self._split_text(\n            input_data.text, input_data.max_tokens, input_data.chunk_overlap\n        )\n        summaries = []\n\n        for chunk in chunks:\n            chunk_summary = self._summarize_chunk(chunk, input_data, credentials)\n            summaries.append(chunk_summary)\n\n        final_summary = self._combine_summaries(summaries, input_data, credentials)\n        yield \"summary\", final_summary",
              "children": [
                {
                  "value": "_run",
                  "children": []
                },
                {
                  "value": "(self, input_data: Input, credentials: APIKeyCredentials)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "chunks = self._split_text(\n            input_data.text, input_data.max_tokens, input_data.chunk_overlap\n        )\n        summaries = []\n\n        for chunk in chunks:\n            chunk_summary = self._summarize_chunk(chunk, input_data, credentials)\n            summaries.append(chunk_summary)\n\n        final_summary = self._combine_summaries(summaries, input_data, credentials)\n        yield \"summary\", final_summary",
                  "children": [
                    {
                      "value": "chunks = self._split_text(\n            input_data.text, input_data.max_tokens, input_data.chunk_overlap\n        )",
                      "children": [
                        {
                          "value": "chunks = self._split_text(\n            input_data.text, input_data.max_tokens, input_data.chunk_overlap\n        )",
                          "children": [
                            {
                              "value": "chunks",
                              "children": []
                            },
                            {
                              "value": "self._split_text(\n            input_data.text, input_data.max_tokens, input_data.chunk_overlap\n        )",
                              "children": [
                                {
                                  "value": "self._split_text",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_split_text",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            input_data.text, input_data.max_tokens, input_data.chunk_overlap\n        )",
                                  "children": [
                                    {
                                      "value": "input_data.text",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "input_data.max_tokens",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "max_tokens",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "input_data.chunk_overlap",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "chunk_overlap",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "summaries = []",
                      "children": [
                        {
                          "value": "summaries = []",
                          "children": [
                            {
                              "value": "summaries",
                              "children": []
                            },
                            {
                              "value": "[]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for chunk in chunks:\n            chunk_summary = self._summarize_chunk(chunk, input_data, credentials)\n            summaries.append(chunk_summary)",
                      "children": [
                        {
                          "value": "chunk",
                          "children": []
                        },
                        {
                          "value": "chunks",
                          "children": []
                        },
                        {
                          "value": "chunk_summary = self._summarize_chunk(chunk, input_data, credentials)\n            summaries.append(chunk_summary)",
                          "children": [
                            {
                              "value": "chunk_summary = self._summarize_chunk(chunk, input_data, credentials)",
                              "children": [
                                {
                                  "value": "chunk_summary = self._summarize_chunk(chunk, input_data, credentials)",
                                  "children": [
                                    {
                                      "value": "chunk_summary",
                                      "children": []
                                    },
                                    {
                                      "value": "self._summarize_chunk(chunk, input_data, credentials)",
                                      "children": [
                                        {
                                          "value": "self._summarize_chunk",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "_summarize_chunk",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(chunk, input_data, credentials)",
                                          "children": [
                                            {
                                              "value": "chunk",
                                              "children": []
                                            },
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "credentials",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "summaries.append(chunk_summary)",
                              "children": [
                                {
                                  "value": "summaries.append(chunk_summary)",
                                  "children": [
                                    {
                                      "value": "summaries.append",
                                      "children": [
                                        {
                                          "value": "summaries",
                                          "children": []
                                        },
                                        {
                                          "value": "append",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(chunk_summary)",
                                      "children": [
                                        {
                                          "value": "chunk_summary",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "final_summary = self._combine_summaries(summaries, input_data, credentials)",
                      "children": [
                        {
                          "value": "final_summary = self._combine_summaries(summaries, input_data, credentials)",
                          "children": [
                            {
                              "value": "final_summary",
                              "children": []
                            },
                            {
                              "value": "self._combine_summaries(summaries, input_data, credentials)",
                              "children": [
                                {
                                  "value": "self._combine_summaries",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_combine_summaries",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(summaries, input_data, credentials)",
                                  "children": [
                                    {
                                      "value": "summaries",
                                      "children": []
                                    },
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "credentials",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "yield \"summary\", final_summary",
                      "children": [
                        {
                          "value": "yield \"summary\", final_summary",
                          "children": [
                            {
                              "value": "\"summary\", final_summary",
                              "children": [
                                {
                                  "value": "\"summary\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "summary",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "final_summary",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def _split_text(text: str, max_tokens: int, overlap: int) -> list[str]:\n        words = text.split()\n        chunks = []\n        chunk_size = max_tokens - overlap\n\n        for i in range(0, len(words), chunk_size):\n            chunk = \" \".join(words[i : i + max_tokens])\n            chunks.append(chunk)\n\n        return chunks",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def _split_text(text: str, max_tokens: int, overlap: int) -> list[str]:\n        words = text.split()\n        chunks = []\n        chunk_size = max_tokens - overlap\n\n        for i in range(0, len(words), chunk_size):\n            chunk = \" \".join(words[i : i + max_tokens])\n            chunks.append(chunk)\n\n        return chunks",
                  "children": [
                    {
                      "value": "_split_text",
                      "children": []
                    },
                    {
                      "value": "(text: str, max_tokens: int, overlap: int)",
                      "children": [
                        {
                          "value": "text: str",
                          "children": [
                            {
                              "value": "text",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "max_tokens: int",
                          "children": [
                            {
                              "value": "max_tokens",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "overlap: int",
                          "children": [
                            {
                              "value": "overlap",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "list[str]",
                      "children": [
                        {
                          "value": "list[str]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[str]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "words = text.split()\n        chunks = []\n        chunk_size = max_tokens - overlap\n\n        for i in range(0, len(words), chunk_size):\n            chunk = \" \".join(words[i : i + max_tokens])\n            chunks.append(chunk)\n\n        return chunks",
                      "children": [
                        {
                          "value": "words = text.split()",
                          "children": [
                            {
                              "value": "words = text.split()",
                              "children": [
                                {
                                  "value": "words",
                                  "children": []
                                },
                                {
                                  "value": "text.split()",
                                  "children": [
                                    {
                                      "value": "text.split",
                                      "children": [
                                        {
                                          "value": "text",
                                          "children": []
                                        },
                                        {
                                          "value": "split",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "chunks = []",
                          "children": [
                            {
                              "value": "chunks = []",
                              "children": [
                                {
                                  "value": "chunks",
                                  "children": []
                                },
                                {
                                  "value": "[]",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "chunk_size = max_tokens - overlap",
                          "children": [
                            {
                              "value": "chunk_size = max_tokens - overlap",
                              "children": [
                                {
                                  "value": "chunk_size",
                                  "children": []
                                },
                                {
                                  "value": "max_tokens - overlap",
                                  "children": [
                                    {
                                      "value": "max_tokens",
                                      "children": []
                                    },
                                    {
                                      "value": "overlap",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for i in range(0, len(words), chunk_size):\n            chunk = \" \".join(words[i : i + max_tokens])\n            chunks.append(chunk)",
                          "children": [
                            {
                              "value": "i",
                              "children": []
                            },
                            {
                              "value": "range(0, len(words), chunk_size)",
                              "children": [
                                {
                                  "value": "range",
                                  "children": []
                                },
                                {
                                  "value": "(0, len(words), chunk_size)",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    },
                                    {
                                      "value": "len(words)",
                                      "children": [
                                        {
                                          "value": "len",
                                          "children": []
                                        },
                                        {
                                          "value": "(words)",
                                          "children": [
                                            {
                                              "value": "words",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "chunk_size",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "chunk = \" \".join(words[i : i + max_tokens])\n            chunks.append(chunk)",
                              "children": [
                                {
                                  "value": "chunk = \" \".join(words[i : i + max_tokens])",
                                  "children": [
                                    {
                                      "value": "chunk = \" \".join(words[i : i + max_tokens])",
                                      "children": [
                                        {
                                          "value": "chunk",
                                          "children": []
                                        },
                                        {
                                          "value": "\" \".join(words[i : i + max_tokens])",
                                          "children": [
                                            {
                                              "value": "\" \".join",
                                              "children": [
                                                {
                                                  "value": "\" \"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "join",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(words[i : i + max_tokens])",
                                              "children": [
                                                {
                                                  "value": "words[i : i + max_tokens]",
                                                  "children": [
                                                    {
                                                      "value": "words",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "i : i + max_tokens",
                                                      "children": [
                                                        {
                                                          "value": "i",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "i + max_tokens",
                                                          "children": [
                                                            {
                                                              "value": "i",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "max_tokens",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "chunks.append(chunk)",
                                  "children": [
                                    {
                                      "value": "chunks.append(chunk)",
                                      "children": [
                                        {
                                          "value": "chunks.append",
                                          "children": [
                                            {
                                              "value": "chunks",
                                              "children": []
                                            },
                                            {
                                              "value": "append",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(chunk)",
                                          "children": [
                                            {
                                              "value": "chunk",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return chunks",
                          "children": [
                            {
                              "value": "chunks",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> dict:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response",
              "children": [
                {
                  "value": "llm_call",
                  "children": []
                },
                {
                  "value": "(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: AIStructuredResponseGeneratorBlock.Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "AIStructuredResponseGeneratorBlock.Input",
                          "children": [
                            {
                              "value": "AIStructuredResponseGeneratorBlock.Input",
                              "children": [
                                {
                                  "value": "AIStructuredResponseGeneratorBlock",
                                  "children": []
                                },
                                {
                                  "value": "Input",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "dict",
                  "children": [
                    {
                      "value": "dict",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response",
                  "children": [
                    {
                      "value": "block = AIStructuredResponseGeneratorBlock()",
                      "children": [
                        {
                          "value": "block = AIStructuredResponseGeneratorBlock()",
                          "children": [
                            {
                              "value": "block",
                              "children": []
                            },
                            {
                              "value": "AIStructuredResponseGeneratorBlock()",
                              "children": [
                                {
                                  "value": "AIStructuredResponseGeneratorBlock",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "response = block.run_once(input_data, \"response\", credentials=credentials)",
                      "children": [
                        {
                          "value": "response = block.run_once(input_data, \"response\", credentials=credentials)",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "block.run_once(input_data, \"response\", credentials=credentials)",
                              "children": [
                                {
                                  "value": "block.run_once",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "run_once",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(input_data, \"response\", credentials=credentials)",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "\"response\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "response",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "credentials=credentials",
                                      "children": [
                                        {
                                          "value": "credentials",
                                          "children": []
                                        },
                                        {
                                          "value": "credentials",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.merge_stats(block.execution_stats)",
                      "children": [
                        {
                          "value": "self.merge_stats(block.execution_stats)",
                          "children": [
                            {
                              "value": "self.merge_stats",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "merge_stats",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(block.execution_stats)",
                              "children": [
                                {
                                  "value": "block.execution_stats",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "execution_stats",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return response",
                      "children": [
                        {
                          "value": "response",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def _summarize_chunk(\n        self, chunk: str, input_data: Input, credentials: APIKeyCredentials\n    ) -> str:\n        prompt = f\"Summarize the following text in a {input_data.style} form. Focus your summary on the topic of `{input_data.focus}` if present, otherwise just provide a general summary:\\n\\n```{chunk}```\"\n\n        llm_response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=prompt,\n                credentials=input_data.credentials,\n                model=input_data.model,\n                expected_format={\"summary\": \"The summary of the given text.\"},\n            ),\n            credentials=credentials,\n        )\n\n        return llm_response[\"summary\"]",
              "children": [
                {
                  "value": "_summarize_chunk",
                  "children": []
                },
                {
                  "value": "(\n        self, chunk: str, input_data: Input, credentials: APIKeyCredentials\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "chunk: str",
                      "children": [
                        {
                          "value": "chunk",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "prompt = f\"Summarize the following text in a {input_data.style} form. Focus your summary on the topic of `{input_data.focus}` if present, otherwise just provide a general summary:\\n\\n```{chunk}```\"\n\n        llm_response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=prompt,\n                credentials=input_data.credentials,\n                model=input_data.model,\n                expected_format={\"summary\": \"The summary of the given text.\"},\n            ),\n            credentials=credentials,\n        )\n\n        return llm_response[\"summary\"]",
                  "children": [
                    {
                      "value": "prompt = f\"Summarize the following text in a {input_data.style} form. Focus your summary on the topic of `{input_data.focus}` if present, otherwise just provide a general summary:\\n\\n```{chunk}```\"",
                      "children": [
                        {
                          "value": "prompt = f\"Summarize the following text in a {input_data.style} form. Focus your summary on the topic of `{input_data.focus}` if present, otherwise just provide a general summary:\\n\\n```{chunk}```\"",
                          "children": [
                            {
                              "value": "prompt",
                              "children": []
                            },
                            {
                              "value": "f\"Summarize the following text in a {input_data.style} form. Focus your summary on the topic of `{input_data.focus}` if present, otherwise just provide a general summary:\\n\\n```{chunk}```\"",
                              "children": [
                                {
                                  "value": "f\"",
                                  "children": []
                                },
                                {
                                  "value": "Summarize the following text in a",
                                  "children": []
                                },
                                {
                                  "value": "{input_data.style}",
                                  "children": [
                                    {
                                      "value": "input_data.style",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "style",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "form. Focus your summary on the topic of `",
                                  "children": []
                                },
                                {
                                  "value": "{input_data.focus}",
                                  "children": [
                                    {
                                      "value": "input_data.focus",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "focus",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "` if present, otherwise just provide a general summary:\\n\\n```",
                                  "children": [
                                    {
                                      "value": "\\n",
                                      "children": []
                                    },
                                    {
                                      "value": "\\n",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "{chunk}",
                                  "children": [
                                    {
                                      "value": "chunk",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "```",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "llm_response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=prompt,\n                credentials=input_data.credentials,\n                model=input_data.model,\n                expected_format={\"summary\": \"The summary of the given text.\"},\n            ),\n            credentials=credentials,\n        )",
                      "children": [
                        {
                          "value": "llm_response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=prompt,\n                credentials=input_data.credentials,\n                model=input_data.model,\n                expected_format={\"summary\": \"The summary of the given text.\"},\n            ),\n            credentials=credentials,\n        )",
                          "children": [
                            {
                              "value": "llm_response",
                              "children": []
                            },
                            {
                              "value": "self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=prompt,\n                credentials=input_data.credentials,\n                model=input_data.model,\n                expected_format={\"summary\": \"The summary of the given text.\"},\n            ),\n            credentials=credentials,\n        )",
                              "children": [
                                {
                                  "value": "self.llm_call",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "llm_call",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=prompt,\n                credentials=input_data.credentials,\n                model=input_data.model,\n                expected_format={\"summary\": \"The summary of the given text.\"},\n            ),\n            credentials=credentials,\n        )",
                                  "children": [
                                    {
                                      "value": "AIStructuredResponseGeneratorBlock.Input(\n                prompt=prompt,\n                credentials=input_data.credentials,\n                model=input_data.model,\n                expected_format={\"summary\": \"The summary of the given text.\"},\n            )",
                                      "children": [
                                        {
                                          "value": "AIStructuredResponseGeneratorBlock.Input",
                                          "children": [
                                            {
                                              "value": "AIStructuredResponseGeneratorBlock",
                                              "children": []
                                            },
                                            {
                                              "value": "Input",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                prompt=prompt,\n                credentials=input_data.credentials,\n                model=input_data.model,\n                expected_format={\"summary\": \"The summary of the given text.\"},\n            )",
                                          "children": [
                                            {
                                              "value": "prompt=prompt",
                                              "children": [
                                                {
                                                  "value": "prompt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "prompt",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "credentials=input_data.credentials",
                                              "children": [
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_data.credentials",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "credentials",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "model=input_data.model",
                                              "children": [
                                                {
                                                  "value": "model",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_data.model",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "model",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "expected_format={\"summary\": \"The summary of the given text.\"}",
                                              "children": [
                                                {
                                                  "value": "expected_format",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{\"summary\": \"The summary of the given text.\"}",
                                                  "children": [
                                                    {
                                                      "value": "\"summary\": \"The summary of the given text.\"",
                                                      "children": [
                                                        {
                                                          "value": "\"summary\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "summary",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"The summary of the given text.\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "The summary of the given text.",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "credentials=credentials",
                                      "children": [
                                        {
                                          "value": "credentials",
                                          "children": []
                                        },
                                        {
                                          "value": "credentials",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return llm_response[\"summary\"]",
                      "children": [
                        {
                          "value": "llm_response[\"summary\"]",
                          "children": [
                            {
                              "value": "llm_response",
                              "children": []
                            },
                            {
                              "value": "\"summary\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "summary",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def _combine_summaries(\n        self, summaries: list[str], input_data: Input, credentials: APIKeyCredentials\n    ) -> str:\n        combined_text = \"\\n\\n\".join(summaries)\n\n        if len(combined_text.split()) <= input_data.max_tokens:\n            prompt = f\"Provide a final summary of the following section summaries in a {input_data.style} form, focus your summary on the topic of `{input_data.focus}` if present:\\n\\n ```{combined_text}```\\n\\n Just respond with the final_summary in the format specified.\"\n\n            llm_response = self.llm_call(\n                AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                ),\n                credentials=credentials,\n            )\n\n            return llm_response[\"final_summary\"]\n        else:\n            # If combined summaries are still too long, recursively summarize\n            return self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send(None)[\n                1\n            ]  # Get the first yielded value",
              "children": [
                {
                  "value": "_combine_summaries",
                  "children": []
                },
                {
                  "value": "(\n        self, summaries: list[str], input_data: Input, credentials: APIKeyCredentials\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "summaries: list[str]",
                      "children": [
                        {
                          "value": "summaries",
                          "children": []
                        },
                        {
                          "value": "list[str]",
                          "children": [
                            {
                              "value": "list[str]",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "[str]",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "combined_text = \"\\n\\n\".join(summaries)\n\n        if len(combined_text.split()) <= input_data.max_tokens:\n            prompt = f\"Provide a final summary of the following section summaries in a {input_data.style} form, focus your summary on the topic of `{input_data.focus}` if present:\\n\\n ```{combined_text}```\\n\\n Just respond with the final_summary in the format specified.\"\n\n            llm_response = self.llm_call(\n                AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                ),\n                credentials=credentials,\n            )\n\n            return llm_response[\"final_summary\"]\n        else:\n            # If combined summaries are still too long, recursively summarize\n            return self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send(None)[\n                1\n            ]  # Get the first yielded value",
                  "children": [
                    {
                      "value": "combined_text = \"\\n\\n\".join(summaries)",
                      "children": [
                        {
                          "value": "combined_text = \"\\n\\n\".join(summaries)",
                          "children": [
                            {
                              "value": "combined_text",
                              "children": []
                            },
                            {
                              "value": "\"\\n\\n\".join(summaries)",
                              "children": [
                                {
                                  "value": "\"\\n\\n\".join",
                                  "children": [
                                    {
                                      "value": "\"\\n\\n\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "\\n\\n",
                                          "children": [
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "join",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(summaries)",
                                  "children": [
                                    {
                                      "value": "summaries",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if len(combined_text.split()) <= input_data.max_tokens:\n            prompt = f\"Provide a final summary of the following section summaries in a {input_data.style} form, focus your summary on the topic of `{input_data.focus}` if present:\\n\\n ```{combined_text}```\\n\\n Just respond with the final_summary in the format specified.\"\n\n            llm_response = self.llm_call(\n                AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                ),\n                credentials=credentials,\n            )\n\n            return llm_response[\"final_summary\"]\n        else:\n            # If combined summaries are still too long, recursively summarize\n            return self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send(None)[\n                1\n            ]  # Get the first yielded value",
                      "children": [
                        {
                          "value": "len(combined_text.split()) <= input_data.max_tokens",
                          "children": [
                            {
                              "value": "len(combined_text.split())",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(combined_text.split())",
                                  "children": [
                                    {
                                      "value": "combined_text.split()",
                                      "children": [
                                        {
                                          "value": "combined_text.split",
                                          "children": [
                                            {
                                              "value": "combined_text",
                                              "children": []
                                            },
                                            {
                                              "value": "split",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "input_data.max_tokens",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "max_tokens",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "prompt = f\"Provide a final summary of the following section summaries in a {input_data.style} form, focus your summary on the topic of `{input_data.focus}` if present:\\n\\n ```{combined_text}```\\n\\n Just respond with the final_summary in the format specified.\"\n\n            llm_response = self.llm_call(\n                AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                ),\n                credentials=credentials,\n            )\n\n            return llm_response[\"final_summary\"]",
                          "children": [
                            {
                              "value": "prompt = f\"Provide a final summary of the following section summaries in a {input_data.style} form, focus your summary on the topic of `{input_data.focus}` if present:\\n\\n ```{combined_text}```\\n\\n Just respond with the final_summary in the format specified.\"",
                              "children": [
                                {
                                  "value": "prompt = f\"Provide a final summary of the following section summaries in a {input_data.style} form, focus your summary on the topic of `{input_data.focus}` if present:\\n\\n ```{combined_text}```\\n\\n Just respond with the final_summary in the format specified.\"",
                                  "children": [
                                    {
                                      "value": "prompt",
                                      "children": []
                                    },
                                    {
                                      "value": "f\"Provide a final summary of the following section summaries in a {input_data.style} form, focus your summary on the topic of `{input_data.focus}` if present:\\n\\n ```{combined_text}```\\n\\n Just respond with the final_summary in the format specified.\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Provide a final summary of the following section summaries in a",
                                          "children": []
                                        },
                                        {
                                          "value": "{input_data.style}",
                                          "children": [
                                            {
                                              "value": "input_data.style",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "style",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "form, focus your summary on the topic of `",
                                          "children": []
                                        },
                                        {
                                          "value": "{input_data.focus}",
                                          "children": [
                                            {
                                              "value": "input_data.focus",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "focus",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "` if present:\\n\\n ```",
                                          "children": [
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "{combined_text}",
                                          "children": [
                                            {
                                              "value": "combined_text",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "```\\n\\n Just respond with the final_summary in the format specified.",
                                          "children": [
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "llm_response = self.llm_call(\n                AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                ),\n                credentials=credentials,\n            )",
                              "children": [
                                {
                                  "value": "llm_response = self.llm_call(\n                AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                ),\n                credentials=credentials,\n            )",
                                  "children": [
                                    {
                                      "value": "llm_response",
                                      "children": []
                                    },
                                    {
                                      "value": "self.llm_call(\n                AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                ),\n                credentials=credentials,\n            )",
                                      "children": [
                                        {
                                          "value": "self.llm_call",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "llm_call",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                ),\n                credentials=credentials,\n            )",
                                          "children": [
                                            {
                                              "value": "AIStructuredResponseGeneratorBlock.Input(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                )",
                                              "children": [
                                                {
                                                  "value": "AIStructuredResponseGeneratorBlock.Input",
                                                  "children": [
                                                    {
                                                      "value": "AIStructuredResponseGeneratorBlock",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Input",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                    prompt=prompt,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    },\n                )",
                                                  "children": [
                                                    {
                                                      "value": "prompt=prompt",
                                                      "children": [
                                                        {
                                                          "value": "prompt",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "prompt",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "credentials=input_data.credentials",
                                                      "children": [
                                                        {
                                                          "value": "credentials",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_data.credentials",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "credentials",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "model=input_data.model",
                                                      "children": [
                                                        {
                                                          "value": "model",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_data.model",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "model",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "expected_format={\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    }",
                                                      "children": [
                                                        {
                                                          "value": "expected_format",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{\n                        \"final_summary\": \"The final summary of all provided summaries.\"\n                    }",
                                                          "children": [
                                                            {
                                                              "value": "\"final_summary\": \"The final summary of all provided summaries.\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"final_summary\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "final_summary",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"The final summary of all provided summaries.\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "The final summary of all provided summaries.",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "credentials=credentials",
                                              "children": [
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "return llm_response[\"final_summary\"]",
                              "children": [
                                {
                                  "value": "llm_response[\"final_summary\"]",
                                  "children": [
                                    {
                                      "value": "llm_response",
                                      "children": []
                                    },
                                    {
                                      "value": "\"final_summary\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "final_summary",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            # If combined summaries are still too long, recursively summarize\n            return self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send(None)[\n                1\n            ]  # Get the first yielded value",
                          "children": [
                            {
                              "value": "# If combined summaries are still too long, recursively summarize",
                              "children": []
                            },
                            {
                              "value": "return self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send(None)[\n                1\n            ]  # Get the first yielded value",
                              "children": [
                                {
                                  "value": "return self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send(None)[\n                1\n            ]",
                                  "children": [
                                    {
                                      "value": "self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send(None)[\n                1\n            ]",
                                      "children": [
                                        {
                                          "value": "self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send(None)",
                                          "children": [
                                            {
                                              "value": "self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            ).send",
                                              "children": [
                                                {
                                                  "value": "self._run(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            )",
                                                  "children": [
                                                    {
                                                      "value": "self._run",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "_run",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\n                AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                ),\n                credentials=credentials,\n            )",
                                                      "children": [
                                                        {
                                                          "value": "AITextSummarizerBlock.Input(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                )",
                                                          "children": [
                                                            {
                                                              "value": "AITextSummarizerBlock.Input",
                                                              "children": [
                                                                {
                                                                  "value": "AITextSummarizerBlock",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "Input",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(\n                    text=combined_text,\n                    credentials=input_data.credentials,\n                    model=input_data.model,\n                    max_tokens=input_data.max_tokens,\n                    chunk_overlap=input_data.chunk_overlap,\n                )",
                                                              "children": [
                                                                {
                                                                  "value": "text=combined_text",
                                                                  "children": [
                                                                    {
                                                                      "value": "text",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "combined_text",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "credentials=input_data.credentials",
                                                                  "children": [
                                                                    {
                                                                      "value": "credentials",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "input_data.credentials",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "credentials",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "model=input_data.model",
                                                                  "children": [
                                                                    {
                                                                      "value": "model",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "input_data.model",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "model",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "max_tokens=input_data.max_tokens",
                                                                  "children": [
                                                                    {
                                                                      "value": "max_tokens",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "input_data.max_tokens",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "max_tokens",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "chunk_overlap=input_data.chunk_overlap",
                                                                  "children": [
                                                                    {
                                                                      "value": "chunk_overlap",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "input_data.chunk_overlap",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "chunk_overlap",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "credentials=credentials",
                                                          "children": [
                                                            {
                                                              "value": "credentials",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "credentials",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "send",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(None)",
                                              "children": [
                                                {
                                                  "value": "None",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Get the first yielded value",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class AIConversationBlock(Block):\n    class Input(BlockSchema):\n        messages: List[Message] = SchemaField(\n            description=\"List of messages in the conversation.\", min_length=1\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for the conversation.\",\n        )\n        credentials: AICredentials = AICredentialsField()\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        response: str = SchemaField(\n            description=\"The model's response to the conversation.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"32a87eab-381e-4dd4-bdb8-4c47151be35a\",\n            description=\"Advanced LLM call that takes a list of messages and sends them to the language model.\",\n            categories={BlockCategory.AI},\n            input_schema=AIConversationBlock.Input,\n            output_schema=AIConversationBlock.Output,\n            test_input={\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ],\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\n                \"response\",\n                \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\",\n            ),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"\n            },\n        )\n\n    def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> str:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response[\"response\"]\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=\"\",\n                credentials=input_data.credentials,\n                model=input_data.model,\n                conversation_history=input_data.messages,\n                max_tokens=input_data.max_tokens,\n                expected_format={},\n            ),\n            credentials=credentials,\n        )\n\n        yield \"response\", response",
      "children": [
        {
          "value": "AIConversationBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        messages: List[Message] = SchemaField(\n            description=\"List of messages in the conversation.\", min_length=1\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for the conversation.\",\n        )\n        credentials: AICredentials = AICredentialsField()\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        response: str = SchemaField(\n            description=\"The model's response to the conversation.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"32a87eab-381e-4dd4-bdb8-4c47151be35a\",\n            description=\"Advanced LLM call that takes a list of messages and sends them to the language model.\",\n            categories={BlockCategory.AI},\n            input_schema=AIConversationBlock.Input,\n            output_schema=AIConversationBlock.Output,\n            test_input={\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ],\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\n                \"response\",\n                \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\",\n            ),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"\n            },\n        )\n\n    def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> str:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response[\"response\"]\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=\"\",\n                credentials=input_data.credentials,\n                model=input_data.model,\n                conversation_history=input_data.messages,\n                max_tokens=input_data.max_tokens,\n                expected_format={},\n            ),\n            credentials=credentials,\n        )\n\n        yield \"response\", response",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        messages: List[Message] = SchemaField(\n            description=\"List of messages in the conversation.\", min_length=1\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for the conversation.\",\n        )\n        credentials: AICredentials = AICredentialsField()\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "messages: List[Message] = SchemaField(\n            description=\"List of messages in the conversation.\", min_length=1\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for the conversation.\",\n        )\n        credentials: AICredentials = AICredentialsField()\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                  "children": [
                    {
                      "value": "messages: List[Message] = SchemaField(\n            description=\"List of messages in the conversation.\", min_length=1\n        )",
                      "children": [
                        {
                          "value": "messages: List[Message] = SchemaField(\n            description=\"List of messages in the conversation.\", min_length=1\n        )",
                          "children": [
                            {
                              "value": "messages",
                              "children": []
                            },
                            {
                              "value": "List[Message]",
                              "children": [
                                {
                                  "value": "List[Message]",
                                  "children": [
                                    {
                                      "value": "List",
                                      "children": []
                                    },
                                    {
                                      "value": "[Message]",
                                      "children": [
                                        {
                                          "value": "Message",
                                          "children": [
                                            {
                                              "value": "Message",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"List of messages in the conversation.\", min_length=1\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"List of messages in the conversation.\", min_length=1\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"List of messages in the conversation.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"List of messages in the conversation.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "List of messages in the conversation.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "min_length=1",
                                      "children": [
                                        {
                                          "value": "min_length",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for the conversation.\",\n        )",
                      "children": [
                        {
                          "value": "model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for the conversation.\",\n        )",
                          "children": [
                            {
                              "value": "model",
                              "children": []
                            },
                            {
                              "value": "LlmModel",
                              "children": [
                                {
                                  "value": "LlmModel",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for the conversation.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for the conversation.\",\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"LLM Model\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"LLM Model\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "LLM Model",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=LlmModel.GPT4_TURBO",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "LlmModel.GPT4_TURBO",
                                          "children": [
                                            {
                                              "value": "LlmModel",
                                              "children": []
                                            },
                                            {
                                              "value": "GPT4_TURBO",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The language model to use for the conversation.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The language model to use for the conversation.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The language model to use for the conversation.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: AICredentials = AICredentialsField()",
                      "children": [
                        {
                          "value": "credentials: AICredentials = AICredentialsField()",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "AICredentials",
                              "children": [
                                {
                                  "value": "AICredentials",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "AICredentialsField()",
                              "children": [
                                {
                                  "value": "AICredentialsField",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                      "children": [
                        {
                          "value": "max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                          "children": [
                            {
                              "value": "max_tokens",
                              "children": []
                            },
                            {
                              "value": "int | None",
                              "children": [
                                {
                                  "value": "int | None",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                                  "children": [
                                    {
                                      "value": "advanced=True",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=None",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The maximum number of tokens to generate in the chat completion.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The maximum number of tokens to generate in the chat completion.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The maximum number of tokens to generate in the chat completion.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                      "children": [
                        {
                          "value": "ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                          "children": [
                            {
                              "value": "ollama_host",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                                  "children": [
                                    {
                                      "value": "advanced=True",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"localhost:11434\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"localhost:11434\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "localhost:11434",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"Ollama host for local  models\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Ollama host for local  models\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Ollama host for local  models",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        response: str = SchemaField(\n            description=\"The model's response to the conversation.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "response: str = SchemaField(\n            description=\"The model's response to the conversation.\"\n        )\n        error: str = SchemaField(description=\"Error message if the API call failed.\")",
                  "children": [
                    {
                      "value": "response: str = SchemaField(\n            description=\"The model's response to the conversation.\"\n        )",
                      "children": [
                        {
                          "value": "response: str = SchemaField(\n            description=\"The model's response to the conversation.\"\n        )",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The model's response to the conversation.\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The model's response to the conversation.\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The model's response to the conversation.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The model's response to the conversation.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The model's response to the conversation.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "error: str = SchemaField(description=\"Error message if the API call failed.\")",
                      "children": [
                        {
                          "value": "error: str = SchemaField(description=\"Error message if the API call failed.\")",
                          "children": [
                            {
                              "value": "error",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Error message if the API call failed.\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Error message if the API call failed.\")",
                                  "children": [
                                    {
                                      "value": "description=\"Error message if the API call failed.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Error message if the API call failed.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Error message if the API call failed.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"32a87eab-381e-4dd4-bdb8-4c47151be35a\",\n            description=\"Advanced LLM call that takes a list of messages and sends them to the language model.\",\n            categories={BlockCategory.AI},\n            input_schema=AIConversationBlock.Input,\n            output_schema=AIConversationBlock.Output,\n            test_input={\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ],\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\n                \"response\",\n                \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\",\n            ),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"\n            },\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"32a87eab-381e-4dd4-bdb8-4c47151be35a\",\n            description=\"Advanced LLM call that takes a list of messages and sends them to the language model.\",\n            categories={BlockCategory.AI},\n            input_schema=AIConversationBlock.Input,\n            output_schema=AIConversationBlock.Output,\n            test_input={\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ],\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\n                \"response\",\n                \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\",\n            ),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"\n            },\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"32a87eab-381e-4dd4-bdb8-4c47151be35a\",\n            description=\"Advanced LLM call that takes a list of messages and sends them to the language model.\",\n            categories={BlockCategory.AI},\n            input_schema=AIConversationBlock.Input,\n            output_schema=AIConversationBlock.Output,\n            test_input={\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ],\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\n                \"response\",\n                \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\",\n            ),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"\n            },\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"32a87eab-381e-4dd4-bdb8-4c47151be35a\",\n            description=\"Advanced LLM call that takes a list of messages and sends them to the language model.\",\n            categories={BlockCategory.AI},\n            input_schema=AIConversationBlock.Input,\n            output_schema=AIConversationBlock.Output,\n            test_input={\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ],\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\n                \"response\",\n                \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\",\n            ),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"\n            },\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"32a87eab-381e-4dd4-bdb8-4c47151be35a\",\n            description=\"Advanced LLM call that takes a list of messages and sends them to the language model.\",\n            categories={BlockCategory.AI},\n            input_schema=AIConversationBlock.Input,\n            output_schema=AIConversationBlock.Output,\n            test_input={\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ],\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=(\n                \"response\",\n                \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\",\n            ),\n            test_mock={\n                \"llm_call\": lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"\n            },\n        )",
                              "children": [
                                {
                                  "value": "id=\"32a87eab-381e-4dd4-bdb8-4c47151be35a\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"32a87eab-381e-4dd4-bdb8-4c47151be35a\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "32a87eab-381e-4dd4-bdb8-4c47151be35a",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "description=\"Advanced LLM call that takes a list of messages and sends them to the language model.\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Advanced LLM call that takes a list of messages and sends them to the language model.\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Advanced LLM call that takes a list of messages and sends them to the language model.",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.AI}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.AI}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.AI",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "AI",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=AIConversationBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "AIConversationBlock.Input",
                                      "children": [
                                        {
                                          "value": "AIConversationBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema=AIConversationBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "AIConversationBlock.Output",
                                      "children": [
                                        {
                                          "value": "AIConversationBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_input={\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ],\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            }",
                                  "children": [
                                    {
                                      "value": "test_input",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ],\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            }",
                                      "children": [
                                        {
                                          "value": "\"messages\": [\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ]",
                                          "children": [
                                            {
                                              "value": "\"messages\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "messages",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "[\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    },\n                    {\"role\": \"user\", \"content\": \"Where was it played?\"},\n                ]",
                                              "children": [
                                                {
                                                  "value": "{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}",
                                                  "children": [
                                                    {
                                                      "value": "\"role\": \"system\"",
                                                      "children": [
                                                        {
                                                          "value": "\"role\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "role",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"system\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "system",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"content\": \"You are a helpful assistant.\"",
                                                      "children": [
                                                        {
                                                          "value": "\"content\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "content",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"You are a helpful assistant.\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "You are a helpful assistant.",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "{\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"}",
                                                  "children": [
                                                    {
                                                      "value": "\"role\": \"user\"",
                                                      "children": [
                                                        {
                                                          "value": "\"role\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "role",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"user\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "user",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"content\": \"Who won the world series in 2020?\"",
                                                      "children": [
                                                        {
                                                          "value": "\"content\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "content",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"Who won the world series in 2020?\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Who won the world series in 2020?",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "{\n                        \"role\": \"assistant\",\n                        \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\",\n                    }",
                                                  "children": [
                                                    {
                                                      "value": "\"role\": \"assistant\"",
                                                      "children": [
                                                        {
                                                          "value": "\"role\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "role",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"assistant\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "assistant",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"content\": \"The Los Angeles Dodgers won the World Series in 2020.\"",
                                                      "children": [
                                                        {
                                                          "value": "\"content\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "content",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"The Los Angeles Dodgers won the World Series in 2020.\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "The Los Angeles Dodgers won the World Series in 2020.",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "{\"role\": \"user\", \"content\": \"Where was it played?\"}",
                                                  "children": [
                                                    {
                                                      "value": "\"role\": \"user\"",
                                                      "children": [
                                                        {
                                                          "value": "\"role\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "role",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"user\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "user",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"content\": \"Where was it played?\"",
                                                      "children": [
                                                        {
                                                          "value": "\"content\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "content",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"Where was it played?\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Where was it played?",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"model\": LlmModel.GPT4_TURBO",
                                          "children": [
                                            {
                                              "value": "\"model\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "model",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "LlmModel.GPT4_TURBO",
                                              "children": [
                                                {
                                                  "value": "LlmModel",
                                                  "children": []
                                                },
                                                {
                                                  "value": "GPT4_TURBO",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"credentials\": TEST_CREDENTIALS_INPUT",
                                          "children": [
                                            {
                                              "value": "\"credentials\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "TEST_CREDENTIALS_INPUT",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_credentials=TEST_CREDENTIALS",
                                  "children": [
                                    {
                                      "value": "test_credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "TEST_CREDENTIALS",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "test_output=(\n                \"response\",\n                \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\",\n            )",
                                  "children": [
                                    {
                                      "value": "test_output",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                \"response\",\n                \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\",\n            )",
                                      "children": [
                                        {
                                          "value": "\"response\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "response",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The 2020 World Series was played at Globe Life Field in Arlington, Texas.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_mock={\n                \"llm_call\": lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"\n            }",
                                  "children": [
                                    {
                                      "value": "test_mock",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"llm_call\": lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"\n            }",
                                      "children": [
                                        {
                                          "value": "\"llm_call\": lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"",
                                          "children": [
                                            {
                                              "value": "\"llm_call\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "llm_call",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "lambda *args, **kwargs: \"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"",
                                              "children": [
                                                {
                                                  "value": "*args, **kwargs",
                                                  "children": [
                                                    {
                                                      "value": "*args",
                                                      "children": [
                                                        {
                                                          "value": "args",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "**kwargs",
                                                      "children": [
                                                        {
                                                          "value": "kwargs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"The 2020 World Series was played at Globe Life Field in Arlington, Texas.\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "The 2020 World Series was played at Globe Life Field in Arlington, Texas.",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def llm_call(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> str:\n        block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response[\"response\"]",
              "children": [
                {
                  "value": "llm_call",
                  "children": []
                },
                {
                  "value": "(\n        self,\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: AIStructuredResponseGeneratorBlock.Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "AIStructuredResponseGeneratorBlock.Input",
                          "children": [
                            {
                              "value": "AIStructuredResponseGeneratorBlock.Input",
                              "children": [
                                {
                                  "value": "AIStructuredResponseGeneratorBlock",
                                  "children": []
                                },
                                {
                                  "value": "Input",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "block = AIStructuredResponseGeneratorBlock()\n        response = block.run_once(input_data, \"response\", credentials=credentials)\n        self.merge_stats(block.execution_stats)\n        return response[\"response\"]",
                  "children": [
                    {
                      "value": "block = AIStructuredResponseGeneratorBlock()",
                      "children": [
                        {
                          "value": "block = AIStructuredResponseGeneratorBlock()",
                          "children": [
                            {
                              "value": "block",
                              "children": []
                            },
                            {
                              "value": "AIStructuredResponseGeneratorBlock()",
                              "children": [
                                {
                                  "value": "AIStructuredResponseGeneratorBlock",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "response = block.run_once(input_data, \"response\", credentials=credentials)",
                      "children": [
                        {
                          "value": "response = block.run_once(input_data, \"response\", credentials=credentials)",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "block.run_once(input_data, \"response\", credentials=credentials)",
                              "children": [
                                {
                                  "value": "block.run_once",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "run_once",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(input_data, \"response\", credentials=credentials)",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "\"response\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "response",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "credentials=credentials",
                                      "children": [
                                        {
                                          "value": "credentials",
                                          "children": []
                                        },
                                        {
                                          "value": "credentials",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.merge_stats(block.execution_stats)",
                      "children": [
                        {
                          "value": "self.merge_stats(block.execution_stats)",
                          "children": [
                            {
                              "value": "self.merge_stats",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "merge_stats",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(block.execution_stats)",
                              "children": [
                                {
                                  "value": "block.execution_stats",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "execution_stats",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return response[\"response\"]",
                      "children": [
                        {
                          "value": "response[\"response\"]",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "\"response\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "response",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=\"\",\n                credentials=input_data.credentials,\n                model=input_data.model,\n                conversation_history=input_data.messages,\n                max_tokens=input_data.max_tokens,\n                expected_format={},\n            ),\n            credentials=credentials,\n        )\n\n        yield \"response\", response",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "*",
                      "children": []
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=\"\",\n                credentials=input_data.credentials,\n                model=input_data.model,\n                conversation_history=input_data.messages,\n                max_tokens=input_data.max_tokens,\n                expected_format={},\n            ),\n            credentials=credentials,\n        )\n\n        yield \"response\", response",
                  "children": [
                    {
                      "value": "response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=\"\",\n                credentials=input_data.credentials,\n                model=input_data.model,\n                conversation_history=input_data.messages,\n                max_tokens=input_data.max_tokens,\n                expected_format={},\n            ),\n            credentials=credentials,\n        )",
                      "children": [
                        {
                          "value": "response = self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=\"\",\n                credentials=input_data.credentials,\n                model=input_data.model,\n                conversation_history=input_data.messages,\n                max_tokens=input_data.max_tokens,\n                expected_format={},\n            ),\n            credentials=credentials,\n        )",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "self.llm_call(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=\"\",\n                credentials=input_data.credentials,\n                model=input_data.model,\n                conversation_history=input_data.messages,\n                max_tokens=input_data.max_tokens,\n                expected_format={},\n            ),\n            credentials=credentials,\n        )",
                              "children": [
                                {
                                  "value": "self.llm_call",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "llm_call",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            AIStructuredResponseGeneratorBlock.Input(\n                prompt=\"\",\n                credentials=input_data.credentials,\n                model=input_data.model,\n                conversation_history=input_data.messages,\n                max_tokens=input_data.max_tokens,\n                expected_format={},\n            ),\n            credentials=credentials,\n        )",
                                  "children": [
                                    {
                                      "value": "AIStructuredResponseGeneratorBlock.Input(\n                prompt=\"\",\n                credentials=input_data.credentials,\n                model=input_data.model,\n                conversation_history=input_data.messages,\n                max_tokens=input_data.max_tokens,\n                expected_format={},\n            )",
                                      "children": [
                                        {
                                          "value": "AIStructuredResponseGeneratorBlock.Input",
                                          "children": [
                                            {
                                              "value": "AIStructuredResponseGeneratorBlock",
                                              "children": []
                                            },
                                            {
                                              "value": "Input",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                prompt=\"\",\n                credentials=input_data.credentials,\n                model=input_data.model,\n                conversation_history=input_data.messages,\n                max_tokens=input_data.max_tokens,\n                expected_format={},\n            )",
                                          "children": [
                                            {
                                              "value": "prompt=\"\"",
                                              "children": [
                                                {
                                                  "value": "prompt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "credentials=input_data.credentials",
                                              "children": [
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_data.credentials",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "credentials",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "model=input_data.model",
                                              "children": [
                                                {
                                                  "value": "model",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_data.model",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "model",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "conversation_history=input_data.messages",
                                              "children": [
                                                {
                                                  "value": "conversation_history",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_data.messages",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "messages",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "max_tokens=input_data.max_tokens",
                                              "children": [
                                                {
                                                  "value": "max_tokens",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_data.max_tokens",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "max_tokens",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "expected_format={}",
                                              "children": [
                                                {
                                                  "value": "expected_format",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{}",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "credentials=credentials",
                                      "children": [
                                        {
                                          "value": "credentials",
                                          "children": []
                                        },
                                        {
                                          "value": "credentials",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "yield \"response\", response",
                      "children": [
                        {
                          "value": "yield \"response\", response",
                          "children": [
                            {
                              "value": "\"response\", response",
                              "children": [
                                {
                                  "value": "\"response\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "response",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "response",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class AIListGeneratorBlock(Block):\n    class Input(BlockSchema):\n        focus: str | None = SchemaField(\n            description=\"The focus of the list to generate.\",\n            placeholder=\"The top 5 most interesting news stories in the data.\",\n            default=None,\n            advanced=False,\n        )\n        source_data: str | None = SchemaField(\n            description=\"The data to generate the list from.\",\n            placeholder=\"News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.\",\n            default=None,\n            advanced=False,\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for generating the list.\",\n            advanced=True,\n        )\n        credentials: AICredentials = AICredentialsField()\n        max_retries: int = SchemaField(\n            default=3,\n            description=\"Maximum number of retries for generating a valid list.\",\n            ge=1,\n            le=5,\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        generated_list: List[str] = SchemaField(description=\"The generated list.\")\n        list_item: str = SchemaField(\n            description=\"Each individual item in the list.\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if the list generation failed.\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"9c0b0450-d199-458b-a731-072189dd6593\",\n            description=\"Generate a Python list based on the given prompt using a Large Language Model (LLM).\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AIListGeneratorBlock.Input,\n            output_schema=AIListGeneratorBlock.Output,\n            test_input={\n                \"focus\": \"planets\",\n                \"source_data\": (\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                ),\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"max_retries\": 3,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"generated_list\",\n                    [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n                ),\n                (\"list_item\", \"Zylora Prime\"),\n                (\"list_item\", \"Kharon-9\"),\n                (\"list_item\", \"Vortexia\"),\n                (\"list_item\", \"Oceara\"),\n                (\"list_item\", \"Draknos\"),\n            ],\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                },\n            },\n        )\n\n    @staticmethod\n    def llm_call(\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> dict[str, str]:\n        llm_block = AIStructuredResponseGeneratorBlock()\n        response = llm_block.run_once(input_data, \"response\", credentials=credentials)\n        return response\n\n    @staticmethod\n    def string_to_list(string):\n        \"\"\"\n        Converts a string representation of a list into an actual Python list object.\n        \"\"\"\n        logger.debug(f\"Converting string to list. Input string: {string}\")\n        try:\n            # Use ast.literal_eval to safely evaluate the string\n            python_list = ast.literal_eval(string)\n            if isinstance(python_list, list):\n                logger.debug(f\"Successfully converted string to list: {python_list}\")\n                return python_list\n            else:\n                logger.error(f\"The provided string '{string}' is not a valid list\")\n                raise ValueError(f\"The provided string '{string}' is not a valid list.\")\n        except (SyntaxError, ValueError) as e:\n            logger.error(f\"Failed to convert string to list: {e}\")\n            raise ValueError(\"Invalid list format. Could not convert to list.\")\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        logger.debug(f\"Starting AIListGeneratorBlock.run with input data: {input_data}\")\n\n        # Check for API key\n        api_key_check = credentials.api_key.get_secret_value()\n        if not api_key_check:\n            raise ValueError(\"No LLM API key provided.\")\n\n        # Prepare the system prompt\n        sys_prompt = \"\"\"You are a Python list generator. Your task is to generate a Python list based on the user's prompt. \n            |Respond ONLY with a valid python list. \n            |The list can contain strings, numbers, or nested lists as appropriate. \n            |Do not include any explanations or additional text.\n\n            |Valid Example string formats:\n\n            |Example 1:\n            |```\n            |['1', '2', '3', '4']\n            |```\n\n            |Example 2:\n            |```\n            |[['1', '2'], ['3', '4'], ['5', '6']]\n            |```\n\n            |Example 3:\n            |```\n            |['1', ['2', '3'], ['4', ['5', '6']]]\n            |```\n\n            |Example 4:\n            |```\n            |['a', 'b', 'c']\n            |```\n\n            |Example 5:\n            |```\n            |['1', '2.5', 'string', 'True', ['False', 'None']]\n            |```\n\n            |Do not include any explanations or additional text, just respond with the list in the format specified above.\n            \"\"\"\n        # If a focus is provided, add it to the prompt\n        if input_data.focus:\n            prompt = f\"Generate a list with the following focus:\\n<focus>\\n\\n{input_data.focus}</focus>\"\n        else:\n            # If there's source data\n            if input_data.source_data:\n                prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"\n            else:\n                # No focus or source data provided, generat a random list\n                prompt = \"Generate a random list.\"\n\n        # If the source data is provided, add it to the prompt\n        if input_data.source_data:\n            prompt += f\"\\n\\nUse the following source data to generate the list from:\\n\\n<source_data>\\n\\n{input_data.source_data}</source_data>\\n\\nDo not invent fictional data that is not present in the source data.\"\n        # Else, tell the LLM to synthesize the data\n        else:\n            prompt += \"\\n\\nInvent the data to generate the list from.\"\n\n        for attempt in range(input_data.max_retries):\n            try:\n                logger.debug(\"Calling LLM\")\n                llm_response = self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )\n\n                logger.debug(f\"LLM response: {llm_response}\")\n\n                # Extract Response string\n                response_string = llm_response[\"response\"]\n                logger.debug(f\"Response string: {response_string}\")\n\n                # Convert the string to a Python list\n                logger.debug(\"Converting string to Python list\")\n                parsed_list = self.string_to_list(response_string)\n                logger.debug(f\"Parsed list: {parsed_list}\")\n\n                # If we reach here, we have a valid Python list\n                logger.debug(\"Successfully generated a valid Python list\")\n                yield \"generated_list\", parsed_list\n\n                # Yield each item in the list\n                for item in parsed_list:\n                    yield \"list_item\", item\n                return\n\n            except Exception as e:\n                logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")\n                if attempt == input_data.max_retries - 1:\n                    logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )\n                else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")\n\n        logger.debug(\"AIListGeneratorBlock.run completed\")",
      "children": [
        {
          "value": "AIListGeneratorBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        focus: str | None = SchemaField(\n            description=\"The focus of the list to generate.\",\n            placeholder=\"The top 5 most interesting news stories in the data.\",\n            default=None,\n            advanced=False,\n        )\n        source_data: str | None = SchemaField(\n            description=\"The data to generate the list from.\",\n            placeholder=\"News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.\",\n            default=None,\n            advanced=False,\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for generating the list.\",\n            advanced=True,\n        )\n        credentials: AICredentials = AICredentialsField()\n        max_retries: int = SchemaField(\n            default=3,\n            description=\"Maximum number of retries for generating a valid list.\",\n            ge=1,\n            le=5,\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )\n\n    class Output(BlockSchema):\n        generated_list: List[str] = SchemaField(description=\"The generated list.\")\n        list_item: str = SchemaField(\n            description=\"Each individual item in the list.\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if the list generation failed.\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"9c0b0450-d199-458b-a731-072189dd6593\",\n            description=\"Generate a Python list based on the given prompt using a Large Language Model (LLM).\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AIListGeneratorBlock.Input,\n            output_schema=AIListGeneratorBlock.Output,\n            test_input={\n                \"focus\": \"planets\",\n                \"source_data\": (\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                ),\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"max_retries\": 3,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"generated_list\",\n                    [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n                ),\n                (\"list_item\", \"Zylora Prime\"),\n                (\"list_item\", \"Kharon-9\"),\n                (\"list_item\", \"Vortexia\"),\n                (\"list_item\", \"Oceara\"),\n                (\"list_item\", \"Draknos\"),\n            ],\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                },\n            },\n        )\n\n    @staticmethod\n    def llm_call(\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> dict[str, str]:\n        llm_block = AIStructuredResponseGeneratorBlock()\n        response = llm_block.run_once(input_data, \"response\", credentials=credentials)\n        return response\n\n    @staticmethod\n    def string_to_list(string):\n        \"\"\"\n        Converts a string representation of a list into an actual Python list object.\n        \"\"\"\n        logger.debug(f\"Converting string to list. Input string: {string}\")\n        try:\n            # Use ast.literal_eval to safely evaluate the string\n            python_list = ast.literal_eval(string)\n            if isinstance(python_list, list):\n                logger.debug(f\"Successfully converted string to list: {python_list}\")\n                return python_list\n            else:\n                logger.error(f\"The provided string '{string}' is not a valid list\")\n                raise ValueError(f\"The provided string '{string}' is not a valid list.\")\n        except (SyntaxError, ValueError) as e:\n            logger.error(f\"Failed to convert string to list: {e}\")\n            raise ValueError(\"Invalid list format. Could not convert to list.\")\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        logger.debug(f\"Starting AIListGeneratorBlock.run with input data: {input_data}\")\n\n        # Check for API key\n        api_key_check = credentials.api_key.get_secret_value()\n        if not api_key_check:\n            raise ValueError(\"No LLM API key provided.\")\n\n        # Prepare the system prompt\n        sys_prompt = \"\"\"You are a Python list generator. Your task is to generate a Python list based on the user's prompt. \n            |Respond ONLY with a valid python list. \n            |The list can contain strings, numbers, or nested lists as appropriate. \n            |Do not include any explanations or additional text.\n\n            |Valid Example string formats:\n\n            |Example 1:\n            |```\n            |['1', '2', '3', '4']\n            |```\n\n            |Example 2:\n            |```\n            |[['1', '2'], ['3', '4'], ['5', '6']]\n            |```\n\n            |Example 3:\n            |```\n            |['1', ['2', '3'], ['4', ['5', '6']]]\n            |```\n\n            |Example 4:\n            |```\n            |['a', 'b', 'c']\n            |```\n\n            |Example 5:\n            |```\n            |['1', '2.5', 'string', 'True', ['False', 'None']]\n            |```\n\n            |Do not include any explanations or additional text, just respond with the list in the format specified above.\n            \"\"\"\n        # If a focus is provided, add it to the prompt\n        if input_data.focus:\n            prompt = f\"Generate a list with the following focus:\\n<focus>\\n\\n{input_data.focus}</focus>\"\n        else:\n            # If there's source data\n            if input_data.source_data:\n                prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"\n            else:\n                # No focus or source data provided, generat a random list\n                prompt = \"Generate a random list.\"\n\n        # If the source data is provided, add it to the prompt\n        if input_data.source_data:\n            prompt += f\"\\n\\nUse the following source data to generate the list from:\\n\\n<source_data>\\n\\n{input_data.source_data}</source_data>\\n\\nDo not invent fictional data that is not present in the source data.\"\n        # Else, tell the LLM to synthesize the data\n        else:\n            prompt += \"\\n\\nInvent the data to generate the list from.\"\n\n        for attempt in range(input_data.max_retries):\n            try:\n                logger.debug(\"Calling LLM\")\n                llm_response = self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )\n\n                logger.debug(f\"LLM response: {llm_response}\")\n\n                # Extract Response string\n                response_string = llm_response[\"response\"]\n                logger.debug(f\"Response string: {response_string}\")\n\n                # Convert the string to a Python list\n                logger.debug(\"Converting string to Python list\")\n                parsed_list = self.string_to_list(response_string)\n                logger.debug(f\"Parsed list: {parsed_list}\")\n\n                # If we reach here, we have a valid Python list\n                logger.debug(\"Successfully generated a valid Python list\")\n                yield \"generated_list\", parsed_list\n\n                # Yield each item in the list\n                for item in parsed_list:\n                    yield \"list_item\", item\n                return\n\n            except Exception as e:\n                logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")\n                if attempt == input_data.max_retries - 1:\n                    logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )\n                else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")\n\n        logger.debug(\"AIListGeneratorBlock.run completed\")",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        focus: str | None = SchemaField(\n            description=\"The focus of the list to generate.\",\n            placeholder=\"The top 5 most interesting news stories in the data.\",\n            default=None,\n            advanced=False,\n        )\n        source_data: str | None = SchemaField(\n            description=\"The data to generate the list from.\",\n            placeholder=\"News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.\",\n            default=None,\n            advanced=False,\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for generating the list.\",\n            advanced=True,\n        )\n        credentials: AICredentials = AICredentialsField()\n        max_retries: int = SchemaField(\n            default=3,\n            description=\"Maximum number of retries for generating a valid list.\",\n            ge=1,\n            le=5,\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "focus: str | None = SchemaField(\n            description=\"The focus of the list to generate.\",\n            placeholder=\"The top 5 most interesting news stories in the data.\",\n            default=None,\n            advanced=False,\n        )\n        source_data: str | None = SchemaField(\n            description=\"The data to generate the list from.\",\n            placeholder=\"News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.\",\n            default=None,\n            advanced=False,\n        )\n        model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for generating the list.\",\n            advanced=True,\n        )\n        credentials: AICredentials = AICredentialsField()\n        max_retries: int = SchemaField(\n            default=3,\n            description=\"Maximum number of retries for generating a valid list.\",\n            ge=1,\n            le=5,\n        )\n        max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )\n        ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                  "children": [
                    {
                      "value": "focus: str | None = SchemaField(\n            description=\"The focus of the list to generate.\",\n            placeholder=\"The top 5 most interesting news stories in the data.\",\n            default=None,\n            advanced=False,\n        )",
                      "children": [
                        {
                          "value": "focus: str | None = SchemaField(\n            description=\"The focus of the list to generate.\",\n            placeholder=\"The top 5 most interesting news stories in the data.\",\n            default=None,\n            advanced=False,\n        )",
                          "children": [
                            {
                              "value": "focus",
                              "children": []
                            },
                            {
                              "value": "str | None",
                              "children": [
                                {
                                  "value": "str | None",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The focus of the list to generate.\",\n            placeholder=\"The top 5 most interesting news stories in the data.\",\n            default=None,\n            advanced=False,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The focus of the list to generate.\",\n            placeholder=\"The top 5 most interesting news stories in the data.\",\n            default=None,\n            advanced=False,\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The focus of the list to generate.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The focus of the list to generate.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The focus of the list to generate.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "placeholder=\"The top 5 most interesting news stories in the data.\"",
                                      "children": [
                                        {
                                          "value": "placeholder",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The top 5 most interesting news stories in the data.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The top 5 most interesting news stories in the data.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=None",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "advanced=False",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "False",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "source_data: str | None = SchemaField(\n            description=\"The data to generate the list from.\",\n            placeholder=\"News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.\",\n            default=None,\n            advanced=False,\n        )",
                      "children": [
                        {
                          "value": "source_data: str | None = SchemaField(\n            description=\"The data to generate the list from.\",\n            placeholder=\"News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.\",\n            default=None,\n            advanced=False,\n        )",
                          "children": [
                            {
                              "value": "source_data",
                              "children": []
                            },
                            {
                              "value": "str | None",
                              "children": [
                                {
                                  "value": "str | None",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The data to generate the list from.\",\n            placeholder=\"News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.\",\n            default=None,\n            advanced=False,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The data to generate the list from.\",\n            placeholder=\"News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.\",\n            default=None,\n            advanced=False,\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The data to generate the list from.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The data to generate the list from.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The data to generate the list from.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "placeholder=\"News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.\"",
                                      "children": [
                                        {
                                          "value": "placeholder",
                                          "children": []
                                        },
                                        {
                                          "value": "\"News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "News Today: Humans land on Mars: Today humans landed on mars. -- AI wins Nobel Prize: AI wins Nobel Prize for solving world hunger. -- New AI Model: A new AI model has been released.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=None",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "advanced=False",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "False",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for generating the list.\",\n            advanced=True,\n        )",
                      "children": [
                        {
                          "value": "model: LlmModel = SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for generating the list.\",\n            advanced=True,\n        )",
                          "children": [
                            {
                              "value": "model",
                              "children": []
                            },
                            {
                              "value": "LlmModel",
                              "children": [
                                {
                                  "value": "LlmModel",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for generating the list.\",\n            advanced=True,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            title=\"LLM Model\",\n            default=LlmModel.GPT4_TURBO,\n            description=\"The language model to use for generating the list.\",\n            advanced=True,\n        )",
                                  "children": [
                                    {
                                      "value": "title=\"LLM Model\"",
                                      "children": [
                                        {
                                          "value": "title",
                                          "children": []
                                        },
                                        {
                                          "value": "\"LLM Model\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "LLM Model",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=LlmModel.GPT4_TURBO",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "LlmModel.GPT4_TURBO",
                                          "children": [
                                            {
                                              "value": "LlmModel",
                                              "children": []
                                            },
                                            {
                                              "value": "GPT4_TURBO",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The language model to use for generating the list.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The language model to use for generating the list.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The language model to use for generating the list.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "advanced=True",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: AICredentials = AICredentialsField()",
                      "children": [
                        {
                          "value": "credentials: AICredentials = AICredentialsField()",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "AICredentials",
                              "children": [
                                {
                                  "value": "AICredentials",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "AICredentialsField()",
                              "children": [
                                {
                                  "value": "AICredentialsField",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "max_retries: int = SchemaField(\n            default=3,\n            description=\"Maximum number of retries for generating a valid list.\",\n            ge=1,\n            le=5,\n        )",
                      "children": [
                        {
                          "value": "max_retries: int = SchemaField(\n            default=3,\n            description=\"Maximum number of retries for generating a valid list.\",\n            ge=1,\n            le=5,\n        )",
                          "children": [
                            {
                              "value": "max_retries",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            default=3,\n            description=\"Maximum number of retries for generating a valid list.\",\n            ge=1,\n            le=5,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            default=3,\n            description=\"Maximum number of retries for generating a valid list.\",\n            ge=1,\n            le=5,\n        )",
                                  "children": [
                                    {
                                      "value": "default=3",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "3",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"Maximum number of retries for generating a valid list.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Maximum number of retries for generating a valid list.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Maximum number of retries for generating a valid list.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ge=1",
                                      "children": [
                                        {
                                          "value": "ge",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "le=5",
                                      "children": [
                                        {
                                          "value": "le",
                                          "children": []
                                        },
                                        {
                                          "value": "5",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                      "children": [
                        {
                          "value": "max_tokens: int | None = SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                          "children": [
                            {
                              "value": "max_tokens",
                              "children": []
                            },
                            {
                              "value": "int | None",
                              "children": [
                                {
                                  "value": "int | None",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            advanced=True,\n            default=None,\n            description=\"The maximum number of tokens to generate in the chat completion.\",\n        )",
                                  "children": [
                                    {
                                      "value": "advanced=True",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=None",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"The maximum number of tokens to generate in the chat completion.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The maximum number of tokens to generate in the chat completion.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The maximum number of tokens to generate in the chat completion.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                      "children": [
                        {
                          "value": "ollama_host: str = SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                          "children": [
                            {
                              "value": "ollama_host",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            advanced=True,\n            default=\"localhost:11434\",\n            description=\"Ollama host for local  models\",\n        )",
                                  "children": [
                                    {
                                      "value": "advanced=True",
                                      "children": [
                                        {
                                          "value": "advanced",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"localhost:11434\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"localhost:11434\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "localhost:11434",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=\"Ollama host for local  models\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Ollama host for local  models\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Ollama host for local  models",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        generated_list: List[str] = SchemaField(description=\"The generated list.\")\n        list_item: str = SchemaField(\n            description=\"Each individual item in the list.\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if the list generation failed.\"\n        )",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "generated_list: List[str] = SchemaField(description=\"The generated list.\")\n        list_item: str = SchemaField(\n            description=\"Each individual item in the list.\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if the list generation failed.\"\n        )",
                  "children": [
                    {
                      "value": "generated_list: List[str] = SchemaField(description=\"The generated list.\")",
                      "children": [
                        {
                          "value": "generated_list: List[str] = SchemaField(description=\"The generated list.\")",
                          "children": [
                            {
                              "value": "generated_list",
                              "children": []
                            },
                            {
                              "value": "List[str]",
                              "children": [
                                {
                                  "value": "List[str]",
                                  "children": [
                                    {
                                      "value": "List",
                                      "children": []
                                    },
                                    {
                                      "value": "[str]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"The generated list.\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"The generated list.\")",
                                  "children": [
                                    {
                                      "value": "description=\"The generated list.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The generated list.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The generated list.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "list_item: str = SchemaField(\n            description=\"Each individual item in the list.\",\n        )",
                      "children": [
                        {
                          "value": "list_item: str = SchemaField(\n            description=\"Each individual item in the list.\",\n        )",
                          "children": [
                            {
                              "value": "list_item",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Each individual item in the list.\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Each individual item in the list.\",\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Each individual item in the list.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Each individual item in the list.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Each individual item in the list.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "error: str = SchemaField(\n            description=\"Error message if the list generation failed.\"\n        )",
                      "children": [
                        {
                          "value": "error: str = SchemaField(\n            description=\"Error message if the list generation failed.\"\n        )",
                          "children": [
                            {
                              "value": "error",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Error message if the list generation failed.\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Error message if the list generation failed.\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Error message if the list generation failed.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Error message if the list generation failed.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Error message if the list generation failed.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"9c0b0450-d199-458b-a731-072189dd6593\",\n            description=\"Generate a Python list based on the given prompt using a Large Language Model (LLM).\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AIListGeneratorBlock.Input,\n            output_schema=AIListGeneratorBlock.Output,\n            test_input={\n                \"focus\": \"planets\",\n                \"source_data\": (\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                ),\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"max_retries\": 3,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"generated_list\",\n                    [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n                ),\n                (\"list_item\", \"Zylora Prime\"),\n                (\"list_item\", \"Kharon-9\"),\n                (\"list_item\", \"Vortexia\"),\n                (\"list_item\", \"Oceara\"),\n                (\"list_item\", \"Draknos\"),\n            ],\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                },\n            },\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"9c0b0450-d199-458b-a731-072189dd6593\",\n            description=\"Generate a Python list based on the given prompt using a Large Language Model (LLM).\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AIListGeneratorBlock.Input,\n            output_schema=AIListGeneratorBlock.Output,\n            test_input={\n                \"focus\": \"planets\",\n                \"source_data\": (\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                ),\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"max_retries\": 3,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"generated_list\",\n                    [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n                ),\n                (\"list_item\", \"Zylora Prime\"),\n                (\"list_item\", \"Kharon-9\"),\n                (\"list_item\", \"Vortexia\"),\n                (\"list_item\", \"Oceara\"),\n                (\"list_item\", \"Draknos\"),\n            ],\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                },\n            },\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"9c0b0450-d199-458b-a731-072189dd6593\",\n            description=\"Generate a Python list based on the given prompt using a Large Language Model (LLM).\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AIListGeneratorBlock.Input,\n            output_schema=AIListGeneratorBlock.Output,\n            test_input={\n                \"focus\": \"planets\",\n                \"source_data\": (\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                ),\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"max_retries\": 3,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"generated_list\",\n                    [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n                ),\n                (\"list_item\", \"Zylora Prime\"),\n                (\"list_item\", \"Kharon-9\"),\n                (\"list_item\", \"Vortexia\"),\n                (\"list_item\", \"Oceara\"),\n                (\"list_item\", \"Draknos\"),\n            ],\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                },\n            },\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"9c0b0450-d199-458b-a731-072189dd6593\",\n            description=\"Generate a Python list based on the given prompt using a Large Language Model (LLM).\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AIListGeneratorBlock.Input,\n            output_schema=AIListGeneratorBlock.Output,\n            test_input={\n                \"focus\": \"planets\",\n                \"source_data\": (\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                ),\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"max_retries\": 3,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"generated_list\",\n                    [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n                ),\n                (\"list_item\", \"Zylora Prime\"),\n                (\"list_item\", \"Kharon-9\"),\n                (\"list_item\", \"Vortexia\"),\n                (\"list_item\", \"Oceara\"),\n                (\"list_item\", \"Draknos\"),\n            ],\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                },\n            },\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"9c0b0450-d199-458b-a731-072189dd6593\",\n            description=\"Generate a Python list based on the given prompt using a Large Language Model (LLM).\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=AIListGeneratorBlock.Input,\n            output_schema=AIListGeneratorBlock.Output,\n            test_input={\n                \"focus\": \"planets\",\n                \"source_data\": (\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                ),\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"max_retries\": 3,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"generated_list\",\n                    [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n                ),\n                (\"list_item\", \"Zylora Prime\"),\n                (\"list_item\", \"Kharon-9\"),\n                (\"list_item\", \"Vortexia\"),\n                (\"list_item\", \"Oceara\"),\n                (\"list_item\", \"Draknos\"),\n            ],\n            test_mock={\n                \"llm_call\": lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                },\n            },\n        )",
                              "children": [
                                {
                                  "value": "id=\"9c0b0450-d199-458b-a731-072189dd6593\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"9c0b0450-d199-458b-a731-072189dd6593\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "9c0b0450-d199-458b-a731-072189dd6593",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "description=\"Generate a Python list based on the given prompt using a Large Language Model (LLM).\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Generate a Python list based on the given prompt using a Large Language Model (LLM).\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Generate a Python list based on the given prompt using a Large Language Model (LLM).",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.AI, BlockCategory.TEXT}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.AI, BlockCategory.TEXT}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.AI",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "AI",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "BlockCategory.TEXT",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "TEXT",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=AIListGeneratorBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "AIListGeneratorBlock.Input",
                                      "children": [
                                        {
                                          "value": "AIListGeneratorBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema=AIListGeneratorBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "AIListGeneratorBlock.Output",
                                      "children": [
                                        {
                                          "value": "AIListGeneratorBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_input={\n                \"focus\": \"planets\",\n                \"source_data\": (\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                ),\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"max_retries\": 3,\n            }",
                                  "children": [
                                    {
                                      "value": "test_input",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"focus\": \"planets\",\n                \"source_data\": (\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                ),\n                \"model\": LlmModel.GPT4_TURBO,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"max_retries\": 3,\n            }",
                                      "children": [
                                        {
                                          "value": "\"focus\": \"planets\"",
                                          "children": [
                                            {
                                              "value": "\"focus\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "focus",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"planets\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "planets",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"source_data\": (\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                )",
                                          "children": [
                                            {
                                              "value": "\"source_data\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "source_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                    \"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"\n                )",
                                              "children": [
                                                {
                                                  "value": "\"Zylora Prime is a glowing jungle world with bioluminescent plants, \"\n                    \"while Kharon-9 is a harsh desert planet with underground cities. \"\n                    \"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"\n                    \"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"\n                    \"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"\n                    \"fictional worlds.\"",
                                                  "children": [
                                                    {
                                                      "value": "\"Zylora Prime is a glowing jungle world with bioluminescent plants, \"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Zylora Prime is a glowing jungle world with bioluminescent plants,",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"while Kharon-9 is a harsh desert planet with underground cities. \"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "while Kharon-9 is a harsh desert planet with underground cities.",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to \"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Vortexia's constant storms power floating cities, and Oceara is a water-covered world home to",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape, \"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "intelligent marine life. On icy Draknos, ancient ruins lie buried beneath its frozen landscape,",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of \"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "drawing explorers to uncover its mysteries. Each planet showcases the limitless possibilities of",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"fictional worlds.\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "fictional worlds.",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"model\": LlmModel.GPT4_TURBO",
                                          "children": [
                                            {
                                              "value": "\"model\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "model",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "LlmModel.GPT4_TURBO",
                                              "children": [
                                                {
                                                  "value": "LlmModel",
                                                  "children": []
                                                },
                                                {
                                                  "value": "GPT4_TURBO",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"credentials\": TEST_CREDENTIALS_INPUT",
                                          "children": [
                                            {
                                              "value": "\"credentials\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "TEST_CREDENTIALS_INPUT",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"max_retries\": 3",
                                          "children": [
                                            {
                                              "value": "\"max_retries\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "max_retries",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "3",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_credentials=TEST_CREDENTIALS",
                                  "children": [
                                    {
                                      "value": "test_credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "TEST_CREDENTIALS",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "test_output=[\n                (\n                    \"generated_list\",\n                    [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n                ),\n                (\"list_item\", \"Zylora Prime\"),\n                (\"list_item\", \"Kharon-9\"),\n                (\"list_item\", \"Vortexia\"),\n                (\"list_item\", \"Oceara\"),\n                (\"list_item\", \"Draknos\"),\n            ]",
                                  "children": [
                                    {
                                      "value": "test_output",
                                      "children": []
                                    },
                                    {
                                      "value": "[\n                (\n                    \"generated_list\",\n                    [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n                ),\n                (\"list_item\", \"Zylora Prime\"),\n                (\"list_item\", \"Kharon-9\"),\n                (\"list_item\", \"Vortexia\"),\n                (\"list_item\", \"Oceara\"),\n                (\"list_item\", \"Draknos\"),\n            ]",
                                      "children": [
                                        {
                                          "value": "(\n                    \"generated_list\",\n                    [\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"],\n                )",
                                          "children": [
                                            {
                                              "value": "\"generated_list\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "generated_list",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "[\"Zylora Prime\", \"Kharon-9\", \"Vortexia\", \"Oceara\", \"Draknos\"]",
                                              "children": [
                                                {
                                                  "value": "\"Zylora Prime\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Zylora Prime",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"Kharon-9\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Kharon-9",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"Vortexia\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Vortexia",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"Oceara\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Oceara",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"Draknos\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Draknos",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"list_item\", \"Zylora Prime\")",
                                          "children": [
                                            {
                                              "value": "\"list_item\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list_item",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"Zylora Prime\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Zylora Prime",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"list_item\", \"Kharon-9\")",
                                          "children": [
                                            {
                                              "value": "\"list_item\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list_item",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"Kharon-9\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Kharon-9",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"list_item\", \"Vortexia\")",
                                          "children": [
                                            {
                                              "value": "\"list_item\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list_item",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"Vortexia\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Vortexia",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"list_item\", \"Oceara\")",
                                          "children": [
                                            {
                                              "value": "\"list_item\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list_item",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"Oceara\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Oceara",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"list_item\", \"Draknos\")",
                                          "children": [
                                            {
                                              "value": "\"list_item\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list_item",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"Draknos\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Draknos",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_mock={\n                \"llm_call\": lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                },\n            }",
                                  "children": [
                                    {
                                      "value": "test_mock",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"llm_call\": lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                },\n            }",
                                      "children": [
                                        {
                                          "value": "\"llm_call\": lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                }",
                                          "children": [
                                            {
                                              "value": "\"llm_call\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "llm_call",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "lambda input_data, credentials: {\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                }",
                                              "children": [
                                                {
                                                  "value": "input_data, credentials",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "credentials",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "{\n                    \"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"\n                }",
                                                  "children": [
                                                    {
                                                      "value": "\"response\": \"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"",
                                                      "children": [
                                                        {
                                                          "value": "\"response\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "response",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "['Zylora Prime', 'Kharon-9', 'Vortexia', 'Oceara', 'Draknos']",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def llm_call(\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> dict[str, str]:\n        llm_block = AIStructuredResponseGeneratorBlock()\n        response = llm_block.run_once(input_data, \"response\", credentials=credentials)\n        return response",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def llm_call(\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    ) -> dict[str, str]:\n        llm_block = AIStructuredResponseGeneratorBlock()\n        response = llm_block.run_once(input_data, \"response\", credentials=credentials)\n        return response",
                  "children": [
                    {
                      "value": "llm_call",
                      "children": []
                    },
                    {
                      "value": "(\n        input_data: AIStructuredResponseGeneratorBlock.Input,\n        credentials: APIKeyCredentials,\n    )",
                      "children": [
                        {
                          "value": "input_data: AIStructuredResponseGeneratorBlock.Input",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "AIStructuredResponseGeneratorBlock.Input",
                              "children": [
                                {
                                  "value": "AIStructuredResponseGeneratorBlock.Input",
                                  "children": [
                                    {
                                      "value": "AIStructuredResponseGeneratorBlock",
                                      "children": []
                                    },
                                    {
                                      "value": "Input",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "credentials: APIKeyCredentials",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "APIKeyCredentials",
                              "children": [
                                {
                                  "value": "APIKeyCredentials",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dict[str, str]",
                      "children": [
                        {
                          "value": "dict[str, str]",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            },
                            {
                              "value": "[str, str]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "llm_block = AIStructuredResponseGeneratorBlock()\n        response = llm_block.run_once(input_data, \"response\", credentials=credentials)\n        return response",
                      "children": [
                        {
                          "value": "llm_block = AIStructuredResponseGeneratorBlock()",
                          "children": [
                            {
                              "value": "llm_block = AIStructuredResponseGeneratorBlock()",
                              "children": [
                                {
                                  "value": "llm_block",
                                  "children": []
                                },
                                {
                                  "value": "AIStructuredResponseGeneratorBlock()",
                                  "children": [
                                    {
                                      "value": "AIStructuredResponseGeneratorBlock",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "response = llm_block.run_once(input_data, \"response\", credentials=credentials)",
                          "children": [
                            {
                              "value": "response = llm_block.run_once(input_data, \"response\", credentials=credentials)",
                              "children": [
                                {
                                  "value": "response",
                                  "children": []
                                },
                                {
                                  "value": "llm_block.run_once(input_data, \"response\", credentials=credentials)",
                                  "children": [
                                    {
                                      "value": "llm_block.run_once",
                                      "children": [
                                        {
                                          "value": "llm_block",
                                          "children": []
                                        },
                                        {
                                          "value": "run_once",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(input_data, \"response\", credentials=credentials)",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "\"response\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "response",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "credentials=credentials",
                                          "children": [
                                            {
                                              "value": "credentials",
                                              "children": []
                                            },
                                            {
                                              "value": "credentials",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return response",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def string_to_list(string):\n        \"\"\"\n        Converts a string representation of a list into an actual Python list object.\n        \"\"\"\n        logger.debug(f\"Converting string to list. Input string: {string}\")\n        try:\n            # Use ast.literal_eval to safely evaluate the string\n            python_list = ast.literal_eval(string)\n            if isinstance(python_list, list):\n                logger.debug(f\"Successfully converted string to list: {python_list}\")\n                return python_list\n            else:\n                logger.error(f\"The provided string '{string}' is not a valid list\")\n                raise ValueError(f\"The provided string '{string}' is not a valid list.\")\n        except (SyntaxError, ValueError) as e:\n            logger.error(f\"Failed to convert string to list: {e}\")\n            raise ValueError(\"Invalid list format. Could not convert to list.\")",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def string_to_list(string):\n        \"\"\"\n        Converts a string representation of a list into an actual Python list object.\n        \"\"\"\n        logger.debug(f\"Converting string to list. Input string: {string}\")\n        try:\n            # Use ast.literal_eval to safely evaluate the string\n            python_list = ast.literal_eval(string)\n            if isinstance(python_list, list):\n                logger.debug(f\"Successfully converted string to list: {python_list}\")\n                return python_list\n            else:\n                logger.error(f\"The provided string '{string}' is not a valid list\")\n                raise ValueError(f\"The provided string '{string}' is not a valid list.\")\n        except (SyntaxError, ValueError) as e:\n            logger.error(f\"Failed to convert string to list: {e}\")\n            raise ValueError(\"Invalid list format. Could not convert to list.\")",
                  "children": [
                    {
                      "value": "string_to_list",
                      "children": []
                    },
                    {
                      "value": "(string)",
                      "children": [
                        {
                          "value": "string",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"\"\"\n        Converts a string representation of a list into an actual Python list object.\n        \"\"\"\n        logger.debug(f\"Converting string to list. Input string: {string}\")\n        try:\n            # Use ast.literal_eval to safely evaluate the string\n            python_list = ast.literal_eval(string)\n            if isinstance(python_list, list):\n                logger.debug(f\"Successfully converted string to list: {python_list}\")\n                return python_list\n            else:\n                logger.error(f\"The provided string '{string}' is not a valid list\")\n                raise ValueError(f\"The provided string '{string}' is not a valid list.\")\n        except (SyntaxError, ValueError) as e:\n            logger.error(f\"Failed to convert string to list: {e}\")\n            raise ValueError(\"Invalid list format. Could not convert to list.\")",
                      "children": [
                        {
                          "value": "\"\"\"\n        Converts a string representation of a list into an actual Python list object.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"\n        Converts a string representation of a list into an actual Python list object.\n        \"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Converts a string representation of a list into an actual Python list object.",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.debug(f\"Converting string to list. Input string: {string}\")",
                          "children": [
                            {
                              "value": "logger.debug(f\"Converting string to list. Input string: {string}\")",
                              "children": [
                                {
                                  "value": "logger.debug",
                                  "children": [
                                    {
                                      "value": "logger",
                                      "children": []
                                    },
                                    {
                                      "value": "debug",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(f\"Converting string to list. Input string: {string}\")",
                                  "children": [
                                    {
                                      "value": "f\"Converting string to list. Input string: {string}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Converting string to list. Input string:",
                                          "children": []
                                        },
                                        {
                                          "value": "{string}",
                                          "children": [
                                            {
                                              "value": "string",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "try:\n            # Use ast.literal_eval to safely evaluate the string\n            python_list = ast.literal_eval(string)\n            if isinstance(python_list, list):\n                logger.debug(f\"Successfully converted string to list: {python_list}\")\n                return python_list\n            else:\n                logger.error(f\"The provided string '{string}' is not a valid list\")\n                raise ValueError(f\"The provided string '{string}' is not a valid list.\")\n        except (SyntaxError, ValueError) as e:\n            logger.error(f\"Failed to convert string to list: {e}\")\n            raise ValueError(\"Invalid list format. Could not convert to list.\")",
                          "children": [
                            {
                              "value": "# Use ast.literal_eval to safely evaluate the string",
                              "children": []
                            },
                            {
                              "value": "python_list = ast.literal_eval(string)\n            if isinstance(python_list, list):\n                logger.debug(f\"Successfully converted string to list: {python_list}\")\n                return python_list\n            else:\n                logger.error(f\"The provided string '{string}' is not a valid list\")\n                raise ValueError(f\"The provided string '{string}' is not a valid list.\")",
                              "children": [
                                {
                                  "value": "python_list = ast.literal_eval(string)",
                                  "children": [
                                    {
                                      "value": "python_list = ast.literal_eval(string)",
                                      "children": [
                                        {
                                          "value": "python_list",
                                          "children": []
                                        },
                                        {
                                          "value": "ast.literal_eval(string)",
                                          "children": [
                                            {
                                              "value": "ast.literal_eval",
                                              "children": [
                                                {
                                                  "value": "ast",
                                                  "children": []
                                                },
                                                {
                                                  "value": "literal_eval",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(string)",
                                              "children": [
                                                {
                                                  "value": "string",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "if isinstance(python_list, list):\n                logger.debug(f\"Successfully converted string to list: {python_list}\")\n                return python_list\n            else:\n                logger.error(f\"The provided string '{string}' is not a valid list\")\n                raise ValueError(f\"The provided string '{string}' is not a valid list.\")",
                                  "children": [
                                    {
                                      "value": "isinstance(python_list, list)",
                                      "children": [
                                        {
                                          "value": "isinstance",
                                          "children": []
                                        },
                                        {
                                          "value": "(python_list, list)",
                                          "children": [
                                            {
                                              "value": "python_list",
                                              "children": []
                                            },
                                            {
                                              "value": "list",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "logger.debug(f\"Successfully converted string to list: {python_list}\")\n                return python_list",
                                      "children": [
                                        {
                                          "value": "logger.debug(f\"Successfully converted string to list: {python_list}\")",
                                          "children": [
                                            {
                                              "value": "logger.debug(f\"Successfully converted string to list: {python_list}\")",
                                              "children": [
                                                {
                                                  "value": "logger.debug",
                                                  "children": [
                                                    {
                                                      "value": "logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "debug",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(f\"Successfully converted string to list: {python_list}\")",
                                                  "children": [
                                                    {
                                                      "value": "f\"Successfully converted string to list: {python_list}\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Successfully converted string to list:",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{python_list}",
                                                          "children": [
                                                            {
                                                              "value": "python_list",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "return python_list",
                                          "children": [
                                            {
                                              "value": "python_list",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "else:\n                logger.error(f\"The provided string '{string}' is not a valid list\")\n                raise ValueError(f\"The provided string '{string}' is not a valid list.\")",
                                      "children": [
                                        {
                                          "value": "logger.error(f\"The provided string '{string}' is not a valid list\")\n                raise ValueError(f\"The provided string '{string}' is not a valid list.\")",
                                          "children": [
                                            {
                                              "value": "logger.error(f\"The provided string '{string}' is not a valid list\")",
                                              "children": [
                                                {
                                                  "value": "logger.error(f\"The provided string '{string}' is not a valid list\")",
                                                  "children": [
                                                    {
                                                      "value": "logger.error",
                                                      "children": [
                                                        {
                                                          "value": "logger",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "error",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(f\"The provided string '{string}' is not a valid list\")",
                                                      "children": [
                                                        {
                                                          "value": "f\"The provided string '{string}' is not a valid list\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "The provided string '",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{string}",
                                                              "children": [
                                                                {
                                                                  "value": "string",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "' is not a valid list",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise ValueError(f\"The provided string '{string}' is not a valid list.\")",
                                              "children": [
                                                {
                                                  "value": "ValueError(f\"The provided string '{string}' is not a valid list.\")",
                                                  "children": [
                                                    {
                                                      "value": "ValueError",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(f\"The provided string '{string}' is not a valid list.\")",
                                                      "children": [
                                                        {
                                                          "value": "f\"The provided string '{string}' is not a valid list.\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "The provided string '",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{string}",
                                                              "children": [
                                                                {
                                                                  "value": "string",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "' is not a valid list.",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "except (SyntaxError, ValueError) as e:\n            logger.error(f\"Failed to convert string to list: {e}\")\n            raise ValueError(\"Invalid list format. Could not convert to list.\")",
                              "children": [
                                {
                                  "value": "(SyntaxError, ValueError) as e",
                                  "children": [
                                    {
                                      "value": "(SyntaxError, ValueError)",
                                      "children": [
                                        {
                                          "value": "SyntaxError",
                                          "children": []
                                        },
                                        {
                                          "value": "ValueError",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": [
                                        {
                                          "value": "e",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "logger.error(f\"Failed to convert string to list: {e}\")\n            raise ValueError(\"Invalid list format. Could not convert to list.\")",
                                  "children": [
                                    {
                                      "value": "logger.error(f\"Failed to convert string to list: {e}\")",
                                      "children": [
                                        {
                                          "value": "logger.error(f\"Failed to convert string to list: {e}\")",
                                          "children": [
                                            {
                                              "value": "logger.error",
                                              "children": [
                                                {
                                                  "value": "logger",
                                                  "children": []
                                                },
                                                {
                                                  "value": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(f\"Failed to convert string to list: {e}\")",
                                              "children": [
                                                {
                                                  "value": "f\"Failed to convert string to list: {e}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Failed to convert string to list:",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{e}",
                                                      "children": [
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "raise ValueError(\"Invalid list format. Could not convert to list.\")",
                                      "children": [
                                        {
                                          "value": "ValueError(\"Invalid list format. Could not convert to list.\")",
                                          "children": [
                                            {
                                              "value": "ValueError",
                                              "children": []
                                            },
                                            {
                                              "value": "(\"Invalid list format. Could not convert to list.\")",
                                              "children": [
                                                {
                                                  "value": "\"Invalid list format. Could not convert to list.\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Invalid list format. Could not convert to list.",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        logger.debug(f\"Starting AIListGeneratorBlock.run with input data: {input_data}\")\n\n        # Check for API key\n        api_key_check = credentials.api_key.get_secret_value()\n        if not api_key_check:\n            raise ValueError(\"No LLM API key provided.\")\n\n        # Prepare the system prompt\n        sys_prompt = \"\"\"You are a Python list generator. Your task is to generate a Python list based on the user's prompt. \n            |Respond ONLY with a valid python list. \n            |The list can contain strings, numbers, or nested lists as appropriate. \n            |Do not include any explanations or additional text.\n\n            |Valid Example string formats:\n\n            |Example 1:\n            |```\n            |['1', '2', '3', '4']\n            |```\n\n            |Example 2:\n            |```\n            |[['1', '2'], ['3', '4'], ['5', '6']]\n            |```\n\n            |Example 3:\n            |```\n            |['1', ['2', '3'], ['4', ['5', '6']]]\n            |```\n\n            |Example 4:\n            |```\n            |['a', 'b', 'c']\n            |```\n\n            |Example 5:\n            |```\n            |['1', '2.5', 'string', 'True', ['False', 'None']]\n            |```\n\n            |Do not include any explanations or additional text, just respond with the list in the format specified above.\n            \"\"\"\n        # If a focus is provided, add it to the prompt\n        if input_data.focus:\n            prompt = f\"Generate a list with the following focus:\\n<focus>\\n\\n{input_data.focus}</focus>\"\n        else:\n            # If there's source data\n            if input_data.source_data:\n                prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"\n            else:\n                # No focus or source data provided, generat a random list\n                prompt = \"Generate a random list.\"\n\n        # If the source data is provided, add it to the prompt\n        if input_data.source_data:\n            prompt += f\"\\n\\nUse the following source data to generate the list from:\\n\\n<source_data>\\n\\n{input_data.source_data}</source_data>\\n\\nDo not invent fictional data that is not present in the source data.\"\n        # Else, tell the LLM to synthesize the data\n        else:\n            prompt += \"\\n\\nInvent the data to generate the list from.\"\n\n        for attempt in range(input_data.max_retries):\n            try:\n                logger.debug(\"Calling LLM\")\n                llm_response = self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )\n\n                logger.debug(f\"LLM response: {llm_response}\")\n\n                # Extract Response string\n                response_string = llm_response[\"response\"]\n                logger.debug(f\"Response string: {response_string}\")\n\n                # Convert the string to a Python list\n                logger.debug(\"Converting string to Python list\")\n                parsed_list = self.string_to_list(response_string)\n                logger.debug(f\"Parsed list: {parsed_list}\")\n\n                # If we reach here, we have a valid Python list\n                logger.debug(\"Successfully generated a valid Python list\")\n                yield \"generated_list\", parsed_list\n\n                # Yield each item in the list\n                for item in parsed_list:\n                    yield \"list_item\", item\n                return\n\n            except Exception as e:\n                logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")\n                if attempt == input_data.max_retries - 1:\n                    logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )\n                else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")\n\n        logger.debug(\"AIListGeneratorBlock.run completed\")",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "*",
                      "children": []
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "logger.debug(f\"Starting AIListGeneratorBlock.run with input data: {input_data}\")\n\n        # Check for API key\n        api_key_check = credentials.api_key.get_secret_value()\n        if not api_key_check:\n            raise ValueError(\"No LLM API key provided.\")\n\n        # Prepare the system prompt\n        sys_prompt = \"\"\"You are a Python list generator. Your task is to generate a Python list based on the user's prompt. \n            |Respond ONLY with a valid python list. \n            |The list can contain strings, numbers, or nested lists as appropriate. \n            |Do not include any explanations or additional text.\n\n            |Valid Example string formats:\n\n            |Example 1:\n            |```\n            |['1', '2', '3', '4']\n            |```\n\n            |Example 2:\n            |```\n            |[['1', '2'], ['3', '4'], ['5', '6']]\n            |```\n\n            |Example 3:\n            |```\n            |['1', ['2', '3'], ['4', ['5', '6']]]\n            |```\n\n            |Example 4:\n            |```\n            |['a', 'b', 'c']\n            |```\n\n            |Example 5:\n            |```\n            |['1', '2.5', 'string', 'True', ['False', 'None']]\n            |```\n\n            |Do not include any explanations or additional text, just respond with the list in the format specified above.\n            \"\"\"\n        # If a focus is provided, add it to the prompt\n        if input_data.focus:\n            prompt = f\"Generate a list with the following focus:\\n<focus>\\n\\n{input_data.focus}</focus>\"\n        else:\n            # If there's source data\n            if input_data.source_data:\n                prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"\n            else:\n                # No focus or source data provided, generat a random list\n                prompt = \"Generate a random list.\"\n\n        # If the source data is provided, add it to the prompt\n        if input_data.source_data:\n            prompt += f\"\\n\\nUse the following source data to generate the list from:\\n\\n<source_data>\\n\\n{input_data.source_data}</source_data>\\n\\nDo not invent fictional data that is not present in the source data.\"\n        # Else, tell the LLM to synthesize the data\n        else:\n            prompt += \"\\n\\nInvent the data to generate the list from.\"\n\n        for attempt in range(input_data.max_retries):\n            try:\n                logger.debug(\"Calling LLM\")\n                llm_response = self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )\n\n                logger.debug(f\"LLM response: {llm_response}\")\n\n                # Extract Response string\n                response_string = llm_response[\"response\"]\n                logger.debug(f\"Response string: {response_string}\")\n\n                # Convert the string to a Python list\n                logger.debug(\"Converting string to Python list\")\n                parsed_list = self.string_to_list(response_string)\n                logger.debug(f\"Parsed list: {parsed_list}\")\n\n                # If we reach here, we have a valid Python list\n                logger.debug(\"Successfully generated a valid Python list\")\n                yield \"generated_list\", parsed_list\n\n                # Yield each item in the list\n                for item in parsed_list:\n                    yield \"list_item\", item\n                return\n\n            except Exception as e:\n                logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")\n                if attempt == input_data.max_retries - 1:\n                    logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )\n                else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")\n\n        logger.debug(\"AIListGeneratorBlock.run completed\")",
                  "children": [
                    {
                      "value": "logger.debug(f\"Starting AIListGeneratorBlock.run with input data: {input_data}\")",
                      "children": [
                        {
                          "value": "logger.debug(f\"Starting AIListGeneratorBlock.run with input data: {input_data}\")",
                          "children": [
                            {
                              "value": "logger.debug",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "debug",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"Starting AIListGeneratorBlock.run with input data: {input_data}\")",
                              "children": [
                                {
                                  "value": "f\"Starting AIListGeneratorBlock.run with input data: {input_data}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Starting AIListGeneratorBlock.run with input data:",
                                      "children": []
                                    },
                                    {
                                      "value": "{input_data}",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Check for API key",
                      "children": []
                    },
                    {
                      "value": "api_key_check = credentials.api_key.get_secret_value()",
                      "children": [
                        {
                          "value": "api_key_check = credentials.api_key.get_secret_value()",
                          "children": [
                            {
                              "value": "api_key_check",
                              "children": []
                            },
                            {
                              "value": "credentials.api_key.get_secret_value()",
                              "children": [
                                {
                                  "value": "credentials.api_key.get_secret_value",
                                  "children": [
                                    {
                                      "value": "credentials.api_key",
                                      "children": [
                                        {
                                          "value": "credentials",
                                          "children": []
                                        },
                                        {
                                          "value": "api_key",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "get_secret_value",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not api_key_check:\n            raise ValueError(\"No LLM API key provided.\")",
                      "children": [
                        {
                          "value": "not api_key_check",
                          "children": [
                            {
                              "value": "api_key_check",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(\"No LLM API key provided.\")",
                          "children": [
                            {
                              "value": "raise ValueError(\"No LLM API key provided.\")",
                              "children": [
                                {
                                  "value": "ValueError(\"No LLM API key provided.\")",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\"No LLM API key provided.\")",
                                      "children": [
                                        {
                                          "value": "\"No LLM API key provided.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "No LLM API key provided.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Prepare the system prompt",
                      "children": []
                    },
                    {
                      "value": "sys_prompt = \"\"\"You are a Python list generator. Your task is to generate a Python list based on the user's prompt. \n            |Respond ONLY with a valid python list. \n            |The list can contain strings, numbers, or nested lists as appropriate. \n            |Do not include any explanations or additional text.\n\n            |Valid Example string formats:\n\n            |Example 1:\n            |```\n            |['1', '2', '3', '4']\n            |```\n\n            |Example 2:\n            |```\n            |[['1', '2'], ['3', '4'], ['5', '6']]\n            |```\n\n            |Example 3:\n            |```\n            |['1', ['2', '3'], ['4', ['5', '6']]]\n            |```\n\n            |Example 4:\n            |```\n            |['a', 'b', 'c']\n            |```\n\n            |Example 5:\n            |```\n            |['1', '2.5', 'string', 'True', ['False', 'None']]\n            |```\n\n            |Do not include any explanations or additional text, just respond with the list in the format specified above.\n            \"\"\"",
                      "children": [
                        {
                          "value": "sys_prompt = \"\"\"You are a Python list generator. Your task is to generate a Python list based on the user's prompt. \n            |Respond ONLY with a valid python list. \n            |The list can contain strings, numbers, or nested lists as appropriate. \n            |Do not include any explanations or additional text.\n\n            |Valid Example string formats:\n\n            |Example 1:\n            |```\n            |['1', '2', '3', '4']\n            |```\n\n            |Example 2:\n            |```\n            |[['1', '2'], ['3', '4'], ['5', '6']]\n            |```\n\n            |Example 3:\n            |```\n            |['1', ['2', '3'], ['4', ['5', '6']]]\n            |```\n\n            |Example 4:\n            |```\n            |['a', 'b', 'c']\n            |```\n\n            |Example 5:\n            |```\n            |['1', '2.5', 'string', 'True', ['False', 'None']]\n            |```\n\n            |Do not include any explanations or additional text, just respond with the list in the format specified above.\n            \"\"\"",
                          "children": [
                            {
                              "value": "sys_prompt",
                              "children": []
                            },
                            {
                              "value": "\"\"\"You are a Python list generator. Your task is to generate a Python list based on the user's prompt. \n            |Respond ONLY with a valid python list. \n            |The list can contain strings, numbers, or nested lists as appropriate. \n            |Do not include any explanations or additional text.\n\n            |Valid Example string formats:\n\n            |Example 1:\n            |```\n            |['1', '2', '3', '4']\n            |```\n\n            |Example 2:\n            |```\n            |[['1', '2'], ['3', '4'], ['5', '6']]\n            |```\n\n            |Example 3:\n            |```\n            |['1', ['2', '3'], ['4', ['5', '6']]]\n            |```\n\n            |Example 4:\n            |```\n            |['a', 'b', 'c']\n            |```\n\n            |Example 5:\n            |```\n            |['1', '2.5', 'string', 'True', ['False', 'None']]\n            |```\n\n            |Do not include any explanations or additional text, just respond with the list in the format specified above.\n            \"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "You are a Python list generator. Your task is to generate a Python list based on the user's prompt. \n            |Respond ONLY with a valid python list. \n            |The list can contain strings, numbers, or nested lists as appropriate. \n            |Do not include any explanations or additional text.\n\n            |Valid Example string formats:\n\n            |Example 1:\n            |```\n            |['1', '2', '3', '4']\n            |```\n\n            |Example 2:\n            |```\n            |[['1', '2'], ['3', '4'], ['5', '6']]\n            |```\n\n            |Example 3:\n            |```\n            |['1', ['2', '3'], ['4', ['5', '6']]]\n            |```\n\n            |Example 4:\n            |```\n            |['a', 'b', 'c']\n            |```\n\n            |Example 5:\n            |```\n            |['1', '2.5', 'string', 'True', ['False', 'None']]\n            |```\n\n            |Do not include any explanations or additional text, just respond with the list in the format specified above.",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# If a focus is provided, add it to the prompt",
                      "children": []
                    },
                    {
                      "value": "if input_data.focus:\n            prompt = f\"Generate a list with the following focus:\\n<focus>\\n\\n{input_data.focus}</focus>\"\n        else:\n            # If there's source data\n            if input_data.source_data:\n                prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"\n            else:\n                # No focus or source data provided, generat a random list\n                prompt = \"Generate a random list.\"",
                      "children": [
                        {
                          "value": "input_data.focus",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "focus",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "prompt = f\"Generate a list with the following focus:\\n<focus>\\n\\n{input_data.focus}</focus>\"",
                          "children": [
                            {
                              "value": "prompt = f\"Generate a list with the following focus:\\n<focus>\\n\\n{input_data.focus}</focus>\"",
                              "children": [
                                {
                                  "value": "prompt = f\"Generate a list with the following focus:\\n<focus>\\n\\n{input_data.focus}</focus>\"",
                                  "children": [
                                    {
                                      "value": "prompt",
                                      "children": []
                                    },
                                    {
                                      "value": "f\"Generate a list with the following focus:\\n<focus>\\n\\n{input_data.focus}</focus>\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Generate a list with the following focus:\\n<focus>\\n\\n",
                                          "children": [
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "{input_data.focus}",
                                          "children": [
                                            {
                                              "value": "input_data.focus",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "focus",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "</focus>",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            # If there's source data\n            if input_data.source_data:\n                prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"\n            else:\n                # No focus or source data provided, generat a random list\n                prompt = \"Generate a random list.\"",
                          "children": [
                            {
                              "value": "# If there's source data",
                              "children": []
                            },
                            {
                              "value": "if input_data.source_data:\n                prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"\n            else:\n                # No focus or source data provided, generat a random list\n                prompt = \"Generate a random list.\"",
                              "children": [
                                {
                                  "value": "if input_data.source_data:\n                prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"\n            else:\n                # No focus or source data provided, generat a random list\n                prompt = \"Generate a random list.\"",
                                  "children": [
                                    {
                                      "value": "input_data.source_data",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "source_data",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"",
                                      "children": [
                                        {
                                          "value": "prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"",
                                          "children": [
                                            {
                                              "value": "prompt = \"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"",
                                              "children": [
                                                {
                                                  "value": "prompt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Extract the main focus of the source data to a list.\\ni.e if the source data is a news website, the focus would be the news stories rather than the social links in the footer.",
                                                      "children": [
                                                        {
                                                          "value": "\\n",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "else:\n                # No focus or source data provided, generat a random list\n                prompt = \"Generate a random list.\"",
                                      "children": [
                                        {
                                          "value": "# No focus or source data provided, generat a random list",
                                          "children": []
                                        },
                                        {
                                          "value": "prompt = \"Generate a random list.\"",
                                          "children": [
                                            {
                                              "value": "prompt = \"Generate a random list.\"",
                                              "children": [
                                                {
                                                  "value": "prompt = \"Generate a random list.\"",
                                                  "children": [
                                                    {
                                                      "value": "prompt",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"Generate a random list.\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Generate a random list.",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# If the source data is provided, add it to the prompt",
                      "children": []
                    },
                    {
                      "value": "if input_data.source_data:\n            prompt += f\"\\n\\nUse the following source data to generate the list from:\\n\\n<source_data>\\n\\n{input_data.source_data}</source_data>\\n\\nDo not invent fictional data that is not present in the source data.\"\n        # Else, tell the LLM to synthesize the data\n        else:\n            prompt += \"\\n\\nInvent the data to generate the list from.\"",
                      "children": [
                        {
                          "value": "input_data.source_data",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "source_data",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "prompt += f\"\\n\\nUse the following source data to generate the list from:\\n\\n<source_data>\\n\\n{input_data.source_data}</source_data>\\n\\nDo not invent fictional data that is not present in the source data.\"",
                          "children": [
                            {
                              "value": "prompt += f\"\\n\\nUse the following source data to generate the list from:\\n\\n<source_data>\\n\\n{input_data.source_data}</source_data>\\n\\nDo not invent fictional data that is not present in the source data.\"",
                              "children": [
                                {
                                  "value": "prompt += f\"\\n\\nUse the following source data to generate the list from:\\n\\n<source_data>\\n\\n{input_data.source_data}</source_data>\\n\\nDo not invent fictional data that is not present in the source data.\"",
                                  "children": [
                                    {
                                      "value": "prompt",
                                      "children": []
                                    },
                                    {
                                      "value": "f\"\\n\\nUse the following source data to generate the list from:\\n\\n<source_data>\\n\\n{input_data.source_data}</source_data>\\n\\nDo not invent fictional data that is not present in the source data.\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "\\n\\nUse the following source data to generate the list from:\\n\\n<source_data>\\n\\n",
                                          "children": [
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "{input_data.source_data}",
                                          "children": [
                                            {
                                              "value": "input_data.source_data",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "source_data",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "</source_data>\\n\\nDo not invent fictional data that is not present in the source data.",
                                          "children": [
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# Else, tell the LLM to synthesize the data",
                          "children": []
                        },
                        {
                          "value": "else:\n            prompt += \"\\n\\nInvent the data to generate the list from.\"",
                          "children": [
                            {
                              "value": "prompt += \"\\n\\nInvent the data to generate the list from.\"",
                              "children": [
                                {
                                  "value": "prompt += \"\\n\\nInvent the data to generate the list from.\"",
                                  "children": [
                                    {
                                      "value": "prompt += \"\\n\\nInvent the data to generate the list from.\"",
                                      "children": [
                                        {
                                          "value": "prompt",
                                          "children": []
                                        },
                                        {
                                          "value": "\"\\n\\nInvent the data to generate the list from.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n\\nInvent the data to generate the list from.",
                                              "children": [
                                                {
                                                  "value": "\\n",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\\n",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for attempt in range(input_data.max_retries):\n            try:\n                logger.debug(\"Calling LLM\")\n                llm_response = self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )\n\n                logger.debug(f\"LLM response: {llm_response}\")\n\n                # Extract Response string\n                response_string = llm_response[\"response\"]\n                logger.debug(f\"Response string: {response_string}\")\n\n                # Convert the string to a Python list\n                logger.debug(\"Converting string to Python list\")\n                parsed_list = self.string_to_list(response_string)\n                logger.debug(f\"Parsed list: {parsed_list}\")\n\n                # If we reach here, we have a valid Python list\n                logger.debug(\"Successfully generated a valid Python list\")\n                yield \"generated_list\", parsed_list\n\n                # Yield each item in the list\n                for item in parsed_list:\n                    yield \"list_item\", item\n                return\n\n            except Exception as e:\n                logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")\n                if attempt == input_data.max_retries - 1:\n                    logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )\n                else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")",
                      "children": [
                        {
                          "value": "attempt",
                          "children": []
                        },
                        {
                          "value": "range(input_data.max_retries)",
                          "children": [
                            {
                              "value": "range",
                              "children": []
                            },
                            {
                              "value": "(input_data.max_retries)",
                              "children": [
                                {
                                  "value": "input_data.max_retries",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "max_retries",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "try:\n                logger.debug(\"Calling LLM\")\n                llm_response = self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )\n\n                logger.debug(f\"LLM response: {llm_response}\")\n\n                # Extract Response string\n                response_string = llm_response[\"response\"]\n                logger.debug(f\"Response string: {response_string}\")\n\n                # Convert the string to a Python list\n                logger.debug(\"Converting string to Python list\")\n                parsed_list = self.string_to_list(response_string)\n                logger.debug(f\"Parsed list: {parsed_list}\")\n\n                # If we reach here, we have a valid Python list\n                logger.debug(\"Successfully generated a valid Python list\")\n                yield \"generated_list\", parsed_list\n\n                # Yield each item in the list\n                for item in parsed_list:\n                    yield \"list_item\", item\n                return\n\n            except Exception as e:\n                logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")\n                if attempt == input_data.max_retries - 1:\n                    logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )\n                else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")",
                          "children": [
                            {
                              "value": "try:\n                logger.debug(\"Calling LLM\")\n                llm_response = self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )\n\n                logger.debug(f\"LLM response: {llm_response}\")\n\n                # Extract Response string\n                response_string = llm_response[\"response\"]\n                logger.debug(f\"Response string: {response_string}\")\n\n                # Convert the string to a Python list\n                logger.debug(\"Converting string to Python list\")\n                parsed_list = self.string_to_list(response_string)\n                logger.debug(f\"Parsed list: {parsed_list}\")\n\n                # If we reach here, we have a valid Python list\n                logger.debug(\"Successfully generated a valid Python list\")\n                yield \"generated_list\", parsed_list\n\n                # Yield each item in the list\n                for item in parsed_list:\n                    yield \"list_item\", item\n                return\n\n            except Exception as e:\n                logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")\n                if attempt == input_data.max_retries - 1:\n                    logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )\n                else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")",
                              "children": [
                                {
                                  "value": "logger.debug(\"Calling LLM\")\n                llm_response = self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )\n\n                logger.debug(f\"LLM response: {llm_response}\")\n\n                # Extract Response string\n                response_string = llm_response[\"response\"]\n                logger.debug(f\"Response string: {response_string}\")\n\n                # Convert the string to a Python list\n                logger.debug(\"Converting string to Python list\")\n                parsed_list = self.string_to_list(response_string)\n                logger.debug(f\"Parsed list: {parsed_list}\")\n\n                # If we reach here, we have a valid Python list\n                logger.debug(\"Successfully generated a valid Python list\")\n                yield \"generated_list\", parsed_list\n\n                # Yield each item in the list\n                for item in parsed_list:\n                    yield \"list_item\", item\n                return",
                                  "children": [
                                    {
                                      "value": "logger.debug(\"Calling LLM\")",
                                      "children": [
                                        {
                                          "value": "logger.debug(\"Calling LLM\")",
                                          "children": [
                                            {
                                              "value": "logger.debug",
                                              "children": [
                                                {
                                                  "value": "logger",
                                                  "children": []
                                                },
                                                {
                                                  "value": "debug",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\"Calling LLM\")",
                                              "children": [
                                                {
                                                  "value": "\"Calling LLM\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Calling LLM",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "llm_response = self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )",
                                      "children": [
                                        {
                                          "value": "llm_response = self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )",
                                          "children": [
                                            {
                                              "value": "llm_response",
                                              "children": []
                                            },
                                            {
                                              "value": "self.llm_call(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )",
                                              "children": [
                                                {
                                                  "value": "self.llm_call",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "llm_call",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                    AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    ),\n                    credentials=credentials,\n                )",
                                                  "children": [
                                                    {
                                                      "value": "AIStructuredResponseGeneratorBlock.Input(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "AIStructuredResponseGeneratorBlock.Input",
                                                          "children": [
                                                            {
                                                              "value": "AIStructuredResponseGeneratorBlock",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Input",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(\n                        sys_prompt=sys_prompt,\n                        prompt=prompt,\n                        credentials=input_data.credentials,\n                        model=input_data.model,\n                        expected_format={},  # Do not use structured response\n                        ollama_host=input_data.ollama_host,\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "sys_prompt=sys_prompt",
                                                              "children": [
                                                                {
                                                                  "value": "sys_prompt",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "sys_prompt",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "prompt=prompt",
                                                              "children": [
                                                                {
                                                                  "value": "prompt",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "prompt",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "credentials=input_data.credentials",
                                                              "children": [
                                                                {
                                                                  "value": "credentials",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "input_data.credentials",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "credentials",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "model=input_data.model",
                                                              "children": [
                                                                {
                                                                  "value": "model",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "input_data.model",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "model",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "expected_format={}",
                                                              "children": [
                                                                {
                                                                  "value": "expected_format",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{}",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "# Do not use structured response",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "ollama_host=input_data.ollama_host",
                                                              "children": [
                                                                {
                                                                  "value": "ollama_host",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "input_data.ollama_host",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "ollama_host",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "credentials=credentials",
                                                      "children": [
                                                        {
                                                          "value": "credentials",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "credentials",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "logger.debug(f\"LLM response: {llm_response}\")",
                                      "children": [
                                        {
                                          "value": "logger.debug(f\"LLM response: {llm_response}\")",
                                          "children": [
                                            {
                                              "value": "logger.debug",
                                              "children": [
                                                {
                                                  "value": "logger",
                                                  "children": []
                                                },
                                                {
                                                  "value": "debug",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(f\"LLM response: {llm_response}\")",
                                              "children": [
                                                {
                                                  "value": "f\"LLM response: {llm_response}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "LLM response:",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{llm_response}",
                                                      "children": [
                                                        {
                                                          "value": "llm_response",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# Extract Response string",
                                      "children": []
                                    },
                                    {
                                      "value": "response_string = llm_response[\"response\"]",
                                      "children": [
                                        {
                                          "value": "response_string = llm_response[\"response\"]",
                                          "children": [
                                            {
                                              "value": "response_string",
                                              "children": []
                                            },
                                            {
                                              "value": "llm_response[\"response\"]",
                                              "children": [
                                                {
                                                  "value": "llm_response",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"response\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "response",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "logger.debug(f\"Response string: {response_string}\")",
                                      "children": [
                                        {
                                          "value": "logger.debug(f\"Response string: {response_string}\")",
                                          "children": [
                                            {
                                              "value": "logger.debug",
                                              "children": [
                                                {
                                                  "value": "logger",
                                                  "children": []
                                                },
                                                {
                                                  "value": "debug",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(f\"Response string: {response_string}\")",
                                              "children": [
                                                {
                                                  "value": "f\"Response string: {response_string}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Response string:",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{response_string}",
                                                      "children": [
                                                        {
                                                          "value": "response_string",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# Convert the string to a Python list",
                                      "children": []
                                    },
                                    {
                                      "value": "logger.debug(\"Converting string to Python list\")",
                                      "children": [
                                        {
                                          "value": "logger.debug(\"Converting string to Python list\")",
                                          "children": [
                                            {
                                              "value": "logger.debug",
                                              "children": [
                                                {
                                                  "value": "logger",
                                                  "children": []
                                                },
                                                {
                                                  "value": "debug",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\"Converting string to Python list\")",
                                              "children": [
                                                {
                                                  "value": "\"Converting string to Python list\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Converting string to Python list",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "parsed_list = self.string_to_list(response_string)",
                                      "children": [
                                        {
                                          "value": "parsed_list = self.string_to_list(response_string)",
                                          "children": [
                                            {
                                              "value": "parsed_list",
                                              "children": []
                                            },
                                            {
                                              "value": "self.string_to_list(response_string)",
                                              "children": [
                                                {
                                                  "value": "self.string_to_list",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "string_to_list",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(response_string)",
                                                  "children": [
                                                    {
                                                      "value": "response_string",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "logger.debug(f\"Parsed list: {parsed_list}\")",
                                      "children": [
                                        {
                                          "value": "logger.debug(f\"Parsed list: {parsed_list}\")",
                                          "children": [
                                            {
                                              "value": "logger.debug",
                                              "children": [
                                                {
                                                  "value": "logger",
                                                  "children": []
                                                },
                                                {
                                                  "value": "debug",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(f\"Parsed list: {parsed_list}\")",
                                              "children": [
                                                {
                                                  "value": "f\"Parsed list: {parsed_list}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Parsed list:",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{parsed_list}",
                                                      "children": [
                                                        {
                                                          "value": "parsed_list",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# If we reach here, we have a valid Python list",
                                      "children": []
                                    },
                                    {
                                      "value": "logger.debug(\"Successfully generated a valid Python list\")",
                                      "children": [
                                        {
                                          "value": "logger.debug(\"Successfully generated a valid Python list\")",
                                          "children": [
                                            {
                                              "value": "logger.debug",
                                              "children": [
                                                {
                                                  "value": "logger",
                                                  "children": []
                                                },
                                                {
                                                  "value": "debug",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\"Successfully generated a valid Python list\")",
                                              "children": [
                                                {
                                                  "value": "\"Successfully generated a valid Python list\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Successfully generated a valid Python list",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "yield \"generated_list\", parsed_list",
                                      "children": [
                                        {
                                          "value": "yield \"generated_list\", parsed_list",
                                          "children": [
                                            {
                                              "value": "\"generated_list\", parsed_list",
                                              "children": [
                                                {
                                                  "value": "\"generated_list\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "generated_list",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "parsed_list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# Yield each item in the list",
                                      "children": []
                                    },
                                    {
                                      "value": "for item in parsed_list:\n                    yield \"list_item\", item",
                                      "children": [
                                        {
                                          "value": "item",
                                          "children": []
                                        },
                                        {
                                          "value": "parsed_list",
                                          "children": []
                                        },
                                        {
                                          "value": "yield \"list_item\", item",
                                          "children": [
                                            {
                                              "value": "yield \"list_item\", item",
                                              "children": [
                                                {
                                                  "value": "yield \"list_item\", item",
                                                  "children": [
                                                    {
                                                      "value": "\"list_item\", item",
                                                      "children": [
                                                        {
                                                          "value": "\"list_item\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "list_item",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "item",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "return",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "except Exception as e:\n                logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")\n                if attempt == input_data.max_retries - 1:\n                    logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )\n                else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")",
                                  "children": [
                                    {
                                      "value": "Exception as e",
                                      "children": [
                                        {
                                          "value": "Exception",
                                          "children": []
                                        },
                                        {
                                          "value": "e",
                                          "children": [
                                            {
                                              "value": "e",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")\n                if attempt == input_data.max_retries - 1:\n                    logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )\n                else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")",
                                      "children": [
                                        {
                                          "value": "logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")",
                                          "children": [
                                            {
                                              "value": "logger.error(f\"Error in attempt {attempt + 1}: {str(e)}\")",
                                              "children": [
                                                {
                                                  "value": "logger.error",
                                                  "children": [
                                                    {
                                                      "value": "logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "error",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(f\"Error in attempt {attempt + 1}: {str(e)}\")",
                                                  "children": [
                                                    {
                                                      "value": "f\"Error in attempt {attempt + 1}: {str(e)}\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Error in attempt",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{attempt + 1}",
                                                          "children": [
                                                            {
                                                              "value": "attempt + 1",
                                                              "children": [
                                                                {
                                                                  "value": "attempt",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "1",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": ":",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{str(e)}",
                                                          "children": [
                                                            {
                                                              "value": "str(e)",
                                                              "children": [
                                                                {
                                                                  "value": "str",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(e)",
                                                                  "children": [
                                                                    {
                                                                      "value": "e",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if attempt == input_data.max_retries - 1:\n                    logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )\n                else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")",
                                          "children": [
                                            {
                                              "value": "attempt == input_data.max_retries - 1",
                                              "children": [
                                                {
                                                  "value": "attempt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_data.max_retries - 1",
                                                  "children": [
                                                    {
                                                      "value": "input_data.max_retries",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "max_retries",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )\n                    raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "logger.error(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "logger.error",
                                                          "children": [
                                                            {
                                                              "value": "logger",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "error",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "f\"Failed to generate a valid Python list after {input_data.max_retries} attempts\"",
                                                              "children": [
                                                                {
                                                                  "value": "f\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "Failed to generate a valid Python list after",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{input_data.max_retries}",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data.max_retries",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "max_retries",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "attempts",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "raise RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "RuntimeError(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "RuntimeError",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(\n                        f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "f\"Failed to generate a valid Python list after {input_data.max_retries} attempts. Last error: {str(e)}\"",
                                                              "children": [
                                                                {
                                                                  "value": "f\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "Failed to generate a valid Python list after",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{input_data.max_retries}",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data.max_retries",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "max_retries",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "attempts. Last error:",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{str(e)}",
                                                                  "children": [
                                                                    {
                                                                      "value": "str(e)",
                                                                      "children": [
                                                                        {
                                                                          "value": "str",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "(e)",
                                                                          "children": [
                                                                            {
                                                                              "value": "e",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "else:\n                    # Add a retry prompt\n                    logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")",
                                              "children": [
                                                {
                                                  "value": "# Add a retry prompt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "logger.debug(\"Preparing retry prompt\")\n                    prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"\n                    logger.debug(f\"Retry prompt: {prompt}\")",
                                                  "children": [
                                                    {
                                                      "value": "logger.debug(\"Preparing retry prompt\")",
                                                      "children": [
                                                        {
                                                          "value": "logger.debug(\"Preparing retry prompt\")",
                                                          "children": [
                                                            {
                                                              "value": "logger.debug",
                                                              "children": [
                                                                {
                                                                  "value": "logger",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "debug",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(\"Preparing retry prompt\")",
                                                              "children": [
                                                                {
                                                                  "value": "\"Preparing retry prompt\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "Preparing retry prompt",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"",
                                                      "children": [
                                                        {
                                                          "value": "prompt = f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"",
                                                          "children": [
                                                            {
                                                              "value": "prompt",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "f\"\"\"\n                    The previous attempt failed due to `{e}`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```{prompt}```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.\n                    \"\"\"",
                                                              "children": [
                                                                {
                                                                  "value": "f\"\"\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "The previous attempt failed due to `",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{e}",
                                                                  "children": [
                                                                    {
                                                                      "value": "e",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "`\n                    Generate a valid Python list based on the original prompt.\n                    Remember to respond ONLY with a valid Python list as per the format specified earlier.\n                    Original prompt: \n                    ```",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{prompt}",
                                                                  "children": [
                                                                    {
                                                                      "value": "prompt",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "```\n                    \n                    Respond only with the list in the format specified with no commentary or apologies.",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"\"\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "logger.debug(f\"Retry prompt: {prompt}\")",
                                                      "children": [
                                                        {
                                                          "value": "logger.debug(f\"Retry prompt: {prompt}\")",
                                                          "children": [
                                                            {
                                                              "value": "logger.debug",
                                                              "children": [
                                                                {
                                                                  "value": "logger",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "debug",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(f\"Retry prompt: {prompt}\")",
                                                              "children": [
                                                                {
                                                                  "value": "f\"Retry prompt: {prompt}\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "f\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "Retry prompt:",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "{prompt}",
                                                                      "children": [
                                                                        {
                                                                          "value": "prompt",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.debug(\"AIListGeneratorBlock.run completed\")",
                      "children": [
                        {
                          "value": "logger.debug(\"AIListGeneratorBlock.run completed\")",
                          "children": [
                            {
                              "value": "logger.debug",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "debug",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"AIListGeneratorBlock.run completed\")",
                              "children": [
                                {
                                  "value": "\"AIListGeneratorBlock.run completed\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "AIListGeneratorBlock.run completed",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}