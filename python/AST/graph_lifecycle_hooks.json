{
  "value": "import logging\nfrom typing import TYPE_CHECKING, Callable, Optional, cast\n\nfrom backend.data.block import BlockWebhookConfig, get_block\nfrom backend.data.graph import set_node_webhook\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME\n\nif TYPE_CHECKING:\n    from backend.data.graph import GraphModel, NodeModel\n    from backend.data.model import Credentials\n\n    from ._base import BaseWebhooksManager\n\nlogger = logging.getLogger(__name__)\n\n\nasync def on_graph_activate(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n    \"\"\"\n    Hook to be called when a graph is activated/created.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_activate` on all nodes in this graph.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    # Compare nodes in new_graph_version with previous_graph_version\n    updated_nodes = []\n    for new_node in graph.nodes:\n        node_credentials = None\n        if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                raise ValueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )\n\n        updated_node = await on_node_activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )\n        updated_nodes.append(updated_node)\n\n    graph.nodes = updated_nodes\n    return graph\n\n\nasync def on_graph_deactivate(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n    \"\"\"\n    Hook to be called when a graph is deactivated/deleted.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_nodes = []\n    for node in graph.nodes:\n        node_credentials = None\n        if creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        updated_node = await on_node_deactivate(node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n\n    graph.nodes = updated_nodes\n    return graph\n\n\nasync def on_node_activate(\n    user_id: str,\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n) -> \"NodeModel\":\n    \"\"\"Hook to be called when the node is activated/created\"\"\"\n\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not block.webhook_config:\n        return node\n\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    logger.debug(\n        f\"Activating webhook node #{node.id} with config {block.webhook_config}\"\n    )\n\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig):\n        try:\n            resource = block.webhook_config.resource_format.format(**node.input_default)\n        except KeyError:\n            resource = None\n        logger.debug(\n            f\"Constructed resource string {resource} from input {node.input_default}\"\n        )\n    else:\n        resource = \"\"  # not relevant for manual webhooks\n\n    needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n    credentials_meta = (\n        node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    )\n    event_filter_input_name = block.webhook_config.event_filter_input\n    has_everything_for_webhook = (\n        resource is not None\n        and (credentials_meta or not needs_credentials)\n        and (\n            not event_filter_input_name\n            or (\n                event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )\n\n    if has_everything_for_webhook and resource is not None:\n        logger.debug(f\"Node #{node} has everything for a webhook!\")\n        if credentials_meta and not credentials:\n            raise ValueError(\n                f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )\n\n        if event_filter_input_name:\n            # Shape of the event filter is enforced in Block.__init__\n            event_filter = cast(dict, node.input_default[event_filter_input_name])\n            events = [\n                block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n        else:\n            events = []\n\n        # Find/make and attach a suitable webhook to the node\n        if auto_setup_webhook:\n            assert credentials is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:\n            # Manual webhook -> no credentials -> don't register but do create\n            new_webhook = await webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.debug(f\"Acquired webhook: {new_webhook}\")\n        return await set_node_webhook(node.id, new_webhook.id)\n    else:\n        logger.debug(f\"Node #{node.id} does not have everything for a webhook\")\n\n    return node\n\n\nasync def on_node_deactivate(\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n    webhooks_manager: Optional[\"BaseWebhooksManager\"] = None,\n) -> \"NodeModel\":\n    \"\"\"Hook to be called when node is deactivated/deleted\"\"\"\n\n    logger.debug(f\"Deactivating node #{node.id}\")\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not block.webhook_config:\n        return node\n\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if node.webhook_id:\n        logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\")\n        if not node.webhook:\n            logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")\n            raise ValueError(\"node.webhook not included\")\n\n        # Detach webhook from node\n        logger.debug(f\"Detaching webhook from node #{node.id}\")\n        updated_node = await set_node_webhook(node.id, None)\n\n        # Prune and deregister the webhook if it is no longer used anywhere\n        webhook = node.webhook\n        logger.debug(\n            f\"Pruning{' and deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )\n        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)\n        if (\n            CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n            and not credentials\n        ):\n            logger.warning(\n                f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )\n        return updated_node\n\n    logger.debug(f\"Node #{node.id} has no webhook_id, returning\")\n    return node",
  "children": [
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import TYPE_CHECKING, Callable, Optional, cast",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "TYPE_CHECKING",
          "children": [
            {
              "value": "TYPE_CHECKING",
              "children": []
            }
          ]
        },
        {
          "value": "Callable",
          "children": [
            {
              "value": "Callable",
              "children": []
            }
          ]
        },
        {
          "value": "Optional",
          "children": [
            {
              "value": "Optional",
              "children": []
            }
          ]
        },
        {
          "value": "cast",
          "children": [
            {
              "value": "cast",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block import BlockWebhookConfig, get_block",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        },
        {
          "value": "BlockWebhookConfig",
          "children": [
            {
              "value": "BlockWebhookConfig",
              "children": []
            }
          ]
        },
        {
          "value": "get_block",
          "children": [
            {
              "value": "get_block",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.graph import set_node_webhook",
      "children": [
        {
          "value": "backend.data.graph",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "graph",
              "children": []
            }
          ]
        },
        {
          "value": "set_node_webhook",
          "children": [
            {
              "value": "set_node_webhook",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import CREDENTIALS_FIELD_NAME",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "CREDENTIALS_FIELD_NAME",
          "children": [
            {
              "value": "CREDENTIALS_FIELD_NAME",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME",
      "children": [
        {
          "value": "backend.integrations.webhooks",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "webhooks",
              "children": []
            }
          ]
        },
        {
          "value": "WEBHOOK_MANAGERS_BY_NAME",
          "children": [
            {
              "value": "WEBHOOK_MANAGERS_BY_NAME",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "if TYPE_CHECKING:\n    from backend.data.graph import GraphModel, NodeModel\n    from backend.data.model import Credentials\n\n    from ._base import BaseWebhooksManager",
      "children": [
        {
          "value": "TYPE_CHECKING",
          "children": []
        },
        {
          "value": "from backend.data.graph import GraphModel, NodeModel\n    from backend.data.model import Credentials\n\n    from ._base import BaseWebhooksManager",
          "children": [
            {
              "value": "from backend.data.graph import GraphModel, NodeModel",
              "children": [
                {
                  "value": "backend.data.graph",
                  "children": [
                    {
                      "value": "backend",
                      "children": []
                    },
                    {
                      "value": "data",
                      "children": []
                    },
                    {
                      "value": "graph",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "GraphModel",
                  "children": [
                    {
                      "value": "GraphModel",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "NodeModel",
                  "children": [
                    {
                      "value": "NodeModel",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "from backend.data.model import Credentials",
              "children": [
                {
                  "value": "backend.data.model",
                  "children": [
                    {
                      "value": "backend",
                      "children": []
                    },
                    {
                      "value": "data",
                      "children": []
                    },
                    {
                      "value": "model",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "Credentials",
                  "children": [
                    {
                      "value": "Credentials",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "from ._base import BaseWebhooksManager",
              "children": [
                {
                  "value": "._base",
                  "children": [
                    {
                      "value": ".",
                      "children": []
                    },
                    {
                      "value": "_base",
                      "children": [
                        {
                          "value": "_base",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BaseWebhooksManager",
                  "children": [
                    {
                      "value": "BaseWebhooksManager",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def on_graph_activate(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n    \"\"\"\n    Hook to be called when a graph is activated/created.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_activate` on all nodes in this graph.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    # Compare nodes in new_graph_version with previous_graph_version\n    updated_nodes = []\n    for new_node in graph.nodes:\n        node_credentials = None\n        if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                raise ValueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )\n\n        updated_node = await on_node_activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )\n        updated_nodes.append(updated_node)\n\n    graph.nodes = updated_nodes\n    return graph\n\n\nasync",
      "children": [
        {
          "value": "on_graph_activate",
          "children": []
        },
        {
          "value": "(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n)",
          "children": [
            {
              "value": "graph: \"GraphModel\"",
              "children": [
                {
                  "value": "graph",
                  "children": []
                },
                {
                  "value": "\"GraphModel\"",
                  "children": [
                    {
                      "value": "\"GraphModel\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "GraphModel",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "get_credentials: Callable[[str], \"Credentials | None\"]",
              "children": [
                {
                  "value": "get_credentials",
                  "children": []
                },
                {
                  "value": "Callable[[str], \"Credentials | None\"]",
                  "children": [
                    {
                      "value": "Callable[[str], \"Credentials | None\"]",
                      "children": [
                        {
                          "value": "Callable",
                          "children": []
                        },
                        {
                          "value": "[[str], \"Credentials | None\"]",
                          "children": [
                            {
                              "value": "[str]",
                              "children": [
                                {
                                  "value": "[str]",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"Credentials | None\"",
                              "children": [
                                {
                                  "value": "\"Credentials | None\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Credentials | None",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Hook to be called when a graph is activated/created.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_activate` on all nodes in this graph.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    # Compare nodes in new_graph_version with previous_graph_version\n    updated_nodes = []\n    for new_node in graph.nodes:\n        node_credentials = None\n        if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                raise ValueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )\n\n        updated_node = await on_node_activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )\n        updated_nodes.append(updated_node)\n\n    graph.nodes = updated_nodes\n    return graph\n\n\nasync",
          "children": [
            {
              "value": "\"\"\"\n    Hook to be called when a graph is activated/created.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_activate` on all nodes in this graph.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    # C",
              "children": [
                {
                  "value": "\"\"\"\n    Hook to be called when a graph is activated/created.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_activate` on all nodes in this graph.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    # C",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Hook to be called when a graph is activated/created.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_activate` on all nodes in this graph.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"",
                      "children": []
                    },
                    {
                      "value": "# C",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "e nodes in new_graph_version with previous_graph_version\n    upd",
              "children": []
            },
            {
              "value": "nodes = []\n    for",
              "children": [
                {
                  "value": "nodes = []\n    for",
                  "children": [
                    {
                      "value": "nodes = []",
                      "children": []
                    },
                    {
                      "value": "or",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "node in graph.nodes:\n        node_credentials = None\n        if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                raise ValueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )\n\n        updated_node = await on_node_activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )\n        updated_nodes.append(updated_node)\n\n    gr",
              "children": [
                {
                  "value": "in grap",
                  "children": []
                },
                {
                  "value": "des:",
                  "children": [
                    {
                      "value": "des:",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "dentials = None\n        if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                raise ValueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )\n\n        updated_node = await on_node_activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )\n        updated_nodes.append(updated_node)\n\n    gr",
                  "children": [
                    {
                      "value": "dentials = None",
                      "children": [
                        {
                          "value": "dentials = None",
                          "children": [
                            {
                              "value": "dentials = None",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                raise ValueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )",
                      "children": [
                        {
                          "value": "ta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):",
                          "children": [
                            {
                              "value": "ta := new_",
                              "children": []
                            },
                            {
                              "value": ".input_default.get(CREDENTIALS_FIELD_NAME):",
                              "children": [
                                {
                                  "value": ".input_default.get(CREDENT",
                                  "children": [
                                    {
                                      "value": ".input_default.get(CRE",
                                      "children": [
                                        {
                                          "value": ".input_d",
                                          "children": []
                                        },
                                        {
                                          "value": "fault.get(CRE",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ENT",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "IALS_FIELD_NAME):",
                                  "children": [
                                    {
                                      "value": "ALS_FIELD_NAME):",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "dentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                raise ValueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )",
                          "children": [
                            {
                              "value": "dentials = get_credentials(creds_meta[\"id\"])",
                              "children": [
                                {
                                  "value": "dentials = get_credentials(creds_meta[\"id\"])",
                                  "children": [
                                    {
                                      "value": "dentials = get_c",
                                      "children": []
                                    },
                                    {
                                      "value": "entials(creds_meta[\"id\"])",
                                      "children": [
                                        {
                                          "value": "entials(creds_m",
                                          "children": []
                                        },
                                        {
                                          "value": "eta[\"id\"])",
                                          "children": [
                                            {
                                              "value": "ta[\"id\"])",
                                              "children": [
                                                {
                                                  "value": "ta[\"id\"])",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ode_credentials:\n                raise ValueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )",
                              "children": [
                                {
                                  "value": "_credentials:",
                                  "children": [
                                    {
                                      "value": "dentials:",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "lueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )",
                                  "children": [
                                    {
                                      "value": "lueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )",
                                      "children": [
                                        {
                                          "value": "or(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )",
                                          "children": [
                                            {
                                              "value": "or(",
                                              "children": []
                                            },
                                            {
                                              "value": "f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )",
                                              "children": [
                                                {
                                                  "value": "{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"",
                                                  "children": [
                                                    {
                                                      "value": "{new_node.id} updated with non-existent \"",
                                                      "children": [
                                                        {
                                                          "value": "{n",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ew_nod",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "e.id} updated",
                                                          "children": [
                                                            {
                                                              "value": ".id} update",
                                                              "children": [
                                                                {
                                                                  "value": ".id} upd",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "te",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "with non-existent \"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "tials #{node_credentials}\"",
                                                      "children": [
                                                        {
                                                          "value": "ti",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "als #{node_cr",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "edentials}\"",
                                                          "children": [
                                                            {
                                                              "value": "dentials}\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "node = await on_node_activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )",
                      "children": [
                        {
                          "value": "node = await on_node_activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )",
                          "children": [
                            {
                              "value": "node = await",
                              "children": []
                            },
                            {
                              "value": "_node_activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )",
                              "children": [
                                {
                                  "value": "activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )",
                                  "children": [
                                    {
                                      "value": "activate(",
                                      "children": []
                                    },
                                    {
                                      "value": "graph.user_id, new_node, credentials=node_credentials\n        )",
                                      "children": [
                                        {
                                          "value": "er_id, new_no",
                                          "children": [
                                            {
                                              "value": "er_id",
                                              "children": []
                                            },
                                            {
                                              "value": "new_no",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": ", creden",
                                          "children": []
                                        },
                                        {
                                          "value": "als=node_credentials",
                                          "children": [
                                            {
                                              "value": "als=node_cr",
                                              "children": []
                                            },
                                            {
                                              "value": "dentials",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "nodes.append(updated_node)\n\n    gr",
                      "children": [
                        {
                          "value": "nodes.append(updated_node)\n\n    gr",
                          "children": [
                            {
                              "value": "nodes.append(updated",
                              "children": [
                                {
                                  "value": "nodes.append(",
                                  "children": []
                                },
                                {
                                  "value": "pdated",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "_node)\n\n    gr",
                              "children": [
                                {
                                  "value": "node)\n\n    g",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "des = updated_nodes\n    ret",
              "children": [
                {
                  "value": "des = updated_nodes\n    ret",
                  "children": [
                    {
                      "value": "des = updat",
                      "children": [
                        {
                          "value": "des =",
                          "children": []
                        },
                        {
                          "value": "updat",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "nodes\n    ret",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "raph\n\n\nasync",
              "children": [
                {
                  "value": "async",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "f on_graph_deactivate(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n    \"\"\"\n    Hook to be called when a graph is deactivated/deleted.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_nodes = []\n    for node in graph.nodes:\n        node_credentials = None\n        if creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        updated_node = await on_node_deactivate(node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n\n    graph.nodes = updated_nodes\n    return graph\n\n\nasync def on_",
      "children": [
        {
          "value": "_deactivate(\n    gr",
          "children": []
        },
        {
          "value": "aph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n    \"\"",
          "children": [
            {
              "value": "GraphModel\", get_cr",
              "children": [
                {
                  "value": "Graph",
                  "children": []
                },
                {
                  "value": "del\", get_cr",
                  "children": [
                    {
                      "value": "del\", get_cr",
                      "children": [
                        {
                          "value": "d",
                          "children": []
                        },
                        {
                          "value": "el\", get_c",
                          "children": []
                        },
                        {
                          "value": "r",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "entials: Callable[[str], \"Credentials | None\"]\n):",
              "children": [
                {
                  "value": "entials: Callab",
                  "children": []
                },
                {
                  "value": "[[str], \"Credentials | None\"]\n):",
                  "children": [
                    {
                      "value": "[[str], \"Credentials | None\"]\n):",
                      "children": [
                        {
                          "value": "[[str],",
                          "children": []
                        },
                        {
                          "value": "\"Credentials | None\"]\n):",
                          "children": [
                            {
                              "value": "Crede",
                              "children": [
                                {
                                  "value": "Crede",
                                  "children": [
                                    {
                                      "value": "red",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ials | None\"]\n):",
                              "children": [
                                {
                                  "value": "ials | None\"]\n):",
                                  "children": [
                                    {
                                      "value": "i",
                                      "children": []
                                    },
                                    {
                                      "value": "als | None\"]\n):",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Hook to be called when a graph is deactivated/deleted.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_nodes = []\n    for node in graph.nodes:\n        node_credentials = None\n        if creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        updated_node = await on_node_deactivate(node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n\n    graph.nodes = updated_nodes\n    return graph\n\n\nasync def on_",
          "children": [
            {
              "value": "Hook to be called when a graph is deactivated/deleted.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_nod",
              "children": [
                {
                  "value": "Hook to be called when a graph is deactivated/deleted.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_nod",
                  "children": [
                    {
                      "value": "Hoo",
                      "children": []
                    },
                    {
                      "value": "k to be called when a graph is deactivated/deleted.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_",
                      "children": []
                    },
                    {
                      "value": "nod",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "[]\n    for node in",
              "children": [
                {
                  "value": "[]\n    for node in",
                  "children": [
                    {
                      "value": "[]\n    for no",
                      "children": []
                    },
                    {
                      "value": "in",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "h.nodes:\n        node_credentials = None\n        if creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        updated_node = await on_node_deactivate(node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n\n    graph.node",
              "children": [
                {
                  "value": "des:",
                  "children": []
                },
                {
                  "value": "node_c",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    },
                    {
                      "value": "ode_c",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "= None\n        if creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        updated_node = await on_node_deactivate(node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n\n    graph.node",
                  "children": [
                    {
                      "value": "= None\n        if cred",
                      "children": [
                        {
                          "value": "= None\n        if cred",
                          "children": [
                            {
                              "value": "= None",
                              "children": []
                            },
                            {
                              "value": "cred",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        update",
                      "children": [
                        {
                          "value": "de.input_default.get(CREDENTIALS_FIELD_NAME):\n            no",
                          "children": [
                            {
                              "value": "de.input_d",
                              "children": []
                            },
                            {
                              "value": "lt.get(CREDENTIALS_FIELD_NAME):\n            no",
                              "children": [
                                {
                                  "value": "lt.get(CREDENTIALS_FIE",
                                  "children": [
                                    {
                                      "value": "lt.get(CREDENTIALS",
                                      "children": [
                                        {
                                          "value": "lt.g",
                                          "children": []
                                        },
                                        {
                                          "value": "t(CREDENTIALS",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "FIE",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "LD_NAME):\n            no",
                                  "children": [
                                    {
                                      "value": "D_NAME):\n            n",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "= get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        update",
                          "children": [
                            {
                              "value": "= get_credentials(creds_meta[\"id\"])\n            if",
                              "children": [
                                {
                                  "value": "= get_credentials(creds_meta[\"id\"])\n            if",
                                  "children": [
                                    {
                                      "value": "= get_credentia",
                                      "children": []
                                    },
                                    {
                                      "value": "creds_meta[\"id\"])\n            if",
                                      "children": [
                                        {
                                          "value": "creds_meta[\"id\"",
                                          "children": []
                                        },
                                        {
                                          "value": "])\n            if",
                                          "children": [
                                            {
                                              "value": ")\n            if",
                                              "children": [
                                                {
                                                  "value": ")",
                                                  "children": []
                                                },
                                                {
                                                  "value": "i",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "i",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "entials:\n                logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        update",
                              "children": [
                                {
                                  "value": "ials:",
                                  "children": [
                                    {
                                      "value": ":",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        update",
                                  "children": [
                                    {
                                      "value": "f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        update",
                                      "children": [
                                        {
                                          "value": "f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        update",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        update",
                                              "children": [
                                                {
                                                  "value": "} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"",
                                                  "children": [
                                                    {
                                                      "value": "} referenced non-existent \"",
                                                      "children": [
                                                        {
                                                          "value": "}",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "refere",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "nced non-",
                                                          "children": [
                                                            {
                                                              "value": "ced non",
                                                              "children": [
                                                                {
                                                                  "value": "ced",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "on",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "existent \"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "creds_meta['id']}\"",
                                                      "children": [
                                                        {
                                                          "value": "cr",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "eds_meta['id'",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "]}\"",
                                                          "children": [
                                                            {
                                                              "value": "}\"",
                                                              "children": [
                                                                {
                                                                  "value": "}\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": [
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "wait on_node_deactivate(node, credentials=node_credentials)\n        updated",
                      "children": [
                        {
                          "value": "wait on_node_deactivate(node, credentials=node_credentials)\n        updated",
                          "children": [
                            {
                              "value": "wait on_node",
                              "children": []
                            },
                            {
                              "value": "activate(node, credentials=node_credentials)\n        updated",
                              "children": [
                                {
                                  "value": "te(node, credentials=node_credentials)\n        updated",
                                  "children": [
                                    {
                                      "value": "te(node, credentia",
                                      "children": []
                                    },
                                    {
                                      "value": "ls=node_credentials)\n        updated",
                                      "children": [
                                        {
                                          "value": "s=no",
                                          "children": []
                                        },
                                        {
                                          "value": "_credentials)\n        update",
                                          "children": [
                                            {
                                              "value": "_credential",
                                              "children": []
                                            },
                                            {
                                              "value": ")\n        update",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "pend(updated_node)\n\n    graph.node",
                      "children": [
                        {
                          "value": "pend(updated_node)\n\n    graph.node",
                          "children": [
                            {
                              "value": "pend(updated_node)",
                              "children": [
                                {
                                  "value": "pend(updated_",
                                  "children": []
                                },
                                {
                                  "value": "ode)",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "graph.node",
                              "children": [
                                {
                                  "value": "graph.nod",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "dated_nodes\n    return grap",
              "children": [
                {
                  "value": "dated_nodes\n    return grap",
                  "children": [
                    {
                      "value": "dated_nodes",
                      "children": [
                        {
                          "value": "dated",
                          "children": []
                        },
                        {
                          "value": "nodes",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return grap",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "sync def on_",
              "children": [
                {
                  "value": "f on_",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "e_activate(\n    user_id: str,\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n) -> \"NodeModel\":\n    \"\"\"Hook to be called when the node is activated/created\"\"\"\n\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not block.webhook_config:\n        return node\n\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    logger.debug(\n        f\"Activating webhook node #{node.id} with config {block.webhook_config}\"\n    )\n\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig):\n        try:\n            resource = block.webhook_config.resource_format.format(**node.input_default)\n        except KeyError:\n            resource = None\n        logger.debug(\n            f\"Constructed resource string {resource} from input {node.input_default}\"\n        )\n    else:\n        resource = \"\"  # not relevant for manual webhooks\n\n    needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n    credentials_meta = (\n        node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    )\n    event_filter_input_name = block.webhook_config.event_filter_input\n    has_everything_for_webhook = (\n        resource is not None\n        and (credentials_meta or not needs_credentials)\n        and (\n            not event_filter_input_name\n            or (\n                event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )\n\n    if has_everything_for_webhook and resource is not None:\n        logger.debug(f\"Node #{node} has everything for a webhook!\")\n        if credentials_meta and not credentials:\n            raise ValueError(\n                f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )\n\n        if event_filter_input_name:\n            # Shape of the event filter is enforced in Block.__init__\n            event_filter = cast(dict, node.input_default[event_filter_input_name])\n            events = [\n                block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n        else:\n            events = []\n\n        # Find/make and attach a suitable webhook to the node\n        if auto_setup_webhook:\n            assert credentials is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:\n            # Manual webhook -> no credentials -> don't register but do create\n            new_webhook = await webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.debug(f\"Acquired webhook: {new_webhook}\")\n        return await set_node_webhook(node.id, new_webhook.id)\n    else:\n        logger.debug(f\"Node #{node.id} does not have everything for a webhook\")\n\n    return node\n\n\nasync def on_",
      "children": [
        {
          "value": "(\n    user_id: s",
          "children": []
        },
        {
          "value": "tr,\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n) -> \"NodeModel\":",
          "children": [
            {
              "value": "node: \"Nod",
              "children": [
                {
                  "value": "node:",
                  "children": []
                },
                {
                  "value": "Nod",
                  "children": [
                    {
                      "value": "Nod",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "\",\n    *,\n    cre",
              "children": [
                {
                  "value": "\",",
                  "children": []
                },
                {
                  "value": "*,\n    cre",
                  "children": [
                    {
                      "value": "*,\n    cre",
                      "children": [
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "*,\n    cr",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "l",
              "children": []
            },
            {
              "value": "ional[\"Credentials\"] = None,\n) -> \"NodeMode",
              "children": [
                {
                  "value": "ional[\"Cred",
                  "children": []
                },
                {
                  "value": "tials\"] = None,\n) -> \"N",
                  "children": [
                    {
                      "value": "tials\"] = None,\n) -> \"N",
                      "children": [
                        {
                          "value": "tials\"]",
                          "children": []
                        },
                        {
                          "value": "= None,\n) -> \"N",
                          "children": [
                            {
                              "value": "None,\n) -> \"",
                              "children": [
                                {
                                  "value": "None,\n) -> \"",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "None,\n) ->",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "Mode",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"Hook to",
          "children": [
            {
              "value": "\"\"\"Hook to",
              "children": [
                {
                  "value": "",
                  "children": []
                },
                {
                  "value": "\"\"\"Hook t",
                  "children": []
                },
                {
                  "value": "o",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "lled when the node is activated/created\"\"\"\n\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not block.webhook_config:\n        return node\n\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    logger.debug(\n        f\"Activating webhook node #{node.id} with config {block.webhook_config}\"\n    )\n\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig):\n        try:\n            resource = block.webhook_config.resource_format.format(**node.input_default)\n        except KeyError:\n            resource = None\n        logger.debug(\n            f\"Constructed resource string {resource} from input {node.input_default}\"\n        )\n    else:\n        resource = \"\"  # not relevant for manual webhooks\n\n    needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n    credentials_meta = (\n        node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    )\n    event_filter_input_name = block.webhook_config.event_filter_input\n    has_everything_for_webhook = (\n        resource is not None\n        and (credentials_meta or not needs_credentials)\n        and (\n            not event_filter_input_name\n            or (\n                event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )\n\n    if has_everything_for_webhook and resource is not None:\n        logger.debug(f\"Node #{node} has everything for a webhook!\")\n        if credentials_meta and not credentials:\n            raise ValueError(\n                f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )\n\n        if event_filter_input_name:\n            # Shape of the event filter is enforced in Block.__init__\n            event_filter = cast(dict, node.input_default[event_filter_input_name])\n            events = [\n                block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n        else:\n            events = []\n\n        # Find/make and attach a suitable webhook to the node\n        if auto_setup_webhook:\n            assert credentials is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:\n            # Manual webhook -> no credentials -> don't register but do create\n            new_webhook = await webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.debug(f\"Acquired webhook: {new_webhook}\")\n        return await set_node_webhook(node.id, new_webhook.id)\n    else:\n        logger.debug(f\"Node #{node.id} does not have everything for a webhook\")\n\n    return node\n\n\nasync def on_",
          "children": [
            {
              "value": "lled when the node is activated/created\"\"\"\n\n    block = ge",
              "children": [
                {
                  "value": "lled when the node is activated/created\"\"\"\n\n    block = ge",
                  "children": [
                    {
                      "value": "lle",
                      "children": []
                    },
                    {
                      "value": "d when the node is activated/created\"\"\"\n\n    block =",
                      "children": []
                    },
                    {
                      "value": "ge",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "k(node.block_id)\n    if not bloc",
              "children": [
                {
                  "value": "k(node.block_id)\n    if not bloc",
                  "children": [
                    {
                      "value": "k(nod",
                      "children": []
                    },
                    {
                      "value": "lock_id)\n    if not bloc",
                      "children": [
                        {
                          "value": "lock_id)",
                          "children": []
                        },
                        {
                          "value": "if not bloc",
                          "children": [
                            {
                              "value": "if not blo",
                              "children": [
                                {
                                  "value": "i",
                                  "children": []
                                },
                                {
                                  "value": "not blo",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not blo",
              "children": [
                {
                  "value": "raise",
                  "children": [
                    {
                      "value": "aise",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not blo",
                  "children": [
                    {
                      "value": "(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not blo",
                      "children": [
                        {
                          "value": "f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not blo",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not blo",
                              "children": [
                                {
                                  "value": "} is instance of unknown block #{node.block_id}\"\n        )",
                                  "children": [
                                    {
                                      "value": "}",
                                      "children": []
                                    },
                                    {
                                      "value": "is ins",
                                      "children": []
                                    },
                                    {
                                      "value": "tance of",
                                      "children": [
                                        {
                                          "value": "ance of",
                                          "children": [
                                            {
                                              "value": "ance",
                                              "children": []
                                            },
                                            {
                                              "value": "of",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "unknown block #{node.block_id}\"",
                                      "children": []
                                    },
                                    {
                                      "value": ")",
                                      "children": [
                                        {
                                          "value": ")",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "hook_config:\n        return node\n\n    provider =",
              "children": [
                {
                  "value": "k_config:\n        return",
                  "children": [
                    {
                      "value": "nfig:\n        return",
                      "children": [
                        {
                          "value": "nfig:",
                          "children": []
                        },
                        {
                          "value": "return",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "provider =",
                  "children": [
                    {
                      "value": "provider =",
                      "children": [
                        {
                          "value": "er =",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": ".webhook_config.provider\n    if provider",
              "children": [
                {
                  "value": ".webhook_config.provider\n    if provider",
                  "children": [
                    {
                      "value": ".webhook",
                      "children": []
                    },
                    {
                      "value": "nfig.provider\n    if provider",
                      "children": [
                        {
                          "value": "nfig.provider\n    if",
                          "children": [
                            {
                              "value": "nfig.",
                              "children": []
                            },
                            {
                              "value": "rovider\n    if",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "provider",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    logger.deb",
              "children": [
                {
                  "value": "WEBHOOK_MANAGERS_BY_NAME:\n        raise",
                  "children": [
                    {
                      "value": "WEBHOOK_",
                      "children": []
                    },
                    {
                      "value": "_BY_NAME:\n        raise",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    logger.deb",
                  "children": [
                    {
                      "value": "(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    logger.deb",
                      "children": [
                        {
                          "value": "f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    logger.deb",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    logger.deb",
                              "children": [
                                {
                                  "value": "id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )",
                                  "children": [
                                    {
                                      "value": "id} has webhook_config for provider {provider} \"\n            \"wh",
                                      "children": [
                                        {
                                          "value": "id",
                                          "children": []
                                        },
                                        {
                                          "value": "} has w",
                                          "children": []
                                        },
                                        {
                                          "value": "ebhook_con",
                                          "children": [
                                            {
                                              "value": "bhook_co",
                                              "children": [
                                                {
                                                  "value": "bhook",
                                                  "children": []
                                                },
                                                {
                                                  "value": "co",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "fig for provider {provider} \"",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "w",
                                          "children": []
                                        },
                                        {
                                          "value": "h",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "support webhooks\"\n        )",
                                      "children": [
                                        {
                                          "value": "s",
                                          "children": []
                                        },
                                        {
                                          "value": "upport webhooks\"\n        )",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "f\"Activating webhook node #{node.id} with config {block.webhook_config}\"\n    )\n\n    webhooks_m",
              "children": [
                {
                  "value": "f\"Activating webhook node #{node.id} with config {block.webhook_config}\"\n    )\n\n    webhooks_m",
                  "children": [
                    {
                      "value": "f\"Acti",
                      "children": [
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "\"Acti",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "vating webhook node #{node.id} with config {block.webhook_config}\"\n    )\n\n    webhooks_m",
                      "children": [
                        {
                          "value": "hook node #{node.id} with config {block.webhook_config}\"\n    )\n\n    webh",
                          "children": [
                            {
                              "value": "ho",
                              "children": []
                            },
                            {
                              "value": "ok node #{node.id} with c",
                              "children": []
                            },
                            {
                              "value": "onfig {bl",
                              "children": [
                                {
                                  "value": "nfig {b",
                                  "children": [
                                    {
                                      "value": "nfig",
                                      "children": []
                                    },
                                    {
                                      "value": "{b",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ock.webhook_c",
                              "children": []
                            },
                            {
                              "value": "onfig}\"\n    )\n\n    web",
                              "children": [
                                {
                                  "value": "nfig}\"\n    )\n\n    we",
                                  "children": [
                                    {
                                      "value": "nfig}",
                                      "children": []
                                    },
                                    {
                                      "value": ")\n\n    we",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "h",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "= WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if auto_se",
              "children": [
                {
                  "value": "= WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if auto_se",
                  "children": [
                    {
                      "value": "= WEBHOOK_MANAG",
                      "children": []
                    },
                    {
                      "value": "_BY_NAME[provider]()\n\n    if auto_se",
                      "children": [
                        {
                          "value": "_BY_NAME[provider]()\n\n    if auto_",
                          "children": [
                            {
                              "value": "_BY_NAME[provider]()",
                              "children": []
                            },
                            {
                              "value": "if auto",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "se",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "bhook := isinstance(block.webhook_config, BlockWebhookConfig):\n        try:\n            resource = block.webhook_config.resource_format.format(**node.input_default)\n        except KeyError:\n            resource = None\n        logger.debug(\n            f\"Constructed resource string {resource} from input {node.input_default}\"\n        )\n    else:\n        resource = \"\"  # not relevant for manual webhooks\n\n    needs_cred",
              "children": [
                {
                  "value": "ok := isinstance(block.webhook_config, BlockWebhookConfig):\n        try:",
                  "children": [
                    {
                      "value": "ok := isinstance(b",
                      "children": []
                    },
                    {
                      "value": ".webhook_config, BlockWebhookConfig):\n        try:",
                      "children": [
                        {
                          "value": ".webhook_c",
                          "children": []
                        },
                        {
                          "value": "onfig, BlockWebhookConfig):\n        try:",
                          "children": [
                            {
                              "value": "nfig, BlockWebhookCo",
                              "children": [
                                {
                                  "value": "nfig,",
                                  "children": []
                                },
                                {
                                  "value": "BlockWebhookCo",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "ig):\n        try:",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "resource = block.webhook_config.resource_format.format(**node.input_default)\n        except KeyError:\n            resource = None\n        logger.debug(\n            f\"Constructed resource string {resource} from input {node.input_default}\"\n        )\n    else:",
                  "children": [
                    {
                      "value": "resource = block.webhook_config.resource_format.format(**node.input_default)\n        except KeyError:\n            resource = None\n        logger.",
                      "children": [
                        {
                          "value": ".webhook_config.resource_format.format(**node.input_default)\n        except",
                          "children": [
                            {
                              "value": ".webhook_config.resource_format.format(**node.input_default)\n        except",
                              "children": [
                                {
                                  "value": ".webhook_config.resource_format.format(**node.input_default)\n        except",
                                  "children": [
                                    {
                                      "value": ".webhook",
                                      "children": []
                                    },
                                    {
                                      "value": "nfig.resource_format.format(**node.input_default)\n        except",
                                      "children": [
                                        {
                                          "value": "nfig.resource_format.format(**node.input_de",
                                          "children": [
                                            {
                                              "value": "nfig.resource_format.format(**node.i",
                                              "children": [
                                                {
                                                  "value": "nfig.resource_format",
                                                  "children": [
                                                    {
                                                      "value": "nfig.",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "esource_format",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "format(**node.i",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "put_de",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "fault)\n        except",
                                          "children": [
                                            {
                                              "value": "ault)\n        except",
                                              "children": [
                                                {
                                                  "value": "lt)\n        except",
                                                  "children": [
                                                    {
                                                      "value": "lt)",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "except",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "resource = None\n        logger.",
                          "children": [
                            {
                              "value": "re",
                              "children": []
                            },
                            {
                              "value": "logger.",
                              "children": [
                                {
                                  "value": "logger.",
                                  "children": [
                                    {
                                      "value": "logger.",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "ger.",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "f\"Constructed resource string {resource} from input {node.input_default}\"\n        )\n    else:",
                      "children": [
                        {
                          "value": "f\"Constructed resource string {resource} from input {node.input_default}\"\n        )\n    else:",
                          "children": [
                            {
                              "value": "f\"",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                },
                                {
                                  "value": "f\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Constructed resource string {resource} from input {node.input_default}\"\n        )\n    else:",
                              "children": [
                                {
                                  "value": "source string {resource} from input {node.input_default}\"\n        )\n    e",
                                  "children": [
                                    {
                                      "value": "so",
                                      "children": []
                                    },
                                    {
                                      "value": "urce string {resource} from",
                                      "children": []
                                    },
                                    {
                                      "value": "input {nod",
                                      "children": [
                                        {
                                          "value": "nput {no",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e.input_defa",
                                      "children": []
                                    },
                                    {
                                      "value": "ult}\"\n        )",
                                      "children": [
                                        {
                                          "value": "lt}\"\n        )",
                                          "children": [
                                            {
                                              "value": "lt}\"",
                                              "children": []
                                            },
                                            {
                                              "value": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "source = \"\"  # not relevant for manual webhooks\n\n    needs_cred",
                  "children": [
                    {
                      "value": "not relevant for manual webhooks\n\n    needs_cred",
                      "children": [
                        {
                          "value": "not relevant",
                          "children": [
                            {
                              "value": "not relevant",
                              "children": [
                                {
                                  "value": "not rel",
                                  "children": []
                                },
                                {
                                  "value": "nt",
                                  "children": [
                                    {
                                      "value": "n",
                                      "children": []
                                    },
                                    {
                                      "value": "t",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "or manual webhooks\n\n    needs_cred",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "s = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n    credentials",
              "children": [
                {
                  "value": "s = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n    credentials",
                  "children": [
                    {
                      "value": "s = CREDENTIALS_F",
                      "children": []
                    },
                    {
                      "value": "D_NAME in block.input_schema.model_fields\n    credentials",
                      "children": [
                        {
                          "value": "D_NAME in block.input_",
                          "children": []
                        },
                        {
                          "value": "ma.model_fields\n    credentials",
                          "children": [
                            {
                              "value": "ma.model_fields",
                              "children": [
                                {
                                  "value": "ma.mo",
                                  "children": []
                                },
                                {
                                  "value": "el_fields",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "credentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "= (\n        node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    )\n    event_filte",
              "children": [
                {
                  "value": "= (\n        node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    )\n    event_filte",
                  "children": [
                    {
                      "value": "= (\n        nod",
                      "children": []
                    },
                    {
                      "value": "nput_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    )\n    event_filte",
                      "children": [
                        {
                          "value": "lt.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    )\n    event",
                          "children": [
                            {
                              "value": "lt.get(CREDENTIALS_FIELD_NAME) if needs_creden",
                              "children": [
                                {
                                  "value": "lt.get(CREDENTIALS_FIE",
                                  "children": [
                                    {
                                      "value": "lt.get(CREDENTIALS",
                                      "children": [
                                        {
                                          "value": "lt.g",
                                          "children": []
                                        },
                                        {
                                          "value": "t(CREDENTIALS",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "FIE",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "LD_NAME) if needs_creden",
                                  "children": [
                                    {
                                      "value": "D_NAME) if needs_crede",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "s else None\n    )",
                              "children": []
                            },
                            {
                              "value": "vent",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ut_name = block.webhook_config.event_filter_input\n    has_everyth",
              "children": [
                {
                  "value": "ut_name = block.webhook_config.event_filter_input\n    has_everyth",
                  "children": [
                    {
                      "value": "ut_name = block.webhook",
                      "children": []
                    },
                    {
                      "value": "nfig.event_filter_input\n    has_everyth",
                      "children": [
                        {
                          "value": "nfig.event_filter_in",
                          "children": [
                            {
                              "value": "nfig.",
                              "children": []
                            },
                            {
                              "value": "vent_filter_in",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ut\n    has_everyth",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "or_webhook = (\n        resource is not None\n        and (credentials_meta or not needs_credentials)\n        and (\n            not event_filter_input_name\n            or (\n                event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )\n\n    if has_eve",
              "children": [
                {
                  "value": "or_webhook = (\n        resource is not None\n        and (credentials_meta or not needs_credentials)\n        and (\n            not event_filter_input_name\n            or (\n                event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )\n\n    if has_eve",
                  "children": [
                    {
                      "value": "or_webhook = (\n        res",
                      "children": []
                    },
                    {
                      "value": "ce is not None\n        and (credentials_meta or not needs_credentials)\n        and (\n            not event_filter_input_name\n            or (\n                event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )\n\n    if has_eve",
                      "children": [
                        {
                          "value": "None\n        and (credentials_meta or not needs_credentials)\n        and (\n            not event_filter_input_name\n            or (\n                event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )\n\n    if h",
                          "children": [
                            {
                              "value": "None\n        and (credentials_meta or not needs_credentials)\n        and (",
                              "children": [
                                {
                                  "value": "None\n        and (cr",
                                  "children": [
                                    {
                                      "value": "None",
                                      "children": []
                                    },
                                    {
                                      "value": "(cr",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "a or not needs_credentials)\n        and (",
                                  "children": [
                                    {
                                      "value": "or not needs_credentials)\n        and (",
                                      "children": [
                                        {
                                          "value": "or not needs_cr",
                                          "children": []
                                        },
                                        {
                                          "value": "tials)\n        and (",
                                          "children": [
                                            {
                                              "value": "s)\n        and (",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "t event_filter_input_name\n            or (\n                event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )\n\n    if h",
                              "children": [
                                {
                                  "value": "_input_name\n            or (\n                event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )",
                                  "children": [
                                    {
                                      "value": "_input_name\n            or",
                                      "children": [
                                        {
                                          "value": "ut_name\n            or",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )",
                                      "children": [
                                        {
                                          "value": "ut_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )",
                                          "children": [
                                            {
                                              "value": "ut_name in node.input_default",
                                              "children": [
                                                {
                                                  "value": "ut_name in node.input_d",
                                                  "children": []
                                                },
                                                {
                                                  "value": "lt",
                                                  "children": [
                                                    {
                                                      "value": "lt",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "e.input_default[event_filter_input_name].values()",
                                                      "children": [
                                                        {
                                                          "value": "put_d",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "lt[event_filter_input_name].values()",
                                                          "children": [
                                                            {
                                                              "value": "lt[event_filter_input_name].values()",
                                                              "children": [
                                                                {
                                                                  "value": "lt[event_filter_input_name].values()",
                                                                  "children": [
                                                                    {
                                                                      "value": "lt[event_filter_in",
                                                                      "children": [
                                                                        {
                                                                          "value": "lt[e",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "ent_filter_in",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "ut_name].values()",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "g_for_webhook and resource is not None:\n        logger.debug(f\"Node #{node} has everything for a webhook!\")\n        if credentials_meta and not credentials:\n            raise ValueError(\n                f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )\n\n        if event_filter_input_name:\n            # Shape of the event filter is enforced in Block.__init__\n            event_filter = cast(dict, node.input_default[event_filter_input_name])\n            events = [\n                block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n        else:\n            events = []\n\n        # Find/make and attach a suitable webhook to the node\n        if auto_setup_webhook:\n            assert credentials is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:\n            # Manual webhook -> no credentials -> don't register but do create\n            new_webhook = await webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.debug(f\"Acquired webhook: {new_webhook}\")\n        return await set_node_webhook(node.id, new_webhook.id)\n    else:\n        logger.debug(f\"Node #{node.id} does not have everything for a webhook\")\n\n    return nod",
              "children": [
                {
                  "value": "or_webhook and resource is not None:\n        logger",
                  "children": [
                    {
                      "value": "or_webhook and resource is",
                      "children": []
                    },
                    {
                      "value": "None:\n        logger",
                      "children": [
                        {
                          "value": "None:",
                          "children": []
                        },
                        {
                          "value": "gger",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ode #{node} has everything for a webhook!\")\n        if credentials_meta and not credentials:\n            raise ValueError(\n                f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )\n\n        if event_filter_input_name:\n            # Shape of the event filter is enforced in Block.__init__\n            event_filter = cast(dict, node.input_default[event_filter_input_name])\n            events = [\n                block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n        else:\n            events = []\n\n        # Find/make and attach a suitable webhook to the node\n        if auto_setup_webhook:\n            assert credentials is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:\n            # Manual webhook -> no credentials -> don't register but do create\n            new_webhook = await webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.debug(f\"Acquired webhook: {new_webhook}\")\n        return await set_node_webhook(node.id, new_webhook.id)\n    else:",
                  "children": [
                    {
                      "value": "ode #{node} has everything for a webhook!\")\n        if cred",
                      "children": [
                        {
                          "value": "ode #{node} has everything for a webhook!\")\n        if cred",
                          "children": [
                            {
                              "value": "ode #{node}",
                              "children": [
                                {
                                  "value": "ode #{",
                                  "children": []
                                },
                                {
                                  "value": "ode}",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "has everything for a webhook!\")\n        if cred",
                              "children": [
                                {
                                  "value": "as everything for a webhook!\")\n        if cre",
                                  "children": [
                                    {
                                      "value": "as",
                                      "children": []
                                    },
                                    {
                                      "value": "every",
                                      "children": []
                                    },
                                    {
                                      "value": "thing",
                                      "children": [
                                        {
                                          "value": "hing",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for a webhook!\")\n        if cr",
                                      "children": []
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "eta and not credentials:\n            raise ValueError(\n                f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )\n\n        if eve",
                      "children": [
                        {
                          "value": "and not credentials:\n            ra",
                          "children": [
                            {
                              "value": "and not credent",
                              "children": []
                            },
                            {
                              "value": "ra",
                              "children": [
                                {
                                  "value": "ra",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "(\n                f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )\n\n        if eve",
                          "children": [
                            {
                              "value": "(\n                f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )\n\n        if eve",
                              "children": [
                                {
                                  "value": "f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )\n\n        if eve",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )\n\n        if eve",
                                      "children": [
                                        {
                                          "value": "webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )",
                                          "children": [
                                            {
                                              "value": "webhook for node #{node.id}: \"",
                                              "children": [
                                                {
                                                  "value": "we",
                                                  "children": []
                                                },
                                                {
                                                  "value": "bhook for node #{node.id}: \"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "credentials_meta['id']} not available\"\n            )",
                                              "children": [
                                                {
                                                  "value": "cr",
                                                  "children": []
                                                },
                                                {
                                                  "value": "edentials_met",
                                                  "children": []
                                                },
                                                {
                                                  "value": "a['id']} not available\"",
                                                  "children": [
                                                    {
                                                      "value": "['id']} not available\"",
                                                      "children": [
                                                        {
                                                          "value": "['id']} not avai",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "able",
                                                          "children": [
                                                            {
                                                              "value": "a",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "bl",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": ")",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "input_name:\n            # Shape of the event filter is enforced in Block.__init__\n            event_filter = cast(dict, node.input_default[event_filter_input_name])\n            events = [\n                block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n        else:\n            events = []\n\n        # Find",
                      "children": [
                        {
                          "value": "ut_name:\n            #",
                          "children": []
                        },
                        {
                          "value": "vent filter is enforced in Block.__init__\n            eve",
                          "children": []
                        },
                        {
                          "value": "ast(dict, node.input_default[event_filter_input_name])\n            events = [\n                block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n        else:",
                          "children": [
                            {
                              "value": "ast(dict, node.input_default[event_filter_input_name])\n            eve",
                              "children": [
                                {
                                  "value": "ast(dict, node.input_default[event_filter_input_name])\n            eve",
                                  "children": [
                                    {
                                      "value": "ast(dict, no",
                                      "children": []
                                    },
                                    {
                                      "value": "input_default[event_filter_input_name])\n            eve",
                                      "children": [
                                        {
                                          "value": "inpu",
                                          "children": []
                                        },
                                        {
                                          "value": "t_default[event_filter_input_name])\n            eve",
                                          "children": [
                                            {
                                              "value": "_def",
                                              "children": []
                                            },
                                            {
                                              "value": "lt[event_filter_input_name])\n            ev",
                                              "children": [
                                                {
                                                  "value": "lt[event_filter_in",
                                                  "children": [
                                                    {
                                                      "value": "lt[e",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ent_filter_in",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "ut_name])\n            e",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            log",
                              "children": [
                                {
                                  "value": "block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            log",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            log",
                                      "children": [
                                        {
                                          "value": "nfig.event_format.format(event=event)",
                                          "children": [
                                            {
                                              "value": "nfig.event_format.format(event=event)",
                                              "children": [
                                                {
                                                  "value": "nfig.event_format.format(event=ev",
                                                  "children": [
                                                    {
                                                      "value": "nfig.event_format.fo",
                                                      "children": [
                                                        {
                                                          "value": "nfig.",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "vent_format.fo",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "mat(event=ev",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "nt)",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ed in event_filter.items()",
                                          "children": [
                                            {
                                              "value": "n event_filter",
                                              "children": [
                                                {
                                                  "value": "n eve",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_filter",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ms()",
                                              "children": [
                                                {
                                                  "value": "ms()",
                                                  "children": [
                                                    {
                                                      "value": "ms()",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ue\n            ]",
                                          "children": [
                                            {
                                              "value": "]",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "]",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ebhook events to subscribe to: {', '.join(events)}\")\n        else:",
                              "children": [
                                {
                                  "value": "ebhook events to subscribe to: {', '.join(events)}\")\n        else:",
                                  "children": [
                                    {
                                      "value": "ebhook event",
                                      "children": [
                                        {
                                          "value": "ebhook",
                                          "children": []
                                        },
                                        {
                                          "value": "event",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "s to subscribe to: {', '.join(events)}\")\n        else:",
                                      "children": [
                                        {
                                          "value": "to subscribe to: {', '.join(events)}\")\n        else:",
                                          "children": [
                                            {
                                              "value": "t",
                                              "children": []
                                            },
                                            {
                                              "value": "o subscribe to: {', '.join(event",
                                              "children": []
                                            },
                                            {
                                              "value": "s)}\")\n        else:",
                                              "children": [
                                                {
                                                  "value": ")}\")\n        else",
                                                  "children": [
                                                    {
                                                      "value": ")}\")",
                                                      "children": [
                                                        {
                                                          "value": ")}\")",
                                                          "children": [
                                                            {
                                                              "value": ")",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "}\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "else",
                                                      "children": [
                                                        {
                                                          "value": "els",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "events = []\n\n        # Find",
                          "children": [
                            {
                              "value": "# Find",
                              "children": [
                                {
                                  "value": "# Find",
                                  "children": [
                                    {
                                      "value": "# Find",
                                      "children": [
                                        {
                                          "value": "#",
                                          "children": []
                                        },
                                        {
                                          "value": "nd",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "attach a suitable webhook to the node\n        if auto",
                      "children": []
                    },
                    {
                      "value": "bhook:\n            assert credentials is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:\n            # Manual webhook -> no credentials -> don't register but do create\n            new_webhook = await webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.",
                      "children": [
                        {
                          "value": "ok:\n            as",
                          "children": []
                        },
                        {
                          "value": "ls is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:",
                          "children": [
                            {
                              "value": "ls is not None\n            new",
                              "children": [
                                {
                                  "value": "ot None\n            new",
                                  "children": [
                                    {
                                      "value": "ot None",
                                      "children": []
                                    },
                                    {
                                      "value": "new",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ait webhooks_manager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:",
                              "children": [
                                {
                                  "value": "ait webhooks_manager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:",
                                  "children": [
                                    {
                                      "value": "ait webhook",
                                      "children": []
                                    },
                                    {
                                      "value": "anager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:",
                                      "children": [
                                        {
                                          "value": ".get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:",
                                          "children": [
                                            {
                                              "value": ".get_suitable_auto_webhook(",
                                              "children": [
                                                {
                                                  "value": ".get_suitable_au",
                                                  "children": []
                                                },
                                                {
                                                  "value": "o_webhook(",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "nfig.webhook_type,",
                                                  "children": [
                                                    {
                                                      "value": "nfig.webhook_type,",
                                                      "children": [
                                                        {
                                                          "value": "nfig.",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ebhook_type,",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# Manual webhook -> no credentials -> don't register but do create\n            new_webhook = await webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.",
                          "children": [
                            {
                              "value": "-> no credentials -> don't register but do create\n            new",
                              "children": []
                            },
                            {
                              "value": "ait webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.",
                              "children": [
                                {
                                  "value": "ait webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.",
                                  "children": [
                                    {
                                      "value": "ait webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.",
                                      "children": [
                                        {
                                          "value": "ait webhook",
                                          "children": []
                                        },
                                        {
                                          "value": "anager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.",
                                          "children": [
                                            {
                                              "value": ".get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.",
                                              "children": [
                                                {
                                                  "value": ".get_manual_webhook(",
                                                  "children": [
                                                    {
                                                      "value": ".get_manual_webh",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ok(",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "nfig.webhook_type,",
                                                      "children": [
                                                        {
                                                          "value": "nfig.webhook_type,",
                                                          "children": [
                                                            {
                                                              "value": "nfig.",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "ebhook_type,",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "cquired webhook: {new_webhook}\")\n        return",
                      "children": [
                        {
                          "value": "cquired webhook: {new_webhook}\")\n        return",
                          "children": [
                            {
                              "value": "cquired webh",
                              "children": [
                                {
                                  "value": "cquire",
                                  "children": []
                                },
                                {
                                  "value": "webh",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "ook: {new_webhook}\")\n        return",
                              "children": [
                                {
                                  "value": "ok: {new_webhook}\")\n        return",
                                  "children": [
                                    {
                                      "value": "ok",
                                      "children": []
                                    },
                                    {
                                      "value": ": {new_webhook}\")",
                                      "children": []
                                    },
                                    {
                                      "value": "retur",
                                      "children": [
                                        {
                                          "value": "retu",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "n",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "_node_webhook(node.id, new_webhook.id)\n    else:",
                      "children": [
                        {
                          "value": "ebhook(node.id, new_webhook.id)\n    else:",
                          "children": [
                            {
                              "value": "(node.id, new_webhook.id)\n    else:",
                              "children": [
                                {
                                  "value": "(node.id, new_we",
                                  "children": []
                                },
                                {
                                  "value": "bhook.id)\n    else:",
                                  "children": [
                                    {
                                      "value": "hook.id",
                                      "children": [
                                        {
                                          "value": "hook",
                                          "children": []
                                        },
                                        {
                                          "value": "id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "else:",
                                      "children": [
                                        {
                                          "value": "else:",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "gger.debug(f\"Node #{node.id} does not have everything for a webhook\")\n\n    return nod",
                  "children": [
                    {
                      "value": "ode #{node.id} does not have everything for a webhook\")\n\n    return nod",
                      "children": [
                        {
                          "value": "ode #{node.id} does not have everything for a webhook\")\n\n    return nod",
                          "children": [
                            {
                              "value": "ode #{node.id} does not have everything for a webhook\")\n\n    return nod",
                              "children": [
                                {
                                  "value": "ode #{node.i",
                                  "children": [
                                    {
                                      "value": "ode #{",
                                      "children": []
                                    },
                                    {
                                      "value": "ode.i",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "d} does not have everything for a webhook\")\n\n    return nod",
                                  "children": [
                                    {
                                      "value": "} does not have everything for a webhook\")\n\n    return no",
                                      "children": [
                                        {
                                          "value": "}",
                                          "children": []
                                        },
                                        {
                                          "value": "does n",
                                          "children": []
                                        },
                                        {
                                          "value": "ot have e",
                                          "children": [
                                            {
                                              "value": "t have",
                                              "children": [
                                                {
                                                  "value": "t ha",
                                                  "children": []
                                                },
                                                {
                                                  "value": "e",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "verything for a webhook\")\n\n    return n",
                                          "children": []
                                        },
                                        {
                                          "value": "o",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ync def on_",
              "children": [
                {
                  "value": "on_",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "e_deactivate(\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n    webhooks_manager: Optional[\"BaseWebhooksManager\"] = None,\n) -> \"NodeModel\":\n    \"\"\"Hook to be called when node is deactivated/deleted\"\"\"\n\n    logger.debug(f\"Deactivating node #{node.id}\")\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not block.webhook_config:\n        return node\n\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if node.webhook_id:\n        logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\")\n        if not node.webhook:\n            logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")\n            raise ValueError(\"node.webhook not included\")\n\n        # Detach webhook from node\n        logger.debug(f\"Detaching webhook from node #{node.id}\")\n        updated_node = await set_node_webhook(node.id, None)\n\n        # Prune and deregister the webhook if it is no longer used anywhere\n        webhook = node.webhook\n        logger.debug(\n            f\"Pruning{' and deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )\n        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)\n        if (\n            CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n            and not credentials\n        ):\n            logger.warning(\n                f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )\n        return updated_node\n\n    logger.debug(f\"Node #{node.id} has no webhook_id, returning\")\n    return node",
      "children": [
        {
          "value": "te(\n    node: \"Nod",
          "children": []
        },
        {
          "value": "eModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n    webhooks_manager: Optional[\"BaseWebhooksManager\"] = None,\n) -> \"NodeModel\":",
          "children": [
            {
              "value": "\",\n    *,\n    cre",
              "children": [
                {
                  "value": "\",",
                  "children": []
                },
                {
                  "value": "*,\n    cre",
                  "children": [
                    {
                      "value": "*,\n    cre",
                      "children": [
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "*,\n    cr",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "l",
              "children": []
            },
            {
              "value": "ional[\"Credentials\"] = None,\n    webhooks_m",
              "children": [
                {
                  "value": "ional[\"Cred",
                  "children": []
                },
                {
                  "value": "tials\"] = None,\n    web",
                  "children": [
                    {
                      "value": "tials\"] = None,\n    web",
                      "children": [
                        {
                          "value": "tials\"]",
                          "children": []
                        },
                        {
                          "value": "= None,\n    web",
                          "children": [
                            {
                              "value": "None,\n    we",
                              "children": [
                                {
                                  "value": "None,\n    we",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "None,\n    w",
                                      "children": []
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ks_m",
                  "children": []
                }
              ]
            },
            {
              "value": ": Optional[\"BaseWebhooksManager\"] = None,\n) -> \"NodeMode",
              "children": [
                {
                  "value": ": Optional[\"Base",
                  "children": []
                },
                {
                  "value": "bhooksManager\"] = None,\n) -> \"N",
                  "children": [
                    {
                      "value": "bhooksManager\"] = None,\n) -> \"N",
                      "children": [
                        {
                          "value": "bhooksMa",
                          "children": []
                        },
                        {
                          "value": "nager\"] = None,\n) -> \"N",
                          "children": [
                            {
                              "value": "ager\"] = None,\n) -> \"",
                              "children": [
                                {
                                  "value": "ager\"] = None,\n) -> \"",
                                  "children": [
                                    {
                                      "value": "a",
                                      "children": []
                                    },
                                    {
                                      "value": "ger\"] = None,\n) ->",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "Mode",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"Hook to",
          "children": [
            {
              "value": "\"\"\"Hook to",
              "children": [
                {
                  "value": "",
                  "children": []
                },
                {
                  "value": "\"\"\"Hook t",
                  "children": []
                },
                {
                  "value": "o",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "lled when node is deactivated/deleted\"\"\"\n\n    logger.debug(f\"Deactivating node #{node.id}\")\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not block.webhook_config:\n        return node\n\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if node.webhook_id:\n        logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\")\n        if not node.webhook:\n            logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")\n            raise ValueError(\"node.webhook not included\")\n\n        # Detach webhook from node\n        logger.debug(f\"Detaching webhook from node #{node.id}\")\n        updated_node = await set_node_webhook(node.id, None)\n\n        # Prune and deregister the webhook if it is no longer used anywhere\n        webhook = node.webhook\n        logger.debug(\n            f\"Pruning{' and deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )\n        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)\n        if (\n            CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n            and not credentials\n        ):\n            logger.warning(\n                f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )\n        return updated_node\n\n    logger.debug(f\"Node #{node.id} has no webhook_id, returning\")\n    return node",
          "children": [
            {
              "value": "lled when node is deactivated/deleted\"\"\"\n\n    logger.deb",
              "children": [
                {
                  "value": "lled when node is deactivated/deleted\"\"\"\n\n    logger.deb",
                  "children": [
                    {
                      "value": "lle",
                      "children": []
                    },
                    {
                      "value": "d when node is deactivated/deleted\"\"\"\n\n    logger.",
                      "children": []
                    },
                    {
                      "value": "deb",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "eactivating node #{node.id}\")\n    block = get",
              "children": [
                {
                  "value": "eactivating node #{node.id}\")\n    block = get",
                  "children": [
                    {
                      "value": "eactivating",
                      "children": [
                        {
                          "value": "eactiv",
                          "children": []
                        },
                        {
                          "value": "ting",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "node #{node.id}\")\n    block = get",
                      "children": [
                        {
                          "value": "ode #{node.id}\")\n    block = ge",
                          "children": [
                            {
                              "value": "od",
                              "children": []
                            },
                            {
                              "value": "e #{node.id}\")",
                              "children": []
                            },
                            {
                              "value": "block = g",
                              "children": [
                                {
                                  "value": "lock =",
                                  "children": [
                                    {
                                      "value": "lock",
                                      "children": []
                                    },
                                    {
                                      "value": "=",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "k(node.block_id)\n    if not bloc",
              "children": [
                {
                  "value": "k(node.block_id)\n    if not bloc",
                  "children": [
                    {
                      "value": "k(nod",
                      "children": []
                    },
                    {
                      "value": "lock_id)\n    if not bloc",
                      "children": [
                        {
                          "value": "lock_id)",
                          "children": []
                        },
                        {
                          "value": "if not bloc",
                          "children": [
                            {
                              "value": "if not blo",
                              "children": [
                                {
                                  "value": "i",
                                  "children": []
                                },
                                {
                                  "value": "not blo",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not blo",
              "children": [
                {
                  "value": "raise",
                  "children": [
                    {
                      "value": "aise",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not blo",
                  "children": [
                    {
                      "value": "(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not blo",
                      "children": [
                        {
                          "value": "f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not blo",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not blo",
                              "children": [
                                {
                                  "value": "} is instance of unknown block #{node.block_id}\"\n        )",
                                  "children": [
                                    {
                                      "value": "}",
                                      "children": []
                                    },
                                    {
                                      "value": "is ins",
                                      "children": []
                                    },
                                    {
                                      "value": "tance of",
                                      "children": [
                                        {
                                          "value": "ance of",
                                          "children": [
                                            {
                                              "value": "ance",
                                              "children": []
                                            },
                                            {
                                              "value": "of",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "unknown block #{node.block_id}\"",
                                      "children": []
                                    },
                                    {
                                      "value": ")",
                                      "children": [
                                        {
                                          "value": ")",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "hook_config:\n        return node\n\n    provider =",
              "children": [
                {
                  "value": "k_config:\n        return",
                  "children": [
                    {
                      "value": "nfig:\n        return",
                      "children": [
                        {
                          "value": "nfig:",
                          "children": []
                        },
                        {
                          "value": "return",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "provider =",
                  "children": [
                    {
                      "value": "provider =",
                      "children": [
                        {
                          "value": "er =",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": ".webhook_config.provider\n    if provider",
              "children": [
                {
                  "value": ".webhook_config.provider\n    if provider",
                  "children": [
                    {
                      "value": ".webhook",
                      "children": []
                    },
                    {
                      "value": "nfig.provider\n    if provider",
                      "children": [
                        {
                          "value": "nfig.provider\n    if",
                          "children": [
                            {
                              "value": "nfig.",
                              "children": []
                            },
                            {
                              "value": "rovider\n    if",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "provider",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    webhooks_m",
              "children": [
                {
                  "value": "WEBHOOK_MANAGERS_BY_NAME:\n        raise",
                  "children": [
                    {
                      "value": "WEBHOOK_",
                      "children": []
                    },
                    {
                      "value": "_BY_NAME:\n        raise",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    webhooks_m",
                  "children": [
                    {
                      "value": "(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    webhooks_m",
                      "children": [
                        {
                          "value": "f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    webhooks_m",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    webhooks_m",
                              "children": [
                                {
                                  "value": "id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )",
                                  "children": [
                                    {
                                      "value": "id} has webhook_config for provider {provider} \"\n            \"wh",
                                      "children": [
                                        {
                                          "value": "id",
                                          "children": []
                                        },
                                        {
                                          "value": "} has w",
                                          "children": []
                                        },
                                        {
                                          "value": "ebhook_con",
                                          "children": [
                                            {
                                              "value": "bhook_co",
                                              "children": [
                                                {
                                                  "value": "bhook",
                                                  "children": []
                                                },
                                                {
                                                  "value": "co",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "fig for provider {provider} \"",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "w",
                                          "children": []
                                        },
                                        {
                                          "value": "h",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "support webhooks\"\n        )",
                                      "children": [
                                        {
                                          "value": "s",
                                          "children": []
                                        },
                                        {
                                          "value": "upport webhooks\"\n        )",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "= WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if node.we",
              "children": [
                {
                  "value": "= WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if node.we",
                  "children": [
                    {
                      "value": "= WEBHOOK_MANAG",
                      "children": []
                    },
                    {
                      "value": "_BY_NAME[provider]()\n\n    if node.we",
                      "children": [
                        {
                          "value": "_BY_NAME[provider]()\n\n    if node.",
                          "children": [
                            {
                              "value": "_BY_NAME[provider]()",
                              "children": []
                            },
                            {
                              "value": "if node",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "we",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "id:\n        logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\")\n        if not node.webhook:\n            logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")\n            raise ValueError(\"node.webhook not included\")\n\n        # Detach webhook from node\n        logger.debug(f\"Detaching webhook from node #{node.id}\")\n        updated_node = await set_node_webhook(node.id, None)\n\n        # Prune and deregister the webhook if it is no longer used anywhere\n        webhook = node.webhook\n        logger.debug(\n            f\"Pruning{' and deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )\n        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)\n        if (\n            CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n            and not credentials\n        ):\n            logger.warning(\n                f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )\n        return updated_node\n\n    logger.deb",
              "children": [
                {
                  "value": "logger",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    },
                    {
                      "value": "logger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "ode #{node.id} has webhook_id {node.webhook_id}\")\n        if not node.webhook:\n            logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")\n            raise ValueError(\"node.webhook not included\")\n\n        # Detach webhook from node\n        logger.debug(f\"Detaching webhook from node #{node.id}\")\n        updated_node = await set_node_webhook(node.id, None)\n\n        # Prune and deregister the webhook if it is no longer used anywhere\n        webhook = node.webhook\n        logger.debug(\n            f\"Pruning{' and deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )\n        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)\n        if (\n            CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n            and not credentials\n        ):\n            logger.warning(\n                f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )\n        return updated_node\n\n    logger.deb",
                  "children": [
                    {
                      "value": "ode #{node.id} has webhook_id {node.webhook_id}\")\n        if not",
                      "children": [
                        {
                          "value": "ode #{node.id} has webhook_id {node.webhook_id}\")\n        if not",
                          "children": [
                            {
                              "value": "ode #{node.i",
                              "children": [
                                {
                                  "value": "ode #{",
                                  "children": []
                                },
                                {
                                  "value": "ode.i",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "d} has webhook_id {node.webhook_id}\")\n        if not",
                              "children": [
                                {
                                  "value": "} has webhook_id {node.webhook_id}\")\n        if not",
                                  "children": [
                                    {
                                      "value": "}",
                                      "children": []
                                    },
                                    {
                                      "value": "has we",
                                      "children": []
                                    },
                                    {
                                      "value": "bhook_id",
                                      "children": [
                                        {
                                          "value": "hook_id",
                                          "children": [
                                            {
                                              "value": "hook",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "{node.webhook_id",
                                      "children": []
                                    },
                                    {
                                      "value": "}\")\n        if no",
                                      "children": [
                                        {
                                          "value": "\")\n        if n",
                                          "children": [
                                            {
                                              "value": "\")",
                                              "children": []
                                            },
                                            {
                                              "value": "if n",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "t",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ook:\n            logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")\n            raise ValueError(\"node.webhook not included\")\n\n        # Deta",
                      "children": [
                        {
                          "value": ":\n            lo",
                          "children": [
                            {
                              "value": "lo",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                },
                                {
                                  "value": "lo",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ode #{node.id} has webhook_id but no webhook object\")\n            raise ValueError(\"node.webhook not included\")\n\n        # Deta",
                          "children": [
                            {
                              "value": "ode #{node.id} has webhook_id but no webhook object\")\n            rai",
                              "children": [
                                {
                                  "value": "ode #{node.id} has webhook_id but no webhook object\")\n            rai",
                                  "children": [
                                    {
                                      "value": "ode #{node.i",
                                      "children": [
                                        {
                                          "value": "ode #{",
                                          "children": []
                                        },
                                        {
                                          "value": "ode.i",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "d} has webhook_id but no webhook object\")\n            rai",
                                      "children": [
                                        {
                                          "value": "} has webhook_id but no webhook object\")\n            ra",
                                          "children": [
                                            {
                                              "value": "}",
                                              "children": []
                                            },
                                            {
                                              "value": "has we",
                                              "children": []
                                            },
                                            {
                                              "value": "bhook_id",
                                              "children": [
                                                {
                                                  "value": "hook_id",
                                                  "children": [
                                                    {
                                                      "value": "hook",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "but no webhook object\")\n            r",
                                              "children": []
                                            },
                                            {
                                              "value": "a",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "(\"node.webhook not included\")\n\n        # Deta",
                              "children": [
                                {
                                  "value": ".webhook not included\")\n\n        # Deta",
                                  "children": [
                                    {
                                      "value": ".webhook n",
                                      "children": []
                                    },
                                    {
                                      "value": "ot included\")\n\n        # Deta",
                                      "children": [
                                        {
                                          "value": "t included\")\n\n        # Det",
                                          "children": [
                                            {
                                              "value": "t",
                                              "children": []
                                            },
                                            {
                                              "value": "included\")\n\n        # De",
                                              "children": []
                                            },
                                            {
                                              "value": "t",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "from node\n        logger.",
                      "children": []
                    },
                    {
                      "value": "etaching webhook from node #{node.id}\")\n        updated",
                      "children": [
                        {
                          "value": "etaching webhook from node #{node.id}\")\n        updated",
                          "children": [
                            {
                              "value": "etaching web",
                              "children": [
                                {
                                  "value": "etachi",
                                  "children": []
                                },
                                {
                                  "value": "g web",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "hook from node #{node.id}\")\n        updated",
                              "children": [
                                {
                                  "value": "ook from node #{node.id}\")\n        update",
                                  "children": [
                                    {
                                      "value": "oo",
                                      "children": []
                                    },
                                    {
                                      "value": "k from node #{node.id}\")",
                                      "children": []
                                    },
                                    {
                                      "value": "updat",
                                      "children": [
                                        {
                                          "value": "upda",
                                          "children": [
                                            {
                                              "value": "u",
                                              "children": []
                                            },
                                            {
                                              "value": "da",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "wait set_node_webhook(node.id, None)\n\n        # Prun",
                      "children": [
                        {
                          "value": "wait set_node_webhook(node.id, None)\n\n        # Prun",
                          "children": [
                            {
                              "value": "wait set_nod",
                              "children": []
                            },
                            {
                              "value": "ebhook(node.id, None)\n\n        # Prun",
                              "children": [
                                {
                                  "value": "(node.id, None)\n\n        # Prun",
                                  "children": [
                                    {
                                      "value": "(node.id, None)",
                                      "children": []
                                    },
                                    {
                                      "value": "# Prun",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "Pru",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "gister the webhook if it is no longer used anywhere\n        webhook",
                      "children": []
                    },
                    {
                      "value": "ebhook\n        logger.",
                      "children": [
                        {
                          "value": "ebhook\n        logger.",
                          "children": [
                            {
                              "value": "ebhook",
                              "children": []
                            },
                            {
                              "value": "logger.",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                },
                                {
                                  "value": "logger.",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "f\"Pruning{' and deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )\n        await w",
                      "children": [
                        {
                          "value": "f\"Pruning{' and deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )\n        await w",
                          "children": [
                            {
                              "value": "f\"",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                },
                                {
                                  "value": "f\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Pruning{' and deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )\n        await w",
                              "children": [
                                {
                                  "value": "deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )",
                                  "children": [
                                    {
                                      "value": "deregistering' if credentials else ''} \"\n            f\"w",
                                      "children": [
                                        {
                                          "value": "de",
                                          "children": []
                                        },
                                        {
                                          "value": "registe",
                                          "children": []
                                        },
                                        {
                                          "value": "ring' if credentials else ''} \"\n            f",
                                          "children": [
                                            {
                                              "value": "ing' if credentials else ''} \"",
                                              "children": [
                                                {
                                                  "value": "ing' if credentials",
                                                  "children": [
                                                    {
                                                      "value": "i",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ng' if credentials",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "''} \"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "w",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ook.id}\"\n        )",
                                      "children": [
                                        {
                                          "value": "oo",
                                          "children": []
                                        },
                                        {
                                          "value": "k.id}\"",
                                          "children": []
                                        },
                                        {
                                          "value": ")",
                                          "children": [
                                            {
                                              "value": ")",
                                              "children": [
                                                {
                                                  "value": ")",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "anager.prune_webhook_if_dangling(webhook.id, credentials)\n        if (",
                      "children": [
                        {
                          "value": "anager.prune_webhook_if_dangling(webhook.id, credentials)\n        if (",
                          "children": [
                            {
                              "value": ".prune_webhook_if_dangling(webhook.id, credentials)\n        if (",
                              "children": [
                                {
                                  "value": ".prune_webhook_if_dangling(webhook.id, cre",
                                  "children": [
                                    {
                                      "value": ".prune_webhook_i",
                                      "children": []
                                    },
                                    {
                                      "value": "_dangling(webhook.id, cre",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "dentials)\n        if (",
                                  "children": [
                                    {
                                      "value": "entials)",
                                      "children": [
                                        {
                                          "value": "entials",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if (",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n            and not credentials\n        ):\n            logger.warning(\n                f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )\n        return",
                      "children": [
                        {
                          "value": "EDENTIALS_FIELD_NAME in block.input_schema.model_fields\n            and not credentials\n        ):\n            lo",
                          "children": [
                            {
                              "value": "D_NAME in block.input_schema.model_fields\n            and not credentials\n        ):",
                              "children": [
                                {
                                  "value": "D_NAME in block.input_schema.model_fields\n            and",
                                  "children": [
                                    {
                                      "value": "D_NAME in block.input_",
                                      "children": []
                                    },
                                    {
                                      "value": "ma.model_fields\n            and",
                                      "children": [
                                        {
                                          "value": "ma.model_fields",
                                          "children": [
                                            {
                                              "value": "ma.mo",
                                              "children": []
                                            },
                                            {
                                              "value": "el_fields",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "and",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "):",
                                  "children": [
                                    {
                                      "value": "):",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )\n        return",
                          "children": [
                            {
                              "value": "f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )\n        return",
                              "children": [
                                {
                                  "value": "f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )\n        return",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )\n        return",
                                      "children": [
                                        {
                                          "value": "ter webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )",
                                          "children": [
                                            {
                                              "value": "ter webhook #{webhook.id}: credentials \"",
                                              "children": [
                                                {
                                                  "value": "te",
                                                  "children": []
                                                },
                                                {
                                                  "value": "r webhook #{webhook.id}: cr",
                                                  "children": []
                                                },
                                                {
                                                  "value": "edentials \"",
                                                  "children": [
                                                    {
                                                      "value": "dentials \"",
                                                      "children": [
                                                        {
                                                          "value": "dential",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "entials_id} not available \"",
                                              "children": [
                                                {
                                                  "value": "en",
                                                  "children": []
                                                },
                                                {
                                                  "value": "t",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ials_id} not available \"",
                                                  "children": [
                                                    {
                                                      "value": "als_id} not available",
                                                      "children": [
                                                        {
                                                          "value": "als_id}",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "not available",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )",
                                              "children": [
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "e",
                                                  "children": []
                                                },
                                                {
                                                  "value": "r.value} webhook ID: {we",
                                                  "children": [
                                                    {
                                                      "value": ".value} webhook ID: {w",
                                                      "children": [
                                                        {
                                                          "value": ".value} webhook",
                                                          "children": [
                                                            {
                                                              "value": ".value}",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "webhook",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "D: {w",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "bhook.provide",
                                                  "children": []
                                                },
                                                {
                                                  "value": "r_webhook_id})\"\n            )",
                                                  "children": [
                                                    {
                                                      "value": "_webhook_id})\"",
                                                      "children": [
                                                        {
                                                          "value": "_webhoo",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "_id})\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ode\n\n    logger.deb",
                      "children": [
                        {
                          "value": "logger.deb",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ode #{node.id} has no webhook_id, returning\")\n    return node",
              "children": [
                {
                  "value": "ode #{node.id} has no webhook_id, returning\")\n    return node",
                  "children": [
                    {
                      "value": "ode #{node.i",
                      "children": [
                        {
                          "value": "ode #{",
                          "children": []
                        },
                        {
                          "value": "ode.i",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "d} has no webhook_id, returning\")\n    return node",
                      "children": [
                        {
                          "value": "} has no webhook_id, returning\")\n    return nod",
                          "children": [
                            {
                              "value": "}",
                              "children": []
                            },
                            {
                              "value": "has no",
                              "children": []
                            },
                            {
                              "value": "webhook_",
                              "children": [
                                {
                                  "value": "webhook",
                                  "children": [
                                    {
                                      "value": "webh",
                                      "children": []
                                    },
                                    {
                                      "value": "ok",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "id, returning\")\n    return no",
                              "children": []
                            },
                            {
                              "value": "d",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "",
              "children": [
                {
                  "value": "",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}