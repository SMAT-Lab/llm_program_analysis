{
  "value": "import re\n\nfrom jinja2 import BaseLoader\nfrom jinja2.sandbox import SandboxedEnvironment\n\n\nclass TextFormatter:\n    def __init__(self):\n        # Create a sandboxed environment\n        self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n\n        # Clear any registered filters, tests, and globals to minimize attack surface\n        self.env.filters.clear()\n        self.env.tests.clear()\n        self.env.globals.clear()\n\n    def format_string(self, template_str: str, values=None, **kwargs) -> str:\n        # For python.format compatibility: replace all {...} with {{..}}.\n        # But avoid replacing {{...}} to {{{...}}}.\n        template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)\n        template = self.env.from_string(template_str)\n        return template.render(values or {}, **kwargs)",
  "children": [
    {
      "value": "import re",
      "children": [
        {
          "value": "re",
          "children": [
            {
              "value": "re",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from jinja2 import BaseLoader",
      "children": [
        {
          "value": "jinja2",
          "children": [
            {
              "value": "jinja2",
              "children": []
            }
          ]
        },
        {
          "value": "BaseLoader",
          "children": [
            {
              "value": "BaseLoader",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from jinja2.sandbox import SandboxedEnvironment",
      "children": [
        {
          "value": "jinja2.sandbox",
          "children": [
            {
              "value": "jinja2",
              "children": []
            },
            {
              "value": "sandbox",
              "children": []
            }
          ]
        },
        {
          "value": "SandboxedEnvironment",
          "children": [
            {
              "value": "SandboxedEnvironment",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class TextFormatter:\n    def __init__(self):\n        # Create a sandboxed environment\n        self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n\n        # Clear any registered filters, tests, and globals to minimize attack surface\n        self.env.filters.clear()\n        self.env.tests.clear()\n        self.env.globals.clear()\n\n    def format_string(self, template_str: str, values=None, **kwargs) -> str:\n        # For python.format compatibility: replace all {...} with {{..}}.\n        # But avoid replacing {{...}} to {{{...}}}.\n        template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)\n        template = self.env.from_string(template_str)\n        return template.render(values or {}, **kwargs)",
      "children": [
        {
          "value": "TextFormatter",
          "children": []
        },
        {
          "value": "def __init__(self):\n        # Create a sandboxed environment\n        self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n\n        # Clear any registered filters, tests, and globals to minimize attack surface\n        self.env.filters.clear()\n        self.env.tests.clear()\n        self.env.globals.clear()\n\n    def format_string(self, template_str: str, values=None, **kwargs) -> str:\n        # For python.format compatibility: replace all {...} with {{..}}.\n        # But avoid replacing {{...}} to {{{...}}}.\n        template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)\n        template = self.env.from_string(template_str)\n        return template.render(values or {}, **kwargs)",
          "children": [
            {
              "value": "def __init__(self):\n        # Create a sandboxed environment\n        self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n\n        # Clear any registered filters, tests, and globals to minimize attack surface\n        self.env.filters.clear()\n        self.env.tests.clear()\n        self.env.globals.clear()",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# Create a sandboxed environment",
                  "children": []
                },
                {
                  "value": "self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n\n        # Clear any registered filters, tests, and globals to minimize attack surface\n        self.env.filters.clear()\n        self.env.tests.clear()\n        self.env.globals.clear()",
                  "children": [
                    {
                      "value": "self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)",
                      "children": [
                        {
                          "value": "self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)",
                          "children": [
                            {
                              "value": "self.env",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "env",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SandboxedEnvironment(loader=BaseLoader(), autoescape=True)",
                              "children": [
                                {
                                  "value": "SandboxedEnvironment",
                                  "children": []
                                },
                                {
                                  "value": "(loader=BaseLoader(), autoescape=True)",
                                  "children": [
                                    {
                                      "value": "loader=BaseLoader()",
                                      "children": [
                                        {
                                          "value": "loader",
                                          "children": []
                                        },
                                        {
                                          "value": "BaseLoader()",
                                          "children": [
                                            {
                                              "value": "BaseLoader",
                                              "children": []
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "autoescape=True",
                                      "children": [
                                        {
                                          "value": "autoescape",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Clear any registered filters, tests, and globals to minimize attack surface",
                      "children": []
                    },
                    {
                      "value": "self.env.filters.clear()",
                      "children": [
                        {
                          "value": "self.env.filters.clear()",
                          "children": [
                            {
                              "value": "self.env.filters.clear",
                              "children": [
                                {
                                  "value": "self.env.filters",
                                  "children": [
                                    {
                                      "value": "self.env",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "env",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "filters",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "clear",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.env.tests.clear()",
                      "children": [
                        {
                          "value": "self.env.tests.clear()",
                          "children": [
                            {
                              "value": "self.env.tests.clear",
                              "children": [
                                {
                                  "value": "self.env.tests",
                                  "children": [
                                    {
                                      "value": "self.env",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "env",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "tests",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "clear",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.env.globals.clear()",
                      "children": [
                        {
                          "value": "self.env.globals.clear()",
                          "children": [
                            {
                              "value": "self.env.globals.clear",
                              "children": [
                                {
                                  "value": "self.env.globals",
                                  "children": [
                                    {
                                      "value": "self.env",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "env",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "globals",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "clear",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def format_string(self, template_str: str, values=None, **kwargs) -> str:\n        # For python.format compatibility: replace all {...} with {{..}}.\n        # But avoid replacing {{...}} to {{{...}}}.\n        template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)\n        template = self.env.from_string(template_str)\n        return template.render(values or {}, **kwargs)",
              "children": [
                {
                  "value": "format_string",
                  "children": []
                },
                {
                  "value": "(self, template_str: str, values=None, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "template_str: str",
                      "children": [
                        {
                          "value": "template_str",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "values=None",
                      "children": [
                        {
                          "value": "values",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# For python.format compatibility: replace all {...} with {{..}}.",
                  "children": []
                },
                {
                  "value": "# But avoid replacing {{...}} to {{{...}}}.",
                  "children": []
                },
                {
                  "value": "template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)\n        template = self.env.from_string(template_str)\n        return template.render(values or {}, **kwargs)",
                  "children": [
                    {
                      "value": "template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)",
                      "children": [
                        {
                          "value": "template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)",
                          "children": [
                            {
                              "value": "template_str",
                              "children": []
                            },
                            {
                              "value": "re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)",
                              "children": [
                                {
                                  "value": "re.sub",
                                  "children": [
                                    {
                                      "value": "re",
                                      "children": []
                                    },
                                    {
                                      "value": "sub",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)",
                                  "children": [
                                    {
                                      "value": "r\"(?<!{){[ a-zA-Z0-9_]+}\"",
                                      "children": [
                                        {
                                          "value": "r\"",
                                          "children": []
                                        },
                                        {
                                          "value": "(?<!{){[ a-zA-Z0-9_]+}",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "r\"{\\g<0>}\"",
                                      "children": [
                                        {
                                          "value": "r\"",
                                          "children": []
                                        },
                                        {
                                          "value": "{\\g<0>}",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "template_str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "template = self.env.from_string(template_str)",
                      "children": [
                        {
                          "value": "template = self.env.from_string(template_str)",
                          "children": [
                            {
                              "value": "template",
                              "children": []
                            },
                            {
                              "value": "self.env.from_string(template_str)",
                              "children": [
                                {
                                  "value": "self.env.from_string",
                                  "children": [
                                    {
                                      "value": "self.env",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "env",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "from_string",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(template_str)",
                                  "children": [
                                    {
                                      "value": "template_str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return template.render(values or {}, **kwargs)",
                      "children": [
                        {
                          "value": "template.render(values or {}, **kwargs)",
                          "children": [
                            {
                              "value": "template.render",
                              "children": [
                                {
                                  "value": "template",
                                  "children": []
                                },
                                {
                                  "value": "render",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(values or {}, **kwargs)",
                              "children": [
                                {
                                  "value": "values or {}",
                                  "children": [
                                    {
                                      "value": "values",
                                      "children": []
                                    },
                                    {
                                      "value": "{}",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs",
                                  "children": [
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}