{
  "value": "import asyncio\nfrom typing import Literal\n\nimport aiohttp\nimport discord\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nDiscordCredentials = CredentialsMetaInput[\n    Literal[ProviderName.DISCORD], Literal[\"api_key\"]\n]\n\n\ndef DiscordCredentialsField() -> DiscordCredentials:\n    return CredentialsField(description=\"Discord bot token\")\n\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"discord\",\n    api_key=SecretStr(\"test_api_key\"),\n    title=\"Mock Discord API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\nclass ReadDiscordMessagesBlock(Block):\n    class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n\n    class Output(BlockSchema):\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n        username: str = SchemaField(\n            description=\"The username of the user who sent the message\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )\n\n    async def run_bot(self, token: SecretStr):\n        intents = discord.Intents.default()\n        intents.message_content = True\n\n        client = discord.Client(intents=intents)\n\n        self.output_data = None\n        self.channel_name = None\n        self.username = None\n\n        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n\n        @client.event\n        async def on_message(message):\n            if message.author == client.user:\n                return\n\n            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n\n            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n\n            await client.close()\n\n        await client.start(token.get_secret_value())\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        while True:\n            for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value\n            break\n\n    def __run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")\n\n            if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n                raise ValueError(\"No message, channel name, or username received.\")\n\n            yield \"message_content\", self.output_data\n            yield \"channel_name\", self.channel_name\n            yield \"username\", self.username\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")\n\n\nclass SendDiscordMessageBlock(Block):\n    class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n\n    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n\n    async def send_message(self, token: str, channel_name: str, message_content: str):\n        intents = discord.Intents.default()\n        intents.guilds = True  # Required for fetching guild/channel information\n        client = discord.Client(intents=intents)\n\n        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n            for guild in client.guilds:\n                for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n\n            self.output_data = \"Channel not found\"\n            await client.close()\n\n        await client.start(token)\n\n    def chunk_message(self, message: str, limit: int = 2000) -> list:\n        \"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"\n        return [message[i : i + limit] for i in range(0, len(message), limit)]\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\"Message sent\")\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, str):\n                self.output_data = result\n\n            if self.output_data is None:\n                raise ValueError(\"No status message received.\")\n\n            yield \"status\", self.output_data\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
  "children": [
    {
      "value": "import asyncio",
      "children": [
        {
          "value": "asyncio",
          "children": [
            {
              "value": "asyncio",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Literal",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Literal",
          "children": [
            {
              "value": "Literal",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import aiohttp",
      "children": [
        {
          "value": "aiohttp",
          "children": [
            {
              "value": "aiohttp",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import discord",
      "children": [
        {
          "value": "discord",
          "children": [
            {
              "value": "discord",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from pydantic import SecretStr",
      "children": [
        {
          "value": "pydantic",
          "children": [
            {
              "value": "pydantic",
              "children": []
            }
          ]
        },
        {
          "value": "SecretStr",
          "children": [
            {
              "value": "SecretStr",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        },
        {
          "value": "Block",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "BlockCategory",
          "children": [
            {
              "value": "BlockCategory",
              "children": []
            }
          ]
        },
        {
          "value": "BlockOutput",
          "children": [
            {
              "value": "BlockOutput",
              "children": []
            }
          ]
        },
        {
          "value": "BlockSchema",
          "children": [
            {
              "value": "BlockSchema",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "APIKeyCredentials",
          "children": [
            {
              "value": "APIKeyCredentials",
              "children": []
            }
          ]
        },
        {
          "value": "CredentialsField",
          "children": [
            {
              "value": "CredentialsField",
              "children": []
            }
          ]
        },
        {
          "value": "CredentialsMetaInput",
          "children": [
            {
              "value": "CredentialsMetaInput",
              "children": []
            }
          ]
        },
        {
          "value": "SchemaField",
          "children": [
            {
              "value": "SchemaField",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.providers import ProviderName",
      "children": [
        {
          "value": "backend.integrations.providers",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "providers",
              "children": []
            }
          ]
        },
        {
          "value": "ProviderName",
          "children": [
            {
              "value": "ProviderName",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "DiscordCredentials = CredentialsMetaInput[\n    Literal[ProviderName.DISCORD], Literal[\"api_key\"]\n]",
      "children": [
        {
          "value": "DiscordCredentials = CredentialsMetaInput[\n    Literal[ProviderName.DISCORD], Literal[\"api_key\"]\n]",
          "children": [
            {
              "value": "DiscordCredentials",
              "children": []
            },
            {
              "value": "CredentialsMetaInput[\n    Literal[ProviderName.DISCORD], Literal[\"api_key\"]\n]",
              "children": [
                {
                  "value": "CredentialsMetaInput",
                  "children": []
                },
                {
                  "value": "Literal[ProviderName.DISCORD]",
                  "children": [
                    {
                      "value": "Literal",
                      "children": []
                    },
                    {
                      "value": "ProviderName.DISCORD",
                      "children": [
                        {
                          "value": "ProviderName",
                          "children": []
                        },
                        {
                          "value": "DISCORD",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "Literal[\"api_key\"]",
                  "children": [
                    {
                      "value": "Literal",
                      "children": []
                    },
                    {
                      "value": "\"api_key\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "api_key",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def DiscordCredentialsField() -> DiscordCredentials:\n    return CredentialsField(description=\"Discord bot token\")",
      "children": [
        {
          "value": "DiscordCredentialsField",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "DiscordCredentials",
          "children": [
            {
              "value": "DiscordCredentials",
              "children": []
            }
          ]
        },
        {
          "value": "return CredentialsField(description=\"Discord bot token\")",
          "children": [
            {
              "value": "return CredentialsField(description=\"Discord bot token\")",
              "children": [
                {
                  "value": "CredentialsField(description=\"Discord bot token\")",
                  "children": [
                    {
                      "value": "CredentialsField",
                      "children": []
                    },
                    {
                      "value": "(description=\"Discord bot token\")",
                      "children": [
                        {
                          "value": "description=\"Discord bot token\"",
                          "children": [
                            {
                              "value": "description",
                              "children": []
                            },
                            {
                              "value": "\"Discord bot token\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "Discord bot token",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"discord\",\n    api_key=SecretStr(\"test_api_key\"),\n    title=\"Mock Discord API key\",\n    expires_at=None,\n)",
      "children": [
        {
          "value": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"discord\",\n    api_key=SecretStr(\"test_api_key\"),\n    title=\"Mock Discord API key\",\n    expires_at=None,\n)",
          "children": [
            {
              "value": "TEST_CREDENTIALS",
              "children": []
            },
            {
              "value": "APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"discord\",\n    api_key=SecretStr(\"test_api_key\"),\n    title=\"Mock Discord API key\",\n    expires_at=None,\n)",
              "children": [
                {
                  "value": "APIKeyCredentials",
                  "children": []
                },
                {
                  "value": "(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"discord\",\n    api_key=SecretStr(\"test_api_key\"),\n    title=\"Mock Discord API key\",\n    expires_at=None,\n)",
                  "children": [
                    {
                      "value": "id=\"01234567-89ab-cdef-0123-456789abcdef\"",
                      "children": [
                        {
                          "value": "id",
                          "children": []
                        },
                        {
                          "value": "\"01234567-89ab-cdef-0123-456789abcdef\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "01234567-89ab-cdef-0123-456789abcdef",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "provider=\"discord\"",
                      "children": [
                        {
                          "value": "provider",
                          "children": []
                        },
                        {
                          "value": "\"discord\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "discord",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "api_key=SecretStr(\"test_api_key\")",
                      "children": [
                        {
                          "value": "api_key",
                          "children": []
                        },
                        {
                          "value": "SecretStr(\"test_api_key\")",
                          "children": [
                            {
                              "value": "SecretStr",
                              "children": []
                            },
                            {
                              "value": "(\"test_api_key\")",
                              "children": [
                                {
                                  "value": "\"test_api_key\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "test_api_key",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "title=\"Mock Discord API key\"",
                      "children": [
                        {
                          "value": "title",
                          "children": []
                        },
                        {
                          "value": "\"Mock Discord API key\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Mock Discord API key",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expires_at=None",
                      "children": [
                        {
                          "value": "expires_at",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
      "children": [
        {
          "value": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
          "children": [
            {
              "value": "TEST_CREDENTIALS_INPUT",
              "children": []
            },
            {
              "value": "{\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
              "children": [
                {
                  "value": "\"provider\": TEST_CREDENTIALS.provider",
                  "children": [
                    {
                      "value": "\"provider\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "provider",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "TEST_CREDENTIALS.provider",
                      "children": [
                        {
                          "value": "TEST_CREDENTIALS",
                          "children": []
                        },
                        {
                          "value": "provider",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"id\": TEST_CREDENTIALS.id",
                  "children": [
                    {
                      "value": "\"id\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "id",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "TEST_CREDENTIALS.id",
                      "children": [
                        {
                          "value": "TEST_CREDENTIALS",
                          "children": []
                        },
                        {
                          "value": "id",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"type\": TEST_CREDENTIALS.type",
                  "children": [
                    {
                      "value": "\"type\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "type",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "TEST_CREDENTIALS.type",
                      "children": [
                        {
                          "value": "TEST_CREDENTIALS",
                          "children": []
                        },
                        {
                          "value": "type",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"title\": TEST_CREDENTIALS.type",
                  "children": [
                    {
                      "value": "\"title\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "title",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "TEST_CREDENTIALS.type",
                      "children": [
                        {
                          "value": "TEST_CREDENTIALS",
                          "children": []
                        },
                        {
                          "value": "type",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class ReadDiscordMessagesBlock(Block):\n    class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n\n    class Output(BlockSchema):\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n        username: str = SchemaField(\n            description=\"The username of the user who sent the message\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )\n\n    async def run_bot(self, token: SecretStr):\n        intents = discord.Intents.default()\n        intents.message_content = True\n\n        client = discord.Client(intents=intents)\n\n        self.output_data = None\n        self.channel_name = None\n        self.username = None\n\n        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n\n        @client.event\n        async def on_message(message):\n            if message.author == client.user:\n                return\n\n            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n\n            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n\n            await client.close()\n\n        await client.start(token.get_secret_value())\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        while True:\n            for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value\n            break\n\n    def __run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")\n\n            if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n                raise ValueError(\"No message, channel name, or username received.\")\n\n            yield \"message_content\", self.output_data\n            yield \"channel_name\", self.channel_name\n            yield \"username\", self.username\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
      "children": [
        {
          "value": "ReadDiscordMessagesBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n\n    class Output(BlockSchema):\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n        username: str = SchemaField(\n            description=\"The username of the user who sent the message\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )\n\n    async def run_bot(self, token: SecretStr):\n        intents = discord.Intents.default()\n        intents.message_content = True\n\n        client = discord.Client(intents=intents)\n\n        self.output_data = None\n        self.channel_name = None\n        self.username = None\n\n        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n\n        @client.event\n        async def on_message(message):\n            if message.author == client.user:\n                return\n\n            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n\n            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n\n            await client.close()\n\n        await client.start(token.get_secret_value())\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        while True:\n            for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value\n            break\n\n    def __run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")\n\n            if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n                raise ValueError(\"No message, channel name, or username received.\")\n\n            yield \"message_content\", self.output_data\n            yield \"channel_name\", self.channel_name\n            yield \"username\", self.username\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "credentials: DiscordCredentials = DiscordCredentialsField()",
                  "children": [
                    {
                      "value": "credentials: DiscordCredentials = DiscordCredentialsField()",
                      "children": [
                        {
                          "value": "credentials: DiscordCredentials = DiscordCredentialsField()",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "DiscordCredentials",
                              "children": [
                                {
                                  "value": "DiscordCredentials",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "DiscordCredentialsField()",
                              "children": [
                                {
                                  "value": "DiscordCredentialsField",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n        username: str = SchemaField(\n            description=\"The username of the user who sent the message\"\n        )",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n        username: str = SchemaField(\n            description=\"The username of the user who sent the message\"\n        )",
                  "children": [
                    {
                      "value": "message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )",
                      "children": [
                        {
                          "value": "message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )",
                          "children": [
                            {
                              "value": "message_content",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The content of the message received\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The content of the message received\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The content of the message received\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The content of the message received\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The content of the message received",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )",
                      "children": [
                        {
                          "value": "channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )",
                          "children": [
                            {
                              "value": "channel_name",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The name of the channel the message was received from\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The name of the channel the message was received from\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The name of the channel the message was received from\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The name of the channel the message was received from",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "username: str = SchemaField(\n            description=\"The username of the user who sent the message\"\n        )",
                      "children": [
                        {
                          "value": "username: str = SchemaField(\n            description=\"The username of the user who sent the message\"\n        )",
                          "children": [
                            {
                              "value": "username",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The username of the user who sent the message\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The username of the user who sent the message\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The username of the user who sent the message\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The username of the user who sent the message\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The username of the user who sent the message",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )",
                              "children": [
                                {
                                  "value": "id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "df06086a-d5ac-4abb-9996-2ad0acb2eff7",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=ReadDiscordMessagesBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "ReadDiscordMessagesBlock.Input",
                                      "children": [
                                        {
                                          "value": "ReadDiscordMessagesBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Assign input schema",
                                  "children": []
                                },
                                {
                                  "value": "output_schema=ReadDiscordMessagesBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "ReadDiscordMessagesBlock.Output",
                                      "children": [
                                        {
                                          "value": "ReadDiscordMessagesBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Assign output schema",
                                  "children": []
                                },
                                {
                                  "value": "description=\"Reads messages from a Discord channel using a bot token.\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Reads messages from a Discord channel using a bot token.\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Reads messages from a Discord channel using a bot token.",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.SOCIAL}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.SOCIAL}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.SOCIAL",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "SOCIAL",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            }",
                                  "children": [
                                    {
                                      "value": "test_input",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            }",
                                      "children": [
                                        {
                                          "value": "\"continuous_read\": False",
                                          "children": [
                                            {
                                              "value": "\"continuous_read\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "continuous_read",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "False",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"credentials\": TEST_CREDENTIALS_INPUT",
                                          "children": [
                                            {
                                              "value": "\"credentials\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "TEST_CREDENTIALS_INPUT",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_credentials=TEST_CREDENTIALS",
                                  "children": [
                                    {
                                      "value": "test_credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "TEST_CREDENTIALS",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ]",
                                  "children": [
                                    {
                                      "value": "test_output",
                                      "children": []
                                    },
                                    {
                                      "value": "[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ]",
                                      "children": [
                                        {
                                          "value": "(\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                )",
                                          "children": [
                                            {
                                              "value": "\"message_content\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "message_content",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.",
                                                  "children": [
                                                    {
                                                      "value": "\\n",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\\n",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\\n",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"channel_name\", \"general\")",
                                          "children": [
                                            {
                                              "value": "\"channel_name\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "channel_name",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"general\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "general",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"username\", \"test_user\")",
                                          "children": [
                                            {
                                              "value": "\"username\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "username",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"test_user\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "test_user",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            }",
                                  "children": [
                                    {
                                      "value": "test_mock",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            }",
                                      "children": [
                                        {
                                          "value": "\"run_bot\": lambda token: asyncio.Future()",
                                          "children": [
                                            {
                                              "value": "\"run_bot\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "run_bot",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "lambda token: asyncio.Future()",
                                              "children": [
                                                {
                                                  "value": "token",
                                                  "children": [
                                                    {
                                                      "value": "token",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "asyncio.Future()",
                                                  "children": [
                                                    {
                                                      "value": "asyncio.Future",
                                                      "children": [
                                                        {
                                                          "value": "asyncio",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Future",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "# Create a Future object for mocking",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def run_bot(self, token: SecretStr):\n        intents = discord.Intents.default()\n        intents.message_content = True\n\n        client = discord.Client(intents=intents)\n\n        self.output_data = None\n        self.channel_name = None\n        self.username = None\n\n        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n\n        @client.event\n        async def on_message(message):\n            if message.author == client.user:\n                return\n\n            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n\n            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n\n            await client.close()\n\n        await client.start(token.get_secret_value())",
              "children": [
                {
                  "value": "run_bot",
                  "children": []
                },
                {
                  "value": "(self, token: SecretStr)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "token: SecretStr",
                      "children": [
                        {
                          "value": "token",
                          "children": []
                        },
                        {
                          "value": "SecretStr",
                          "children": [
                            {
                              "value": "SecretStr",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "intents = discord.Intents.default()\n        intents.message_content = True\n\n        client = discord.Client(intents=intents)\n\n        self.output_data = None\n        self.channel_name = None\n        self.username = None\n\n        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n\n        @client.event\n        async def on_message(message):\n            if message.author == client.user:\n                return\n\n            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n\n            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n\n            await client.close()\n\n        await client.start(token.get_secret_value())",
                  "children": [
                    {
                      "value": "intents = discord.Intents.default()",
                      "children": [
                        {
                          "value": "intents = discord.Intents.default()",
                          "children": [
                            {
                              "value": "intents",
                              "children": []
                            },
                            {
                              "value": "discord.Intents.default()",
                              "children": [
                                {
                                  "value": "discord.Intents.default",
                                  "children": [
                                    {
                                      "value": "discord.Intents",
                                      "children": [
                                        {
                                          "value": "discord",
                                          "children": []
                                        },
                                        {
                                          "value": "Intents",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "intents.message_content = True",
                      "children": [
                        {
                          "value": "intents.message_content = True",
                          "children": [
                            {
                              "value": "intents.message_content",
                              "children": [
                                {
                                  "value": "intents",
                                  "children": []
                                },
                                {
                                  "value": "message_content",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "True",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "client = discord.Client(intents=intents)",
                      "children": [
                        {
                          "value": "client = discord.Client(intents=intents)",
                          "children": [
                            {
                              "value": "client",
                              "children": []
                            },
                            {
                              "value": "discord.Client(intents=intents)",
                              "children": [
                                {
                                  "value": "discord.Client",
                                  "children": [
                                    {
                                      "value": "discord",
                                      "children": []
                                    },
                                    {
                                      "value": "Client",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(intents=intents)",
                                  "children": [
                                    {
                                      "value": "intents=intents",
                                      "children": [
                                        {
                                          "value": "intents",
                                          "children": []
                                        },
                                        {
                                          "value": "intents",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.output_data = None",
                      "children": [
                        {
                          "value": "self.output_data = None",
                          "children": [
                            {
                              "value": "self.output_data",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "output_data",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.channel_name = None",
                      "children": [
                        {
                          "value": "self.channel_name = None",
                          "children": [
                            {
                              "value": "self.channel_name",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "channel_name",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.username = None",
                      "children": [
                        {
                          "value": "self.username = None",
                          "children": [
                            {
                              "value": "self.username",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "username",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "@client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")",
                      "children": [
                        {
                          "value": "@client.event",
                          "children": [
                            {
                              "value": "client.event",
                              "children": [
                                {
                                  "value": "client",
                                  "children": []
                                },
                                {
                                  "value": "event",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "async def on_ready():\n            print(f\"Logged in as {client.user}\")",
                          "children": [
                            {
                              "value": "on_ready",
                              "children": []
                            },
                            {
                              "value": "()",
                              "children": []
                            },
                            {
                              "value": "print(f\"Logged in as {client.user}\")",
                              "children": [
                                {
                                  "value": "print(f\"Logged in as {client.user}\")",
                                  "children": [
                                    {
                                      "value": "print(f\"Logged in as {client.user}\")",
                                      "children": [
                                        {
                                          "value": "print",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"Logged in as {client.user}\")",
                                          "children": [
                                            {
                                              "value": "f\"Logged in as {client.user}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Logged in as",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{client.user}",
                                                  "children": [
                                                    {
                                                      "value": "client.user",
                                                      "children": [
                                                        {
                                                          "value": "client",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "user",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "@client.event\n        async def on_message(message):\n            if message.author == client.user:\n                return\n\n            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n\n            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n\n            await client.close()",
                      "children": [
                        {
                          "value": "@client.event",
                          "children": [
                            {
                              "value": "client.event",
                              "children": [
                                {
                                  "value": "client",
                                  "children": []
                                },
                                {
                                  "value": "event",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "async def on_message(message):\n            if message.author == client.user:\n                return\n\n            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n\n            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n\n            await client.close()",
                          "children": [
                            {
                              "value": "on_message",
                              "children": []
                            },
                            {
                              "value": "(message)",
                              "children": [
                                {
                                  "value": "message",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "if message.author == client.user:\n                return\n\n            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n\n            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n\n            await client.close()",
                              "children": [
                                {
                                  "value": "if message.author == client.user:\n                return",
                                  "children": [
                                    {
                                      "value": "message.author == client.user",
                                      "children": [
                                        {
                                          "value": "message.author",
                                          "children": [
                                            {
                                              "value": "message",
                                              "children": []
                                            },
                                            {
                                              "value": "author",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "client.user",
                                          "children": [
                                            {
                                              "value": "client",
                                              "children": []
                                            },
                                            {
                                              "value": "user",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "return",
                                      "children": [
                                        {
                                          "value": "return",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.output_data = message.content",
                                  "children": [
                                    {
                                      "value": "self.output_data = message.content",
                                      "children": [
                                        {
                                          "value": "self.output_data",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "output_data",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "message.content",
                                          "children": [
                                            {
                                              "value": "message",
                                              "children": []
                                            },
                                            {
                                              "value": "content",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.channel_name = message.channel.name",
                                  "children": [
                                    {
                                      "value": "self.channel_name = message.channel.name",
                                      "children": [
                                        {
                                          "value": "self.channel_name",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "channel_name",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "message.channel.name",
                                          "children": [
                                            {
                                              "value": "message.channel",
                                              "children": [
                                                {
                                                  "value": "message",
                                                  "children": []
                                                },
                                                {
                                                  "value": "channel",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.username = message.author.name",
                                  "children": [
                                    {
                                      "value": "self.username = message.author.name",
                                      "children": [
                                        {
                                          "value": "self.username",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "username",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "message.author.name",
                                          "children": [
                                            {
                                              "value": "message.author",
                                              "children": [
                                                {
                                                  "value": "message",
                                                  "children": []
                                                },
                                                {
                                                  "value": "author",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                                  "children": [
                                    {
                                      "value": "message.attachments",
                                      "children": [
                                        {
                                          "value": "message",
                                          "children": []
                                        },
                                        {
                                          "value": "attachments",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                                      "children": [
                                        {
                                          "value": "attachment = message.attachments[0]",
                                          "children": [
                                            {
                                              "value": "attachment = message.attachments[0]",
                                              "children": [
                                                {
                                                  "value": "attachment",
                                                  "children": []
                                                },
                                                {
                                                  "value": "message.attachments[0]",
                                                  "children": [
                                                    {
                                                      "value": "message.attachments",
                                                      "children": [
                                                        {
                                                          "value": "message",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "attachments",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "# Process the first attachment",
                                          "children": []
                                        },
                                        {
                                          "value": "if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                                          "children": [
                                            {
                                              "value": "attachment.filename.endswith((\".txt\", \".py\"))",
                                              "children": [
                                                {
                                                  "value": "attachment.filename.endswith",
                                                  "children": [
                                                    {
                                                      "value": "attachment.filename",
                                                      "children": [
                                                        {
                                                          "value": "attachment",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "filename",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "endswith",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "((\".txt\", \".py\"))",
                                                  "children": [
                                                    {
                                                      "value": "(\".txt\", \".py\")",
                                                      "children": [
                                                        {
                                                          "value": "\".txt\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": ".txt",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\".py\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": ".py",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                                              "children": [
                                                {
                                                  "value": "async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                                                  "children": [
                                                    {
                                                      "value": "aiohttp.ClientSession() as session",
                                                      "children": [
                                                        {
                                                          "value": "aiohttp.ClientSession() as session",
                                                          "children": [
                                                            {
                                                              "value": "aiohttp.ClientSession() as session",
                                                              "children": [
                                                                {
                                                                  "value": "aiohttp.ClientSession()",
                                                                  "children": [
                                                                    {
                                                                      "value": "aiohttp.ClientSession",
                                                                      "children": [
                                                                        {
                                                                          "value": "aiohttp",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "ClientSession",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "()",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "session",
                                                                  "children": [
                                                                    {
                                                                      "value": "session",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                                                      "children": [
                                                        {
                                                          "value": "async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                                                          "children": [
                                                            {
                                                              "value": "session.get(attachment.url) as response",
                                                              "children": [
                                                                {
                                                                  "value": "session.get(attachment.url) as response",
                                                                  "children": [
                                                                    {
                                                                      "value": "session.get(attachment.url) as response",
                                                                      "children": [
                                                                        {
                                                                          "value": "session.get(attachment.url)",
                                                                          "children": [
                                                                            {
                                                                              "value": "session.get",
                                                                              "children": [
                                                                                {
                                                                                  "value": "session",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "get",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "(attachment.url)",
                                                                              "children": [
                                                                                {
                                                                                  "value": "attachment.url",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "attachment",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "url",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "response",
                                                                          "children": [
                                                                            {
                                                                              "value": "response",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                                                              "children": [
                                                                {
                                                                  "value": "file_content = await response.text()",
                                                                  "children": [
                                                                    {
                                                                      "value": "file_content = await response.text()",
                                                                      "children": [
                                                                        {
                                                                          "value": "file_content",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "await response.text()",
                                                                          "children": [
                                                                            {
                                                                              "value": "response.text()",
                                                                              "children": [
                                                                                {
                                                                                  "value": "response.text",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "response",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "text",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "()",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "self.output_data",
                                                                          "children": [
                                                                            {
                                                                              "value": "self",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "output_data",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                                                                          "children": [
                                                                            {
                                                                              "value": "f\"",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "\\n\\nFile from user:",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\\n",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "\\n",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "{attachment.filename}",
                                                                              "children": [
                                                                                {
                                                                                  "value": "attachment.filename",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "attachment",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "filename",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "\\nContent:",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\\n",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "{file_content}",
                                                                              "children": [
                                                                                {
                                                                                  "value": "file_content",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "\"",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "await client.close()",
                                  "children": [
                                    {
                                      "value": "await client.close()",
                                      "children": [
                                        {
                                          "value": "client.close()",
                                          "children": [
                                            {
                                              "value": "client.close",
                                              "children": [
                                                {
                                                  "value": "client",
                                                  "children": []
                                                },
                                                {
                                                  "value": "close",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "await client.start(token.get_secret_value())",
                      "children": [
                        {
                          "value": "await client.start(token.get_secret_value())",
                          "children": [
                            {
                              "value": "client.start(token.get_secret_value())",
                              "children": [
                                {
                                  "value": "client.start",
                                  "children": [
                                    {
                                      "value": "client",
                                      "children": []
                                    },
                                    {
                                      "value": "start",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(token.get_secret_value())",
                                  "children": [
                                    {
                                      "value": "token.get_secret_value()",
                                      "children": [
                                        {
                                          "value": "token.get_secret_value",
                                          "children": [
                                            {
                                              "value": "token",
                                              "children": []
                                            },
                                            {
                                              "value": "get_secret_value",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        while True:\n            for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value\n            break",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "*",
                      "children": []
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "while True:\n            for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value\n            break",
                  "children": [
                    {
                      "value": "while True:\n            for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value\n            break",
                      "children": [
                        {
                          "value": "True",
                          "children": []
                        },
                        {
                          "value": "for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value\n            break",
                          "children": [
                            {
                              "value": "for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value",
                              "children": [
                                {
                                  "value": "output_name, output_value",
                                  "children": [
                                    {
                                      "value": "output_name",
                                      "children": []
                                    },
                                    {
                                      "value": "output_value",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.__run(input_data, credentials)",
                                  "children": [
                                    {
                                      "value": "self.__run",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "__run",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(input_data, credentials)",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "credentials",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "yield output_name, output_value",
                                  "children": [
                                    {
                                      "value": "yield output_name, output_value",
                                      "children": [
                                        {
                                          "value": "yield output_name, output_value",
                                          "children": [
                                            {
                                              "value": "output_name, output_value",
                                              "children": [
                                                {
                                                  "value": "output_name",
                                                  "children": []
                                                },
                                                {
                                                  "value": "output_value",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "break",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")\n\n            if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n                raise ValueError(\"No message, channel name, or username received.\")\n\n            yield \"message_content\", self.output_data\n            yield \"channel_name\", self.channel_name\n            yield \"username\", self.username\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
              "children": [
                {
                  "value": "__run",
                  "children": []
                },
                {
                  "value": "(self, input_data: Input, credentials: APIKeyCredentials)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "try:\n            loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")\n\n            if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n                raise ValueError(\"No message, channel name, or username received.\")\n\n            yield \"message_content\", self.output_data\n            yield \"channel_name\", self.channel_name\n            yield \"username\", self.username\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
                  "children": [
                    {
                      "value": "try:\n            loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")\n\n            if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n                raise ValueError(\"No message, channel name, or username received.\")\n\n            yield \"message_content\", self.output_data\n            yield \"channel_name\", self.channel_name\n            yield \"username\", self.username\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
                      "children": [
                        {
                          "value": "loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")\n\n            if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n                raise ValueError(\"No message, channel name, or username received.\")\n\n            yield \"message_content\", self.output_data\n            yield \"channel_name\", self.channel_name\n            yield \"username\", self.username",
                          "children": [
                            {
                              "value": "loop = asyncio.get_event_loop()",
                              "children": [
                                {
                                  "value": "loop = asyncio.get_event_loop()",
                                  "children": [
                                    {
                                      "value": "loop",
                                      "children": []
                                    },
                                    {
                                      "value": "asyncio.get_event_loop()",
                                      "children": [
                                        {
                                          "value": "asyncio.get_event_loop",
                                          "children": [
                                            {
                                              "value": "asyncio",
                                              "children": []
                                            },
                                            {
                                              "value": "get_event_loop",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "future = self.run_bot(credentials.api_key)",
                              "children": [
                                {
                                  "value": "future = self.run_bot(credentials.api_key)",
                                  "children": [
                                    {
                                      "value": "future",
                                      "children": []
                                    },
                                    {
                                      "value": "self.run_bot(credentials.api_key)",
                                      "children": [
                                        {
                                          "value": "self.run_bot",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "run_bot",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(credentials.api_key)",
                                          "children": [
                                            {
                                              "value": "credentials.api_key",
                                              "children": [
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "api_key",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# If it's a Future (mock), set the result",
                              "children": []
                            },
                            {
                              "value": "if isinstance(future, asyncio.Future):\n                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )",
                              "children": [
                                {
                                  "value": "isinstance(future, asyncio.Future)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(future, asyncio.Future)",
                                      "children": [
                                        {
                                          "value": "future",
                                          "children": []
                                        },
                                        {
                                          "value": "asyncio.Future",
                                          "children": [
                                            {
                                              "value": "asyncio",
                                              "children": []
                                            },
                                            {
                                              "value": "Future",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )",
                                  "children": [
                                    {
                                      "value": "future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )",
                                      "children": [
                                        {
                                          "value": "future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )",
                                          "children": [
                                            {
                                              "value": "future.set_result",
                                              "children": [
                                                {
                                                  "value": "future",
                                                  "children": []
                                                },
                                                {
                                                  "value": "set_result",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )",
                                              "children": [
                                                {
                                                  "value": "{\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }",
                                                  "children": [
                                                    {
                                                      "value": "\"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\"",
                                                      "children": [
                                                        {
                                                          "value": "\"output_data\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "output_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.",
                                                              "children": [
                                                                {
                                                                  "value": "\\n",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\\n",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\\n",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"channel_name\": \"general\"",
                                                      "children": [
                                                        {
                                                          "value": "\"channel_name\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "channel_name",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"general\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "general",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"username\": \"test_user\"",
                                                      "children": [
                                                        {
                                                          "value": "\"username\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "username",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"test_user\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "test_user",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "result = loop.run_until_complete(future)",
                              "children": [
                                {
                                  "value": "result = loop.run_until_complete(future)",
                                  "children": [
                                    {
                                      "value": "result",
                                      "children": []
                                    },
                                    {
                                      "value": "loop.run_until_complete(future)",
                                      "children": [
                                        {
                                          "value": "loop.run_until_complete",
                                          "children": [
                                            {
                                              "value": "loop",
                                              "children": []
                                            },
                                            {
                                              "value": "run_until_complete",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(future)",
                                          "children": [
                                            {
                                              "value": "future",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# For testing purposes, use the mocked result",
                              "children": []
                            },
                            {
                              "value": "if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")",
                              "children": [
                                {
                                  "value": "isinstance(result, dict)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(result, dict)",
                                      "children": [
                                        {
                                          "value": "result",
                                          "children": []
                                        },
                                        {
                                          "value": "dict",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")",
                                  "children": [
                                    {
                                      "value": "self.output_data = result.get(\"output_data\")",
                                      "children": [
                                        {
                                          "value": "self.output_data = result.get(\"output_data\")",
                                          "children": [
                                            {
                                              "value": "self.output_data",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "output_data",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "result.get(\"output_data\")",
                                              "children": [
                                                {
                                                  "value": "result.get",
                                                  "children": [
                                                    {
                                                      "value": "result",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "get",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\"output_data\")",
                                                  "children": [
                                                    {
                                                      "value": "\"output_data\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "output_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.channel_name = result.get(\"channel_name\")",
                                      "children": [
                                        {
                                          "value": "self.channel_name = result.get(\"channel_name\")",
                                          "children": [
                                            {
                                              "value": "self.channel_name",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "channel_name",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "result.get(\"channel_name\")",
                                              "children": [
                                                {
                                                  "value": "result.get",
                                                  "children": [
                                                    {
                                                      "value": "result",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "get",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\"channel_name\")",
                                                  "children": [
                                                    {
                                                      "value": "\"channel_name\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "channel_name",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.username = result.get(\"username\")",
                                      "children": [
                                        {
                                          "value": "self.username = result.get(\"username\")",
                                          "children": [
                                            {
                                              "value": "self.username",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "username",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "result.get(\"username\")",
                                              "children": [
                                                {
                                                  "value": "result.get",
                                                  "children": [
                                                    {
                                                      "value": "result",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "get",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\"username\")",
                                                  "children": [
                                                    {
                                                      "value": "\"username\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "username",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n                raise ValueError(\"No message, channel name, or username received.\")",
                              "children": [
                                {
                                  "value": "(\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            )",
                                  "children": [
                                    {
                                      "value": "self.output_data is None\n                or self.channel_name is None\n                or self.username is None",
                                      "children": [
                                        {
                                          "value": "self.output_data is None\n                or self.channel_name is None",
                                          "children": [
                                            {
                                              "value": "self.output_data is None",
                                              "children": [
                                                {
                                                  "value": "self.output_data",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "output_data",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "None",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "self.channel_name is None",
                                              "children": [
                                                {
                                                  "value": "self.channel_name",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "channel_name",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "None",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "self.username is None",
                                          "children": [
                                            {
                                              "value": "self.username",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "username",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "None",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise ValueError(\"No message, channel name, or username received.\")",
                                  "children": [
                                    {
                                      "value": "raise ValueError(\"No message, channel name, or username received.\")",
                                      "children": [
                                        {
                                          "value": "ValueError(\"No message, channel name, or username received.\")",
                                          "children": [
                                            {
                                              "value": "ValueError",
                                              "children": []
                                            },
                                            {
                                              "value": "(\"No message, channel name, or username received.\")",
                                              "children": [
                                                {
                                                  "value": "\"No message, channel name, or username received.\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "No message, channel name, or username received.",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "yield \"message_content\", self.output_data",
                              "children": [
                                {
                                  "value": "yield \"message_content\", self.output_data",
                                  "children": [
                                    {
                                      "value": "\"message_content\", self.output_data",
                                      "children": [
                                        {
                                          "value": "\"message_content\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "message_content",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "self.output_data",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "output_data",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "yield \"channel_name\", self.channel_name",
                              "children": [
                                {
                                  "value": "yield \"channel_name\", self.channel_name",
                                  "children": [
                                    {
                                      "value": "\"channel_name\", self.channel_name",
                                      "children": [
                                        {
                                          "value": "\"channel_name\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "channel_name",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "self.channel_name",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "channel_name",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "yield \"username\", self.username",
                              "children": [
                                {
                                  "value": "yield \"username\", self.username",
                                  "children": [
                                    {
                                      "value": "\"username\", self.username",
                                      "children": [
                                        {
                                          "value": "\"username\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "username",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "self.username",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "username",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")",
                          "children": [
                            {
                              "value": "discord.errors.LoginFailure as login_err",
                              "children": [
                                {
                                  "value": "discord.errors.LoginFailure",
                                  "children": [
                                    {
                                      "value": "discord.errors",
                                      "children": [
                                        {
                                          "value": "discord",
                                          "children": []
                                        },
                                        {
                                          "value": "errors",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "LoginFailure",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "login_err",
                                  "children": [
                                    {
                                      "value": "login_err",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(f\"Login error occurred: {login_err}\")",
                              "children": [
                                {
                                  "value": "raise ValueError(f\"Login error occurred: {login_err}\")",
                                  "children": [
                                    {
                                      "value": "ValueError(f\"Login error occurred: {login_err}\")",
                                      "children": [
                                        {
                                          "value": "ValueError",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"Login error occurred: {login_err}\")",
                                          "children": [
                                            {
                                              "value": "f\"Login error occurred: {login_err}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Login error occurred:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{login_err}",
                                                  "children": [
                                                    {
                                                      "value": "login_err",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
                          "children": [
                            {
                              "value": "Exception as e",
                              "children": [
                                {
                                  "value": "Exception",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(f\"An error occurred: {e}\")",
                              "children": [
                                {
                                  "value": "raise ValueError(f\"An error occurred: {e}\")",
                                  "children": [
                                    {
                                      "value": "ValueError(f\"An error occurred: {e}\")",
                                      "children": [
                                        {
                                          "value": "ValueError",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"An error occurred: {e}\")",
                                          "children": [
                                            {
                                              "value": "f\"An error occurred: {e}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "An error occurred:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{e}",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class SendDiscordMessageBlock(Block):\n    class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n\n    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n\n    async def send_message(self, token: str, channel_name: str, message_content: str):\n        intents = discord.Intents.default()\n        intents.guilds = True  # Required for fetching guild/channel information\n        client = discord.Client(intents=intents)\n\n        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n            for guild in client.guilds:\n                for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n\n            self.output_data = \"Channel not found\"\n            await client.close()\n\n        await client.start(token)\n\n    def chunk_message(self, message: str, limit: int = 2000) -> list:\n        \"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"\n        return [message[i : i + limit] for i in range(0, len(message), limit)]\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\"Message sent\")\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, str):\n                self.output_data = result\n\n            if self.output_data is None:\n                raise ValueError(\"No status message received.\")\n\n            yield \"status\", self.output_data\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
      "children": [
        {
          "value": "SendDiscordMessageBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n\n    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n\n    async def send_message(self, token: str, channel_name: str, message_content: str):\n        intents = discord.Intents.default()\n        intents.guilds = True  # Required for fetching guild/channel information\n        client = discord.Client(intents=intents)\n\n        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n            for guild in client.guilds:\n                for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n\n            self.output_data = \"Channel not found\"\n            await client.close()\n\n        await client.start(token)\n\n    def chunk_message(self, message: str, limit: int = 2000) -> list:\n        \"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"\n        return [message[i : i + limit] for i in range(0, len(message), limit)]\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\"Message sent\")\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, str):\n                self.output_data = result\n\n            if self.output_data is None:\n                raise ValueError(\"No status message received.\")\n\n            yield \"status\", self.output_data\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "credentials: DiscordCredentials = DiscordCredentialsField()\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )",
                  "children": [
                    {
                      "value": "credentials: DiscordCredentials = DiscordCredentialsField()",
                      "children": [
                        {
                          "value": "credentials: DiscordCredentials = DiscordCredentialsField()",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "DiscordCredentials",
                              "children": [
                                {
                                  "value": "DiscordCredentials",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "DiscordCredentialsField()",
                              "children": [
                                {
                                  "value": "DiscordCredentialsField",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )",
                      "children": [
                        {
                          "value": "message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )",
                          "children": [
                            {
                              "value": "message_content",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The content of the message received\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The content of the message received\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The content of the message received\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The content of the message received\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The content of the message received",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )",
                      "children": [
                        {
                          "value": "channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )",
                          "children": [
                            {
                              "value": "channel_name",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The name of the channel the message was received from\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The name of the channel the message was received from\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The name of the channel the message was received from\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The name of the channel the message was received from",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "status: str = SchemaField(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )",
                  "children": [
                    {
                      "value": "status: str = SchemaField(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )",
                      "children": [
                        {
                          "value": "status: str = SchemaField(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )",
                          "children": [
                            {
                              "value": "status",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The status of the operation (e.g., 'Message sent', 'Error')\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The status of the operation (e.g., 'Message sent', 'Error')\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The status of the operation (e.g., 'Message sent', 'Error')",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
                              "children": [
                                {
                                  "value": "id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "d0822ab5-9f8a-44a3-8971-531dd0178b6b",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=SendDiscordMessageBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "SendDiscordMessageBlock.Input",
                                      "children": [
                                        {
                                          "value": "SendDiscordMessageBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Assign input schema",
                                  "children": []
                                },
                                {
                                  "value": "output_schema=SendDiscordMessageBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "SendDiscordMessageBlock.Output",
                                      "children": [
                                        {
                                          "value": "SendDiscordMessageBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Assign output schema",
                                  "children": []
                                },
                                {
                                  "value": "description=\"Sends a message to a Discord channel using a bot token.\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Sends a message to a Discord channel using a bot token.\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Sends a message to a Discord channel using a bot token.",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.SOCIAL}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.SOCIAL}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.SOCIAL",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "SOCIAL",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            }",
                                  "children": [
                                    {
                                      "value": "test_input",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            }",
                                      "children": [
                                        {
                                          "value": "\"channel_name\": \"general\"",
                                          "children": [
                                            {
                                              "value": "\"channel_name\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "channel_name",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"general\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "general",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"message_content\": \"Hello, Discord!\"",
                                          "children": [
                                            {
                                              "value": "\"message_content\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "message_content",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"Hello, Discord!\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Hello, Discord!",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"credentials\": TEST_CREDENTIALS_INPUT",
                                          "children": [
                                            {
                                              "value": "\"credentials\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "TEST_CREDENTIALS_INPUT",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_output=[(\"status\", \"Message sent\")]",
                                  "children": [
                                    {
                                      "value": "test_output",
                                      "children": []
                                    },
                                    {
                                      "value": "[(\"status\", \"Message sent\")]",
                                      "children": [
                                        {
                                          "value": "(\"status\", \"Message sent\")",
                                          "children": [
                                            {
                                              "value": "\"status\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "status",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"Message sent\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Message sent",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            }",
                                  "children": [
                                    {
                                      "value": "test_mock",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            }",
                                      "children": [
                                        {
                                          "value": "\"send_message\": lambda token, channel_name, message_content: asyncio.Future()",
                                          "children": [
                                            {
                                              "value": "\"send_message\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "send_message",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "lambda token, channel_name, message_content: asyncio.Future()",
                                              "children": [
                                                {
                                                  "value": "token, channel_name, message_content",
                                                  "children": [
                                                    {
                                                      "value": "token",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "channel_name",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "message_content",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "asyncio.Future()",
                                                  "children": [
                                                    {
                                                      "value": "asyncio.Future",
                                                      "children": [
                                                        {
                                                          "value": "asyncio",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Future",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_credentials=TEST_CREDENTIALS",
                                  "children": [
                                    {
                                      "value": "test_credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "TEST_CREDENTIALS",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def send_message(self, token: str, channel_name: str, message_content: str):\n        intents = discord.Intents.default()\n        intents.guilds = True  # Required for fetching guild/channel information\n        client = discord.Client(intents=intents)\n\n        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n            for guild in client.guilds:\n                for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n\n            self.output_data = \"Channel not found\"\n            await client.close()\n\n        await client.start(token)",
              "children": [
                {
                  "value": "send_message",
                  "children": []
                },
                {
                  "value": "(self, token: str, channel_name: str, message_content: str)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "token: str",
                      "children": [
                        {
                          "value": "token",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "channel_name: str",
                      "children": [
                        {
                          "value": "channel_name",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "message_content: str",
                      "children": [
                        {
                          "value": "message_content",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "intents = discord.Intents.default()\n        intents.guilds = True  # Required for fetching guild/channel information\n        client = discord.Client(intents=intents)\n\n        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n            for guild in client.guilds:\n                for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n\n            self.output_data = \"Channel not found\"\n            await client.close()\n\n        await client.start(token)",
                  "children": [
                    {
                      "value": "intents = discord.Intents.default()",
                      "children": [
                        {
                          "value": "intents = discord.Intents.default()",
                          "children": [
                            {
                              "value": "intents",
                              "children": []
                            },
                            {
                              "value": "discord.Intents.default()",
                              "children": [
                                {
                                  "value": "discord.Intents.default",
                                  "children": [
                                    {
                                      "value": "discord.Intents",
                                      "children": [
                                        {
                                          "value": "discord",
                                          "children": []
                                        },
                                        {
                                          "value": "Intents",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "intents.guilds = True",
                      "children": [
                        {
                          "value": "intents.guilds = True",
                          "children": [
                            {
                              "value": "intents.guilds",
                              "children": [
                                {
                                  "value": "intents",
                                  "children": []
                                },
                                {
                                  "value": "guilds",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "True",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Required for fetching guild/channel information",
                      "children": []
                    },
                    {
                      "value": "client = discord.Client(intents=intents)",
                      "children": [
                        {
                          "value": "client = discord.Client(intents=intents)",
                          "children": [
                            {
                              "value": "client",
                              "children": []
                            },
                            {
                              "value": "discord.Client(intents=intents)",
                              "children": [
                                {
                                  "value": "discord.Client",
                                  "children": [
                                    {
                                      "value": "discord",
                                      "children": []
                                    },
                                    {
                                      "value": "Client",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(intents=intents)",
                                  "children": [
                                    {
                                      "value": "intents=intents",
                                      "children": [
                                        {
                                          "value": "intents",
                                          "children": []
                                        },
                                        {
                                          "value": "intents",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "@client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n            for guild in client.guilds:\n                for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n\n            self.output_data = \"Channel not found\"\n            await client.close()",
                      "children": [
                        {
                          "value": "@client.event",
                          "children": [
                            {
                              "value": "client.event",
                              "children": [
                                {
                                  "value": "client",
                                  "children": []
                                },
                                {
                                  "value": "event",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "async def on_ready():\n            print(f\"Logged in as {client.user}\")\n            for guild in client.guilds:\n                for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n\n            self.output_data = \"Channel not found\"\n            await client.close()",
                          "children": [
                            {
                              "value": "on_ready",
                              "children": []
                            },
                            {
                              "value": "()",
                              "children": []
                            },
                            {
                              "value": "print(f\"Logged in as {client.user}\")\n            for guild in client.guilds:\n                for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n\n            self.output_data = \"Channel not found\"\n            await client.close()",
                              "children": [
                                {
                                  "value": "print(f\"Logged in as {client.user}\")",
                                  "children": [
                                    {
                                      "value": "print(f\"Logged in as {client.user}\")",
                                      "children": [
                                        {
                                          "value": "print",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"Logged in as {client.user}\")",
                                          "children": [
                                            {
                                              "value": "f\"Logged in as {client.user}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Logged in as",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{client.user}",
                                                  "children": [
                                                    {
                                                      "value": "client.user",
                                                      "children": [
                                                        {
                                                          "value": "client",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "user",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for guild in client.guilds:\n                for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return",
                                  "children": [
                                    {
                                      "value": "guild",
                                      "children": []
                                    },
                                    {
                                      "value": "client.guilds",
                                      "children": [
                                        {
                                          "value": "client",
                                          "children": []
                                        },
                                        {
                                          "value": "guilds",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return",
                                      "children": [
                                        {
                                          "value": "for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return",
                                          "children": [
                                            {
                                              "value": "channel",
                                              "children": []
                                            },
                                            {
                                              "value": "guild.text_channels",
                                              "children": [
                                                {
                                                  "value": "guild",
                                                  "children": []
                                                },
                                                {
                                                  "value": "text_channels",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return",
                                              "children": [
                                                {
                                                  "value": "if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return",
                                                  "children": [
                                                    {
                                                      "value": "channel.name == channel_name",
                                                      "children": [
                                                        {
                                                          "value": "channel.name",
                                                          "children": [
                                                            {
                                                              "value": "channel",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "name",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "channel_name",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "# Split message into chunks if it exceeds 2000 characters",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return",
                                                      "children": [
                                                        {
                                                          "value": "for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)",
                                                          "children": [
                                                            {
                                                              "value": "chunk",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "self.chunk_message(message_content)",
                                                              "children": [
                                                                {
                                                                  "value": "self.chunk_message",
                                                                  "children": [
                                                                    {
                                                                      "value": "self",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "chunk_message",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "(message_content)",
                                                                  "children": [
                                                                    {
                                                                      "value": "message_content",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "await channel.send(chunk)",
                                                              "children": [
                                                                {
                                                                  "value": "await channel.send(chunk)",
                                                                  "children": [
                                                                    {
                                                                      "value": "await channel.send(chunk)",
                                                                      "children": [
                                                                        {
                                                                          "value": "channel.send(chunk)",
                                                                          "children": [
                                                                            {
                                                                              "value": "channel.send",
                                                                              "children": [
                                                                                {
                                                                                  "value": "channel",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "send",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "(chunk)",
                                                                              "children": [
                                                                                {
                                                                                  "value": "chunk",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "self.output_data = \"Message sent\"",
                                                          "children": [
                                                            {
                                                              "value": "self.output_data = \"Message sent\"",
                                                              "children": [
                                                                {
                                                                  "value": "self.output_data",
                                                                  "children": [
                                                                    {
                                                                      "value": "self",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "output_data",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"Message sent\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "Message sent",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "await client.close()",
                                                          "children": [
                                                            {
                                                              "value": "await client.close()",
                                                              "children": [
                                                                {
                                                                  "value": "client.close()",
                                                                  "children": [
                                                                    {
                                                                      "value": "client.close",
                                                                      "children": [
                                                                        {
                                                                          "value": "client",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "close",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "()",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "return",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.output_data = \"Channel not found\"",
                                  "children": [
                                    {
                                      "value": "self.output_data = \"Channel not found\"",
                                      "children": [
                                        {
                                          "value": "self.output_data",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "output_data",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"Channel not found\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Channel not found",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "await client.close()",
                                  "children": [
                                    {
                                      "value": "await client.close()",
                                      "children": [
                                        {
                                          "value": "client.close()",
                                          "children": [
                                            {
                                              "value": "client.close",
                                              "children": [
                                                {
                                                  "value": "client",
                                                  "children": []
                                                },
                                                {
                                                  "value": "close",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "await client.start(token)",
                      "children": [
                        {
                          "value": "await client.start(token)",
                          "children": [
                            {
                              "value": "client.start(token)",
                              "children": [
                                {
                                  "value": "client.start",
                                  "children": [
                                    {
                                      "value": "client",
                                      "children": []
                                    },
                                    {
                                      "value": "start",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(token)",
                                  "children": [
                                    {
                                      "value": "token",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def chunk_message(self, message: str, limit: int = 2000) -> list:\n        \"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"\n        return [message[i : i + limit] for i in range(0, len(message), limit)]",
              "children": [
                {
                  "value": "chunk_message",
                  "children": []
                },
                {
                  "value": "(self, message: str, limit: int = 2000)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "message: str",
                      "children": [
                        {
                          "value": "message",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "limit: int = 2000",
                      "children": [
                        {
                          "value": "limit",
                          "children": []
                        },
                        {
                          "value": "int",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "2000",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "list",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"\n        return [message[i : i + limit] for i in range(0, len(message), limit)]",
                  "children": [
                    {
                      "value": "\"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Splits a message into chunks not exceeding the Discord limit.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return [message[i : i + limit] for i in range(0, len(message), limit)]",
                      "children": [
                        {
                          "value": "[message[i : i + limit] for i in range(0, len(message), limit)]",
                          "children": [
                            {
                              "value": "message[i : i + limit]",
                              "children": [
                                {
                                  "value": "message",
                                  "children": []
                                },
                                {
                                  "value": "i : i + limit",
                                  "children": [
                                    {
                                      "value": "i",
                                      "children": []
                                    },
                                    {
                                      "value": "i + limit",
                                      "children": [
                                        {
                                          "value": "i",
                                          "children": []
                                        },
                                        {
                                          "value": "limit",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "for i in range(0, len(message), limit)",
                              "children": [
                                {
                                  "value": "i",
                                  "children": []
                                },
                                {
                                  "value": "range(0, len(message), limit)",
                                  "children": [
                                    {
                                      "value": "range",
                                      "children": []
                                    },
                                    {
                                      "value": "(0, len(message), limit)",
                                      "children": [
                                        {
                                          "value": "0",
                                          "children": []
                                        },
                                        {
                                          "value": "len(message)",
                                          "children": [
                                            {
                                              "value": "len",
                                              "children": []
                                            },
                                            {
                                              "value": "(message)",
                                              "children": [
                                                {
                                                  "value": "message",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "limit",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\"Message sent\")\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, str):\n                self.output_data = result\n\n            if self.output_data is None:\n                raise ValueError(\"No status message received.\")\n\n            yield \"status\", self.output_data\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "*",
                      "children": []
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "try:\n            loop = asyncio.get_event_loop()\n            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\"Message sent\")\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, str):\n                self.output_data = result\n\n            if self.output_data is None:\n                raise ValueError(\"No status message received.\")\n\n            yield \"status\", self.output_data\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
                  "children": [
                    {
                      "value": "try:\n            loop = asyncio.get_event_loop()\n            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\"Message sent\")\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, str):\n                self.output_data = result\n\n            if self.output_data is None:\n                raise ValueError(\"No status message received.\")\n\n            yield \"status\", self.output_data\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
                      "children": [
                        {
                          "value": "loop = asyncio.get_event_loop()\n            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\"Message sent\")\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, str):\n                self.output_data = result\n\n            if self.output_data is None:\n                raise ValueError(\"No status message received.\")\n\n            yield \"status\", self.output_data",
                          "children": [
                            {
                              "value": "loop = asyncio.get_event_loop()",
                              "children": [
                                {
                                  "value": "loop = asyncio.get_event_loop()",
                                  "children": [
                                    {
                                      "value": "loop",
                                      "children": []
                                    },
                                    {
                                      "value": "asyncio.get_event_loop()",
                                      "children": [
                                        {
                                          "value": "asyncio.get_event_loop",
                                          "children": [
                                            {
                                              "value": "asyncio",
                                              "children": []
                                            },
                                            {
                                              "value": "get_event_loop",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )",
                              "children": [
                                {
                                  "value": "future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )",
                                  "children": [
                                    {
                                      "value": "future",
                                      "children": []
                                    },
                                    {
                                      "value": "self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )",
                                      "children": [
                                        {
                                          "value": "self.send_message",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "send_message",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )",
                                          "children": [
                                            {
                                              "value": "credentials.api_key.get_secret_value()",
                                              "children": [
                                                {
                                                  "value": "credentials.api_key.get_secret_value",
                                                  "children": [
                                                    {
                                                      "value": "credentials.api_key",
                                                      "children": [
                                                        {
                                                          "value": "credentials",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "api_key",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "get_secret_value",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "input_data.channel_name",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "channel_name",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "input_data.message_content",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "message_content",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# If it's a Future (mock), set the result",
                              "children": []
                            },
                            {
                              "value": "if isinstance(future, asyncio.Future):\n                future.set_result(\"Message sent\")",
                              "children": [
                                {
                                  "value": "isinstance(future, asyncio.Future)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(future, asyncio.Future)",
                                      "children": [
                                        {
                                          "value": "future",
                                          "children": []
                                        },
                                        {
                                          "value": "asyncio.Future",
                                          "children": [
                                            {
                                              "value": "asyncio",
                                              "children": []
                                            },
                                            {
                                              "value": "Future",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "future.set_result(\"Message sent\")",
                                  "children": [
                                    {
                                      "value": "future.set_result(\"Message sent\")",
                                      "children": [
                                        {
                                          "value": "future.set_result(\"Message sent\")",
                                          "children": [
                                            {
                                              "value": "future.set_result",
                                              "children": [
                                                {
                                                  "value": "future",
                                                  "children": []
                                                },
                                                {
                                                  "value": "set_result",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\"Message sent\")",
                                              "children": [
                                                {
                                                  "value": "\"Message sent\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Message sent",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "result = loop.run_until_complete(future)",
                              "children": [
                                {
                                  "value": "result = loop.run_until_complete(future)",
                                  "children": [
                                    {
                                      "value": "result",
                                      "children": []
                                    },
                                    {
                                      "value": "loop.run_until_complete(future)",
                                      "children": [
                                        {
                                          "value": "loop.run_until_complete",
                                          "children": [
                                            {
                                              "value": "loop",
                                              "children": []
                                            },
                                            {
                                              "value": "run_until_complete",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(future)",
                                          "children": [
                                            {
                                              "value": "future",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# For testing purposes, use the mocked result",
                              "children": []
                            },
                            {
                              "value": "if isinstance(result, str):\n                self.output_data = result",
                              "children": [
                                {
                                  "value": "isinstance(result, str)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(result, str)",
                                      "children": [
                                        {
                                          "value": "result",
                                          "children": []
                                        },
                                        {
                                          "value": "str",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.output_data = result",
                                  "children": [
                                    {
                                      "value": "self.output_data = result",
                                      "children": [
                                        {
                                          "value": "self.output_data = result",
                                          "children": [
                                            {
                                              "value": "self.output_data",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "output_data",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "result",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if self.output_data is None:\n                raise ValueError(\"No status message received.\")",
                              "children": [
                                {
                                  "value": "self.output_data is None",
                                  "children": [
                                    {
                                      "value": "self.output_data",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "output_data",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "raise ValueError(\"No status message received.\")",
                                  "children": [
                                    {
                                      "value": "raise ValueError(\"No status message received.\")",
                                      "children": [
                                        {
                                          "value": "ValueError(\"No status message received.\")",
                                          "children": [
                                            {
                                              "value": "ValueError",
                                              "children": []
                                            },
                                            {
                                              "value": "(\"No status message received.\")",
                                              "children": [
                                                {
                                                  "value": "\"No status message received.\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "No status message received.",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "yield \"status\", self.output_data",
                              "children": [
                                {
                                  "value": "yield \"status\", self.output_data",
                                  "children": [
                                    {
                                      "value": "\"status\", self.output_data",
                                      "children": [
                                        {
                                          "value": "\"status\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "status",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "self.output_data",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "output_data",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")",
                          "children": [
                            {
                              "value": "discord.errors.LoginFailure as login_err",
                              "children": [
                                {
                                  "value": "discord.errors.LoginFailure",
                                  "children": [
                                    {
                                      "value": "discord.errors",
                                      "children": [
                                        {
                                          "value": "discord",
                                          "children": []
                                        },
                                        {
                                          "value": "errors",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "LoginFailure",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "login_err",
                                  "children": [
                                    {
                                      "value": "login_err",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(f\"Login error occurred: {login_err}\")",
                              "children": [
                                {
                                  "value": "raise ValueError(f\"Login error occurred: {login_err}\")",
                                  "children": [
                                    {
                                      "value": "ValueError(f\"Login error occurred: {login_err}\")",
                                      "children": [
                                        {
                                          "value": "ValueError",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"Login error occurred: {login_err}\")",
                                          "children": [
                                            {
                                              "value": "f\"Login error occurred: {login_err}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Login error occurred:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{login_err}",
                                                  "children": [
                                                    {
                                                      "value": "login_err",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
                          "children": [
                            {
                              "value": "Exception as e",
                              "children": [
                                {
                                  "value": "Exception",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(f\"An error occurred: {e}\")",
                              "children": [
                                {
                                  "value": "raise ValueError(f\"An error occurred: {e}\")",
                                  "children": [
                                    {
                                      "value": "ValueError(f\"An error occurred: {e}\")",
                                      "children": [
                                        {
                                          "value": "ValueError",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"An error occurred: {e}\")",
                                          "children": [
                                            {
                                              "value": "f\"An error occurred: {e}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "An error occurred:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{e}",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}