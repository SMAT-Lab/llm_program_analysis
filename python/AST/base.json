{
  "value": "import logging\nimport time\nfrom abc import ABC, abstractmethod\nfrom typing import ClassVar\n\nfrom backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\n\nlogger = logging.getLogger(__name__)\n\n\nclass BaseOAuthHandler(ABC):\n    # --8<-- [start:BaseOAuthHandler1]\n    PROVIDER_NAME: ClassVar[ProviderName]\n    DEFAULT_SCOPES: ClassVar[list[str]] = []\n    # --8<-- [end:BaseOAuthHandler1]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler2]\n    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...\n\n    # --8<-- [end:BaseOAuthHandler2]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler3]\n    def get_login_url(self, scopes: list[str], state: str) -> str:\n        # --8<-- [end:BaseOAuthHandler3]\n        \"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler4]\n    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler4]\n        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler5]\n    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler5]\n        \"\"\"Implements the token refresh mechanism\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler6]\n    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # --8<-- [end:BaseOAuthHandler6]\n        \"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"\n        ...\n\n    def refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )\n        return self._refresh_tokens(credentials)\n\n    def get_access_token(self, credentials: OAuth2Credentials) -> str:\n        \"\"\"Returns a valid access token, refreshing it first if needed\"\"\"\n        if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)\n        return credentials.access_token.get_secret_value()\n\n    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        \"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\n        return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )\n\n    def handle_default_scopes(self, scopes: list[str]) -> list[str]:\n        \"\"\"Handles the default scopes for the provider\"\"\"\n        # If scopes are empty, use the default scopes for the provider\n        if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES\n        return scopes",
  "children": [
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import time",
      "children": [
        {
          "value": "time",
          "children": [
            {
              "value": "time",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from abc import ABC, abstractmethod",
      "children": [
        {
          "value": "abc",
          "children": [
            {
              "value": "abc",
              "children": []
            }
          ]
        },
        {
          "value": "ABC",
          "children": [
            {
              "value": "ABC",
              "children": []
            }
          ]
        },
        {
          "value": "abstractmethod",
          "children": [
            {
              "value": "abstractmethod",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import ClassVar",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "ClassVar",
          "children": [
            {
              "value": "ClassVar",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import OAuth2Credentials",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "OAuth2Credentials",
          "children": [
            {
              "value": "OAuth2Credentials",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.providers import ProviderName",
      "children": [
        {
          "value": "backend.integrations.providers",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "providers",
              "children": []
            }
          ]
        },
        {
          "value": "ProviderName",
          "children": [
            {
              "value": "ProviderName",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class BaseOAuthHandler(ABC):\n    # --8<-- [start:BaseOAuthHandler1]\n    PROVIDER_NAME: ClassVar[ProviderName]\n    DEFAULT_SCOPES: ClassVar[list[str]] = []\n    # --8<-- [end:BaseOAuthHandler1]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler2]\n    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...\n\n    # --8<-- [end:BaseOAuthHandler2]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler3]\n    def get_login_url(self, scopes: list[str], state: str) -> str:\n        # --8<-- [end:BaseOAuthHandler3]\n        \"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler4]\n    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler4]\n        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler5]\n    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler5]\n        \"\"\"Implements the token refresh mechanism\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler6]\n    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # --8<-- [end:BaseOAuthHandler6]\n        \"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"\n        ...\n\n    def refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )\n        return self._refresh_tokens(credentials)\n\n    def get_access_token(self, credentials: OAuth2Credentials) -> str:\n        \"\"\"Returns a valid access token, refreshing it first if needed\"\"\"\n        if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)\n        return credentials.access_token.get_secret_value()\n\n    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        \"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\n        return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )\n\n    def handle_default_scopes(self, scopes: list[str]) -> list[str]:\n        \"\"\"Handles the default scopes for the provider\"\"\"\n        # If scopes are empty, use the default scopes for the provider\n        if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES\n        return scopes",
      "children": [
        {
          "value": "BaseOAuthHandler",
          "children": []
        },
        {
          "value": "(ABC)",
          "children": [
            {
              "value": "ABC",
              "children": []
            }
          ]
        },
        {
          "value": "# --8<-- [start:BaseOAuthHandler1]",
          "children": []
        },
        {
          "value": "PROVIDER_NAME: ClassVar[ProviderName]\n    DEFAULT_SCOPES: ClassVar[list[str]] = []\n    # --8<-- [end:BaseOAuthHandler1]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler2]\n    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...\n\n    # --8<-- [end:BaseOAuthHandler2]\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler3]\n    def get_login_url(self, scopes: list[str], state: str) -> str:\n        # --8<-- [end:BaseOAuthHandler3]\n        \"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler4]\n    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler4]\n        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler5]\n    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler5]\n        \"\"\"Implements the token refresh mechanism\"\"\"\n        ...\n\n    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler6]\n    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # --8<-- [end:BaseOAuthHandler6]\n        \"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"\n        ...\n\n    def refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )\n        return self._refresh_tokens(credentials)\n\n    def get_access_token(self, credentials: OAuth2Credentials) -> str:\n        \"\"\"Returns a valid access token, refreshing it first if needed\"\"\"\n        if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)\n        return credentials.access_token.get_secret_value()\n\n    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        \"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\n        return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )\n\n    def handle_default_scopes(self, scopes: list[str]) -> list[str]:\n        \"\"\"Handles the default scopes for the provider\"\"\"\n        # If scopes are empty, use the default scopes for the provider\n        if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES\n        return scopes",
          "children": [
            {
              "value": "PROVIDER_NAME: ClassVar[ProviderName]",
              "children": [
                {
                  "value": "PROVIDER_NAME: ClassVar[ProviderName]",
                  "children": [
                    {
                      "value": "PROVIDER_NAME",
                      "children": []
                    },
                    {
                      "value": "ClassVar[ProviderName]",
                      "children": [
                        {
                          "value": "ClassVar[ProviderName]",
                          "children": [
                            {
                              "value": "ClassVar",
                              "children": []
                            },
                            {
                              "value": "[ProviderName]",
                              "children": [
                                {
                                  "value": "ProviderName",
                                  "children": [
                                    {
                                      "value": "ProviderName",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "DEFAULT_SCOPES: ClassVar[list[str]] = []",
              "children": [
                {
                  "value": "DEFAULT_SCOPES: ClassVar[list[str]] = []",
                  "children": [
                    {
                      "value": "DEFAULT_SCOPES",
                      "children": []
                    },
                    {
                      "value": "ClassVar[list[str]]",
                      "children": [
                        {
                          "value": "ClassVar[list[str]]",
                          "children": [
                            {
                              "value": "ClassVar",
                              "children": []
                            },
                            {
                              "value": "[list[str]]",
                              "children": [
                                {
                                  "value": "list[str]",
                                  "children": [
                                    {
                                      "value": "list[str]",
                                      "children": [
                                        {
                                          "value": "list",
                                          "children": []
                                        },
                                        {
                                          "value": "[str]",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# --8<-- [end:BaseOAuthHandler1]",
              "children": []
            },
            {
              "value": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler2]\n    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...",
              "children": [
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# --8<-- [start:BaseOAuthHandler2]",
                  "children": []
                },
                {
                  "value": "def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...",
                  "children": [
                    {
                      "value": "__init__",
                      "children": []
                    },
                    {
                      "value": "(self, client_id: str, client_secret: str, redirect_uri: str)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "client_id: str",
                          "children": [
                            {
                              "value": "client_id",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "client_secret: str",
                          "children": [
                            {
                              "value": "client_secret",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "redirect_uri: str",
                          "children": [
                            {
                              "value": "redirect_uri",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "...",
                      "children": [
                        {
                          "value": "...",
                          "children": [
                            {
                              "value": "...",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# --8<-- [end:BaseOAuthHandler2]",
              "children": []
            },
            {
              "value": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler3]\n    def get_login_url(self, scopes: list[str], state: str) -> str:\n        # --8<-- [end:BaseOAuthHandler3]\n        \"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n        ...",
              "children": [
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# --8<-- [start:BaseOAuthHandler3]",
                  "children": []
                },
                {
                  "value": "def get_login_url(self, scopes: list[str], state: str) -> str:\n        # --8<-- [end:BaseOAuthHandler3]\n        \"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n        ...",
                  "children": [
                    {
                      "value": "get_login_url",
                      "children": []
                    },
                    {
                      "value": "(self, scopes: list[str], state: str)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "scopes: list[str]",
                          "children": [
                            {
                              "value": "scopes",
                              "children": []
                            },
                            {
                              "value": "list[str]",
                              "children": [
                                {
                                  "value": "list[str]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[str]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "state: str",
                          "children": [
                            {
                              "value": "state",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "# --8<-- [end:BaseOAuthHandler3]",
                      "children": []
                    },
                    {
                      "value": "\"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n        ...",
                      "children": [
                        {
                          "value": "\"\"\"Constructs a login URL that the user can be redirected to\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"Constructs a login URL that the user can be redirected to\"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Constructs a login URL that the user can be redirected to",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "...",
                          "children": [
                            {
                              "value": "...",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler4]\n    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler4]\n        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...",
              "children": [
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# --8<-- [start:BaseOAuthHandler4]",
                  "children": []
                },
                {
                  "value": "def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler4]\n        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...",
                  "children": [
                    {
                      "value": "exchange_code_for_tokens",
                      "children": []
                    },
                    {
                      "value": "(\n        self, code: str, scopes: list[str]\n    )",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "code: str",
                          "children": [
                            {
                              "value": "code",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "scopes: list[str]",
                          "children": [
                            {
                              "value": "scopes",
                              "children": []
                            },
                            {
                              "value": "list[str]",
                              "children": [
                                {
                                  "value": "list[str]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[str]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "OAuth2Credentials",
                      "children": [
                        {
                          "value": "OAuth2Credentials",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "# --8<-- [end:BaseOAuthHandler4]",
                      "children": []
                    },
                    {
                      "value": "\"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...",
                      "children": [
                        {
                          "value": "\"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Exchanges the acquired authorization code from login for a set of tokens",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "...",
                          "children": [
                            {
                              "value": "...",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler5]\n    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler5]\n        \"\"\"Implements the token refresh mechanism\"\"\"\n        ...",
              "children": [
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# --8<-- [start:BaseOAuthHandler5]",
                  "children": []
                },
                {
                  "value": "def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler5]\n        \"\"\"Implements the token refresh mechanism\"\"\"\n        ...",
                  "children": [
                    {
                      "value": "_refresh_tokens",
                      "children": []
                    },
                    {
                      "value": "(self, credentials: OAuth2Credentials)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "credentials: OAuth2Credentials",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "OAuth2Credentials",
                              "children": [
                                {
                                  "value": "OAuth2Credentials",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "OAuth2Credentials",
                      "children": [
                        {
                          "value": "OAuth2Credentials",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "# --8<-- [end:BaseOAuthHandler5]",
                      "children": []
                    },
                    {
                      "value": "\"\"\"Implements the token refresh mechanism\"\"\"\n        ...",
                      "children": [
                        {
                          "value": "\"\"\"Implements the token refresh mechanism\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"Implements the token refresh mechanism\"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Implements the token refresh mechanism",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "...",
                          "children": [
                            {
                              "value": "...",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@abstractmethod\n    # --8<-- [start:BaseOAuthHandler6]\n    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # --8<-- [end:BaseOAuthHandler6]\n        \"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"\n        ...",
              "children": [
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# --8<-- [start:BaseOAuthHandler6]",
                  "children": []
                },
                {
                  "value": "def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # --8<-- [end:BaseOAuthHandler6]\n        \"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"\n        ...",
                  "children": [
                    {
                      "value": "revoke_tokens",
                      "children": []
                    },
                    {
                      "value": "(self, credentials: OAuth2Credentials)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "credentials: OAuth2Credentials",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "OAuth2Credentials",
                              "children": [
                                {
                                  "value": "OAuth2Credentials",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "bool",
                      "children": [
                        {
                          "value": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "# --8<-- [end:BaseOAuthHandler6]",
                      "children": []
                    },
                    {
                      "value": "\"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"\n        ...",
                      "children": [
                        {
                          "value": "\"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Revokes the given token at provider,\n        returns False provider does not support it",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "...",
                          "children": [
                            {
                              "value": "...",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )\n        return self._refresh_tokens(credentials)",
              "children": [
                {
                  "value": "refresh_tokens",
                  "children": []
                },
                {
                  "value": "(self, credentials: OAuth2Credentials)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "credentials: OAuth2Credentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "OAuth2Credentials",
                          "children": [
                            {
                              "value": "OAuth2Credentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "OAuth2Credentials",
                  "children": [
                    {
                      "value": "OAuth2Credentials",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )\n        return self._refresh_tokens(credentials)",
                  "children": [
                    {
                      "value": "if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )",
                      "children": [
                        {
                          "value": "credentials.provider != self.PROVIDER_NAME",
                          "children": [
                            {
                              "value": "credentials.provider",
                              "children": [
                                {
                                  "value": "credentials",
                                  "children": []
                                },
                                {
                                  "value": "provider",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "self.PROVIDER_NAME",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "PROVIDER_NAME",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )",
                          "children": [
                            {
                              "value": "raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )",
                              "children": [
                                {
                                  "value": "ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )",
                                      "children": [
                                        {
                                          "value": "f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"",
                                          "children": [
                                            {
                                              "value": "f\"{self.__class__.__name__} can not refresh tokens \"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{self.__class__.__name__}",
                                                  "children": [
                                                    {
                                                      "value": "self.__class__.__name__",
                                                      "children": [
                                                        {
                                                          "value": "self.__class__",
                                                          "children": [
                                                            {
                                                              "value": "self",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "__class__",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "__name__",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "can not refresh tokens",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "f\"for other provider '{credentials.provider}'\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "for other provider '",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{credentials.provider}",
                                                  "children": [
                                                    {
                                                      "value": "credentials.provider",
                                                      "children": [
                                                        {
                                                          "value": "credentials",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "provider",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return self._refresh_tokens(credentials)",
                      "children": [
                        {
                          "value": "self._refresh_tokens(credentials)",
                          "children": [
                            {
                              "value": "self._refresh_tokens",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "_refresh_tokens",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(credentials)",
                              "children": [
                                {
                                  "value": "credentials",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def get_access_token(self, credentials: OAuth2Credentials) -> str:\n        \"\"\"Returns a valid access token, refreshing it first if needed\"\"\"\n        if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)\n        return credentials.access_token.get_secret_value()",
              "children": [
                {
                  "value": "get_access_token",
                  "children": []
                },
                {
                  "value": "(self, credentials: OAuth2Credentials)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "credentials: OAuth2Credentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "OAuth2Credentials",
                          "children": [
                            {
                              "value": "OAuth2Credentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Returns a valid access token, refreshing it first if needed\"\"\"\n        if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)\n        return credentials.access_token.get_secret_value()",
                  "children": [
                    {
                      "value": "\"\"\"Returns a valid access token, refreshing it first if needed\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Returns a valid access token, refreshing it first if needed\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Returns a valid access token, refreshing it first if needed",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)",
                      "children": [
                        {
                          "value": "self.needs_refresh(credentials)",
                          "children": [
                            {
                              "value": "self.needs_refresh",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "needs_refresh",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(credentials)",
                              "children": [
                                {
                                  "value": "credentials",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "credentials = self.refresh_tokens(credentials)",
                          "children": [
                            {
                              "value": "credentials = self.refresh_tokens(credentials)",
                              "children": [
                                {
                                  "value": "credentials = self.refresh_tokens(credentials)",
                                  "children": [
                                    {
                                      "value": "credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "self.refresh_tokens(credentials)",
                                      "children": [
                                        {
                                          "value": "self.refresh_tokens",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "refresh_tokens",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(credentials)",
                                          "children": [
                                            {
                                              "value": "credentials",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return credentials.access_token.get_secret_value()",
                      "children": [
                        {
                          "value": "credentials.access_token.get_secret_value()",
                          "children": [
                            {
                              "value": "credentials.access_token.get_secret_value",
                              "children": [
                                {
                                  "value": "credentials.access_token",
                                  "children": [
                                    {
                                      "value": "credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "access_token",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "get_secret_value",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        \"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\n        return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )",
              "children": [
                {
                  "value": "needs_refresh",
                  "children": []
                },
                {
                  "value": "(self, credentials: OAuth2Credentials)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "credentials: OAuth2Credentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "OAuth2Credentials",
                          "children": [
                            {
                              "value": "OAuth2Credentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\n        return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )",
                  "children": [
                    {
                      "value": "\"\"\"Indicates whether the given tokens need to be refreshed\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Indicates whether the given tokens need to be refreshed\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Indicates whether the given tokens need to be refreshed",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )",
                      "children": [
                        {
                          "value": "(\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )",
                          "children": [
                            {
                              "value": "credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300",
                              "children": [
                                {
                                  "value": "credentials.access_token_expires_at is not None",
                                  "children": [
                                    {
                                      "value": "credentials.access_token_expires_at",
                                      "children": [
                                        {
                                          "value": "credentials",
                                          "children": []
                                        },
                                        {
                                          "value": "access_token_expires_at",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "credentials.access_token_expires_at < int(time.time()) + 300",
                                  "children": [
                                    {
                                      "value": "credentials.access_token_expires_at",
                                      "children": [
                                        {
                                          "value": "credentials",
                                          "children": []
                                        },
                                        {
                                          "value": "access_token_expires_at",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "int(time.time()) + 300",
                                      "children": [
                                        {
                                          "value": "int(time.time())",
                                          "children": [
                                            {
                                              "value": "int",
                                              "children": []
                                            },
                                            {
                                              "value": "(time.time())",
                                              "children": [
                                                {
                                                  "value": "time.time()",
                                                  "children": [
                                                    {
                                                      "value": "time.time",
                                                      "children": [
                                                        {
                                                          "value": "time",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "time",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "300",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def handle_default_scopes(self, scopes: list[str]) -> list[str]:\n        \"\"\"Handles the default scopes for the provider\"\"\"\n        # If scopes are empty, use the default scopes for the provider\n        if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES\n        return scopes",
              "children": [
                {
                  "value": "handle_default_scopes",
                  "children": []
                },
                {
                  "value": "(self, scopes: list[str])",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "scopes: list[str]",
                      "children": [
                        {
                          "value": "scopes",
                          "children": []
                        },
                        {
                          "value": "list[str]",
                          "children": [
                            {
                              "value": "list[str]",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "[str]",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "list[str]",
                  "children": [
                    {
                      "value": "list[str]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[str]",
                          "children": [
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"\"\"Handles the default scopes for the provider\"\"\"\n        # If scopes are empty, use the default scopes for the provider\n        if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES\n        return scopes",
                  "children": [
                    {
                      "value": "\"\"\"Handles the default scopes for the provider\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Handles the default scopes for the provider\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Handles the default scopes for the provider",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# If scopes are empty, use the default scopes for the provider",
                      "children": []
                    },
                    {
                      "value": "if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES",
                      "children": [
                        {
                          "value": "not scopes",
                          "children": [
                            {
                              "value": "scopes",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES",
                          "children": [
                            {
                              "value": "logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )",
                              "children": [
                                {
                                  "value": "logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )",
                                  "children": [
                                    {
                                      "value": "logger.debug",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "debug",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )",
                                      "children": [
                                        {
                                          "value": "f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Using default scopes for provider",
                                              "children": []
                                            },
                                            {
                                              "value": "{self.PROVIDER_NAME.value}",
                                              "children": [
                                                {
                                                  "value": "self.PROVIDER_NAME.value",
                                                  "children": [
                                                    {
                                                      "value": "self.PROVIDER_NAME",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "PROVIDER_NAME",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "scopes = self.DEFAULT_SCOPES",
                              "children": [
                                {
                                  "value": "scopes = self.DEFAULT_SCOPES",
                                  "children": [
                                    {
                                      "value": "scopes",
                                      "children": []
                                    },
                                    {
                                      "value": "self.DEFAULT_SCOPES",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "DEFAULT_SCOPES",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return scopes",
                      "children": [
                        {
                          "value": "scopes",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}