{
  "value": "# Knight Tour Intro: https://www.youtube.com/watch?v=ab_dY3dZFHM\n\nfrom __future__ import annotations\n\n\ndef get_valid_pos(position: tuple[int, int], n: int) -> list[tuple[int, int]]:\n    \"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\n\n    y, x = position\n    positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]\n    permissible_positions = []\n\n    for inner_position in positions:\n        y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)\n\n    return permissible_positions\n\n\ndef is_complete(board: list[list[int]]) -> bool:\n    \"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"\n\n    return not any(elem == 0 for row in board for elem in row)\n\n\ndef open_knight_tour_helper(\n    board: list[list[int]], pos: tuple[int, int], curr: int\n) -> bool:\n    \"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\n\n    if is_complete(board):\n        return True\n\n    for position in get_valid_pos(pos, len(board)):\n        y, x = position\n\n        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0\n\n    return False\n\n\ndef open_knight_tour(n: int) -> list[list[int]]:\n    \"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"\n\n    board = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0\n\n    msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"\n    raise ValueError(msg)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "children": [
    {
      "value": "# Knight Tour Intro: https://www.youtube.com/watch?v=ab_dY3dZFHM",
      "children": []
    },
    {
      "value": "from __future__ import annotations",
      "children": [
        {
          "value": "annotations",
          "children": [
            {
              "value": "annotations",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def get_valid_pos(position: tuple[int, int], n: int) -> list[tuple[int, int]]:\n    \"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\n\n    y, x = position\n    positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]\n    permissible_positions = []\n\n    for inner_position in positions:\n        y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)\n\n    return permissible_positions",
      "children": [
        {
          "value": "get_valid_pos",
          "children": []
        },
        {
          "value": "(position: tuple[int, int], n: int)",
          "children": [
            {
              "value": "position: tuple[int, int]",
              "children": [
                {
                  "value": "position",
                  "children": []
                },
                {
                  "value": "tuple[int, int]",
                  "children": [
                    {
                      "value": "tuple[int, int]",
                      "children": [
                        {
                          "value": "tuple",
                          "children": []
                        },
                        {
                          "value": "[int, int]",
                          "children": [
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "n: int",
              "children": [
                {
                  "value": "n",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "list[tuple[int, int]]",
          "children": [
            {
              "value": "list[tuple[int, int]]",
              "children": [
                {
                  "value": "list",
                  "children": []
                },
                {
                  "value": "[tuple[int, int]]",
                  "children": [
                    {
                      "value": "tuple[int, int]",
                      "children": [
                        {
                          "value": "tuple[int, int]",
                          "children": [
                            {
                              "value": "tuple",
                              "children": []
                            },
                            {
                              "value": "[int, int]",
                              "children": [
                                {
                                  "value": "int",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "int",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\n\n    y, x = position\n    positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]\n    permissible_positions = []\n\n    for inner_position in positions:\n        y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)\n\n    return permissible_positions",
          "children": [
            {
              "value": "\"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "y, x = position",
              "children": [
                {
                  "value": "y, x = position",
                  "children": [
                    {
                      "value": "y, x",
                      "children": [
                        {
                          "value": "y",
                          "children": []
                        },
                        {
                          "value": "x",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "position",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]",
              "children": [
                {
                  "value": "positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]",
                  "children": [
                    {
                      "value": "positions",
                      "children": []
                    },
                    {
                      "value": "[\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]",
                      "children": [
                        {
                          "value": "(y + 1, x + 2)",
                          "children": [
                            {
                              "value": "y + 1",
                              "children": [
                                {
                                  "value": "y",
                                  "children": []
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "x + 2",
                              "children": [
                                {
                                  "value": "x",
                                  "children": []
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "(y - 1, x + 2)",
                          "children": [
                            {
                              "value": "y - 1",
                              "children": [
                                {
                                  "value": "y",
                                  "children": []
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "x + 2",
                              "children": [
                                {
                                  "value": "x",
                                  "children": []
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "(y + 1, x - 2)",
                          "children": [
                            {
                              "value": "y + 1",
                              "children": [
                                {
                                  "value": "y",
                                  "children": []
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "x - 2",
                              "children": [
                                {
                                  "value": "x",
                                  "children": []
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "(y - 1, x - 2)",
                          "children": [
                            {
                              "value": "y - 1",
                              "children": [
                                {
                                  "value": "y",
                                  "children": []
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "x - 2",
                              "children": [
                                {
                                  "value": "x",
                                  "children": []
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "(y + 2, x + 1)",
                          "children": [
                            {
                              "value": "y + 2",
                              "children": [
                                {
                                  "value": "y",
                                  "children": []
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "x + 1",
                              "children": [
                                {
                                  "value": "x",
                                  "children": []
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "(y + 2, x - 1)",
                          "children": [
                            {
                              "value": "y + 2",
                              "children": [
                                {
                                  "value": "y",
                                  "children": []
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "x - 1",
                              "children": [
                                {
                                  "value": "x",
                                  "children": []
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "(y - 2, x + 1)",
                          "children": [
                            {
                              "value": "y - 2",
                              "children": [
                                {
                                  "value": "y",
                                  "children": []
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "x + 1",
                              "children": [
                                {
                                  "value": "x",
                                  "children": []
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "(y - 2, x - 1)",
                          "children": [
                            {
                              "value": "y - 2",
                              "children": [
                                {
                                  "value": "y",
                                  "children": []
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "x - 1",
                              "children": [
                                {
                                  "value": "x",
                                  "children": []
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "permissible_positions = []",
              "children": [
                {
                  "value": "permissible_positions = []",
                  "children": [
                    {
                      "value": "permissible_positions",
                      "children": []
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "for inner_position in positions:\n        y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)",
              "children": [
                {
                  "value": "inner_position",
                  "children": []
                },
                {
                  "value": "positions",
                  "children": []
                },
                {
                  "value": "y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)",
                  "children": [
                    {
                      "value": "y_test, x_test = inner_position",
                      "children": [
                        {
                          "value": "y_test, x_test = inner_position",
                          "children": [
                            {
                              "value": "y_test, x_test",
                              "children": [
                                {
                                  "value": "y_test",
                                  "children": []
                                },
                                {
                                  "value": "x_test",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "inner_position",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)",
                      "children": [
                        {
                          "value": "0 <= y_test < n and 0 <= x_test < n",
                          "children": [
                            {
                              "value": "0 <= y_test < n",
                              "children": [
                                {
                                  "value": "0",
                                  "children": []
                                },
                                {
                                  "value": "y_test",
                                  "children": []
                                },
                                {
                                  "value": "n",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0 <= x_test < n",
                              "children": [
                                {
                                  "value": "0",
                                  "children": []
                                },
                                {
                                  "value": "x_test",
                                  "children": []
                                },
                                {
                                  "value": "n",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "permissible_positions.append(inner_position)",
                          "children": [
                            {
                              "value": "permissible_positions.append(inner_position)",
                              "children": [
                                {
                                  "value": "permissible_positions.append(inner_position)",
                                  "children": [
                                    {
                                      "value": "permissible_positions.append",
                                      "children": [
                                        {
                                          "value": "permissible_positions",
                                          "children": []
                                        },
                                        {
                                          "value": "append",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(inner_position)",
                                      "children": [
                                        {
                                          "value": "inner_position",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return permissible_positions",
              "children": [
                {
                  "value": "permissible_positions",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def is_complete(board: list[list[int]]) -> bool:\n    \"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"\n\n    return not any(elem == 0 for row in board for elem in row)",
      "children": [
        {
          "value": "is_complete",
          "children": []
        },
        {
          "value": "(board: list[list[int]])",
          "children": [
            {
              "value": "board: list[list[int]]",
              "children": [
                {
                  "value": "board",
                  "children": []
                },
                {
                  "value": "list[list[int]]",
                  "children": [
                    {
                      "value": "list[list[int]]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[list[int]]",
                          "children": [
                            {
                              "value": "list[int]",
                              "children": [
                                {
                                  "value": "list[int]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[int]",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": [
                                            {
                                              "value": "int",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "bool",
          "children": [
            {
              "value": "bool",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"\n\n    return not any(elem == 0 for row in board for elem in row)",
          "children": [
            {
              "value": "\"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "return not any(elem == 0 for row in board for elem in row)",
              "children": [
                {
                  "value": "not any(elem == 0 for row in board for elem in row)",
                  "children": [
                    {
                      "value": "any(elem == 0 for row in board for elem in row)",
                      "children": [
                        {
                          "value": "any",
                          "children": []
                        },
                        {
                          "value": "(elem == 0 for row in board for elem in row)",
                          "children": [
                            {
                              "value": "elem == 0",
                              "children": [
                                {
                                  "value": "elem",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "for row in board",
                              "children": [
                                {
                                  "value": "row",
                                  "children": []
                                },
                                {
                                  "value": "board",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "for elem in row",
                              "children": [
                                {
                                  "value": "elem",
                                  "children": []
                                },
                                {
                                  "value": "row",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def open_knight_tour_helper(\n    board: list[list[int]], pos: tuple[int, int], curr: int\n) -> bool:\n    \"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\n\n    if is_complete(board):\n        return True\n\n    for position in get_valid_pos(pos, len(board)):\n        y, x = position\n\n        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0\n\n    return False",
      "children": [
        {
          "value": "open_knight_tour_helper",
          "children": []
        },
        {
          "value": "(\n    board: list[list[int]], pos: tuple[int, int], curr: int\n)",
          "children": [
            {
              "value": "board: list[list[int]]",
              "children": [
                {
                  "value": "board",
                  "children": []
                },
                {
                  "value": "list[list[int]]",
                  "children": [
                    {
                      "value": "list[list[int]]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[list[int]]",
                          "children": [
                            {
                              "value": "list[int]",
                              "children": [
                                {
                                  "value": "list[int]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[int]",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": [
                                            {
                                              "value": "int",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "pos: tuple[int, int]",
              "children": [
                {
                  "value": "pos",
                  "children": []
                },
                {
                  "value": "tuple[int, int]",
                  "children": [
                    {
                      "value": "tuple[int, int]",
                      "children": [
                        {
                          "value": "tuple",
                          "children": []
                        },
                        {
                          "value": "[int, int]",
                          "children": [
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "curr: int",
              "children": [
                {
                  "value": "curr",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "bool",
          "children": [
            {
              "value": "bool",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\n\n    if is_complete(board):\n        return True\n\n    for position in get_valid_pos(pos, len(board)):\n        y, x = position\n\n        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0\n\n    return False",
          "children": [
            {
              "value": "\"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Helper function to solve knight tour problem.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if is_complete(board):\n        return True",
              "children": [
                {
                  "value": "is_complete(board)",
                  "children": [
                    {
                      "value": "is_complete",
                      "children": []
                    },
                    {
                      "value": "(board)",
                      "children": [
                        {
                          "value": "board",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return True",
                  "children": [
                    {
                      "value": "return True",
                      "children": [
                        {
                          "value": "True",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for position in get_valid_pos(pos, len(board)):\n        y, x = position\n\n        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0",
              "children": [
                {
                  "value": "position",
                  "children": []
                },
                {
                  "value": "get_valid_pos(pos, len(board))",
                  "children": [
                    {
                      "value": "get_valid_pos",
                      "children": []
                    },
                    {
                      "value": "(pos, len(board))",
                      "children": [
                        {
                          "value": "pos",
                          "children": []
                        },
                        {
                          "value": "len(board)",
                          "children": [
                            {
                              "value": "len",
                              "children": []
                            },
                            {
                              "value": "(board)",
                              "children": [
                                {
                                  "value": "board",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "y, x = position\n\n        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0",
                  "children": [
                    {
                      "value": "y, x = position",
                      "children": [
                        {
                          "value": "y, x = position",
                          "children": [
                            {
                              "value": "y, x",
                              "children": [
                                {
                                  "value": "y",
                                  "children": []
                                },
                                {
                                  "value": "x",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "position",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0",
                      "children": [
                        {
                          "value": "board[y][x] == 0",
                          "children": [
                            {
                              "value": "board[y][x]",
                              "children": [
                                {
                                  "value": "board[y]",
                                  "children": [
                                    {
                                      "value": "board",
                                      "children": []
                                    },
                                    {
                                      "value": "y",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "x",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0",
                          "children": [
                            {
                              "value": "board[y][x] = curr + 1",
                              "children": [
                                {
                                  "value": "board[y][x] = curr + 1",
                                  "children": [
                                    {
                                      "value": "board[y][x]",
                                      "children": [
                                        {
                                          "value": "board[y]",
                                          "children": [
                                            {
                                              "value": "board",
                                              "children": []
                                            },
                                            {
                                              "value": "y",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "x",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "curr + 1",
                                      "children": [
                                        {
                                          "value": "curr",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if open_knight_tour_helper(board, position, curr + 1):\n                return True",
                              "children": [
                                {
                                  "value": "open_knight_tour_helper(board, position, curr + 1)",
                                  "children": [
                                    {
                                      "value": "open_knight_tour_helper",
                                      "children": []
                                    },
                                    {
                                      "value": "(board, position, curr + 1)",
                                      "children": [
                                        {
                                          "value": "board",
                                          "children": []
                                        },
                                        {
                                          "value": "position",
                                          "children": []
                                        },
                                        {
                                          "value": "curr + 1",
                                          "children": [
                                            {
                                              "value": "curr",
                                              "children": []
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return True",
                                  "children": [
                                    {
                                      "value": "return True",
                                      "children": [
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "board[y][x] = 0",
                              "children": [
                                {
                                  "value": "board[y][x] = 0",
                                  "children": [
                                    {
                                      "value": "board[y][x]",
                                      "children": [
                                        {
                                          "value": "board[y]",
                                          "children": [
                                            {
                                              "value": "board",
                                              "children": []
                                            },
                                            {
                                              "value": "y",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "x",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return False",
              "children": [
                {
                  "value": "False",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def open_knight_tour(n: int) -> list[list[int]]:\n    \"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"\n\n    board = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0\n\n    msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"\n    raise ValueError(msg)",
      "children": [
        {
          "value": "open_knight_tour",
          "children": []
        },
        {
          "value": "(n: int)",
          "children": [
            {
              "value": "n: int",
              "children": [
                {
                  "value": "n",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "list[list[int]]",
          "children": [
            {
              "value": "list[list[int]]",
              "children": [
                {
                  "value": "list",
                  "children": []
                },
                {
                  "value": "[list[int]]",
                  "children": [
                    {
                      "value": "list[int]",
                      "children": [
                        {
                          "value": "list[int]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[int]",
                              "children": [
                                {
                                  "value": "int",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"\n\n    board = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0\n\n    msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"\n    raise ValueError(msg)",
          "children": [
            {
              "value": "\"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "board = [[0 for i in range(n)] for j in range(n)]",
              "children": [
                {
                  "value": "board = [[0 for i in range(n)] for j in range(n)]",
                  "children": [
                    {
                      "value": "board",
                      "children": []
                    },
                    {
                      "value": "[[0 for i in range(n)] for j in range(n)]",
                      "children": [
                        {
                          "value": "[0 for i in range(n)]",
                          "children": [
                            {
                              "value": "0",
                              "children": []
                            },
                            {
                              "value": "for i in range(n)",
                              "children": [
                                {
                                  "value": "i",
                                  "children": []
                                },
                                {
                                  "value": "range(n)",
                                  "children": [
                                    {
                                      "value": "range",
                                      "children": []
                                    },
                                    {
                                      "value": "(n)",
                                      "children": [
                                        {
                                          "value": "n",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for j in range(n)",
                          "children": [
                            {
                              "value": "j",
                              "children": []
                            },
                            {
                              "value": "range(n)",
                              "children": [
                                {
                                  "value": "range",
                                  "children": []
                                },
                                {
                                  "value": "(n)",
                                  "children": [
                                    {
                                      "value": "n",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for i in range(n):\n        for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0",
              "children": [
                {
                  "value": "i",
                  "children": []
                },
                {
                  "value": "range(n)",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(n)",
                      "children": [
                        {
                          "value": "n",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0",
                  "children": [
                    {
                      "value": "for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0",
                      "children": [
                        {
                          "value": "j",
                          "children": []
                        },
                        {
                          "value": "range(n)",
                          "children": [
                            {
                              "value": "range",
                              "children": []
                            },
                            {
                              "value": "(n)",
                              "children": [
                                {
                                  "value": "n",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0",
                          "children": [
                            {
                              "value": "board[i][j] = 1",
                              "children": [
                                {
                                  "value": "board[i][j] = 1",
                                  "children": [
                                    {
                                      "value": "board[i][j]",
                                      "children": [
                                        {
                                          "value": "board[i]",
                                          "children": [
                                            {
                                              "value": "board",
                                              "children": []
                                            },
                                            {
                                              "value": "i",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "j",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if open_knight_tour_helper(board, (i, j), 1):\n                return board",
                              "children": [
                                {
                                  "value": "open_knight_tour_helper(board, (i, j), 1)",
                                  "children": [
                                    {
                                      "value": "open_knight_tour_helper",
                                      "children": []
                                    },
                                    {
                                      "value": "(board, (i, j), 1)",
                                      "children": [
                                        {
                                          "value": "board",
                                          "children": []
                                        },
                                        {
                                          "value": "(i, j)",
                                          "children": [
                                            {
                                              "value": "i",
                                              "children": []
                                            },
                                            {
                                              "value": "j",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return board",
                                  "children": [
                                    {
                                      "value": "return board",
                                      "children": [
                                        {
                                          "value": "board",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "board[i][j] = 0",
                              "children": [
                                {
                                  "value": "board[i][j] = 0",
                                  "children": [
                                    {
                                      "value": "board[i][j]",
                                      "children": [
                                        {
                                          "value": "board[i]",
                                          "children": [
                                            {
                                              "value": "board",
                                              "children": []
                                            },
                                            {
                                              "value": "i",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "j",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"",
              "children": [
                {
                  "value": "msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"",
                  "children": [
                    {
                      "value": "msg",
                      "children": []
                    },
                    {
                      "value": "f\"Open Knight Tour cannot be performed on a board of size {n}\"",
                      "children": [
                        {
                          "value": "f\"",
                          "children": []
                        },
                        {
                          "value": "Open Knight Tour cannot be performed on a board of size",
                          "children": []
                        },
                        {
                          "value": "{n}",
                          "children": [
                            {
                              "value": "n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "raise ValueError(msg)",
              "children": [
                {
                  "value": "ValueError(msg)",
                  "children": [
                    {
                      "value": "ValueError",
                      "children": []
                    },
                    {
                      "value": "(msg)",
                      "children": [
                        {
                          "value": "msg",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      "children": [
        {
          "value": "__name__ == \"__main__\"",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "\"__main__\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "import doctest\n\n    doctest.testmod()",
          "children": [
            {
              "value": "import doctest",
              "children": [
                {
                  "value": "doctest",
                  "children": [
                    {
                      "value": "doctest",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "doctest.testmod()",
              "children": [
                {
                  "value": "doctest.testmod()",
                  "children": [
                    {
                      "value": "doctest.testmod",
                      "children": [
                        {
                          "value": "doctest",
                          "children": []
                        },
                        {
                          "value": "testmod",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}