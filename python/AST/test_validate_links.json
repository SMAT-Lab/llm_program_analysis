{
  "value": "# -*- coding: utf-8 -*-\n\nimport unittest\n\nfrom validate.links import find_links_in_text\nfrom validate.links import check_duplicate_links\nfrom validate.links import fake_user_agent\nfrom validate.links import get_host_from_link\nfrom validate.links import has_cloudflare_protection\n\n\nclass FakeResponse():\n    def __init__(self, code: int, headers: dict, text: str) -> None:\n        self.status_code = code\n        self.headers = headers\n        self.text = text\n\n\nclass TestValidateLinks(unittest.TestCase):\n\n    def setUp(self):\n        self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]\n        self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]\n\n        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n\n        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n\n        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'\n\n    def test_find_link_in_text(self):\n        text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\n\n        links = find_links_in_text(text)\n\n        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)\n\n        for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)\n\n    def test_find_link_in_text_with_invalid_argument(self):\n        with self.assertRaises(TypeError):\n            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)\n\n    def test_if_check_duplicate_links_has_the_correct_return(self):\n        result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n\n        self.assertIsInstance(result_1, tuple)\n        self.assertIsInstance(result_2, tuple)\n\n        has_duplicate_links, links = result_1\n        no_duplicate_links, no_links = result_2\n\n        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)\n\n        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)\n\n        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)\n\n    def test_if_fake_user_agent_has_a_str_as_return(self):\n        user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)\n\n    def test_get_host_from_link(self):\n        links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]\n\n        for link in links:\n            host = get_host_from_link(link)\n\n            with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)\n\n        with self.assertRaises(TypeError):\n            get_host_from_link()\n\n    def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n        resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n\n        self.assertTrue(result1)\n        self.assertTrue(result2)\n\n    def test_has_cloudflare_protection_when_there_is_no_protection(self):\n        resp_without_cloudflare_protection1 = FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection2 = FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection3 = FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n\n        self.assertFalse(result1)\n        self.assertFalse(result2)\n        self.assertFalse(result3)",
  "children": [
    {
      "value": "# -*- coding: utf-8 -*-",
      "children": []
    },
    {
      "value": "import unittest",
      "children": [
        {
          "value": "unittest",
          "children": [
            {
              "value": "unittest",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.links import find_links_in_text",
      "children": [
        {
          "value": "validate.links",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "links",
              "children": []
            }
          ]
        },
        {
          "value": "find_links_in_text",
          "children": [
            {
              "value": "find_links_in_text",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.links import check_duplicate_links",
      "children": [
        {
          "value": "validate.links",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "links",
              "children": []
            }
          ]
        },
        {
          "value": "check_duplicate_links",
          "children": [
            {
              "value": "check_duplicate_links",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.links import fake_user_agent",
      "children": [
        {
          "value": "validate.links",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "links",
              "children": []
            }
          ]
        },
        {
          "value": "fake_user_agent",
          "children": [
            {
              "value": "fake_user_agent",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.links import get_host_from_link",
      "children": [
        {
          "value": "validate.links",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "links",
              "children": []
            }
          ]
        },
        {
          "value": "get_host_from_link",
          "children": [
            {
              "value": "get_host_from_link",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.links import has_cloudflare_protection",
      "children": [
        {
          "value": "validate.links",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "links",
              "children": []
            }
          ]
        },
        {
          "value": "has_cloudflare_protection",
          "children": [
            {
              "value": "has_cloudflare_protection",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class FakeResponse():\n    def __init__(self, code: int, headers: dict, text: str) -> None:\n        self.status_code = code\n        self.headers = headers\n        self.text = text",
      "children": [
        {
          "value": "FakeResponse",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "def __init__(self, code: int, headers: dict, text: str) -> None:\n        self.status_code = code\n        self.headers = headers\n        self.text = text",
          "children": [
            {
              "value": "def __init__(self, code: int, headers: dict, text: str) -> None:\n        self.status_code = code\n        self.headers = headers\n        self.text = text",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, code: int, headers: dict, text: str)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "code: int",
                      "children": [
                        {
                          "value": "code",
                          "children": []
                        },
                        {
                          "value": "int",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "headers: dict",
                      "children": [
                        {
                          "value": "headers",
                          "children": []
                        },
                        {
                          "value": "dict",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "text: str",
                      "children": [
                        {
                          "value": "text",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": [
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.status_code = code\n        self.headers = headers\n        self.text = text",
                  "children": [
                    {
                      "value": "self.status_code = code",
                      "children": [
                        {
                          "value": "self.status_code = code",
                          "children": [
                            {
                              "value": "self.status_code",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "status_code",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "code",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.headers = headers",
                      "children": [
                        {
                          "value": "self.headers = headers",
                          "children": [
                            {
                              "value": "self.headers",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "headers",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "headers",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.text = text",
                      "children": [
                        {
                          "value": "self.text = text",
                          "children": [
                            {
                              "value": "self.text",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "text",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "text",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class TestValidateLinks(unittest.TestCase):\n\n    def setUp(self):\n        self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]\n        self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]\n\n        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n\n        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n\n        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'\n\n    def test_find_link_in_text(self):\n        text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\n\n        links = find_links_in_text(text)\n\n        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)\n\n        for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)\n\n    def test_find_link_in_text_with_invalid_argument(self):\n        with self.assertRaises(TypeError):\n            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)\n\n    def test_if_check_duplicate_links_has_the_correct_return(self):\n        result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n\n        self.assertIsInstance(result_1, tuple)\n        self.assertIsInstance(result_2, tuple)\n\n        has_duplicate_links, links = result_1\n        no_duplicate_links, no_links = result_2\n\n        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)\n\n        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)\n\n        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)\n\n    def test_if_fake_user_agent_has_a_str_as_return(self):\n        user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)\n\n    def test_get_host_from_link(self):\n        links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]\n\n        for link in links:\n            host = get_host_from_link(link)\n\n            with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)\n\n        with self.assertRaises(TypeError):\n            get_host_from_link()\n\n    def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n        resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n\n        self.assertTrue(result1)\n        self.assertTrue(result2)\n\n    def test_has_cloudflare_protection_when_there_is_no_protection(self):\n        resp_without_cloudflare_protection1 = FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection2 = FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection3 = FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n\n        self.assertFalse(result1)\n        self.assertFalse(result2)\n        self.assertFalse(result3)",
      "children": [
        {
          "value": "TestValidateLinks",
          "children": []
        },
        {
          "value": "(unittest.TestCase)",
          "children": [
            {
              "value": "unittest.TestCase",
              "children": [
                {
                  "value": "unittest",
                  "children": []
                },
                {
                  "value": "TestCase",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "def setUp(self):\n        self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]\n        self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]\n\n        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n\n        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n\n        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'\n\n    def test_find_link_in_text(self):\n        text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\n\n        links = find_links_in_text(text)\n\n        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)\n\n        for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)\n\n    def test_find_link_in_text_with_invalid_argument(self):\n        with self.assertRaises(TypeError):\n            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)\n\n    def test_if_check_duplicate_links_has_the_correct_return(self):\n        result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n\n        self.assertIsInstance(result_1, tuple)\n        self.assertIsInstance(result_2, tuple)\n\n        has_duplicate_links, links = result_1\n        no_duplicate_links, no_links = result_2\n\n        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)\n\n        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)\n\n        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)\n\n    def test_if_fake_user_agent_has_a_str_as_return(self):\n        user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)\n\n    def test_get_host_from_link(self):\n        links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]\n\n        for link in links:\n            host = get_host_from_link(link)\n\n            with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)\n\n        with self.assertRaises(TypeError):\n            get_host_from_link()\n\n    def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n        resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n\n        self.assertTrue(result1)\n        self.assertTrue(result2)\n\n    def test_has_cloudflare_protection_when_there_is_no_protection(self):\n        resp_without_cloudflare_protection1 = FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection2 = FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection3 = FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n\n        self.assertFalse(result1)\n        self.assertFalse(result2)\n        self.assertFalse(result3)",
          "children": [
            {
              "value": "def setUp(self):\n        self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]\n        self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]\n\n        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n\n        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n\n        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'",
              "children": [
                {
                  "value": "setUp",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]\n        self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]\n\n        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n\n        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n\n        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'",
                  "children": [
                    {
                      "value": "self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]",
                      "children": [
                        {
                          "value": "self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]",
                          "children": [
                            {
                              "value": "self.duplicate_links",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "duplicate_links",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "[\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]",
                              "children": [
                                {
                                  "value": "'https://www.example.com'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://www.example.com",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'https://www.example.com'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://www.example.com",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'https://www.example.com'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://www.example.com",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'https://www.anotherexample.com'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://www.anotherexample.com",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]",
                      "children": [
                        {
                          "value": "self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]",
                          "children": [
                            {
                              "value": "self.no_duplicate_links",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "no_duplicate_links",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "[\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]",
                              "children": [
                                {
                                  "value": "'https://www.firstexample.com'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://www.firstexample.com",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'https://www.secondexample.com'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://www.secondexample.com",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'https://www.anotherexample.com'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://www.anotherexample.com",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.code_200 = 200",
                      "children": [
                        {
                          "value": "self.code_200 = 200",
                          "children": [
                            {
                              "value": "self.code_200",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "code_200",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "200",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.code_403 = 403",
                      "children": [
                        {
                          "value": "self.code_403 = 403",
                          "children": [
                            {
                              "value": "self.code_403",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "code_403",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "403",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.code_503 = 503",
                      "children": [
                        {
                          "value": "self.code_503 = 503",
                          "children": [
                            {
                              "value": "self.code_503",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "code_503",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "503",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.cloudflare_headers = {'Server': 'cloudflare'}",
                      "children": [
                        {
                          "value": "self.cloudflare_headers = {'Server': 'cloudflare'}",
                          "children": [
                            {
                              "value": "self.cloudflare_headers",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "cloudflare_headers",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "{'Server': 'cloudflare'}",
                              "children": [
                                {
                                  "value": "'Server': 'cloudflare'",
                                  "children": [
                                    {
                                      "value": "'Server'",
                                      "children": [
                                        {
                                          "value": "'",
                                          "children": []
                                        },
                                        {
                                          "value": "Server",
                                          "children": []
                                        },
                                        {
                                          "value": "'",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "'cloudflare'",
                                      "children": [
                                        {
                                          "value": "'",
                                          "children": []
                                        },
                                        {
                                          "value": "cloudflare",
                                          "children": []
                                        },
                                        {
                                          "value": "'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.no_cloudflare_headers = {'Server': 'google'}",
                      "children": [
                        {
                          "value": "self.no_cloudflare_headers = {'Server': 'google'}",
                          "children": [
                            {
                              "value": "self.no_cloudflare_headers",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "no_cloudflare_headers",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "{'Server': 'google'}",
                              "children": [
                                {
                                  "value": "'Server': 'google'",
                                  "children": [
                                    {
                                      "value": "'Server'",
                                      "children": [
                                        {
                                          "value": "'",
                                          "children": []
                                        },
                                        {
                                          "value": "Server",
                                          "children": []
                                        },
                                        {
                                          "value": "'",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "'google'",
                                      "children": [
                                        {
                                          "value": "'",
                                          "children": []
                                        },
                                        {
                                          "value": "google",
                                          "children": []
                                        },
                                        {
                                          "value": "'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'",
                      "children": [
                        {
                          "value": "self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'",
                          "children": [
                            {
                              "value": "self.text_with_cloudflare_flags",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "text_with_cloudflare_flags",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "'403 Forbidden Cloudflare We are checking your browser...'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "403 Forbidden Cloudflare We are checking your browser...",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.text_without_cloudflare_flags = 'Lorem Ipsum'",
                      "children": [
                        {
                          "value": "self.text_without_cloudflare_flags = 'Lorem Ipsum'",
                          "children": [
                            {
                              "value": "self.text_without_cloudflare_flags",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "text_without_cloudflare_flags",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "'Lorem Ipsum'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "Lorem Ipsum",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_find_link_in_text(self):\n        text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\n\n        links = find_links_in_text(text)\n\n        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)\n\n        for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)",
              "children": [
                {
                  "value": "test_find_link_in_text",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\n\n        links = find_links_in_text(text)\n\n        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)\n\n        for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)",
                  "children": [
                    {
                      "value": "text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"",
                      "children": [
                        {
                          "value": "text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"",
                          "children": [
                            {
                              "value": "text",
                              "children": []
                            },
                            {
                              "value": "\"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "# this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "links = find_links_in_text(text)",
                      "children": [
                        {
                          "value": "links = find_links_in_text(text)",
                          "children": [
                            {
                              "value": "links",
                              "children": []
                            },
                            {
                              "value": "find_links_in_text(text)",
                              "children": [
                                {
                                  "value": "find_links_in_text",
                                  "children": []
                                },
                                {
                                  "value": "(text)",
                                  "children": [
                                    {
                                      "value": "text",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(links, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(links, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(links, list)",
                              "children": [
                                {
                                  "value": "links",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(links), 7)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(links), 7)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(links), 7)",
                              "children": [
                                {
                                  "value": "len(links)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(links)",
                                      "children": [
                                        {
                                          "value": "links",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "7",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)",
                      "children": [
                        {
                          "value": "link",
                          "children": []
                        },
                        {
                          "value": "links",
                          "children": []
                        },
                        {
                          "value": "with self.subTest():\n                self.assertIsInstance(link, str)",
                          "children": [
                            {
                              "value": "with self.subTest():\n                self.assertIsInstance(link, str)",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.assertIsInstance(link, str)",
                                  "children": [
                                    {
                                      "value": "self.assertIsInstance(link, str)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(link, str)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(link, str)",
                                              "children": [
                                                {
                                                  "value": "link",
                                                  "children": []
                                                },
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_find_link_in_text_with_invalid_argument(self):\n        with self.assertRaises(TypeError):\n            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)",
              "children": [
                {
                  "value": "test_find_link_in_text_with_invalid_argument",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "with self.assertRaises(TypeError):\n            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)",
                  "children": [
                    {
                      "value": "with self.assertRaises(TypeError):\n            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)",
                      "children": [
                        {
                          "value": "self.assertRaises(TypeError)",
                          "children": [
                            {
                              "value": "self.assertRaises(TypeError)",
                              "children": [
                                {
                                  "value": "self.assertRaises(TypeError)",
                                  "children": [
                                    {
                                      "value": "self.assertRaises",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "assertRaises",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(TypeError)",
                                      "children": [
                                        {
                                          "value": "TypeError",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)",
                          "children": [
                            {
                              "value": "find_links_in_text()",
                              "children": [
                                {
                                  "value": "find_links_in_text()",
                                  "children": [
                                    {
                                      "value": "find_links_in_text",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "find_links_in_text(1)",
                              "children": [
                                {
                                  "value": "find_links_in_text(1)",
                                  "children": [
                                    {
                                      "value": "find_links_in_text",
                                      "children": []
                                    },
                                    {
                                      "value": "(1)",
                                      "children": [
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "find_links_in_text(True)",
                              "children": [
                                {
                                  "value": "find_links_in_text(True)",
                                  "children": [
                                    {
                                      "value": "find_links_in_text",
                                      "children": []
                                    },
                                    {
                                      "value": "(True)",
                                      "children": [
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_if_check_duplicate_links_has_the_correct_return(self):\n        result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n\n        self.assertIsInstance(result_1, tuple)\n        self.assertIsInstance(result_2, tuple)\n\n        has_duplicate_links, links = result_1\n        no_duplicate_links, no_links = result_2\n\n        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)\n\n        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)\n\n        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)",
              "children": [
                {
                  "value": "test_if_check_duplicate_links_has_the_correct_return",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n\n        self.assertIsInstance(result_1, tuple)\n        self.assertIsInstance(result_2, tuple)\n\n        has_duplicate_links, links = result_1\n        no_duplicate_links, no_links = result_2\n\n        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)\n\n        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)\n\n        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)",
                  "children": [
                    {
                      "value": "result_1 = check_duplicate_links(self.duplicate_links)",
                      "children": [
                        {
                          "value": "result_1 = check_duplicate_links(self.duplicate_links)",
                          "children": [
                            {
                              "value": "result_1",
                              "children": []
                            },
                            {
                              "value": "check_duplicate_links(self.duplicate_links)",
                              "children": [
                                {
                                  "value": "check_duplicate_links",
                                  "children": []
                                },
                                {
                                  "value": "(self.duplicate_links)",
                                  "children": [
                                    {
                                      "value": "self.duplicate_links",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "duplicate_links",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "result_2 = check_duplicate_links(self.no_duplicate_links)",
                      "children": [
                        {
                          "value": "result_2 = check_duplicate_links(self.no_duplicate_links)",
                          "children": [
                            {
                              "value": "result_2",
                              "children": []
                            },
                            {
                              "value": "check_duplicate_links(self.no_duplicate_links)",
                              "children": [
                                {
                                  "value": "check_duplicate_links",
                                  "children": []
                                },
                                {
                                  "value": "(self.no_duplicate_links)",
                                  "children": [
                                    {
                                      "value": "self.no_duplicate_links",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "no_duplicate_links",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(result_1, tuple)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(result_1, tuple)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(result_1, tuple)",
                              "children": [
                                {
                                  "value": "result_1",
                                  "children": []
                                },
                                {
                                  "value": "tuple",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(result_2, tuple)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(result_2, tuple)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(result_2, tuple)",
                              "children": [
                                {
                                  "value": "result_2",
                                  "children": []
                                },
                                {
                                  "value": "tuple",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "has_duplicate_links, links = result_1",
                      "children": [
                        {
                          "value": "has_duplicate_links, links = result_1",
                          "children": [
                            {
                              "value": "has_duplicate_links, links",
                              "children": [
                                {
                                  "value": "has_duplicate_links",
                                  "children": []
                                },
                                {
                                  "value": "links",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "result_1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "no_duplicate_links, no_links = result_2",
                      "children": [
                        {
                          "value": "no_duplicate_links, no_links = result_2",
                          "children": [
                            {
                              "value": "no_duplicate_links, no_links",
                              "children": [
                                {
                                  "value": "no_duplicate_links",
                                  "children": []
                                },
                                {
                                  "value": "no_links",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "result_2",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertTrue(has_duplicate_links)",
                      "children": [
                        {
                          "value": "self.assertTrue(has_duplicate_links)",
                          "children": [
                            {
                              "value": "self.assertTrue",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertTrue",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(has_duplicate_links)",
                              "children": [
                                {
                                  "value": "has_duplicate_links",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertFalse(no_duplicate_links)",
                      "children": [
                        {
                          "value": "self.assertFalse(no_duplicate_links)",
                          "children": [
                            {
                              "value": "self.assertFalse",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertFalse",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(no_duplicate_links)",
                              "children": [
                                {
                                  "value": "no_duplicate_links",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(links, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(links, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(links, list)",
                              "children": [
                                {
                                  "value": "links",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(no_links, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(no_links, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(no_links, list)",
                              "children": [
                                {
                                  "value": "no_links",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(links), 2)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(links), 2)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(links), 2)",
                              "children": [
                                {
                                  "value": "len(links)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(links)",
                                      "children": [
                                        {
                                          "value": "links",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(no_links), 0)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(no_links), 0)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(no_links), 0)",
                              "children": [
                                {
                                  "value": "len(no_links)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(no_links)",
                                      "children": [
                                        {
                                          "value": "no_links",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_if_fake_user_agent_has_a_str_as_return(self):\n        user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)",
              "children": [
                {
                  "value": "test_if_fake_user_agent_has_a_str_as_return",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)",
                  "children": [
                    {
                      "value": "user_agent = fake_user_agent()",
                      "children": [
                        {
                          "value": "user_agent = fake_user_agent()",
                          "children": [
                            {
                              "value": "user_agent",
                              "children": []
                            },
                            {
                              "value": "fake_user_agent()",
                              "children": [
                                {
                                  "value": "fake_user_agent",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(user_agent, str)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(user_agent, str)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(user_agent, str)",
                              "children": [
                                {
                                  "value": "user_agent",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_get_host_from_link(self):\n        links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]\n\n        for link in links:\n            host = get_host_from_link(link)\n\n            with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)\n\n        with self.assertRaises(TypeError):\n            get_host_from_link()",
              "children": [
                {
                  "value": "test_get_host_from_link",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]\n\n        for link in links:\n            host = get_host_from_link(link)\n\n            with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)\n\n        with self.assertRaises(TypeError):\n            get_host_from_link()",
                  "children": [
                    {
                      "value": "links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]",
                      "children": [
                        {
                          "value": "links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]",
                          "children": [
                            {
                              "value": "links",
                              "children": []
                            },
                            {
                              "value": "[\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]",
                              "children": [
                                {
                                  "value": "'example.com'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "example.com",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'https://example.com'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://example.com",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'https://www.example.com'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://www.example.com",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'https://www.example.com.br'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://www.example.com.br",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'https://www.example.com/route'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://www.example.com/route",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'https://www.example.com?p=1&q=2'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://www.example.com?p=1&q=2",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'https://www.example.com#anchor'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https://www.example.com#anchor",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for link in links:\n            host = get_host_from_link(link)\n\n            with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)",
                      "children": [
                        {
                          "value": "link",
                          "children": []
                        },
                        {
                          "value": "links",
                          "children": []
                        },
                        {
                          "value": "host = get_host_from_link(link)\n\n            with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)",
                          "children": [
                            {
                              "value": "host = get_host_from_link(link)",
                              "children": [
                                {
                                  "value": "host = get_host_from_link(link)",
                                  "children": [
                                    {
                                      "value": "host",
                                      "children": []
                                    },
                                    {
                                      "value": "get_host_from_link(link)",
                                      "children": [
                                        {
                                          "value": "get_host_from_link",
                                          "children": []
                                        },
                                        {
                                          "value": "(link)",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)",
                                  "children": [
                                    {
                                      "value": "self.assertIsInstance(host, str)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(host, str)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(host, str)",
                                              "children": [
                                                {
                                                  "value": "host",
                                                  "children": []
                                                },
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertNotIn('://', host)",
                                      "children": [
                                        {
                                          "value": "self.assertNotIn('://', host)",
                                          "children": [
                                            {
                                              "value": "self.assertNotIn",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertNotIn",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "('://', host)",
                                              "children": [
                                                {
                                                  "value": "'://'",
                                                  "children": [
                                                    {
                                                      "value": "'",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "://",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "'",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "host",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertNotIn('/', host)",
                                      "children": [
                                        {
                                          "value": "self.assertNotIn('/', host)",
                                          "children": [
                                            {
                                              "value": "self.assertNotIn",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertNotIn",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "('/', host)",
                                              "children": [
                                                {
                                                  "value": "'/'",
                                                  "children": [
                                                    {
                                                      "value": "'",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "/",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "'",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "host",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertNotIn('?', host)",
                                      "children": [
                                        {
                                          "value": "self.assertNotIn('?', host)",
                                          "children": [
                                            {
                                              "value": "self.assertNotIn",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertNotIn",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "('?', host)",
                                              "children": [
                                                {
                                                  "value": "'?'",
                                                  "children": [
                                                    {
                                                      "value": "'",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "?",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "'",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "host",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertNotIn('#', host)",
                                      "children": [
                                        {
                                          "value": "self.assertNotIn('#', host)",
                                          "children": [
                                            {
                                              "value": "self.assertNotIn",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertNotIn",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "('#', host)",
                                              "children": [
                                                {
                                                  "value": "'#'",
                                                  "children": [
                                                    {
                                                      "value": "'",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "#",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "'",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "host",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "with self.assertRaises(TypeError):\n            get_host_from_link()",
                      "children": [
                        {
                          "value": "self.assertRaises(TypeError)",
                          "children": [
                            {
                              "value": "self.assertRaises(TypeError)",
                              "children": [
                                {
                                  "value": "self.assertRaises(TypeError)",
                                  "children": [
                                    {
                                      "value": "self.assertRaises",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "assertRaises",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(TypeError)",
                                      "children": [
                                        {
                                          "value": "TypeError",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "get_host_from_link()",
                          "children": [
                            {
                              "value": "get_host_from_link()",
                              "children": [
                                {
                                  "value": "get_host_from_link()",
                                  "children": [
                                    {
                                      "value": "get_host_from_link",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n        resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n\n        self.assertTrue(result1)\n        self.assertTrue(result2)",
              "children": [
                {
                  "value": "test_has_cloudflare_protection_with_code_403_and_503_in_response",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n\n        self.assertTrue(result1)\n        self.assertTrue(result2)",
                  "children": [
                    {
                      "value": "resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )",
                      "children": [
                        {
                          "value": "resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )",
                          "children": [
                            {
                              "value": "resp_with_cloudflare_protection_code_403",
                              "children": []
                            },
                            {
                              "value": "FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )",
                              "children": [
                                {
                                  "value": "FakeResponse",
                                  "children": []
                                },
                                {
                                  "value": "(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )",
                                  "children": [
                                    {
                                      "value": "code=self.code_403",
                                      "children": [
                                        {
                                          "value": "code",
                                          "children": []
                                        },
                                        {
                                          "value": "self.code_403",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "code_403",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "headers=self.cloudflare_headers",
                                      "children": [
                                        {
                                          "value": "headers",
                                          "children": []
                                        },
                                        {
                                          "value": "self.cloudflare_headers",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "cloudflare_headers",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "text=self.text_with_cloudflare_flags",
                                      "children": [
                                        {
                                          "value": "text",
                                          "children": []
                                        },
                                        {
                                          "value": "self.text_with_cloudflare_flags",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "text_with_cloudflare_flags",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )",
                      "children": [
                        {
                          "value": "resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )",
                          "children": [
                            {
                              "value": "resp_with_cloudflare_protection_code_503",
                              "children": []
                            },
                            {
                              "value": "FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )",
                              "children": [
                                {
                                  "value": "FakeResponse",
                                  "children": []
                                },
                                {
                                  "value": "(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )",
                                  "children": [
                                    {
                                      "value": "code=self.code_503",
                                      "children": [
                                        {
                                          "value": "code",
                                          "children": []
                                        },
                                        {
                                          "value": "self.code_503",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "code_503",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "headers=self.cloudflare_headers",
                                      "children": [
                                        {
                                          "value": "headers",
                                          "children": []
                                        },
                                        {
                                          "value": "self.cloudflare_headers",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "cloudflare_headers",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "text=self.text_with_cloudflare_flags",
                                      "children": [
                                        {
                                          "value": "text",
                                          "children": []
                                        },
                                        {
                                          "value": "self.text_with_cloudflare_flags",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "text_with_cloudflare_flags",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)",
                      "children": [
                        {
                          "value": "result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)",
                          "children": [
                            {
                              "value": "result1",
                              "children": []
                            },
                            {
                              "value": "has_cloudflare_protection(resp_with_cloudflare_protection_code_403)",
                              "children": [
                                {
                                  "value": "has_cloudflare_protection",
                                  "children": []
                                },
                                {
                                  "value": "(resp_with_cloudflare_protection_code_403)",
                                  "children": [
                                    {
                                      "value": "resp_with_cloudflare_protection_code_403",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)",
                      "children": [
                        {
                          "value": "result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)",
                          "children": [
                            {
                              "value": "result2",
                              "children": []
                            },
                            {
                              "value": "has_cloudflare_protection(resp_with_cloudflare_protection_code_503)",
                              "children": [
                                {
                                  "value": "has_cloudflare_protection",
                                  "children": []
                                },
                                {
                                  "value": "(resp_with_cloudflare_protection_code_503)",
                                  "children": [
                                    {
                                      "value": "resp_with_cloudflare_protection_code_503",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertTrue(result1)",
                      "children": [
                        {
                          "value": "self.assertTrue(result1)",
                          "children": [
                            {
                              "value": "self.assertTrue",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertTrue",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(result1)",
                              "children": [
                                {
                                  "value": "result1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertTrue(result2)",
                      "children": [
                        {
                          "value": "self.assertTrue(result2)",
                          "children": [
                            {
                              "value": "self.assertTrue",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertTrue",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(result2)",
                              "children": [
                                {
                                  "value": "result2",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_has_cloudflare_protection_when_there_is_no_protection(self):\n        resp_without_cloudflare_protection1 = FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection2 = FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection3 = FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n\n        self.assertFalse(result1)\n        self.assertFalse(result2)\n        self.assertFalse(result3)",
              "children": [
                {
                  "value": "test_has_cloudflare_protection_when_there_is_no_protection",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "resp_without_cloudflare_protection1 = FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection2 = FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection3 = FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n\n        self.assertFalse(result1)\n        self.assertFalse(result2)\n        self.assertFalse(result3)",
                  "children": [
                    {
                      "value": "resp_without_cloudflare_protection1 = FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )",
                      "children": [
                        {
                          "value": "resp_without_cloudflare_protection1 = FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )",
                          "children": [
                            {
                              "value": "resp_without_cloudflare_protection1",
                              "children": []
                            },
                            {
                              "value": "FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )",
                              "children": [
                                {
                                  "value": "FakeResponse",
                                  "children": []
                                },
                                {
                                  "value": "(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )",
                                  "children": [
                                    {
                                      "value": "code=self.code_200",
                                      "children": [
                                        {
                                          "value": "code",
                                          "children": []
                                        },
                                        {
                                          "value": "self.code_200",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "code_200",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "headers=self.no_cloudflare_headers",
                                      "children": [
                                        {
                                          "value": "headers",
                                          "children": []
                                        },
                                        {
                                          "value": "self.no_cloudflare_headers",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "no_cloudflare_headers",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "text=self.text_without_cloudflare_flags",
                                      "children": [
                                        {
                                          "value": "text",
                                          "children": []
                                        },
                                        {
                                          "value": "self.text_without_cloudflare_flags",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "text_without_cloudflare_flags",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "resp_without_cloudflare_protection2 = FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )",
                      "children": [
                        {
                          "value": "resp_without_cloudflare_protection2 = FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )",
                          "children": [
                            {
                              "value": "resp_without_cloudflare_protection2",
                              "children": []
                            },
                            {
                              "value": "FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )",
                              "children": [
                                {
                                  "value": "FakeResponse",
                                  "children": []
                                },
                                {
                                  "value": "(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )",
                                  "children": [
                                    {
                                      "value": "code=self.code_403",
                                      "children": [
                                        {
                                          "value": "code",
                                          "children": []
                                        },
                                        {
                                          "value": "self.code_403",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "code_403",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "headers=self.no_cloudflare_headers",
                                      "children": [
                                        {
                                          "value": "headers",
                                          "children": []
                                        },
                                        {
                                          "value": "self.no_cloudflare_headers",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "no_cloudflare_headers",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "text=self.text_without_cloudflare_flags",
                                      "children": [
                                        {
                                          "value": "text",
                                          "children": []
                                        },
                                        {
                                          "value": "self.text_without_cloudflare_flags",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "text_without_cloudflare_flags",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "resp_without_cloudflare_protection3 = FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )",
                      "children": [
                        {
                          "value": "resp_without_cloudflare_protection3 = FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )",
                          "children": [
                            {
                              "value": "resp_without_cloudflare_protection3",
                              "children": []
                            },
                            {
                              "value": "FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )",
                              "children": [
                                {
                                  "value": "FakeResponse",
                                  "children": []
                                },
                                {
                                  "value": "(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )",
                                  "children": [
                                    {
                                      "value": "code=self.code_503",
                                      "children": [
                                        {
                                          "value": "code",
                                          "children": []
                                        },
                                        {
                                          "value": "self.code_503",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "code_503",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "headers=self.no_cloudflare_headers",
                                      "children": [
                                        {
                                          "value": "headers",
                                          "children": []
                                        },
                                        {
                                          "value": "self.no_cloudflare_headers",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "no_cloudflare_headers",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "text=self.text_without_cloudflare_flags",
                                      "children": [
                                        {
                                          "value": "text",
                                          "children": []
                                        },
                                        {
                                          "value": "self.text_without_cloudflare_flags",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "text_without_cloudflare_flags",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)",
                      "children": [
                        {
                          "value": "result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)",
                          "children": [
                            {
                              "value": "result1",
                              "children": []
                            },
                            {
                              "value": "has_cloudflare_protection(resp_without_cloudflare_protection1)",
                              "children": [
                                {
                                  "value": "has_cloudflare_protection",
                                  "children": []
                                },
                                {
                                  "value": "(resp_without_cloudflare_protection1)",
                                  "children": [
                                    {
                                      "value": "resp_without_cloudflare_protection1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)",
                      "children": [
                        {
                          "value": "result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)",
                          "children": [
                            {
                              "value": "result2",
                              "children": []
                            },
                            {
                              "value": "has_cloudflare_protection(resp_without_cloudflare_protection2)",
                              "children": [
                                {
                                  "value": "has_cloudflare_protection",
                                  "children": []
                                },
                                {
                                  "value": "(resp_without_cloudflare_protection2)",
                                  "children": [
                                    {
                                      "value": "resp_without_cloudflare_protection2",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)",
                      "children": [
                        {
                          "value": "result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)",
                          "children": [
                            {
                              "value": "result3",
                              "children": []
                            },
                            {
                              "value": "has_cloudflare_protection(resp_without_cloudflare_protection3)",
                              "children": [
                                {
                                  "value": "has_cloudflare_protection",
                                  "children": []
                                },
                                {
                                  "value": "(resp_without_cloudflare_protection3)",
                                  "children": [
                                    {
                                      "value": "resp_without_cloudflare_protection3",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertFalse(result1)",
                      "children": [
                        {
                          "value": "self.assertFalse(result1)",
                          "children": [
                            {
                              "value": "self.assertFalse",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertFalse",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(result1)",
                              "children": [
                                {
                                  "value": "result1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertFalse(result2)",
                      "children": [
                        {
                          "value": "self.assertFalse(result2)",
                          "children": [
                            {
                              "value": "self.assertFalse",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertFalse",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(result2)",
                              "children": [
                                {
                                  "value": "result2",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertFalse(result3)",
                      "children": [
                        {
                          "value": "self.assertFalse(result3)",
                          "children": [
                            {
                              "value": "self.assertFalse",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertFalse",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(result3)",
                              "children": [
                                {
                                  "value": "result3",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}