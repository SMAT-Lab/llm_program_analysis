{
  "value": "from __future__ import annotations\n\n\nclass IIRFilter:\n    r\"\"\"\n    N-Order IIR filter\n    Assumes working with float samples normalized on [-1, 1]\n\n    ---\n\n    Implementation details:\n    Based on the 2nd-order function from\n    https://en.wikipedia.org/wiki/Digital_biquad_filter,\n    this generalized N-order function was made.\n\n    Using the following transfer function\n        .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}}\n                  {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}}\n\n    we can rewrite this to\n        .. math:: y[n]={\\frac{1}{a_{0}}}\n                  \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)-\n                  \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right)\n    \"\"\"\n\n    def __init__(self, order: int) -> None:\n        self.order = order\n\n        # a_{0} ... a_{k}\n        self.a_coeffs = [1.0] + [0.0] * order\n        # b_{0} ... b_{k}\n        self.b_coeffs = [1.0] + [0.0] * order\n\n        # x[n-1] ... x[n-k]\n        self.input_history = [0.0] * self.order\n        # y[n-1] ... y[n-k]\n        self.output_history = [0.0] * self.order\n\n    def set_coefficients(self, a_coeffs: list[float], b_coeffs: list[float]) -> None:\n        \"\"\"\n        Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n\n        This method works well with scipy's filter design functions\n\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        ...                                          btype='lowpass',\n        ...                                          fs=48000)\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"\n        if len(a_coeffs) < self.order:\n            a_coeffs = [1.0, *a_coeffs]\n\n        if len(a_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n\n        if len(b_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n\n        self.a_coeffs = a_coeffs\n        self.b_coeffs = b_coeffs\n\n    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate :math:`y[n]`\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"\n        result = 0.0\n\n        # Start at index 1 and do index 0 at the end.\n        for i in range(1, self.order + 1):\n            result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )\n\n        result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]\n\n        self.input_history[1:] = self.input_history[:-1]\n        self.output_history[1:] = self.output_history[:-1]\n\n        self.input_history[0] = sample\n        self.output_history[0] = result\n\n        return result",
  "children": [
    {
      "value": "from __future__ import annotations",
      "children": [
        {
          "value": "annotations",
          "children": [
            {
              "value": "annotations",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class IIRFilter:\n    r\"\"\"\n    N-Order IIR filter\n    Assumes working with float samples normalized on [-1, 1]\n\n    ---\n\n    Implementation details:\n    Based on the 2nd-order function from\n    https://en.wikipedia.org/wiki/Digital_biquad_filter,\n    this generalized N-order function was made.\n\n    Using the following transfer function\n        .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}}\n                  {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}}\n\n    we can rewrite this to\n        .. math:: y[n]={\\frac{1}{a_{0}}}\n                  \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)-\n                  \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right)\n    \"\"\"\n\n    def __init__(self, order: int) -> None:\n        self.order = order\n\n        # a_{0} ... a_{k}\n        self.a_coeffs = [1.0] + [0.0] * order\n        # b_{0} ... b_{k}\n        self.b_coeffs = [1.0] + [0.0] * order\n\n        # x[n-1] ... x[n-k]\n        self.input_history = [0.0] * self.order\n        # y[n-1] ... y[n-k]\n        self.output_history = [0.0] * self.order\n\n    def set_coefficients(self, a_coeffs: list[float], b_coeffs: list[float]) -> None:\n        \"\"\"\n        Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n\n        This method works well with scipy's filter design functions\n\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        ...                                          btype='lowpass',\n        ...                                          fs=48000)\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"\n        if len(a_coeffs) < self.order:\n            a_coeffs = [1.0, *a_coeffs]\n\n        if len(a_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n\n        if len(b_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n\n        self.a_coeffs = a_coeffs\n        self.b_coeffs = b_coeffs\n\n    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate :math:`y[n]`\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"\n        result = 0.0\n\n        # Start at index 1 and do index 0 at the end.\n        for i in range(1, self.order + 1):\n            result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )\n\n        result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]\n\n        self.input_history[1:] = self.input_history[:-1]\n        self.output_history[1:] = self.output_history[:-1]\n\n        self.input_history[0] = sample\n        self.output_history[0] = result\n\n        return result",
      "children": [
        {
          "value": "IIRFilter",
          "children": []
        },
        {
          "value": "r\"\"\"\n    N-Order IIR filter\n    Assumes working with float samples normalized on [-1, 1]\n\n    ---\n\n    Implementation details:\n    Based on the 2nd-order function from\n    https://en.wikipedia.org/wiki/Digital_biquad_filter,\n    this generalized N-order function was made.\n\n    Using the following transfer function\n        .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}}\n                  {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}}\n\n    we can rewrite this to\n        .. math:: y[n]={\\frac{1}{a_{0}}}\n                  \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)-\n                  \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right)\n    \"\"\"\n\n    def __init__(self, order: int) -> None:\n        self.order = order\n\n        # a_{0} ... a_{k}\n        self.a_coeffs = [1.0] + [0.0] * order\n        # b_{0} ... b_{k}\n        self.b_coeffs = [1.0] + [0.0] * order\n\n        # x[n-1] ... x[n-k]\n        self.input_history = [0.0] * self.order\n        # y[n-1] ... y[n-k]\n        self.output_history = [0.0] * self.order\n\n    def set_coefficients(self, a_coeffs: list[float], b_coeffs: list[float]) -> None:\n        \"\"\"\n        Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n\n        This method works well with scipy's filter design functions\n\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        ...                                          btype='lowpass',\n        ...                                          fs=48000)\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"\n        if len(a_coeffs) < self.order:\n            a_coeffs = [1.0, *a_coeffs]\n\n        if len(a_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n\n        if len(b_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n\n        self.a_coeffs = a_coeffs\n        self.b_coeffs = b_coeffs\n\n    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate :math:`y[n]`\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"\n        result = 0.0\n\n        # Start at index 1 and do index 0 at the end.\n        for i in range(1, self.order + 1):\n            result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )\n\n        result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]\n\n        self.input_history[1:] = self.input_history[:-1]\n        self.output_history[1:] = self.output_history[:-1]\n\n        self.input_history[0] = sample\n        self.output_history[0] = result\n\n        return result",
          "children": [
            {
              "value": "r\"\"\"\n    N-Order IIR filter\n    Assumes working with float samples normalized on [-1, 1]\n\n    ---\n\n    Implementation details:\n    Based on the 2nd-order function from\n    https://en.wikipedia.org/wiki/Digital_biquad_filter,\n    this generalized N-order function was made.\n\n    Using the following transfer function\n        .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}}\n                  {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}}\n\n    we can rewrite this to\n        .. math:: y[n]={\\frac{1}{a_{0}}}\n                  \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)-\n                  \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right)\n    \"\"\"",
              "children": [
                {
                  "value": "r\"\"\"\n    N-Order IIR filter\n    Assumes working with float samples normalized on [-1, 1]\n\n    ---\n\n    Implementation details:\n    Based on the 2nd-order function from\n    https://en.wikipedia.org/wiki/Digital_biquad_filter,\n    this generalized N-order function was made.\n\n    Using the following transfer function\n        .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}}\n                  {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}}\n\n    we can rewrite this to\n        .. math:: y[n]={\\frac{1}{a_{0}}}\n                  \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)-\n                  \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right)\n    \"\"\"",
                  "children": [
                    {
                      "value": "r\"\"\"",
                      "children": []
                    },
                    {
                      "value": "N-Order IIR filter\n    Assumes working with float samples normalized on [-1, 1]\n\n    ---\n\n    Implementation details:\n    Based on the 2nd-order function from\n    https://en.wikipedia.org/wiki/Digital_biquad_filter,\n    this generalized N-order function was made.\n\n    Using the following transfer function\n        .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}}\n                  {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}}\n\n    we can rewrite this to\n        .. math:: y[n]={\\frac{1}{a_{0}}}\n                  \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)-\n                  \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right)",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self, order: int) -> None:\n        self.order = order\n\n        # a_{0} ... a_{k}\n        self.a_coeffs = [1.0] + [0.0] * order\n        # b_{0} ... b_{k}\n        self.b_coeffs = [1.0] + [0.0] * order\n\n        # x[n-1] ... x[n-k]\n        self.input_history = [0.0] * self.order\n        # y[n-1] ... y[n-k]\n        self.output_history = [0.0] * self.order",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, order: int)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "order: int",
                      "children": [
                        {
                          "value": "order",
                          "children": []
                        },
                        {
                          "value": "int",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": [
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.order = order\n\n        # a_{0} ... a_{k}\n        self.a_coeffs = [1.0] + [0.0] * order\n        # b_{0} ... b_{k}\n        self.b_coeffs = [1.0] + [0.0] * order\n\n        # x[n-1] ... x[n-k]\n        self.input_history = [0.0] * self.order\n        # y[n-1] ... y[n-k]\n        self.output_history = [0.0] * self.order",
                  "children": [
                    {
                      "value": "self.order = order",
                      "children": [
                        {
                          "value": "self.order = order",
                          "children": [
                            {
                              "value": "self.order",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "order",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "order",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# a_{0} ... a_{k}",
                      "children": []
                    },
                    {
                      "value": "self.a_coeffs = [1.0] + [0.0] * order",
                      "children": [
                        {
                          "value": "self.a_coeffs = [1.0] + [0.0] * order",
                          "children": [
                            {
                              "value": "self.a_coeffs",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "a_coeffs",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "[1.0] + [0.0] * order",
                              "children": [
                                {
                                  "value": "[1.0]",
                                  "children": [
                                    {
                                      "value": "1.0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "[0.0] * order",
                                  "children": [
                                    {
                                      "value": "[0.0]",
                                      "children": [
                                        {
                                          "value": "0.0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "order",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# b_{0} ... b_{k}",
                      "children": []
                    },
                    {
                      "value": "self.b_coeffs = [1.0] + [0.0] * order",
                      "children": [
                        {
                          "value": "self.b_coeffs = [1.0] + [0.0] * order",
                          "children": [
                            {
                              "value": "self.b_coeffs",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "b_coeffs",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "[1.0] + [0.0] * order",
                              "children": [
                                {
                                  "value": "[1.0]",
                                  "children": [
                                    {
                                      "value": "1.0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "[0.0] * order",
                                  "children": [
                                    {
                                      "value": "[0.0]",
                                      "children": [
                                        {
                                          "value": "0.0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "order",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# x[n-1] ... x[n-k]",
                      "children": []
                    },
                    {
                      "value": "self.input_history = [0.0] * self.order",
                      "children": [
                        {
                          "value": "self.input_history = [0.0] * self.order",
                          "children": [
                            {
                              "value": "self.input_history",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "input_history",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "[0.0] * self.order",
                              "children": [
                                {
                                  "value": "[0.0]",
                                  "children": [
                                    {
                                      "value": "0.0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.order",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "order",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# y[n-1] ... y[n-k]",
                      "children": []
                    },
                    {
                      "value": "self.output_history = [0.0] * self.order",
                      "children": [
                        {
                          "value": "self.output_history = [0.0] * self.order",
                          "children": [
                            {
                              "value": "self.output_history",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "output_history",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "[0.0] * self.order",
                              "children": [
                                {
                                  "value": "[0.0]",
                                  "children": [
                                    {
                                      "value": "0.0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.order",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "order",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def set_coefficients(self, a_coeffs: list[float], b_coeffs: list[float]) -> None:\n        \"\"\"\n        Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n\n        This method works well with scipy's filter design functions\n\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        ...                                          btype='lowpass',\n        ...                                          fs=48000)\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"\n        if len(a_coeffs) < self.order:\n            a_coeffs = [1.0, *a_coeffs]\n\n        if len(a_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n\n        if len(b_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n\n        self.a_coeffs = a_coeffs\n        self.b_coeffs = b_coeffs",
              "children": [
                {
                  "value": "set_coefficients",
                  "children": []
                },
                {
                  "value": "(self, a_coeffs: list[float], b_coeffs: list[float])",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "a_coeffs: list[float]",
                      "children": [
                        {
                          "value": "a_coeffs",
                          "children": []
                        },
                        {
                          "value": "list[float]",
                          "children": [
                            {
                              "value": "list[float]",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "[float]",
                                  "children": [
                                    {
                                      "value": "float",
                                      "children": [
                                        {
                                          "value": "float",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "b_coeffs: list[float]",
                      "children": [
                        {
                          "value": "b_coeffs",
                          "children": []
                        },
                        {
                          "value": "list[float]",
                          "children": [
                            {
                              "value": "list[float]",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "[float]",
                                  "children": [
                                    {
                                      "value": "float",
                                      "children": [
                                        {
                                          "value": "float",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": [
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"\n        Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n\n        This method works well with scipy's filter design functions\n\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        ...                                          btype='lowpass',\n        ...                                          fs=48000)\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"\n        if len(a_coeffs) < self.order:\n            a_coeffs = [1.0, *a_coeffs]\n\n        if len(a_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n\n        if len(b_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n\n        self.a_coeffs = a_coeffs\n        self.b_coeffs = b_coeffs",
                  "children": [
                    {
                      "value": "\"\"\"\n        Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n\n        This method works well with scipy's filter design functions\n\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        ...                                          btype='lowpass',\n        ...                                          fs=48000)\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n\n        This method works well with scipy's filter design functions\n\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        ...                                          btype='lowpass',\n        ...                                          fs=48000)\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n\n        This method works well with scipy's filter design functions\n\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        ...                                          btype='lowpass',\n        ...                                          fs=48000)\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if len(a_coeffs) < self.order:\n            a_coeffs = [1.0, *a_coeffs]",
                      "children": [
                        {
                          "value": "len(a_coeffs) < self.order",
                          "children": [
                            {
                              "value": "len(a_coeffs)",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(a_coeffs)",
                                  "children": [
                                    {
                                      "value": "a_coeffs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "self.order",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "order",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "a_coeffs = [1.0, *a_coeffs]",
                          "children": [
                            {
                              "value": "a_coeffs = [1.0, *a_coeffs]",
                              "children": [
                                {
                                  "value": "a_coeffs = [1.0, *a_coeffs]",
                                  "children": [
                                    {
                                      "value": "a_coeffs",
                                      "children": []
                                    },
                                    {
                                      "value": "[1.0, *a_coeffs]",
                                      "children": [
                                        {
                                          "value": "1.0",
                                          "children": []
                                        },
                                        {
                                          "value": "*a_coeffs",
                                          "children": [
                                            {
                                              "value": "a_coeffs",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if len(a_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)",
                      "children": [
                        {
                          "value": "len(a_coeffs) != self.order + 1",
                          "children": [
                            {
                              "value": "len(a_coeffs)",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(a_coeffs)",
                                  "children": [
                                    {
                                      "value": "a_coeffs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "self.order + 1",
                              "children": [
                                {
                                  "value": "self.order",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "order",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)",
                          "children": [
                            {
                              "value": "msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )",
                              "children": [
                                {
                                  "value": "msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )",
                                  "children": [
                                    {
                                      "value": "msg",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )",
                                      "children": [
                                        {
                                          "value": "f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"",
                                          "children": [
                                            {
                                              "value": "f\"Expected a_coeffs to have {self.order + 1} elements \"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Expected a_coeffs to have",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{self.order + 1}",
                                                  "children": [
                                                    {
                                                      "value": "self.order + 1",
                                                      "children": [
                                                        {
                                                          "value": "self.order",
                                                          "children": [
                                                            {
                                                              "value": "self",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "order",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "elements",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "f\"for {self.order}-order filter, got {len(a_coeffs)}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "for",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{self.order}",
                                                  "children": [
                                                    {
                                                      "value": "self.order",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "order",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "-order filter, got",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{len(a_coeffs)}",
                                                  "children": [
                                                    {
                                                      "value": "len(a_coeffs)",
                                                      "children": [
                                                        {
                                                          "value": "len",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(a_coeffs)",
                                                          "children": [
                                                            {
                                                              "value": "a_coeffs",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(msg)",
                              "children": [
                                {
                                  "value": "ValueError(msg)",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(msg)",
                                      "children": [
                                        {
                                          "value": "msg",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if len(b_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)",
                      "children": [
                        {
                          "value": "len(b_coeffs) != self.order + 1",
                          "children": [
                            {
                              "value": "len(b_coeffs)",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(b_coeffs)",
                                  "children": [
                                    {
                                      "value": "b_coeffs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "self.order + 1",
                              "children": [
                                {
                                  "value": "self.order",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "order",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)",
                          "children": [
                            {
                              "value": "msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )",
                              "children": [
                                {
                                  "value": "msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )",
                                  "children": [
                                    {
                                      "value": "msg",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )",
                                      "children": [
                                        {
                                          "value": "f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"",
                                          "children": [
                                            {
                                              "value": "f\"Expected b_coeffs to have {self.order + 1} elements \"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Expected b_coeffs to have",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{self.order + 1}",
                                                  "children": [
                                                    {
                                                      "value": "self.order + 1",
                                                      "children": [
                                                        {
                                                          "value": "self.order",
                                                          "children": [
                                                            {
                                                              "value": "self",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "order",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "elements",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "f\"for {self.order}-order filter, got {len(a_coeffs)}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "for",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{self.order}",
                                                  "children": [
                                                    {
                                                      "value": "self.order",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "order",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "-order filter, got",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{len(a_coeffs)}",
                                                  "children": [
                                                    {
                                                      "value": "len(a_coeffs)",
                                                      "children": [
                                                        {
                                                          "value": "len",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(a_coeffs)",
                                                          "children": [
                                                            {
                                                              "value": "a_coeffs",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(msg)",
                              "children": [
                                {
                                  "value": "ValueError(msg)",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(msg)",
                                      "children": [
                                        {
                                          "value": "msg",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.a_coeffs = a_coeffs",
                      "children": [
                        {
                          "value": "self.a_coeffs = a_coeffs",
                          "children": [
                            {
                              "value": "self.a_coeffs",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "a_coeffs",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "a_coeffs",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.b_coeffs = b_coeffs",
                      "children": [
                        {
                          "value": "self.b_coeffs = b_coeffs",
                          "children": [
                            {
                              "value": "self.b_coeffs",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "b_coeffs",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "b_coeffs",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate :math:`y[n]`\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"\n        result = 0.0\n\n        # Start at index 1 and do index 0 at the end.\n        for i in range(1, self.order + 1):\n            result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )\n\n        result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]\n\n        self.input_history[1:] = self.input_history[:-1]\n        self.output_history[1:] = self.output_history[:-1]\n\n        self.input_history[0] = sample\n        self.output_history[0] = result\n\n        return result",
              "children": [
                {
                  "value": "process",
                  "children": []
                },
                {
                  "value": "(self, sample: float)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "sample: float",
                      "children": [
                        {
                          "value": "sample",
                          "children": []
                        },
                        {
                          "value": "float",
                          "children": [
                            {
                              "value": "float",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "float",
                  "children": [
                    {
                      "value": "float",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"\n        Calculate :math:`y[n]`\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"\n        result = 0.0\n\n        # Start at index 1 and do index 0 at the end.\n        for i in range(1, self.order + 1):\n            result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )\n\n        result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]\n\n        self.input_history[1:] = self.input_history[:-1]\n        self.output_history[1:] = self.output_history[:-1]\n\n        self.input_history[0] = sample\n        self.output_history[0] = result\n\n        return result",
                  "children": [
                    {
                      "value": "\"\"\"\n        Calculate :math:`y[n]`\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        Calculate :math:`y[n]`\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Calculate :math:`y[n]`\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "result = 0.0",
                      "children": [
                        {
                          "value": "result = 0.0",
                          "children": [
                            {
                              "value": "result",
                              "children": []
                            },
                            {
                              "value": "0.0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Start at index 1 and do index 0 at the end.",
                      "children": []
                    },
                    {
                      "value": "for i in range(1, self.order + 1):\n            result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )",
                      "children": [
                        {
                          "value": "i",
                          "children": []
                        },
                        {
                          "value": "range(1, self.order + 1)",
                          "children": [
                            {
                              "value": "range",
                              "children": []
                            },
                            {
                              "value": "(1, self.order + 1)",
                              "children": [
                                {
                                  "value": "1",
                                  "children": []
                                },
                                {
                                  "value": "self.order + 1",
                                  "children": [
                                    {
                                      "value": "self.order",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "order",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )",
                          "children": [
                            {
                              "value": "result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )",
                              "children": [
                                {
                                  "value": "result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )",
                                  "children": [
                                    {
                                      "value": "result",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )",
                                      "children": [
                                        {
                                          "value": "self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]",
                                          "children": [
                                            {
                                              "value": "self.b_coeffs[i] * self.input_history[i - 1]",
                                              "children": [
                                                {
                                                  "value": "self.b_coeffs[i]",
                                                  "children": [
                                                    {
                                                      "value": "self.b_coeffs",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "b_coeffs",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "i",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "self.input_history[i - 1]",
                                                  "children": [
                                                    {
                                                      "value": "self.input_history",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_history",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "i - 1",
                                                      "children": [
                                                        {
                                                          "value": "i",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "self.a_coeffs[i] * self.output_history[i - 1]",
                                              "children": [
                                                {
                                                  "value": "self.a_coeffs[i]",
                                                  "children": [
                                                    {
                                                      "value": "self.a_coeffs",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "a_coeffs",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "i",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "self.output_history[i - 1]",
                                                  "children": [
                                                    {
                                                      "value": "self.output_history",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "output_history",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "i - 1",
                                                      "children": [
                                                        {
                                                          "value": "i",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]",
                      "children": [
                        {
                          "value": "result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]",
                          "children": [
                            {
                              "value": "result",
                              "children": []
                            },
                            {
                              "value": "(result + self.b_coeffs[0] * sample) / self.a_coeffs[0]",
                              "children": [
                                {
                                  "value": "(result + self.b_coeffs[0] * sample)",
                                  "children": [
                                    {
                                      "value": "result + self.b_coeffs[0] * sample",
                                      "children": [
                                        {
                                          "value": "result",
                                          "children": []
                                        },
                                        {
                                          "value": "self.b_coeffs[0] * sample",
                                          "children": [
                                            {
                                              "value": "self.b_coeffs[0]",
                                              "children": [
                                                {
                                                  "value": "self.b_coeffs",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "b_coeffs",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "sample",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.a_coeffs[0]",
                                  "children": [
                                    {
                                      "value": "self.a_coeffs",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "a_coeffs",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.input_history[1:] = self.input_history[:-1]",
                      "children": [
                        {
                          "value": "self.input_history[1:] = self.input_history[:-1]",
                          "children": [
                            {
                              "value": "self.input_history[1:]",
                              "children": [
                                {
                                  "value": "self.input_history",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "input_history",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "1:",
                                  "children": [
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "self.input_history[:-1]",
                              "children": [
                                {
                                  "value": "self.input_history",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "input_history",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": ":-1",
                                  "children": [
                                    {
                                      "value": "-1",
                                      "children": [
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.output_history[1:] = self.output_history[:-1]",
                      "children": [
                        {
                          "value": "self.output_history[1:] = self.output_history[:-1]",
                          "children": [
                            {
                              "value": "self.output_history[1:]",
                              "children": [
                                {
                                  "value": "self.output_history",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "output_history",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "1:",
                                  "children": [
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "self.output_history[:-1]",
                              "children": [
                                {
                                  "value": "self.output_history",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "output_history",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": ":-1",
                                  "children": [
                                    {
                                      "value": "-1",
                                      "children": [
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.input_history[0] = sample",
                      "children": [
                        {
                          "value": "self.input_history[0] = sample",
                          "children": [
                            {
                              "value": "self.input_history[0]",
                              "children": [
                                {
                                  "value": "self.input_history",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "input_history",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "sample",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.output_history[0] = result",
                      "children": [
                        {
                          "value": "self.output_history[0] = result",
                          "children": [
                            {
                              "value": "self.output_history[0]",
                              "children": [
                                {
                                  "value": "self.output_history",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "output_history",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "result",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return result",
                      "children": [
                        {
                          "value": "result",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}