{
  "value": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n\n\nclass SalesRanker(MRJob):\n\n    def within_past_week(self, timestamp):\n        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n        ...\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        timestamp, product_id, category, quantity = line.split('\\t')\n        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity\n\n    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        yield key, sum(values)\n\n    def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id\n\n    def reducer_identity(self, key, value):\n        yield key, value\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]\n\n\nif __name__ == '__main__':\n    SalesRanker.run()",
  "children": [
    {
      "value": "# -*- coding: utf-8 -*-",
      "children": []
    },
    {
      "value": "from mrjob.job import MRJob",
      "children": [
        {
          "value": "mrjob.job",
          "children": [
            {
              "value": "mrjob",
              "children": []
            },
            {
              "value": "job",
              "children": []
            }
          ]
        },
        {
          "value": "MRJob",
          "children": [
            {
              "value": "MRJob",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class SalesRanker(MRJob):\n\n    def within_past_week(self, timestamp):\n        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n        ...\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        timestamp, product_id, category, quantity = line.split('\\t')\n        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity\n\n    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        yield key, sum(values)\n\n    def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id\n\n    def reducer_identity(self, key, value):\n        yield key, value\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]",
      "children": [
        {
          "value": "SalesRanker",
          "children": []
        },
        {
          "value": "(MRJob)",
          "children": [
            {
              "value": "MRJob",
              "children": []
            }
          ]
        },
        {
          "value": "def within_past_week(self, timestamp):\n        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n        ...\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        timestamp, product_id, category, quantity = line.split('\\t')\n        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity\n\n    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        yield key, sum(values)\n\n    def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id\n\n    def reducer_identity(self, key, value):\n        yield key, value\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]",
          "children": [
            {
              "value": "def within_past_week(self, timestamp):\n        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n        ...",
              "children": [
                {
                  "value": "within_past_week",
                  "children": []
                },
                {
                  "value": "(self, timestamp)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "timestamp",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n        ...",
                  "children": [
                    {
                      "value": "\"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Return True if timestamp is within past week, False otherwise.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "...",
                      "children": [
                        {
                          "value": "...",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        timestamp, product_id, category, quantity = line.split('\\t')\n        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity",
              "children": [
                {
                  "value": "mapper",
                  "children": []
                },
                {
                  "value": "(self, _, line)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "_",
                      "children": []
                    },
                    {
                      "value": "line",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        timestamp, product_id, category, quantity = line.split('\\t')\n        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity",
                  "children": [
                    {
                      "value": "\"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "timestamp, product_id, category, quantity = line.split('\\t')",
                      "children": [
                        {
                          "value": "timestamp, product_id, category, quantity = line.split('\\t')",
                          "children": [
                            {
                              "value": "timestamp, product_id, category, quantity",
                              "children": [
                                {
                                  "value": "timestamp",
                                  "children": []
                                },
                                {
                                  "value": "product_id",
                                  "children": []
                                },
                                {
                                  "value": "category",
                                  "children": []
                                },
                                {
                                  "value": "quantity",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "line.split('\\t')",
                              "children": [
                                {
                                  "value": "line.split",
                                  "children": [
                                    {
                                      "value": "line",
                                      "children": []
                                    },
                                    {
                                      "value": "split",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "('\\t')",
                                  "children": [
                                    {
                                      "value": "'\\t'",
                                      "children": [
                                        {
                                          "value": "'",
                                          "children": []
                                        },
                                        {
                                          "value": "\\t",
                                          "children": [
                                            {
                                              "value": "\\t",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if self.within_past_week(timestamp):\n            yield (category, product_id), quantity",
                      "children": [
                        {
                          "value": "self.within_past_week(timestamp)",
                          "children": [
                            {
                              "value": "self.within_past_week",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "within_past_week",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(timestamp)",
                              "children": [
                                {
                                  "value": "timestamp",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "yield (category, product_id), quantity",
                          "children": [
                            {
                              "value": "yield (category, product_id), quantity",
                              "children": [
                                {
                                  "value": "yield (category, product_id), quantity",
                                  "children": [
                                    {
                                      "value": "(category, product_id), quantity",
                                      "children": [
                                        {
                                          "value": "(category, product_id)",
                                          "children": [
                                            {
                                              "value": "category",
                                              "children": []
                                            },
                                            {
                                              "value": "product_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "quantity",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        yield key, sum(values)",
              "children": [
                {
                  "value": "reducer",
                  "children": []
                },
                {
                  "value": "(self, key, values)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "key",
                      "children": []
                    },
                    {
                      "value": "values",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        yield key, sum(values)",
                  "children": [
                    {
                      "value": "\"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "yield key, sum(values)",
                      "children": [
                        {
                          "value": "yield key, sum(values)",
                          "children": [
                            {
                              "value": "key, sum(values)",
                              "children": [
                                {
                                  "value": "key",
                                  "children": []
                                },
                                {
                                  "value": "sum(values)",
                                  "children": [
                                    {
                                      "value": "sum",
                                      "children": []
                                    },
                                    {
                                      "value": "(values)",
                                      "children": [
                                        {
                                          "value": "values",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id",
              "children": [
                {
                  "value": "mapper_sort",
                  "children": []
                },
                {
                  "value": "(self, key, value)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "key",
                      "children": []
                    },
                    {
                      "value": "value",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id",
                  "children": [
                    {
                      "value": "\"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "category, product_id = key",
                      "children": [
                        {
                          "value": "category, product_id = key",
                          "children": [
                            {
                              "value": "category, product_id",
                              "children": [
                                {
                                  "value": "category",
                                  "children": []
                                },
                                {
                                  "value": "product_id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "key",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "quantity = value",
                      "children": [
                        {
                          "value": "quantity = value",
                          "children": [
                            {
                              "value": "quantity",
                              "children": []
                            },
                            {
                              "value": "value",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "yield (category, quantity), product_id",
                      "children": [
                        {
                          "value": "yield (category, quantity), product_id",
                          "children": [
                            {
                              "value": "(category, quantity), product_id",
                              "children": [
                                {
                                  "value": "(category, quantity)",
                                  "children": [
                                    {
                                      "value": "category",
                                      "children": []
                                    },
                                    {
                                      "value": "quantity",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "product_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def reducer_identity(self, key, value):\n        yield key, value",
              "children": [
                {
                  "value": "reducer_identity",
                  "children": []
                },
                {
                  "value": "(self, key, value)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "key",
                      "children": []
                    },
                    {
                      "value": "value",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "yield key, value",
                  "children": [
                    {
                      "value": "yield key, value",
                      "children": [
                        {
                          "value": "yield key, value",
                          "children": [
                            {
                              "value": "key, value",
                              "children": [
                                {
                                  "value": "key",
                                  "children": []
                                },
                                {
                                  "value": "value",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]",
              "children": [
                {
                  "value": "steps",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]",
                  "children": [
                    {
                      "value": "\"\"\"Run the map and reduce steps.\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Run the map and reduce steps.\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Run the map and reduce steps.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]",
                      "children": [
                        {
                          "value": "[\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]",
                          "children": [
                            {
                              "value": "self.mr(mapper=self.mapper,\n                    reducer=self.reducer)",
                              "children": [
                                {
                                  "value": "self.mr",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "mr",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(mapper=self.mapper,\n                    reducer=self.reducer)",
                                  "children": [
                                    {
                                      "value": "mapper=self.mapper",
                                      "children": [
                                        {
                                          "value": "mapper",
                                          "children": []
                                        },
                                        {
                                          "value": "self.mapper",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "mapper",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "reducer=self.reducer",
                                      "children": [
                                        {
                                          "value": "reducer",
                                          "children": []
                                        },
                                        {
                                          "value": "self.reducer",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "reducer",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity)",
                              "children": [
                                {
                                  "value": "self.mr",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "mr",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity)",
                                  "children": [
                                    {
                                      "value": "mapper=self.mapper_sort",
                                      "children": [
                                        {
                                          "value": "mapper",
                                          "children": []
                                        },
                                        {
                                          "value": "self.mapper_sort",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "mapper_sort",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "reducer=self.reducer_identity",
                                      "children": [
                                        {
                                          "value": "reducer",
                                          "children": []
                                        },
                                        {
                                          "value": "self.reducer_identity",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "reducer_identity",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == '__main__':\n    SalesRanker.run()",
      "children": [
        {
          "value": "__name__ == '__main__'",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "'__main__'",
              "children": [
                {
                  "value": "'",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "'",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "SalesRanker.run()",
          "children": [
            {
              "value": "SalesRanker.run()",
              "children": [
                {
                  "value": "SalesRanker.run()",
                  "children": [
                    {
                      "value": "SalesRanker.run",
                      "children": [
                        {
                          "value": "SalesRanker",
                          "children": []
                        },
                        {
                          "value": "run",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}