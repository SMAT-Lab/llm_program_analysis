{
  "value": "import logging\n\nfrom autogpt_libs.utils.cache import thread_cached\n\nfrom backend.data.block import (\n    Block,\n    BlockCategory,\n    BlockInput,\n    BlockOutput,\n    BlockSchema,\n    BlockType,\n    get_block,\n)\nfrom backend.data.execution import ExecutionStatus\nfrom backend.data.model import SchemaField\n\nlogger = logging.getLogger(__name__)\n\n\n@thread_cached\ndef get_executor_manager_client():\n    from backend.executor import ExecutionManager\n    from backend.util.service import get_service_client\n\n    return get_service_client(ExecutionManager)\n\n\n@thread_cached\ndef get_event_bus():\n    from backend.data.execution import RedisExecutionEventBus\n\n    return RedisExecutionEventBus()\n\n\nclass AgentExecutorBlock(Block):\n    class Input(BlockSchema):\n        user_id: str = SchemaField(description=\"User ID\")\n        graph_id: str = SchemaField(description=\"Graph ID\")\n        graph_version: int = SchemaField(description=\"Graph Version\")\n\n        data: BlockInput = SchemaField(description=\"Input data for the graph\")\n        input_schema: dict = SchemaField(description=\"Input schema for the graph\")\n        output_schema: dict = SchemaField(description=\"Output schema for the graph\")\n\n    class Output(BlockSchema):\n        pass\n\n    def __init__(self):\n        super().__init__(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        executor_manager = get_executor_manager_client()\n        event_bus = get_event_bus()\n\n        graph_exec = executor_manager.add_execution(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )\n        log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\n        logger.info(f\"Starting execution of {log_id}\")\n\n        for event in event_bus.listen(\n            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n        ):\n            logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )\n\n            if not event.node_id:\n                if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue\n\n            if not event.block_id:\n                logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue\n\n            block = get_block(event.block_id)\n            if not block or block.block_type != BlockType.OUTPUT:\n                continue\n\n            output_name = event.input_data.get(\"name\")\n            if not output_name:\n                logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue\n\n            for output_data in event.output_data.get(\"output\", []):\n                logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n                yield output_name, output_data",
  "children": [
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from autogpt_libs.utils.cache import thread_cached",
      "children": [
        {
          "value": "autogpt_libs.utils.cache",
          "children": [
            {
              "value": "autogpt_libs",
              "children": []
            },
            {
              "value": "utils",
              "children": []
            },
            {
              "value": "cache",
              "children": []
            }
          ]
        },
        {
          "value": "thread_cached",
          "children": [
            {
              "value": "thread_cached",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block import (\n    Block,\n    BlockCategory,\n    BlockInput,\n    BlockOutput,\n    BlockSchema,\n    BlockType,\n    get_block,\n)",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        },
        {
          "value": "Block",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "BlockCategory",
          "children": [
            {
              "value": "BlockCategory",
              "children": []
            }
          ]
        },
        {
          "value": "BlockInput",
          "children": [
            {
              "value": "BlockInput",
              "children": []
            }
          ]
        },
        {
          "value": "BlockOutput",
          "children": [
            {
              "value": "BlockOutput",
              "children": []
            }
          ]
        },
        {
          "value": "BlockSchema",
          "children": [
            {
              "value": "BlockSchema",
              "children": []
            }
          ]
        },
        {
          "value": "BlockType",
          "children": [
            {
              "value": "BlockType",
              "children": []
            }
          ]
        },
        {
          "value": "get_block",
          "children": [
            {
              "value": "get_block",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.execution import ExecutionStatus",
      "children": [
        {
          "value": "backend.data.execution",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "execution",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionStatus",
          "children": [
            {
              "value": "ExecutionStatus",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import SchemaField",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "SchemaField",
          "children": [
            {
              "value": "SchemaField",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@thread_cached\ndef get_executor_manager_client():\n    from backend.executor import ExecutionManager\n    from backend.util.service import get_service_client\n\n    return get_service_client(ExecutionManager)",
      "children": [
        {
          "value": "@thread_cached",
          "children": [
            {
              "value": "thread_cached",
              "children": []
            }
          ]
        },
        {
          "value": "def get_executor_manager_client():\n    from backend.executor import ExecutionManager\n    from backend.util.service import get_service_client\n\n    return get_service_client(ExecutionManager)",
          "children": [
            {
              "value": "get_executor_manager_client",
              "children": []
            },
            {
              "value": "()",
              "children": []
            },
            {
              "value": "from backend.executor import ExecutionManager\n    from backend.util.service import get_service_client\n\n    return get_service_client(ExecutionManager)",
              "children": [
                {
                  "value": "from backend.executor import ExecutionManager",
                  "children": [
                    {
                      "value": "backend.executor",
                      "children": [
                        {
                          "value": "backend",
                          "children": []
                        },
                        {
                          "value": "executor",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ExecutionManager",
                      "children": [
                        {
                          "value": "ExecutionManager",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "from backend.util.service import get_service_client",
                  "children": [
                    {
                      "value": "backend.util.service",
                      "children": [
                        {
                          "value": "backend",
                          "children": []
                        },
                        {
                          "value": "util",
                          "children": []
                        },
                        {
                          "value": "service",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "get_service_client",
                      "children": [
                        {
                          "value": "get_service_client",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return get_service_client(ExecutionManager)",
                  "children": [
                    {
                      "value": "get_service_client(ExecutionManager)",
                      "children": [
                        {
                          "value": "get_service_client",
                          "children": []
                        },
                        {
                          "value": "(ExecutionManager)",
                          "children": [
                            {
                              "value": "ExecutionManager",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@thread_cached\ndef get_event_bus():\n    from backend.data.execution import RedisExecutionEventBus\n\n    return RedisExecutionEventBus()",
      "children": [
        {
          "value": "@thread_cached",
          "children": [
            {
              "value": "thread_cached",
              "children": []
            }
          ]
        },
        {
          "value": "def get_event_bus():\n    from backend.data.execution import RedisExecutionEventBus\n\n    return RedisExecutionEventBus()",
          "children": [
            {
              "value": "get_event_bus",
              "children": []
            },
            {
              "value": "()",
              "children": []
            },
            {
              "value": "from backend.data.execution import RedisExecutionEventBus\n\n    return RedisExecutionEventBus()",
              "children": [
                {
                  "value": "from backend.data.execution import RedisExecutionEventBus",
                  "children": [
                    {
                      "value": "backend.data.execution",
                      "children": [
                        {
                          "value": "backend",
                          "children": []
                        },
                        {
                          "value": "data",
                          "children": []
                        },
                        {
                          "value": "execution",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "RedisExecutionEventBus",
                      "children": [
                        {
                          "value": "RedisExecutionEventBus",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return RedisExecutionEventBus()",
                  "children": [
                    {
                      "value": "RedisExecutionEventBus()",
                      "children": [
                        {
                          "value": "RedisExecutionEventBus",
                          "children": []
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class AgentExecutorBlock(Block):\n    class Input(BlockSchema):\n        user_id: str = SchemaField(description=\"User ID\")\n        graph_id: str = SchemaField(description=\"Graph ID\")\n        graph_version: int = SchemaField(description=\"Graph Version\")\n\n        data: BlockInput = SchemaField(description=\"Input data for the graph\")\n        input_schema: dict = SchemaField(description=\"Input schema for the graph\")\n        output_schema: dict = SchemaField(description=\"Output schema for the graph\")\n\n    class Output(BlockSchema):\n        pass\n\n    def __init__(self):\n        super().__init__(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        executor_manager = get_executor_manager_client()\n        event_bus = get_event_bus()\n\n        graph_exec = executor_manager.add_execution(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )\n        log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\n        logger.info(f\"Starting execution of {log_id}\")\n\n        for event in event_bus.listen(\n            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n        ):\n            logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )\n\n            if not event.node_id:\n                if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue\n\n            if not event.block_id:\n                logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue\n\n            block = get_block(event.block_id)\n            if not block or block.block_type != BlockType.OUTPUT:\n                continue\n\n            output_name = event.input_data.get(\"name\")\n            if not output_name:\n                logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue\n\n            for output_data in event.output_data.get(\"output\", []):\n                logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n                yield output_name, output_data",
      "children": [
        {
          "value": "AgentExecutorBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        user_id: str = SchemaField(description=\"User ID\")\n        graph_id: str = SchemaField(description=\"Graph ID\")\n        graph_version: int = SchemaField(description=\"Graph Version\")\n\n        data: BlockInput = SchemaField(description=\"Input data for the graph\")\n        input_schema: dict = SchemaField(description=\"Input schema for the graph\")\n        output_schema: dict = SchemaField(description=\"Output schema for the graph\")\n\n    class Output(BlockSchema):\n        pass\n\n    def __init__(self):\n        super().__init__(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        executor_manager = get_executor_manager_client()\n        event_bus = get_event_bus()\n\n        graph_exec = executor_manager.add_execution(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )\n        log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\n        logger.info(f\"Starting execution of {log_id}\")\n\n        for event in event_bus.listen(\n            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n        ):\n            logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )\n\n            if not event.node_id:\n                if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue\n\n            if not event.block_id:\n                logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue\n\n            block = get_block(event.block_id)\n            if not block or block.block_type != BlockType.OUTPUT:\n                continue\n\n            output_name = event.input_data.get(\"name\")\n            if not output_name:\n                logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue\n\n            for output_data in event.output_data.get(\"output\", []):\n                logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n                yield output_name, output_data",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        user_id: str = SchemaField(description=\"User ID\")\n        graph_id: str = SchemaField(description=\"Graph ID\")\n        graph_version: int = SchemaField(description=\"Graph Version\")\n\n        data: BlockInput = SchemaField(description=\"Input data for the graph\")\n        input_schema: dict = SchemaField(description=\"Input schema for the graph\")\n        output_schema: dict = SchemaField(description=\"Output schema for the graph\")",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "user_id: str = SchemaField(description=\"User ID\")\n        graph_id: str = SchemaField(description=\"Graph ID\")\n        graph_version: int = SchemaField(description=\"Graph Version\")\n\n        data: BlockInput = SchemaField(description=\"Input data for the graph\")\n        input_schema: dict = SchemaField(description=\"Input schema for the graph\")\n        output_schema: dict = SchemaField(description=\"Output schema for the graph\")",
                  "children": [
                    {
                      "value": "user_id: str = SchemaField(description=\"User ID\")",
                      "children": [
                        {
                          "value": "user_id: str = SchemaField(description=\"User ID\")",
                          "children": [
                            {
                              "value": "user_id",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"User ID\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"User ID\")",
                                  "children": [
                                    {
                                      "value": "description=\"User ID\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"User ID\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "User ID",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "graph_id: str = SchemaField(description=\"Graph ID\")",
                      "children": [
                        {
                          "value": "graph_id: str = SchemaField(description=\"Graph ID\")",
                          "children": [
                            {
                              "value": "graph_id",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Graph ID\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Graph ID\")",
                                  "children": [
                                    {
                                      "value": "description=\"Graph ID\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Graph ID\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Graph ID",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "graph_version: int = SchemaField(description=\"Graph Version\")",
                      "children": [
                        {
                          "value": "graph_version: int = SchemaField(description=\"Graph Version\")",
                          "children": [
                            {
                              "value": "graph_version",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Graph Version\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Graph Version\")",
                                  "children": [
                                    {
                                      "value": "description=\"Graph Version\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Graph Version\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Graph Version",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "data: BlockInput = SchemaField(description=\"Input data for the graph\")",
                      "children": [
                        {
                          "value": "data: BlockInput = SchemaField(description=\"Input data for the graph\")",
                          "children": [
                            {
                              "value": "data",
                              "children": []
                            },
                            {
                              "value": "BlockInput",
                              "children": [
                                {
                                  "value": "BlockInput",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Input data for the graph\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Input data for the graph\")",
                                  "children": [
                                    {
                                      "value": "description=\"Input data for the graph\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Input data for the graph\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Input data for the graph",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "input_schema: dict = SchemaField(description=\"Input schema for the graph\")",
                      "children": [
                        {
                          "value": "input_schema: dict = SchemaField(description=\"Input schema for the graph\")",
                          "children": [
                            {
                              "value": "input_schema",
                              "children": []
                            },
                            {
                              "value": "dict",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Input schema for the graph\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Input schema for the graph\")",
                                  "children": [
                                    {
                                      "value": "description=\"Input schema for the graph\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Input schema for the graph\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Input schema for the graph",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "output_schema: dict = SchemaField(description=\"Output schema for the graph\")",
                      "children": [
                        {
                          "value": "output_schema: dict = SchemaField(description=\"Output schema for the graph\")",
                          "children": [
                            {
                              "value": "output_schema",
                              "children": []
                            },
                            {
                              "value": "dict",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Output schema for the graph\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Output schema for the graph\")",
                                  "children": [
                                    {
                                      "value": "description=\"Output schema for the graph\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Output schema for the graph\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Output schema for the graph",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        pass",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "pass",
                  "children": [
                    {
                      "value": "pass",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )",
                              "children": [
                                {
                                  "value": "id=\"e189baac-8c20-45a1-94a7-55177ea42565\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"e189baac-8c20-45a1-94a7-55177ea42565\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "e189baac-8c20-45a1-94a7-55177ea42565",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "description=\"Executes an existing agent inside your agent\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Executes an existing agent inside your agent\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Executes an existing agent inside your agent",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=AgentExecutorBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "AgentExecutorBlock.Input",
                                      "children": [
                                        {
                                          "value": "AgentExecutorBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema=AgentExecutorBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "AgentExecutorBlock.Output",
                                      "children": [
                                        {
                                          "value": "AgentExecutorBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "block_type=BlockType.AGENT",
                                  "children": [
                                    {
                                      "value": "block_type",
                                      "children": []
                                    },
                                    {
                                      "value": "BlockType.AGENT",
                                      "children": [
                                        {
                                          "value": "BlockType",
                                          "children": []
                                        },
                                        {
                                          "value": "AGENT",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.AGENT}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.AGENT}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.AGENT",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "AGENT",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        executor_manager = get_executor_manager_client()\n        event_bus = get_event_bus()\n\n        graph_exec = executor_manager.add_execution(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )\n        log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\n        logger.info(f\"Starting execution of {log_id}\")\n\n        for event in event_bus.listen(\n            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n        ):\n            logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )\n\n            if not event.node_id:\n                if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue\n\n            if not event.block_id:\n                logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue\n\n            block = get_block(event.block_id)\n            if not block or block.block_type != BlockType.OUTPUT:\n                continue\n\n            output_name = event.input_data.get(\"name\")\n            if not output_name:\n                logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue\n\n            for output_data in event.output_data.get(\"output\", []):\n                logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n                yield output_name, output_data",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(self, input_data: Input, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "executor_manager = get_executor_manager_client()\n        event_bus = get_event_bus()\n\n        graph_exec = executor_manager.add_execution(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )\n        log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\n        logger.info(f\"Starting execution of {log_id}\")\n\n        for event in event_bus.listen(\n            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n        ):\n            logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )\n\n            if not event.node_id:\n                if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue\n\n            if not event.block_id:\n                logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue\n\n            block = get_block(event.block_id)\n            if not block or block.block_type != BlockType.OUTPUT:\n                continue\n\n            output_name = event.input_data.get(\"name\")\n            if not output_name:\n                logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue\n\n            for output_data in event.output_data.get(\"output\", []):\n                logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n                yield output_name, output_data",
                  "children": [
                    {
                      "value": "executor_manager = get_executor_manager_client()",
                      "children": [
                        {
                          "value": "executor_manager = get_executor_manager_client()",
                          "children": [
                            {
                              "value": "executor_manager",
                              "children": []
                            },
                            {
                              "value": "get_executor_manager_client()",
                              "children": [
                                {
                                  "value": "get_executor_manager_client",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "event_bus = get_event_bus()",
                      "children": [
                        {
                          "value": "event_bus = get_event_bus()",
                          "children": [
                            {
                              "value": "event_bus",
                              "children": []
                            },
                            {
                              "value": "get_event_bus()",
                              "children": [
                                {
                                  "value": "get_event_bus",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "graph_exec = executor_manager.add_execution(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )",
                      "children": [
                        {
                          "value": "graph_exec = executor_manager.add_execution(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )",
                          "children": [
                            {
                              "value": "graph_exec",
                              "children": []
                            },
                            {
                              "value": "executor_manager.add_execution(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )",
                              "children": [
                                {
                                  "value": "executor_manager.add_execution",
                                  "children": [
                                    {
                                      "value": "executor_manager",
                                      "children": []
                                    },
                                    {
                                      "value": "add_execution",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )",
                                  "children": [
                                    {
                                      "value": "graph_id=input_data.graph_id",
                                      "children": [
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        },
                                        {
                                          "value": "input_data.graph_id",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "graph_version=input_data.graph_version",
                                      "children": [
                                        {
                                          "value": "graph_version",
                                          "children": []
                                        },
                                        {
                                          "value": "input_data.graph_version",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_version",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "user_id=input_data.user_id",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "input_data.user_id",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "data=input_data.data",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "input_data.data",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "data",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"",
                      "children": [
                        {
                          "value": "log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"",
                          "children": [
                            {
                              "value": "log_id",
                              "children": []
                            },
                            {
                              "value": "f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"",
                              "children": [
                                {
                                  "value": "f\"",
                                  "children": []
                                },
                                {
                                  "value": "Graph #",
                                  "children": []
                                },
                                {
                                  "value": "{input_data.graph_id}",
                                  "children": [
                                    {
                                      "value": "input_data.graph_id",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "-V",
                                  "children": []
                                },
                                {
                                  "value": "{input_data.graph_version}",
                                  "children": [
                                    {
                                      "value": "input_data.graph_version",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_version",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": ", exec-id:",
                                  "children": []
                                },
                                {
                                  "value": "{graph_exec.graph_exec_id}",
                                  "children": [
                                    {
                                      "value": "graph_exec.graph_exec_id",
                                      "children": [
                                        {
                                          "value": "graph_exec",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_exec_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.info(f\"Starting execution of {log_id}\")",
                      "children": [
                        {
                          "value": "logger.info(f\"Starting execution of {log_id}\")",
                          "children": [
                            {
                              "value": "logger.info",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "info",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"Starting execution of {log_id}\")",
                              "children": [
                                {
                                  "value": "f\"Starting execution of {log_id}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Starting execution of",
                                      "children": []
                                    },
                                    {
                                      "value": "{log_id}",
                                      "children": [
                                        {
                                          "value": "log_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for event in event_bus.listen(\n            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n        ):\n            logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )\n\n            if not event.node_id:\n                if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue\n\n            if not event.block_id:\n                logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue\n\n            block = get_block(event.block_id)\n            if not block or block.block_type != BlockType.OUTPUT:\n                continue\n\n            output_name = event.input_data.get(\"name\")\n            if not output_name:\n                logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue\n\n            for output_data in event.output_data.get(\"output\", []):\n                logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n                yield output_name, output_data",
                      "children": [
                        {
                          "value": "event",
                          "children": []
                        },
                        {
                          "value": "event_bus.listen(\n            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n        )",
                          "children": [
                            {
                              "value": "event_bus.listen",
                              "children": [
                                {
                                  "value": "event_bus",
                                  "children": []
                                },
                                {
                                  "value": "listen",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n        )",
                              "children": [
                                {
                                  "value": "graph_id=graph_exec.graph_id",
                                  "children": [
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    },
                                    {
                                      "value": "graph_exec.graph_id",
                                      "children": [
                                        {
                                          "value": "graph_exec",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "graph_exec_id=graph_exec.graph_exec_id",
                                  "children": [
                                    {
                                      "value": "graph_exec_id",
                                      "children": []
                                    },
                                    {
                                      "value": "graph_exec.graph_exec_id",
                                      "children": [
                                        {
                                          "value": "graph_exec",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_exec_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )\n\n            if not event.node_id:\n                if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue\n\n            if not event.block_id:\n                logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue\n\n            block = get_block(event.block_id)\n            if not block or block.block_type != BlockType.OUTPUT:\n                continue\n\n            output_name = event.input_data.get(\"name\")\n            if not output_name:\n                logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue\n\n            for output_data in event.output_data.get(\"output\", []):\n                logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n                yield output_name, output_data",
                          "children": [
                            {
                              "value": "logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )",
                              "children": [
                                {
                                  "value": "logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )",
                                  "children": [
                                    {
                                      "value": "logger.info",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )",
                                      "children": [
                                        {
                                          "value": "f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Execution",
                                              "children": []
                                            },
                                            {
                                              "value": "{log_id}",
                                              "children": [
                                                {
                                                  "value": "log_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "produced input",
                                              "children": []
                                            },
                                            {
                                              "value": "{event.input_data}",
                                              "children": [
                                                {
                                                  "value": "event.input_data",
                                                  "children": [
                                                    {
                                                      "value": "event",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "output",
                                              "children": []
                                            },
                                            {
                                              "value": "{event.output_data}",
                                              "children": [
                                                {
                                                  "value": "event.output_data",
                                                  "children": [
                                                    {
                                                      "value": "event",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "output_data",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if not event.node_id:\n                if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue",
                              "children": [
                                {
                                  "value": "not event.node_id",
                                  "children": [
                                    {
                                      "value": "event.node_id",
                                      "children": [
                                        {
                                          "value": "event",
                                          "children": []
                                        },
                                        {
                                          "value": "node_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue",
                                  "children": [
                                    {
                                      "value": "if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue",
                                      "children": [
                                        {
                                          "value": "event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]",
                                          "children": [
                                            {
                                              "value": "event.status",
                                              "children": [
                                                {
                                                  "value": "event",
                                                  "children": []
                                                },
                                                {
                                                  "value": "status",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "[ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]",
                                              "children": [
                                                {
                                                  "value": "ExecutionStatus.COMPLETED",
                                                  "children": [
                                                    {
                                                      "value": "ExecutionStatus",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "COMPLETED",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "ExecutionStatus.FAILED",
                                                  "children": [
                                                    {
                                                      "value": "ExecutionStatus",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "FAILED",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break",
                                          "children": [
                                            {
                                              "value": "logger.info(f\"Execution {log_id} ended with status {event.status}\")",
                                              "children": [
                                                {
                                                  "value": "logger.info(f\"Execution {log_id} ended with status {event.status}\")",
                                                  "children": [
                                                    {
                                                      "value": "logger.info",
                                                      "children": [
                                                        {
                                                          "value": "logger",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "info",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(f\"Execution {log_id} ended with status {event.status}\")",
                                                      "children": [
                                                        {
                                                          "value": "f\"Execution {log_id} ended with status {event.status}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Execution",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{log_id}",
                                                              "children": [
                                                                {
                                                                  "value": "log_id",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "ended with status",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{event.status}",
                                                              "children": [
                                                                {
                                                                  "value": "event.status",
                                                                  "children": [
                                                                    {
                                                                      "value": "event",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "status",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "break",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "else:\n                    continue",
                                          "children": [
                                            {
                                              "value": "continue",
                                              "children": [
                                                {
                                                  "value": "continue",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if not event.block_id:\n                logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue",
                              "children": [
                                {
                                  "value": "not event.block_id",
                                  "children": [
                                    {
                                      "value": "event.block_id",
                                      "children": [
                                        {
                                          "value": "event",
                                          "children": []
                                        },
                                        {
                                          "value": "block_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue",
                                  "children": [
                                    {
                                      "value": "logger.warning(f\"{log_id} received event without block_id {event}\")",
                                      "children": [
                                        {
                                          "value": "logger.warning(f\"{log_id} received event without block_id {event}\")",
                                          "children": [
                                            {
                                              "value": "logger.warning",
                                              "children": [
                                                {
                                                  "value": "logger",
                                                  "children": []
                                                },
                                                {
                                                  "value": "warning",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(f\"{log_id} received event without block_id {event}\")",
                                              "children": [
                                                {
                                                  "value": "f\"{log_id} received event without block_id {event}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{log_id}",
                                                      "children": [
                                                        {
                                                          "value": "log_id",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "received event without block_id",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{event}",
                                                      "children": [
                                                        {
                                                          "value": "event",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "continue",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "block = get_block(event.block_id)",
                              "children": [
                                {
                                  "value": "block = get_block(event.block_id)",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "get_block(event.block_id)",
                                      "children": [
                                        {
                                          "value": "get_block",
                                          "children": []
                                        },
                                        {
                                          "value": "(event.block_id)",
                                          "children": [
                                            {
                                              "value": "event.block_id",
                                              "children": [
                                                {
                                                  "value": "event",
                                                  "children": []
                                                },
                                                {
                                                  "value": "block_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if not block or block.block_type != BlockType.OUTPUT:\n                continue",
                              "children": [
                                {
                                  "value": "not block or block.block_type != BlockType.OUTPUT",
                                  "children": [
                                    {
                                      "value": "not block",
                                      "children": [
                                        {
                                          "value": "block",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "block.block_type != BlockType.OUTPUT",
                                      "children": [
                                        {
                                          "value": "block.block_type",
                                          "children": [
                                            {
                                              "value": "block",
                                              "children": []
                                            },
                                            {
                                              "value": "block_type",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "BlockType.OUTPUT",
                                          "children": [
                                            {
                                              "value": "BlockType",
                                              "children": []
                                            },
                                            {
                                              "value": "OUTPUT",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "continue",
                                  "children": [
                                    {
                                      "value": "continue",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "output_name = event.input_data.get(\"name\")",
                              "children": [
                                {
                                  "value": "output_name = event.input_data.get(\"name\")",
                                  "children": [
                                    {
                                      "value": "output_name",
                                      "children": []
                                    },
                                    {
                                      "value": "event.input_data.get(\"name\")",
                                      "children": [
                                        {
                                          "value": "event.input_data.get",
                                          "children": [
                                            {
                                              "value": "event.input_data",
                                              "children": [
                                                {
                                                  "value": "event",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"name\")",
                                          "children": [
                                            {
                                              "value": "\"name\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "name",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if not output_name:\n                logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue",
                              "children": [
                                {
                                  "value": "not output_name",
                                  "children": [
                                    {
                                      "value": "output_name",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue",
                                  "children": [
                                    {
                                      "value": "logger.warning(f\"{log_id} produced an output with no name {event}\")",
                                      "children": [
                                        {
                                          "value": "logger.warning(f\"{log_id} produced an output with no name {event}\")",
                                          "children": [
                                            {
                                              "value": "logger.warning",
                                              "children": [
                                                {
                                                  "value": "logger",
                                                  "children": []
                                                },
                                                {
                                                  "value": "warning",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(f\"{log_id} produced an output with no name {event}\")",
                                              "children": [
                                                {
                                                  "value": "f\"{log_id} produced an output with no name {event}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{log_id}",
                                                      "children": [
                                                        {
                                                          "value": "log_id",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "produced an output with no name",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{event}",
                                                      "children": [
                                                        {
                                                          "value": "event",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "continue",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "for output_data in event.output_data.get(\"output\", []):\n                logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n                yield output_name, output_data",
                              "children": [
                                {
                                  "value": "output_data",
                                  "children": []
                                },
                                {
                                  "value": "event.output_data.get(\"output\", [])",
                                  "children": [
                                    {
                                      "value": "event.output_data.get",
                                      "children": [
                                        {
                                          "value": "event.output_data",
                                          "children": [
                                            {
                                              "value": "event",
                                              "children": []
                                            },
                                            {
                                              "value": "output_data",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"output\", [])",
                                      "children": [
                                        {
                                          "value": "\"output\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "output",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "[]",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n                yield output_name, output_data",
                                  "children": [
                                    {
                                      "value": "logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")",
                                      "children": [
                                        {
                                          "value": "logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")",
                                          "children": [
                                            {
                                              "value": "logger.info",
                                              "children": [
                                                {
                                                  "value": "logger",
                                                  "children": []
                                                },
                                                {
                                                  "value": "info",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(f\"Execution {log_id} produced {output_name}: {output_data}\")",
                                              "children": [
                                                {
                                                  "value": "f\"Execution {log_id} produced {output_name}: {output_data}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Execution",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{log_id}",
                                                      "children": [
                                                        {
                                                          "value": "log_id",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "produced",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{output_name}",
                                                      "children": [
                                                        {
                                                          "value": "output_name",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": ":",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{output_data}",
                                                      "children": [
                                                        {
                                                          "value": "output_data",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "yield output_name, output_data",
                                      "children": [
                                        {
                                          "value": "yield output_name, output_data",
                                          "children": [
                                            {
                                              "value": "output_name, output_data",
                                              "children": [
                                                {
                                                  "value": "output_name",
                                                  "children": []
                                                },
                                                {
                                                  "value": "output_data",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}