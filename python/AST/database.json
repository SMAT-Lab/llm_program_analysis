{
  "value": "from functools import wraps\nfrom typing import Any, Callable, Concatenate, Coroutine, ParamSpec, TypeVar, cast\n\nfrom backend.data.credit import get_user_credit_model\nfrom backend.data.execution import (\n    ExecutionResult,\n    RedisExecutionEventBus,\n    create_graph_execution,\n    get_execution_results,\n    get_incomplete_executions,\n    get_latest_execution,\n    update_execution_status,\n    update_graph_execution_stats,\n    update_node_execution_stats,\n    upsert_execution_input,\n    upsert_execution_output,\n)\nfrom backend.data.graph import get_graph, get_node\nfrom backend.data.user import (\n    get_user_integrations,\n    get_user_metadata,\n    update_user_integrations,\n    update_user_metadata,\n)\nfrom backend.util.service import AppService, expose, register_pydantic_serializers\nfrom backend.util.settings import Config\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\nconfig = Config()\n\n\nclass DatabaseManager(AppService):\n    def __init__(self):\n        super().__init__()\n        self.use_db = True\n        self.use_redis = True\n        self.event_queue = RedisExecutionEventBus()\n\n    @classmethod\n    def get_port(cls) -> int:\n        return config.database_api_port\n\n    @expose\n    def send_execution_update(self, execution_result: ExecutionResult):\n        self.event_queue.publish(execution_result)\n\n    @staticmethod\n    def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:\n        @expose\n        @wraps(f)\n        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res\n\n        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)\n\n        return wrapper\n\n    # Executions\n    create_graph_execution = exposed_run_and_wait(create_graph_execution)\n    get_execution_results = exposed_run_and_wait(get_execution_results)\n    get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\n    get_latest_execution = exposed_run_and_wait(get_latest_execution)\n    update_execution_status = exposed_run_and_wait(update_execution_status)\n    update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)\n    update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\n    upsert_execution_input = exposed_run_and_wait(upsert_execution_input)\n    upsert_execution_output = exposed_run_and_wait(upsert_execution_output)\n\n    # Graphs\n    get_node = exposed_run_and_wait(get_node)\n    get_graph = exposed_run_and_wait(get_graph)\n\n    # Credits\n    user_credit_model = get_user_credit_model()\n    get_or_refill_credit = cast(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )\n    spend_credits = cast(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )\n\n    # User + User Metadata + User Integrations\n    get_user_metadata = exposed_run_and_wait(get_user_metadata)\n    update_user_metadata = exposed_run_and_wait(update_user_metadata)\n    get_user_integrations = exposed_run_and_wait(get_user_integrations)\n    update_user_integrations = exposed_run_and_wait(update_user_integrations)",
  "children": [
    {
      "value": "from functools import wraps",
      "children": [
        {
          "value": "functools",
          "children": [
            {
              "value": "functools",
              "children": []
            }
          ]
        },
        {
          "value": "wraps",
          "children": [
            {
              "value": "wraps",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Any, Callable, Concatenate, Coroutine, ParamSpec, TypeVar, cast",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "Callable",
          "children": [
            {
              "value": "Callable",
              "children": []
            }
          ]
        },
        {
          "value": "Concatenate",
          "children": [
            {
              "value": "Concatenate",
              "children": []
            }
          ]
        },
        {
          "value": "Coroutine",
          "children": [
            {
              "value": "Coroutine",
              "children": []
            }
          ]
        },
        {
          "value": "ParamSpec",
          "children": [
            {
              "value": "ParamSpec",
              "children": []
            }
          ]
        },
        {
          "value": "TypeVar",
          "children": [
            {
              "value": "TypeVar",
              "children": []
            }
          ]
        },
        {
          "value": "cast",
          "children": [
            {
              "value": "cast",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.credit import get_user_credit_model",
      "children": [
        {
          "value": "backend.data.credit",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "credit",
              "children": []
            }
          ]
        },
        {
          "value": "get_user_credit_model",
          "children": [
            {
              "value": "get_user_credit_model",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.execution import (\n    ExecutionResult,\n    RedisExecutionEventBus,\n    create_graph_execution,\n    get_execution_results,\n    get_incomplete_executions,\n    get_latest_execution,\n    update_execution_status,\n    update_graph_execution_stats,\n    update_node_execution_stats,\n    upsert_execution_input,\n    upsert_execution_output,\n)",
      "children": [
        {
          "value": "backend.data.execution",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "execution",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionResult",
          "children": [
            {
              "value": "ExecutionResult",
              "children": []
            }
          ]
        },
        {
          "value": "RedisExecutionEventBus",
          "children": [
            {
              "value": "RedisExecutionEventBus",
              "children": []
            }
          ]
        },
        {
          "value": "create_graph_execution",
          "children": [
            {
              "value": "create_graph_execution",
              "children": []
            }
          ]
        },
        {
          "value": "get_execution_results",
          "children": [
            {
              "value": "get_execution_results",
              "children": []
            }
          ]
        },
        {
          "value": "get_incomplete_executions",
          "children": [
            {
              "value": "get_incomplete_executions",
              "children": []
            }
          ]
        },
        {
          "value": "get_latest_execution",
          "children": [
            {
              "value": "get_latest_execution",
              "children": []
            }
          ]
        },
        {
          "value": "update_execution_status",
          "children": [
            {
              "value": "update_execution_status",
              "children": []
            }
          ]
        },
        {
          "value": "update_graph_execution_stats",
          "children": [
            {
              "value": "update_graph_execution_stats",
              "children": []
            }
          ]
        },
        {
          "value": "update_node_execution_stats",
          "children": [
            {
              "value": "update_node_execution_stats",
              "children": []
            }
          ]
        },
        {
          "value": "upsert_execution_input",
          "children": [
            {
              "value": "upsert_execution_input",
              "children": []
            }
          ]
        },
        {
          "value": "upsert_execution_output",
          "children": [
            {
              "value": "upsert_execution_output",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.graph import get_graph, get_node",
      "children": [
        {
          "value": "backend.data.graph",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "graph",
              "children": []
            }
          ]
        },
        {
          "value": "get_graph",
          "children": [
            {
              "value": "get_graph",
              "children": []
            }
          ]
        },
        {
          "value": "get_node",
          "children": [
            {
              "value": "get_node",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.user import (\n    get_user_integrations,\n    get_user_metadata,\n    update_user_integrations,\n    update_user_metadata,\n)",
      "children": [
        {
          "value": "backend.data.user",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "user",
              "children": []
            }
          ]
        },
        {
          "value": "get_user_integrations",
          "children": [
            {
              "value": "get_user_integrations",
              "children": []
            }
          ]
        },
        {
          "value": "get_user_metadata",
          "children": [
            {
              "value": "get_user_metadata",
              "children": []
            }
          ]
        },
        {
          "value": "update_user_integrations",
          "children": [
            {
              "value": "update_user_integrations",
              "children": []
            }
          ]
        },
        {
          "value": "update_user_metadata",
          "children": [
            {
              "value": "update_user_metadata",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.service import AppService, expose, register_pydantic_serializers",
      "children": [
        {
          "value": "backend.util.service",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "service",
              "children": []
            }
          ]
        },
        {
          "value": "AppService",
          "children": [
            {
              "value": "AppService",
              "children": []
            }
          ]
        },
        {
          "value": "expose",
          "children": [
            {
              "value": "expose",
              "children": []
            }
          ]
        },
        {
          "value": "register_pydantic_serializers",
          "children": [
            {
              "value": "register_pydantic_serializers",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Config",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Config",
          "children": [
            {
              "value": "Config",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "P = ParamSpec(\"P\")",
      "children": [
        {
          "value": "P = ParamSpec(\"P\")",
          "children": [
            {
              "value": "P",
              "children": []
            },
            {
              "value": "ParamSpec(\"P\")",
              "children": [
                {
                  "value": "ParamSpec",
                  "children": []
                },
                {
                  "value": "(\"P\")",
                  "children": [
                    {
                      "value": "\"P\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "P",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "R = TypeVar(\"R\")",
      "children": [
        {
          "value": "R = TypeVar(\"R\")",
          "children": [
            {
              "value": "R",
              "children": []
            },
            {
              "value": "TypeVar(\"R\")",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"R\")",
                  "children": [
                    {
                      "value": "\"R\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "R",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "config = Config()",
      "children": [
        {
          "value": "config = Config()",
          "children": [
            {
              "value": "config",
              "children": []
            },
            {
              "value": "Config()",
              "children": [
                {
                  "value": "Config",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class DatabaseManager(AppService):\n    def __init__(self):\n        super().__init__()\n        self.use_db = True\n        self.use_redis = True\n        self.event_queue = RedisExecutionEventBus()\n\n    @classmethod\n    def get_port(cls) -> int:\n        return config.database_api_port\n\n    @expose\n    def send_execution_update(self, execution_result: ExecutionResult):\n        self.event_queue.publish(execution_result)\n\n    @staticmethod\n    def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:\n        @expose\n        @wraps(f)\n        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res\n\n        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)\n\n        return wrapper\n\n    # Executions\n    create_graph_execution = exposed_run_and_wait(create_graph_execution)\n    get_execution_results = exposed_run_and_wait(get_execution_results)\n    get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\n    get_latest_execution = exposed_run_and_wait(get_latest_execution)\n    update_execution_status = exposed_run_and_wait(update_execution_status)\n    update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)\n    update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\n    upsert_execution_input = exposed_run_and_wait(upsert_execution_input)\n    upsert_execution_output = exposed_run_and_wait(upsert_execution_output)\n\n    # Graphs\n    get_node = exposed_run_and_wait(get_node)\n    get_graph = exposed_run_and_wait(get_graph)\n\n    # Credits\n    user_credit_model = get_user_credit_model()\n    get_or_refill_credit = cast(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )\n    spend_credits = cast(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )\n\n    # User + User Metadata + User Integrations\n    get_user_metadata = exposed_run_and_wait(get_user_metadata)\n    update_user_metadata = exposed_run_and_wait(update_user_metadata)\n    get_user_integrations = exposed_run_and_wait(get_user_integrations)\n    update_user_integrations = exposed_run_and_wait(update_user_integrations)",
      "children": [
        {
          "value": "DatabaseManager",
          "children": []
        },
        {
          "value": "(AppService)",
          "children": [
            {
              "value": "AppService",
              "children": []
            }
          ]
        },
        {
          "value": "def __init__(self):\n        super().__init__()\n        self.use_db = True\n        self.use_redis = True\n        self.event_queue = RedisExecutionEventBus()\n\n    @classmethod\n    def get_port(cls) -> int:\n        return config.database_api_port\n\n    @expose\n    def send_execution_update(self, execution_result: ExecutionResult):\n        self.event_queue.publish(execution_result)\n\n    @staticmethod\n    def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:\n        @expose\n        @wraps(f)\n        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res\n\n        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)\n\n        return wrapper\n\n    # Executions\n    create_graph_execution = exposed_run_and_wait(create_graph_execution)\n    get_execution_results = exposed_run_and_wait(get_execution_results)\n    get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\n    get_latest_execution = exposed_run_and_wait(get_latest_execution)\n    update_execution_status = exposed_run_and_wait(update_execution_status)\n    update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)\n    update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\n    upsert_execution_input = exposed_run_and_wait(upsert_execution_input)\n    upsert_execution_output = exposed_run_and_wait(upsert_execution_output)\n\n    # Graphs\n    get_node = exposed_run_and_wait(get_node)\n    get_graph = exposed_run_and_wait(get_graph)\n\n    # Credits\n    user_credit_model = get_user_credit_model()\n    get_or_refill_credit = cast(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )\n    spend_credits = cast(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )\n\n    # User + User Metadata + User Integrations\n    get_user_metadata = exposed_run_and_wait(get_user_metadata)\n    update_user_metadata = exposed_run_and_wait(update_user_metadata)\n    get_user_integrations = exposed_run_and_wait(get_user_integrations)\n    update_user_integrations = exposed_run_and_wait(update_user_integrations)",
          "children": [
            {
              "value": "def __init__(self):\n        super().__init__()\n        self.use_db = True\n        self.use_redis = True\n        self.event_queue = RedisExecutionEventBus()",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__()\n        self.use_db = True\n        self.use_redis = True\n        self.event_queue = RedisExecutionEventBus()",
                  "children": [
                    {
                      "value": "super().__init__()",
                      "children": [
                        {
                          "value": "super().__init__()",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.use_db = True",
                      "children": [
                        {
                          "value": "self.use_db = True",
                          "children": [
                            {
                              "value": "self.use_db",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "use_db",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "True",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.use_redis = True",
                      "children": [
                        {
                          "value": "self.use_redis = True",
                          "children": [
                            {
                              "value": "self.use_redis",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "use_redis",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "True",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.event_queue = RedisExecutionEventBus()",
                      "children": [
                        {
                          "value": "self.event_queue = RedisExecutionEventBus()",
                          "children": [
                            {
                              "value": "self.event_queue",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "event_queue",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "RedisExecutionEventBus()",
                              "children": [
                                {
                                  "value": "RedisExecutionEventBus",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@classmethod\n    def get_port(cls) -> int:\n        return config.database_api_port",
              "children": [
                {
                  "value": "@classmethod",
                  "children": [
                    {
                      "value": "classmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def get_port(cls) -> int:\n        return config.database_api_port",
                  "children": [
                    {
                      "value": "get_port",
                      "children": []
                    },
                    {
                      "value": "(cls)",
                      "children": [
                        {
                          "value": "cls",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return config.database_api_port",
                      "children": [
                        {
                          "value": "return config.database_api_port",
                          "children": [
                            {
                              "value": "config.database_api_port",
                              "children": [
                                {
                                  "value": "config",
                                  "children": []
                                },
                                {
                                  "value": "database_api_port",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@expose\n    def send_execution_update(self, execution_result: ExecutionResult):\n        self.event_queue.publish(execution_result)",
              "children": [
                {
                  "value": "@expose",
                  "children": [
                    {
                      "value": "expose",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def send_execution_update(self, execution_result: ExecutionResult):\n        self.event_queue.publish(execution_result)",
                  "children": [
                    {
                      "value": "send_execution_update",
                      "children": []
                    },
                    {
                      "value": "(self, execution_result: ExecutionResult)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "execution_result: ExecutionResult",
                          "children": [
                            {
                              "value": "execution_result",
                              "children": []
                            },
                            {
                              "value": "ExecutionResult",
                              "children": [
                                {
                                  "value": "ExecutionResult",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.event_queue.publish(execution_result)",
                      "children": [
                        {
                          "value": "self.event_queue.publish(execution_result)",
                          "children": [
                            {
                              "value": "self.event_queue.publish(execution_result)",
                              "children": [
                                {
                                  "value": "self.event_queue.publish",
                                  "children": [
                                    {
                                      "value": "self.event_queue",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "event_queue",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "publish",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(execution_result)",
                                  "children": [
                                    {
                                      "value": "execution_result",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:\n        @expose\n        @wraps(f)\n        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res\n\n        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)\n\n        return wrapper",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:\n        @expose\n        @wraps(f)\n        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res\n\n        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)\n\n        return wrapper",
                  "children": [
                    {
                      "value": "exposed_run_and_wait",
                      "children": []
                    },
                    {
                      "value": "(\n        f: Callable[P, Coroutine[None, None, R]]\n    )",
                      "children": [
                        {
                          "value": "f: Callable[P, Coroutine[None, None, R]]",
                          "children": [
                            {
                              "value": "f",
                              "children": []
                            },
                            {
                              "value": "Callable[P, Coroutine[None, None, R]]",
                              "children": [
                                {
                                  "value": "Callable[P, Coroutine[None, None, R]]",
                                  "children": [
                                    {
                                      "value": "Callable",
                                      "children": []
                                    },
                                    {
                                      "value": "[P, Coroutine[None, None, R]]",
                                      "children": [
                                        {
                                          "value": "P",
                                          "children": [
                                            {
                                              "value": "P",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "Coroutine[None, None, R]",
                                          "children": [
                                            {
                                              "value": "Coroutine[None, None, R]",
                                              "children": [
                                                {
                                                  "value": "Coroutine",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[None, None, R]",
                                                  "children": [
                                                    {
                                                      "value": "None",
                                                      "children": [
                                                        {
                                                          "value": "None",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "None",
                                                      "children": [
                                                        {
                                                          "value": "None",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "R",
                                                      "children": [
                                                        {
                                                          "value": "R",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "Callable[Concatenate[object, P], R]",
                      "children": [
                        {
                          "value": "Callable[Concatenate[object, P], R]",
                          "children": [
                            {
                              "value": "Callable",
                              "children": []
                            },
                            {
                              "value": "[Concatenate[object, P], R]",
                              "children": [
                                {
                                  "value": "Concatenate[object, P]",
                                  "children": [
                                    {
                                      "value": "Concatenate[object, P]",
                                      "children": [
                                        {
                                          "value": "Concatenate",
                                          "children": []
                                        },
                                        {
                                          "value": "[object, P]",
                                          "children": [
                                            {
                                              "value": "object",
                                              "children": [
                                                {
                                                  "value": "object",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "P",
                                              "children": [
                                                {
                                                  "value": "P",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "R",
                                  "children": [
                                    {
                                      "value": "R",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "@expose\n        @wraps(f)\n        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res\n\n        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)\n\n        return wrapper",
                      "children": [
                        {
                          "value": "@expose\n        @wraps(f)\n        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res",
                          "children": [
                            {
                              "value": "@expose",
                              "children": [
                                {
                                  "value": "expose",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "@wraps(f)",
                              "children": [
                                {
                                  "value": "wraps(f)",
                                  "children": [
                                    {
                                      "value": "wraps",
                                      "children": []
                                    },
                                    {
                                      "value": "(f)",
                                      "children": [
                                        {
                                          "value": "f",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res",
                              "children": [
                                {
                                  "value": "wrapper",
                                  "children": []
                                },
                                {
                                  "value": "(self, *args: P.args, **kwargs: P.kwargs)",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "*args: P.args",
                                      "children": [
                                        {
                                          "value": "*args",
                                          "children": [
                                            {
                                              "value": "args",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "P.args",
                                          "children": [
                                            {
                                              "value": "P.args",
                                              "children": [
                                                {
                                                  "value": "P",
                                                  "children": []
                                                },
                                                {
                                                  "value": "args",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "**kwargs: P.kwargs",
                                      "children": [
                                        {
                                          "value": "**kwargs",
                                          "children": [
                                            {
                                              "value": "kwargs",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "P.kwargs",
                                          "children": [
                                            {
                                              "value": "P.kwargs",
                                              "children": [
                                                {
                                                  "value": "P",
                                                  "children": []
                                                },
                                                {
                                                  "value": "kwargs",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "R",
                                  "children": [
                                    {
                                      "value": "R",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res",
                                  "children": [
                                    {
                                      "value": "coroutine = f(*args, **kwargs)",
                                      "children": [
                                        {
                                          "value": "coroutine = f(*args, **kwargs)",
                                          "children": [
                                            {
                                              "value": "coroutine",
                                              "children": []
                                            },
                                            {
                                              "value": "f(*args, **kwargs)",
                                              "children": [
                                                {
                                                  "value": "f",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(*args, **kwargs)",
                                                  "children": [
                                                    {
                                                      "value": "*args",
                                                      "children": [
                                                        {
                                                          "value": "args",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "**kwargs",
                                                      "children": [
                                                        {
                                                          "value": "kwargs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "res = self.run_and_wait(coroutine)",
                                      "children": [
                                        {
                                          "value": "res = self.run_and_wait(coroutine)",
                                          "children": [
                                            {
                                              "value": "res",
                                              "children": []
                                            },
                                            {
                                              "value": "self.run_and_wait(coroutine)",
                                              "children": [
                                                {
                                                  "value": "self.run_and_wait",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "run_and_wait",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(coroutine)",
                                                  "children": [
                                                    {
                                                      "value": "coroutine",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "return res",
                                      "children": [
                                        {
                                          "value": "res",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# Register serializers for annotations on bare function",
                          "children": []
                        },
                        {
                          "value": "register_pydantic_serializers(f)",
                          "children": [
                            {
                              "value": "register_pydantic_serializers(f)",
                              "children": [
                                {
                                  "value": "register_pydantic_serializers",
                                  "children": []
                                },
                                {
                                  "value": "(f)",
                                  "children": [
                                    {
                                      "value": "f",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return wrapper",
                          "children": [
                            {
                              "value": "wrapper",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Executions",
              "children": []
            },
            {
              "value": "create_graph_execution = exposed_run_and_wait(create_graph_execution)",
              "children": [
                {
                  "value": "create_graph_execution = exposed_run_and_wait(create_graph_execution)",
                  "children": [
                    {
                      "value": "create_graph_execution",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(create_graph_execution)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(create_graph_execution)",
                          "children": [
                            {
                              "value": "create_graph_execution",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "get_execution_results = exposed_run_and_wait(get_execution_results)",
              "children": [
                {
                  "value": "get_execution_results = exposed_run_and_wait(get_execution_results)",
                  "children": [
                    {
                      "value": "get_execution_results",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(get_execution_results)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(get_execution_results)",
                          "children": [
                            {
                              "value": "get_execution_results",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)",
              "children": [
                {
                  "value": "get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)",
                  "children": [
                    {
                      "value": "get_incomplete_executions",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(get_incomplete_executions)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(get_incomplete_executions)",
                          "children": [
                            {
                              "value": "get_incomplete_executions",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "get_latest_execution = exposed_run_and_wait(get_latest_execution)",
              "children": [
                {
                  "value": "get_latest_execution = exposed_run_and_wait(get_latest_execution)",
                  "children": [
                    {
                      "value": "get_latest_execution",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(get_latest_execution)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(get_latest_execution)",
                          "children": [
                            {
                              "value": "get_latest_execution",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "update_execution_status = exposed_run_and_wait(update_execution_status)",
              "children": [
                {
                  "value": "update_execution_status = exposed_run_and_wait(update_execution_status)",
                  "children": [
                    {
                      "value": "update_execution_status",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(update_execution_status)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(update_execution_status)",
                          "children": [
                            {
                              "value": "update_execution_status",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)",
              "children": [
                {
                  "value": "update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)",
                  "children": [
                    {
                      "value": "update_graph_execution_stats",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(update_graph_execution_stats)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(update_graph_execution_stats)",
                          "children": [
                            {
                              "value": "update_graph_execution_stats",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)",
              "children": [
                {
                  "value": "update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)",
                  "children": [
                    {
                      "value": "update_node_execution_stats",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(update_node_execution_stats)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(update_node_execution_stats)",
                          "children": [
                            {
                              "value": "update_node_execution_stats",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "upsert_execution_input = exposed_run_and_wait(upsert_execution_input)",
              "children": [
                {
                  "value": "upsert_execution_input = exposed_run_and_wait(upsert_execution_input)",
                  "children": [
                    {
                      "value": "upsert_execution_input",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(upsert_execution_input)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(upsert_execution_input)",
                          "children": [
                            {
                              "value": "upsert_execution_input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "upsert_execution_output = exposed_run_and_wait(upsert_execution_output)",
              "children": [
                {
                  "value": "upsert_execution_output = exposed_run_and_wait(upsert_execution_output)",
                  "children": [
                    {
                      "value": "upsert_execution_output",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(upsert_execution_output)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(upsert_execution_output)",
                          "children": [
                            {
                              "value": "upsert_execution_output",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Graphs",
              "children": []
            },
            {
              "value": "get_node = exposed_run_and_wait(get_node)",
              "children": [
                {
                  "value": "get_node = exposed_run_and_wait(get_node)",
                  "children": [
                    {
                      "value": "get_node",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(get_node)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(get_node)",
                          "children": [
                            {
                              "value": "get_node",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "get_graph = exposed_run_and_wait(get_graph)",
              "children": [
                {
                  "value": "get_graph = exposed_run_and_wait(get_graph)",
                  "children": [
                    {
                      "value": "get_graph",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(get_graph)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(get_graph)",
                          "children": [
                            {
                              "value": "get_graph",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Credits",
              "children": []
            },
            {
              "value": "user_credit_model = get_user_credit_model()",
              "children": [
                {
                  "value": "user_credit_model = get_user_credit_model()",
                  "children": [
                    {
                      "value": "user_credit_model",
                      "children": []
                    },
                    {
                      "value": "get_user_credit_model()",
                      "children": [
                        {
                          "value": "get_user_credit_model",
                          "children": []
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "get_or_refill_credit = cast(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )",
              "children": [
                {
                  "value": "get_or_refill_credit = cast(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )",
                  "children": [
                    {
                      "value": "get_or_refill_credit",
                      "children": []
                    },
                    {
                      "value": "cast(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )",
                      "children": [
                        {
                          "value": "cast",
                          "children": []
                        },
                        {
                          "value": "(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )",
                          "children": [
                            {
                              "value": "Callable[[Any, str], int]",
                              "children": [
                                {
                                  "value": "Callable",
                                  "children": []
                                },
                                {
                                  "value": "[Any, str]",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": []
                                    },
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "exposed_run_and_wait(user_credit_model.get_or_refill_credit)",
                              "children": [
                                {
                                  "value": "exposed_run_and_wait",
                                  "children": []
                                },
                                {
                                  "value": "(user_credit_model.get_or_refill_credit)",
                                  "children": [
                                    {
                                      "value": "user_credit_model.get_or_refill_credit",
                                      "children": [
                                        {
                                          "value": "user_credit_model",
                                          "children": []
                                        },
                                        {
                                          "value": "get_or_refill_credit",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "spend_credits = cast(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )",
              "children": [
                {
                  "value": "spend_credits = cast(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )",
                  "children": [
                    {
                      "value": "spend_credits",
                      "children": []
                    },
                    {
                      "value": "cast(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )",
                      "children": [
                        {
                          "value": "cast",
                          "children": []
                        },
                        {
                          "value": "(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )",
                          "children": [
                            {
                              "value": "Callable[[Any, str, int, str, dict[str, str], float, float], int]",
                              "children": [
                                {
                                  "value": "Callable",
                                  "children": []
                                },
                                {
                                  "value": "[Any, str, int, str, dict[str, str], float, float]",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": []
                                    },
                                    {
                                      "value": "str",
                                      "children": []
                                    },
                                    {
                                      "value": "int",
                                      "children": []
                                    },
                                    {
                                      "value": "str",
                                      "children": []
                                    },
                                    {
                                      "value": "dict[str, str]",
                                      "children": [
                                        {
                                          "value": "dict",
                                          "children": []
                                        },
                                        {
                                          "value": "str",
                                          "children": []
                                        },
                                        {
                                          "value": "str",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "float",
                                      "children": []
                                    },
                                    {
                                      "value": "float",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "exposed_run_and_wait(user_credit_model.spend_credits)",
                              "children": [
                                {
                                  "value": "exposed_run_and_wait",
                                  "children": []
                                },
                                {
                                  "value": "(user_credit_model.spend_credits)",
                                  "children": [
                                    {
                                      "value": "user_credit_model.spend_credits",
                                      "children": [
                                        {
                                          "value": "user_credit_model",
                                          "children": []
                                        },
                                        {
                                          "value": "spend_credits",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# User + User Metadata + User Integrations",
              "children": []
            },
            {
              "value": "get_user_metadata = exposed_run_and_wait(get_user_metadata)",
              "children": [
                {
                  "value": "get_user_metadata = exposed_run_and_wait(get_user_metadata)",
                  "children": [
                    {
                      "value": "get_user_metadata",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(get_user_metadata)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(get_user_metadata)",
                          "children": [
                            {
                              "value": "get_user_metadata",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "update_user_metadata = exposed_run_and_wait(update_user_metadata)",
              "children": [
                {
                  "value": "update_user_metadata = exposed_run_and_wait(update_user_metadata)",
                  "children": [
                    {
                      "value": "update_user_metadata",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(update_user_metadata)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(update_user_metadata)",
                          "children": [
                            {
                              "value": "update_user_metadata",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "get_user_integrations = exposed_run_and_wait(get_user_integrations)",
              "children": [
                {
                  "value": "get_user_integrations = exposed_run_and_wait(get_user_integrations)",
                  "children": [
                    {
                      "value": "get_user_integrations",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(get_user_integrations)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(get_user_integrations)",
                          "children": [
                            {
                              "value": "get_user_integrations",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "update_user_integrations = exposed_run_and_wait(update_user_integrations)",
              "children": [
                {
                  "value": "update_user_integrations = exposed_run_and_wait(update_user_integrations)",
                  "children": [
                    {
                      "value": "update_user_integrations",
                      "children": []
                    },
                    {
                      "value": "exposed_run_and_wait(update_user_integrations)",
                      "children": [
                        {
                          "value": "exposed_run_and_wait",
                          "children": []
                        },
                        {
                          "value": "(update_user_integrations)",
                          "children": [
                            {
                              "value": "update_user_integrations",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}