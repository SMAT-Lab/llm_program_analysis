{
  "value": "import ipaddress\nimport re\nimport socket\nfrom typing import Callable\nfrom urllib.parse import urlparse, urlunparse\n\nimport idna\nimport requests as req\n\nfrom backend.util.settings import Config\n\n# List of IP networks to block\nBLOCKED_IP_NETWORKS = [\n    # --8<-- [start:BLOCKED_IP_NETWORKS]\n    ipaddress.ip_network(\"0.0.0.0/8\"),  # \"This\" Network\n    ipaddress.ip_network(\"10.0.0.0/8\"),  # Private-Use\n    ipaddress.ip_network(\"127.0.0.0/8\"),  # Loopback\n    ipaddress.ip_network(\"169.254.0.0/16\"),  # Link Local\n    ipaddress.ip_network(\"172.16.0.0/12\"),  # Private-Use\n    ipaddress.ip_network(\"192.168.0.0/16\"),  # Private-Use\n    ipaddress.ip_network(\"224.0.0.0/4\"),  # Multicast\n    ipaddress.ip_network(\"240.0.0.0/4\"),  # Reserved for Future Use\n    # --8<-- [end:BLOCKED_IP_NETWORKS]\n]\n\nALLOWED_SCHEMES = [\"http\", \"https\"]\nHOSTNAME_REGEX = re.compile(r\"^[A-Za-z0-9.-]+$\")  # Basic DNS-safe hostname pattern\n\n\ndef _canonicalize_url(url: str) -> str:\n    # Strip spaces and trailing slashes\n    url = url.strip().strip(\"/\")\n    # Ensure the URL starts with http:// or https://\n    if not url.startswith((\"http://\", \"https://\")):\n        url = \"http://\" + url\n\n    # Replace backslashes with forward slashes to avoid parsing ambiguities\n    url = url.replace(\"\\\\\", \"/\")\n    return url\n\n\ndef _is_ip_blocked(ip: str) -> bool:\n    \"\"\"\n    Checks if the IP address is in a blocked network.\n    \"\"\"\n    ip_addr = ipaddress.ip_address(ip)\n    return any(ip_addr in network for network in BLOCKED_IP_NETWORKS)\n\n\ndef validate_url(url: str, trusted_origins: list[str]) -> str:\n    \"\"\"\n    Validates the URL to prevent SSRF attacks by ensuring it does not point to a private\n    or untrusted IP address, unless whitelisted.\n    \"\"\"\n    url = _canonicalize_url(url)\n    parsed = urlparse(url)\n\n    # Check scheme\n    if parsed.scheme not in ALLOWED_SCHEMES:\n        raise ValueError(\n            f\"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n        )\n\n    # Validate and IDNA encode the hostname\n    if not parsed.hostname:\n        raise ValueError(\"Invalid URL: No hostname found.\")\n\n    # IDNA encode to prevent Unicode domain attacks\n    try:\n        ascii_hostname = idna.encode(parsed.hostname).decode(\"ascii\")\n    except idna.IDNAError:\n        raise ValueError(\"Invalid hostname with unsupported characters.\")\n\n    # Check hostname characters\n    if not HOSTNAME_REGEX.match(ascii_hostname):\n        raise ValueError(\"Hostname contains invalid characters.\")\n\n    # Rebuild the URL with the normalized, IDNA-encoded hostname\n    parsed = parsed._replace(netloc=ascii_hostname)\n    url = str(urlunparse(parsed))\n\n    # Check if hostname is a trusted origin (exact match)\n    if ascii_hostname in trusted_origins:\n        return url\n\n    # Resolve all IP addresses for the hostname\n    try:\n        ip_addresses = {res[4][0] for res in socket.getaddrinfo(ascii_hostname, None)}\n    except socket.gaierror:\n        raise ValueError(f\"Unable to resolve IP address for hostname {ascii_hostname}\")\n\n    if not ip_addresses:\n        raise ValueError(f\"No IP addresses found for {ascii_hostname}\")\n\n    # Check if any resolved IP address falls into blocked ranges\n    for ip in ip_addresses:\n        if _is_ip_blocked(ip):\n            raise ValueError(\n                f\"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n            )\n\n    return url\n\n\nclass Requests:\n    \"\"\"\n    A wrapper around the requests library that validates URLs before making requests.\n    \"\"\"\n\n    def __init__(\n        self,\n        trusted_origins: list[str] | None = None,\n        raise_for_status: bool = True,\n        extra_url_validator: Callable[[str], str] | None = None,\n        extra_headers: dict[str, str] | None = None,\n    ):\n        self.trusted_origins = []\n        for url in trusted_origins or []:\n            hostname = urlparse(url).hostname\n            if not hostname:\n                raise ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")\n            self.trusted_origins.append(hostname)\n\n        self.raise_for_status = raise_for_status\n        self.extra_url_validator = extra_url_validator\n        self.extra_headers = extra_headers\n\n    def request(\n        self, method, url, headers=None, allow_redirects=False, *args, **kwargs\n    ) -> req.Response:\n        if self.extra_headers is not None:\n            headers = {**(headers or {}), **self.extra_headers}\n\n        url = validate_url(url, self.trusted_origins)\n        if self.extra_url_validator is not None:\n            url = self.extra_url_validator(url)\n\n        response = req.request(\n            method,\n            url,\n            headers=headers,\n            allow_redirects=allow_redirects,\n            *args,\n            **kwargs,\n        )\n        if self.raise_for_status:\n            response.raise_for_status()\n\n        return response\n\n    def get(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"GET\", url, *args, **kwargs)\n\n    def post(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"POST\", url, *args, **kwargs)\n\n    def put(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"PUT\", url, *args, **kwargs)\n\n    def delete(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"DELETE\", url, *args, **kwargs)\n\n    def head(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"HEAD\", url, *args, **kwargs)\n\n    def options(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"OPTIONS\", url, *args, **kwargs)\n\n    def patch(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"PATCH\", url, *args, **kwargs)\n\n\nrequests = Requests(trusted_origins=Config().trust_endpoints_for_requests)",
  "children": [
    {
      "value": "import ipaddress",
      "children": [
        {
          "value": "ipaddress",
          "children": [
            {
              "value": "ipaddress",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import re",
      "children": [
        {
          "value": "re",
          "children": [
            {
              "value": "re",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import socket",
      "children": [
        {
          "value": "socket",
          "children": [
            {
              "value": "socket",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Callable",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Callable",
          "children": [
            {
              "value": "Callable",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from urllib.parse import urlparse, urlunparse",
      "children": [
        {
          "value": "urllib.parse",
          "children": [
            {
              "value": "urllib",
              "children": []
            },
            {
              "value": "parse",
              "children": []
            }
          ]
        },
        {
          "value": "urlparse",
          "children": [
            {
              "value": "urlparse",
              "children": []
            }
          ]
        },
        {
          "value": "urlunparse",
          "children": [
            {
              "value": "urlunparse",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import idna",
      "children": [
        {
          "value": "idna",
          "children": [
            {
              "value": "idna",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import requests as req",
      "children": [
        {
          "value": "requests as req",
          "children": [
            {
              "value": "requests",
              "children": [
                {
                  "value": "requests",
                  "children": []
                }
              ]
            },
            {
              "value": "req",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Config",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Config",
          "children": [
            {
              "value": "Config",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "# List of IP networks to block",
      "children": []
    },
    {
      "value": "BLOCKED_IP_NETWORKS = [\n    # --8<-- [start:BLOCKED_IP_NETWORKS]\n    ipaddress.ip_network(\"0.0.0.0/8\"),  # \"This\" Network\n    ipaddress.ip_network(\"10.0.0.0/8\"),  # Private-Use\n    ipaddress.ip_network(\"127.0.0.0/8\"),  # Loopback\n    ipaddress.ip_network(\"169.254.0.0/16\"),  # Link Local\n    ipaddress.ip_network(\"172.16.0.0/12\"),  # Private-Use\n    ipaddress.ip_network(\"192.168.0.0/16\"),  # Private-Use\n    ipaddress.ip_network(\"224.0.0.0/4\"),  # Multicast\n    ipaddress.ip_network(\"240.0.0.0/4\"),  # Reserved for Future Use\n    # --8<-- [end:BLOCKED_IP_NETWORKS]\n]",
      "children": [
        {
          "value": "BLOCKED_IP_NETWORKS = [\n    # --8<-- [start:BLOCKED_IP_NETWORKS]\n    ipaddress.ip_network(\"0.0.0.0/8\"),  # \"This\" Network\n    ipaddress.ip_network(\"10.0.0.0/8\"),  # Private-Use\n    ipaddress.ip_network(\"127.0.0.0/8\"),  # Loopback\n    ipaddress.ip_network(\"169.254.0.0/16\"),  # Link Local\n    ipaddress.ip_network(\"172.16.0.0/12\"),  # Private-Use\n    ipaddress.ip_network(\"192.168.0.0/16\"),  # Private-Use\n    ipaddress.ip_network(\"224.0.0.0/4\"),  # Multicast\n    ipaddress.ip_network(\"240.0.0.0/4\"),  # Reserved for Future Use\n    # --8<-- [end:BLOCKED_IP_NETWORKS]\n]",
          "children": [
            {
              "value": "BLOCKED_IP_NETWORKS",
              "children": []
            },
            {
              "value": "[\n    # --8<-- [start:BLOCKED_IP_NETWORKS]\n    ipaddress.ip_network(\"0.0.0.0/8\"),  # \"This\" Network\n    ipaddress.ip_network(\"10.0.0.0/8\"),  # Private-Use\n    ipaddress.ip_network(\"127.0.0.0/8\"),  # Loopback\n    ipaddress.ip_network(\"169.254.0.0/16\"),  # Link Local\n    ipaddress.ip_network(\"172.16.0.0/12\"),  # Private-Use\n    ipaddress.ip_network(\"192.168.0.0/16\"),  # Private-Use\n    ipaddress.ip_network(\"224.0.0.0/4\"),  # Multicast\n    ipaddress.ip_network(\"240.0.0.0/4\"),  # Reserved for Future Use\n    # --8<-- [end:BLOCKED_IP_NETWORKS]\n]",
              "children": [
                {
                  "value": "# --8<-- [start:BLOCKED_IP_NETWORKS]",
                  "children": []
                },
                {
                  "value": "ipaddress.ip_network(\"0.0.0.0/8\")",
                  "children": [
                    {
                      "value": "ipaddress.ip_network",
                      "children": [
                        {
                          "value": "ipaddress",
                          "children": []
                        },
                        {
                          "value": "ip_network",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"0.0.0.0/8\")",
                      "children": [
                        {
                          "value": "\"0.0.0.0/8\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "0.0.0.0/8",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# \"This\" Network",
                  "children": []
                },
                {
                  "value": "ipaddress.ip_network(\"10.0.0.0/8\")",
                  "children": [
                    {
                      "value": "ipaddress.ip_network",
                      "children": [
                        {
                          "value": "ipaddress",
                          "children": []
                        },
                        {
                          "value": "ip_network",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"10.0.0.0/8\")",
                      "children": [
                        {
                          "value": "\"10.0.0.0/8\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "10.0.0.0/8",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Private-Use",
                  "children": []
                },
                {
                  "value": "ipaddress.ip_network(\"127.0.0.0/8\")",
                  "children": [
                    {
                      "value": "ipaddress.ip_network",
                      "children": [
                        {
                          "value": "ipaddress",
                          "children": []
                        },
                        {
                          "value": "ip_network",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"127.0.0.0/8\")",
                      "children": [
                        {
                          "value": "\"127.0.0.0/8\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "127.0.0.0/8",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Loopback",
                  "children": []
                },
                {
                  "value": "ipaddress.ip_network(\"169.254.0.0/16\")",
                  "children": [
                    {
                      "value": "ipaddress.ip_network",
                      "children": [
                        {
                          "value": "ipaddress",
                          "children": []
                        },
                        {
                          "value": "ip_network",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"169.254.0.0/16\")",
                      "children": [
                        {
                          "value": "\"169.254.0.0/16\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "169.254.0.0/16",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Link Local",
                  "children": []
                },
                {
                  "value": "ipaddress.ip_network(\"172.16.0.0/12\")",
                  "children": [
                    {
                      "value": "ipaddress.ip_network",
                      "children": [
                        {
                          "value": "ipaddress",
                          "children": []
                        },
                        {
                          "value": "ip_network",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"172.16.0.0/12\")",
                      "children": [
                        {
                          "value": "\"172.16.0.0/12\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "172.16.0.0/12",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Private-Use",
                  "children": []
                },
                {
                  "value": "ipaddress.ip_network(\"192.168.0.0/16\")",
                  "children": [
                    {
                      "value": "ipaddress.ip_network",
                      "children": [
                        {
                          "value": "ipaddress",
                          "children": []
                        },
                        {
                          "value": "ip_network",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"192.168.0.0/16\")",
                      "children": [
                        {
                          "value": "\"192.168.0.0/16\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "192.168.0.0/16",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Private-Use",
                  "children": []
                },
                {
                  "value": "ipaddress.ip_network(\"224.0.0.0/4\")",
                  "children": [
                    {
                      "value": "ipaddress.ip_network",
                      "children": [
                        {
                          "value": "ipaddress",
                          "children": []
                        },
                        {
                          "value": "ip_network",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"224.0.0.0/4\")",
                      "children": [
                        {
                          "value": "\"224.0.0.0/4\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "224.0.0.0/4",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Multicast",
                  "children": []
                },
                {
                  "value": "ipaddress.ip_network(\"240.0.0.0/4\")",
                  "children": [
                    {
                      "value": "ipaddress.ip_network",
                      "children": [
                        {
                          "value": "ipaddress",
                          "children": []
                        },
                        {
                          "value": "ip_network",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"240.0.0.0/4\")",
                      "children": [
                        {
                          "value": "\"240.0.0.0/4\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "240.0.0.0/4",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Reserved for Future Use",
                  "children": []
                },
                {
                  "value": "# --8<-- [end:BLOCKED_IP_NETWORKS]",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "ALLOWED_SCHEMES = [\"http\", \"https\"]",
      "children": [
        {
          "value": "ALLOWED_SCHEMES = [\"http\", \"https\"]",
          "children": [
            {
              "value": "ALLOWED_SCHEMES",
              "children": []
            },
            {
              "value": "[\"http\", \"https\"]",
              "children": [
                {
                  "value": "\"http\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "http",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"https\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "https",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "HOSTNAME_REGEX = re.compile(r\"^[A-Za-z0-9.-]+$\")",
      "children": [
        {
          "value": "HOSTNAME_REGEX = re.compile(r\"^[A-Za-z0-9.-]+$\")",
          "children": [
            {
              "value": "HOSTNAME_REGEX",
              "children": []
            },
            {
              "value": "re.compile(r\"^[A-Za-z0-9.-]+$\")",
              "children": [
                {
                  "value": "re.compile",
                  "children": [
                    {
                      "value": "re",
                      "children": []
                    },
                    {
                      "value": "compile",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(r\"^[A-Za-z0-9.-]+$\")",
                  "children": [
                    {
                      "value": "r\"^[A-Za-z0-9.-]+$\"",
                      "children": [
                        {
                          "value": "r\"",
                          "children": []
                        },
                        {
                          "value": "^[A-Za-z0-9.-]+$",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# Basic DNS-safe hostname pattern",
      "children": []
    },
    {
      "value": "def _canonicalize_url(url: str) -> str:\n    # Strip spaces and trailing slashes\n    url = url.strip().strip(\"/\")\n    # Ensure the URL starts with http:// or https://\n    if not url.startswith((\"http://\", \"https://\")):\n        url = \"http://\" + url\n\n    # Replace backslashes with forward slashes to avoid parsing ambiguities\n    url = url.replace(\"\\\\\", \"/\")\n    return url",
      "children": [
        {
          "value": "_canonicalize_url",
          "children": []
        },
        {
          "value": "(url: str)",
          "children": [
            {
              "value": "url: str",
              "children": [
                {
                  "value": "url",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "str",
          "children": [
            {
              "value": "str",
              "children": []
            }
          ]
        },
        {
          "value": "# Strip spaces and trailing slashes",
          "children": []
        },
        {
          "value": "url = url.strip().strip(\"/\")\n    # Ensure the URL starts with http:// or https://\n    if not url.startswith((\"http://\", \"https://\")):\n        url = \"http://\" + url\n\n    # Replace backslashes with forward slashes to avoid parsing ambiguities\n    url = url.replace(\"\\\\\", \"/\")\n    return url",
          "children": [
            {
              "value": "url = url.strip().strip(\"/\")",
              "children": [
                {
                  "value": "url = url.strip().strip(\"/\")",
                  "children": [
                    {
                      "value": "url",
                      "children": []
                    },
                    {
                      "value": "url.strip().strip(\"/\")",
                      "children": [
                        {
                          "value": "url.strip().strip",
                          "children": [
                            {
                              "value": "url.strip()",
                              "children": [
                                {
                                  "value": "url.strip",
                                  "children": [
                                    {
                                      "value": "url",
                                      "children": []
                                    },
                                    {
                                      "value": "strip",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "strip",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\"/\")",
                          "children": [
                            {
                              "value": "\"/\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "/",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Ensure the URL starts with http:// or https://",
              "children": []
            },
            {
              "value": "if not url.startswith((\"http://\", \"https://\")):\n        url = \"http://\" + url",
              "children": [
                {
                  "value": "not url.startswith((\"http://\", \"https://\"))",
                  "children": [
                    {
                      "value": "url.startswith((\"http://\", \"https://\"))",
                      "children": [
                        {
                          "value": "url.startswith",
                          "children": [
                            {
                              "value": "url",
                              "children": []
                            },
                            {
                              "value": "startswith",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "((\"http://\", \"https://\"))",
                          "children": [
                            {
                              "value": "(\"http://\", \"https://\")",
                              "children": [
                                {
                                  "value": "\"http://\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "http://",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"https://\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "https://",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "url = \"http://\" + url",
                  "children": [
                    {
                      "value": "url = \"http://\" + url",
                      "children": [
                        {
                          "value": "url = \"http://\" + url",
                          "children": [
                            {
                              "value": "url",
                              "children": []
                            },
                            {
                              "value": "\"http://\" + url",
                              "children": [
                                {
                                  "value": "\"http://\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "http://",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "url",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Replace backslashes with forward slashes to avoid parsing ambiguities",
              "children": []
            },
            {
              "value": "url = url.replace(\"\\\\\", \"/\")",
              "children": [
                {
                  "value": "url = url.replace(\"\\\\\", \"/\")",
                  "children": [
                    {
                      "value": "url",
                      "children": []
                    },
                    {
                      "value": "url.replace(\"\\\\\", \"/\")",
                      "children": [
                        {
                          "value": "url.replace",
                          "children": [
                            {
                              "value": "url",
                              "children": []
                            },
                            {
                              "value": "replace",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\"\\\\\", \"/\")",
                          "children": [
                            {
                              "value": "\"\\\\\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "\\\\",
                                  "children": [
                                    {
                                      "value": "\\\\",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"/\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "/",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return url",
              "children": [
                {
                  "value": "url",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def _is_ip_blocked(ip: str) -> bool:\n    \"\"\"\n    Checks if the IP address is in a blocked network.\n    \"\"\"\n    ip_addr = ipaddress.ip_address(ip)\n    return any(ip_addr in network for network in BLOCKED_IP_NETWORKS)",
      "children": [
        {
          "value": "_is_ip_blocked",
          "children": []
        },
        {
          "value": "(ip: str)",
          "children": [
            {
              "value": "ip: str",
              "children": [
                {
                  "value": "ip",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "bool",
          "children": [
            {
              "value": "bool",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Checks if the IP address is in a blocked network.\n    \"\"\"\n    ip_addr = ipaddress.ip_address(ip)\n    return any(ip_addr in network for network in BLOCKED_IP_NETWORKS)",
          "children": [
            {
              "value": "\"\"\"\n    Checks if the IP address is in a blocked network.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Checks if the IP address is in a blocked network.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Checks if the IP address is in a blocked network.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "ip_addr = ipaddress.ip_address(ip)",
              "children": [
                {
                  "value": "ip_addr = ipaddress.ip_address(ip)",
                  "children": [
                    {
                      "value": "ip_addr",
                      "children": []
                    },
                    {
                      "value": "ipaddress.ip_address(ip)",
                      "children": [
                        {
                          "value": "ipaddress.ip_address",
                          "children": [
                            {
                              "value": "ipaddress",
                              "children": []
                            },
                            {
                              "value": "ip_address",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(ip)",
                          "children": [
                            {
                              "value": "ip",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return any(ip_addr in network for network in BLOCKED_IP_NETWORKS)",
              "children": [
                {
                  "value": "any(ip_addr in network for network in BLOCKED_IP_NETWORKS)",
                  "children": [
                    {
                      "value": "any",
                      "children": []
                    },
                    {
                      "value": "(ip_addr in network for network in BLOCKED_IP_NETWORKS)",
                      "children": [
                        {
                          "value": "ip_addr in network",
                          "children": [
                            {
                              "value": "ip_addr",
                              "children": []
                            },
                            {
                              "value": "network",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "for network in BLOCKED_IP_NETWORKS",
                          "children": [
                            {
                              "value": "network",
                              "children": []
                            },
                            {
                              "value": "BLOCKED_IP_NETWORKS",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def validate_url(url: str, trusted_origins: list[str]) -> str:\n    \"\"\"\n    Validates the URL to prevent SSRF attacks by ensuring it does not point to a private\n    or untrusted IP address, unless whitelisted.\n    \"\"\"\n    url = _canonicalize_url(url)\n    parsed = urlparse(url)\n\n    # Check scheme\n    if parsed.scheme not in ALLOWED_SCHEMES:\n        raise ValueError(\n            f\"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n        )\n\n    # Validate and IDNA encode the hostname\n    if not parsed.hostname:\n        raise ValueError(\"Invalid URL: No hostname found.\")\n\n    # IDNA encode to prevent Unicode domain attacks\n    try:\n        ascii_hostname = idna.encode(parsed.hostname).decode(\"ascii\")\n    except idna.IDNAError:\n        raise ValueError(\"Invalid hostname with unsupported characters.\")\n\n    # Check hostname characters\n    if not HOSTNAME_REGEX.match(ascii_hostname):\n        raise ValueError(\"Hostname contains invalid characters.\")\n\n    # Rebuild the URL with the normalized, IDNA-encoded hostname\n    parsed = parsed._replace(netloc=ascii_hostname)\n    url = str(urlunparse(parsed))\n\n    # Check if hostname is a trusted origin (exact match)\n    if ascii_hostname in trusted_origins:\n        return url\n\n    # Resolve all IP addresses for the hostname\n    try:\n        ip_addresses = {res[4][0] for res in socket.getaddrinfo(ascii_hostname, None)}\n    except socket.gaierror:\n        raise ValueError(f\"Unable to resolve IP address for hostname {ascii_hostname}\")\n\n    if not ip_addresses:\n        raise ValueError(f\"No IP addresses found for {ascii_hostname}\")\n\n    # Check if any resolved IP address falls into blocked ranges\n    for ip in ip_addresses:\n        if _is_ip_blocked(ip):\n            raise ValueError(\n                f\"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n            )\n\n    return url",
      "children": [
        {
          "value": "validate_url",
          "children": []
        },
        {
          "value": "(url: str, trusted_origins: list[str])",
          "children": [
            {
              "value": "url: str",
              "children": [
                {
                  "value": "url",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "trusted_origins: list[str]",
              "children": [
                {
                  "value": "trusted_origins",
                  "children": []
                },
                {
                  "value": "list[str]",
                  "children": [
                    {
                      "value": "list[str]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[str]",
                          "children": [
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "str",
          "children": [
            {
              "value": "str",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Validates the URL to prevent SSRF attacks by ensuring it does not point to a private\n    or untrusted IP address, unless whitelisted.\n    \"\"\"\n    url = _canonicalize_url(url)\n    parsed = urlparse(url)\n\n    # Check scheme\n    if parsed.scheme not in ALLOWED_SCHEMES:\n        raise ValueError(\n            f\"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n        )\n\n    # Validate and IDNA encode the hostname\n    if not parsed.hostname:\n        raise ValueError(\"Invalid URL: No hostname found.\")\n\n    # IDNA encode to prevent Unicode domain attacks\n    try:\n        ascii_hostname = idna.encode(parsed.hostname).decode(\"ascii\")\n    except idna.IDNAError:\n        raise ValueError(\"Invalid hostname with unsupported characters.\")\n\n    # Check hostname characters\n    if not HOSTNAME_REGEX.match(ascii_hostname):\n        raise ValueError(\"Hostname contains invalid characters.\")\n\n    # Rebuild the URL with the normalized, IDNA-encoded hostname\n    parsed = parsed._replace(netloc=ascii_hostname)\n    url = str(urlunparse(parsed))\n\n    # Check if hostname is a trusted origin (exact match)\n    if ascii_hostname in trusted_origins:\n        return url\n\n    # Resolve all IP addresses for the hostname\n    try:\n        ip_addresses = {res[4][0] for res in socket.getaddrinfo(ascii_hostname, None)}\n    except socket.gaierror:\n        raise ValueError(f\"Unable to resolve IP address for hostname {ascii_hostname}\")\n\n    if not ip_addresses:\n        raise ValueError(f\"No IP addresses found for {ascii_hostname}\")\n\n    # Check if any resolved IP address falls into blocked ranges\n    for ip in ip_addresses:\n        if _is_ip_blocked(ip):\n            raise ValueError(\n                f\"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n            )\n\n    return url",
          "children": [
            {
              "value": "\"\"\"\n    Validates the URL to prevent SSRF attacks by ensuring it does not point to a private\n    or untrusted IP address, unless whitelisted.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Validates the URL to prevent SSRF attacks by ensuring it does not point to a private\n    or untrusted IP address, unless whitelisted.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Validates the URL to prevent SSRF attacks by ensuring it does not point to a private\n    or untrusted IP address, unless whitelisted.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "url = _canonicalize_url(url)",
              "children": [
                {
                  "value": "url = _canonicalize_url(url)",
                  "children": [
                    {
                      "value": "url",
                      "children": []
                    },
                    {
                      "value": "_canonicalize_url(url)",
                      "children": [
                        {
                          "value": "_canonicalize_url",
                          "children": []
                        },
                        {
                          "value": "(url)",
                          "children": [
                            {
                              "value": "url",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "parsed = urlparse(url)",
              "children": [
                {
                  "value": "parsed = urlparse(url)",
                  "children": [
                    {
                      "value": "parsed",
                      "children": []
                    },
                    {
                      "value": "urlparse(url)",
                      "children": [
                        {
                          "value": "urlparse",
                          "children": []
                        },
                        {
                          "value": "(url)",
                          "children": [
                            {
                              "value": "url",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Check scheme",
              "children": []
            },
            {
              "value": "if parsed.scheme not in ALLOWED_SCHEMES:\n        raise ValueError(\n            f\"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n        )",
              "children": [
                {
                  "value": "parsed.scheme not in ALLOWED_SCHEMES",
                  "children": [
                    {
                      "value": "parsed.scheme",
                      "children": [
                        {
                          "value": "parsed",
                          "children": []
                        },
                        {
                          "value": "scheme",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ALLOWED_SCHEMES",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\n            f\"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n        )",
                  "children": [
                    {
                      "value": "raise ValueError(\n            f\"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n        )",
                      "children": [
                        {
                          "value": "ValueError(\n            f\"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n        )",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\n            f\"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n        )",
                              "children": [
                                {
                                  "value": "f\"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Scheme '",
                                      "children": []
                                    },
                                    {
                                      "value": "{parsed.scheme}",
                                      "children": [
                                        {
                                          "value": "parsed.scheme",
                                          "children": [
                                            {
                                              "value": "parsed",
                                              "children": []
                                            },
                                            {
                                              "value": "scheme",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "' is not allowed. Only HTTP/HTTPS are supported.",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Validate and IDNA encode the hostname",
              "children": []
            },
            {
              "value": "if not parsed.hostname:\n        raise ValueError(\"Invalid URL: No hostname found.\")",
              "children": [
                {
                  "value": "not parsed.hostname",
                  "children": [
                    {
                      "value": "parsed.hostname",
                      "children": [
                        {
                          "value": "parsed",
                          "children": []
                        },
                        {
                          "value": "hostname",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"Invalid URL: No hostname found.\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"Invalid URL: No hostname found.\")",
                      "children": [
                        {
                          "value": "ValueError(\"Invalid URL: No hostname found.\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"Invalid URL: No hostname found.\")",
                              "children": [
                                {
                                  "value": "\"Invalid URL: No hostname found.\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Invalid URL: No hostname found.",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# IDNA encode to prevent Unicode domain attacks",
              "children": []
            },
            {
              "value": "try:\n        ascii_hostname = idna.encode(parsed.hostname).decode(\"ascii\")\n    except idna.IDNAError:\n        raise ValueError(\"Invalid hostname with unsupported characters.\")",
              "children": [
                {
                  "value": "ascii_hostname = idna.encode(parsed.hostname).decode(\"ascii\")",
                  "children": [
                    {
                      "value": "ascii_hostname = idna.encode(parsed.hostname).decode(\"ascii\")",
                      "children": [
                        {
                          "value": "ascii_hostname = idna.encode(parsed.hostname).decode(\"ascii\")",
                          "children": [
                            {
                              "value": "ascii_hostname",
                              "children": []
                            },
                            {
                              "value": "idna.encode(parsed.hostname).decode(\"ascii\")",
                              "children": [
                                {
                                  "value": "idna.encode(parsed.hostname).decode",
                                  "children": [
                                    {
                                      "value": "idna.encode(parsed.hostname)",
                                      "children": [
                                        {
                                          "value": "idna.encode",
                                          "children": [
                                            {
                                              "value": "idna",
                                              "children": []
                                            },
                                            {
                                              "value": "encode",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(parsed.hostname)",
                                          "children": [
                                            {
                                              "value": "parsed.hostname",
                                              "children": [
                                                {
                                                  "value": "parsed",
                                                  "children": []
                                                },
                                                {
                                                  "value": "hostname",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "decode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\"ascii\")",
                                  "children": [
                                    {
                                      "value": "\"ascii\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "ascii",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except idna.IDNAError:\n        raise ValueError(\"Invalid hostname with unsupported characters.\")",
                  "children": [
                    {
                      "value": "idna.IDNAError",
                      "children": [
                        {
                          "value": "idna",
                          "children": []
                        },
                        {
                          "value": "IDNAError",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise ValueError(\"Invalid hostname with unsupported characters.\")",
                      "children": [
                        {
                          "value": "raise ValueError(\"Invalid hostname with unsupported characters.\")",
                          "children": [
                            {
                              "value": "ValueError(\"Invalid hostname with unsupported characters.\")",
                              "children": [
                                {
                                  "value": "ValueError",
                                  "children": []
                                },
                                {
                                  "value": "(\"Invalid hostname with unsupported characters.\")",
                                  "children": [
                                    {
                                      "value": "\"Invalid hostname with unsupported characters.\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Invalid hostname with unsupported characters.",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Check hostname characters",
              "children": []
            },
            {
              "value": "if not HOSTNAME_REGEX.match(ascii_hostname):\n        raise ValueError(\"Hostname contains invalid characters.\")",
              "children": [
                {
                  "value": "not HOSTNAME_REGEX.match(ascii_hostname)",
                  "children": [
                    {
                      "value": "HOSTNAME_REGEX.match(ascii_hostname)",
                      "children": [
                        {
                          "value": "HOSTNAME_REGEX.match",
                          "children": [
                            {
                              "value": "HOSTNAME_REGEX",
                              "children": []
                            },
                            {
                              "value": "match",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(ascii_hostname)",
                          "children": [
                            {
                              "value": "ascii_hostname",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"Hostname contains invalid characters.\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"Hostname contains invalid characters.\")",
                      "children": [
                        {
                          "value": "ValueError(\"Hostname contains invalid characters.\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"Hostname contains invalid characters.\")",
                              "children": [
                                {
                                  "value": "\"Hostname contains invalid characters.\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Hostname contains invalid characters.",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Rebuild the URL with the normalized, IDNA-encoded hostname",
              "children": []
            },
            {
              "value": "parsed = parsed._replace(netloc=ascii_hostname)",
              "children": [
                {
                  "value": "parsed = parsed._replace(netloc=ascii_hostname)",
                  "children": [
                    {
                      "value": "parsed",
                      "children": []
                    },
                    {
                      "value": "parsed._replace(netloc=ascii_hostname)",
                      "children": [
                        {
                          "value": "parsed._replace",
                          "children": [
                            {
                              "value": "parsed",
                              "children": []
                            },
                            {
                              "value": "_replace",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(netloc=ascii_hostname)",
                          "children": [
                            {
                              "value": "netloc=ascii_hostname",
                              "children": [
                                {
                                  "value": "netloc",
                                  "children": []
                                },
                                {
                                  "value": "ascii_hostname",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "url = str(urlunparse(parsed))",
              "children": [
                {
                  "value": "url = str(urlunparse(parsed))",
                  "children": [
                    {
                      "value": "url",
                      "children": []
                    },
                    {
                      "value": "str(urlunparse(parsed))",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        },
                        {
                          "value": "(urlunparse(parsed))",
                          "children": [
                            {
                              "value": "urlunparse(parsed)",
                              "children": [
                                {
                                  "value": "urlunparse",
                                  "children": []
                                },
                                {
                                  "value": "(parsed)",
                                  "children": [
                                    {
                                      "value": "parsed",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Check if hostname is a trusted origin (exact match)",
              "children": []
            },
            {
              "value": "if ascii_hostname in trusted_origins:\n        return url",
              "children": [
                {
                  "value": "ascii_hostname in trusted_origins",
                  "children": [
                    {
                      "value": "ascii_hostname",
                      "children": []
                    },
                    {
                      "value": "trusted_origins",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return url",
                  "children": [
                    {
                      "value": "return url",
                      "children": [
                        {
                          "value": "url",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Resolve all IP addresses for the hostname",
              "children": []
            },
            {
              "value": "try:\n        ip_addresses = {res[4][0] for res in socket.getaddrinfo(ascii_hostname, None)}\n    except socket.gaierror:\n        raise ValueError(f\"Unable to resolve IP address for hostname {ascii_hostname}\")",
              "children": [
                {
                  "value": "ip_addresses = {res[4][0] for res in socket.getaddrinfo(ascii_hostname, None)}",
                  "children": [
                    {
                      "value": "ip_addresses = {res[4][0] for res in socket.getaddrinfo(ascii_hostname, None)}",
                      "children": [
                        {
                          "value": "ip_addresses = {res[4][0] for res in socket.getaddrinfo(ascii_hostname, None)}",
                          "children": [
                            {
                              "value": "ip_addresses",
                              "children": []
                            },
                            {
                              "value": "{res[4][0] for res in socket.getaddrinfo(ascii_hostname, None)}",
                              "children": [
                                {
                                  "value": "res[4][0]",
                                  "children": [
                                    {
                                      "value": "res[4]",
                                      "children": [
                                        {
                                          "value": "res",
                                          "children": []
                                        },
                                        {
                                          "value": "4",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "for res in socket.getaddrinfo(ascii_hostname, None)",
                                  "children": [
                                    {
                                      "value": "res",
                                      "children": []
                                    },
                                    {
                                      "value": "socket.getaddrinfo(ascii_hostname, None)",
                                      "children": [
                                        {
                                          "value": "socket.getaddrinfo",
                                          "children": [
                                            {
                                              "value": "socket",
                                              "children": []
                                            },
                                            {
                                              "value": "getaddrinfo",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(ascii_hostname, None)",
                                          "children": [
                                            {
                                              "value": "ascii_hostname",
                                              "children": []
                                            },
                                            {
                                              "value": "None",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except socket.gaierror:\n        raise ValueError(f\"Unable to resolve IP address for hostname {ascii_hostname}\")",
                  "children": [
                    {
                      "value": "socket.gaierror",
                      "children": [
                        {
                          "value": "socket",
                          "children": []
                        },
                        {
                          "value": "gaierror",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise ValueError(f\"Unable to resolve IP address for hostname {ascii_hostname}\")",
                      "children": [
                        {
                          "value": "raise ValueError(f\"Unable to resolve IP address for hostname {ascii_hostname}\")",
                          "children": [
                            {
                              "value": "ValueError(f\"Unable to resolve IP address for hostname {ascii_hostname}\")",
                              "children": [
                                {
                                  "value": "ValueError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unable to resolve IP address for hostname {ascii_hostname}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unable to resolve IP address for hostname {ascii_hostname}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unable to resolve IP address for hostname",
                                          "children": []
                                        },
                                        {
                                          "value": "{ascii_hostname}",
                                          "children": [
                                            {
                                              "value": "ascii_hostname",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not ip_addresses:\n        raise ValueError(f\"No IP addresses found for {ascii_hostname}\")",
              "children": [
                {
                  "value": "not ip_addresses",
                  "children": [
                    {
                      "value": "ip_addresses",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(f\"No IP addresses found for {ascii_hostname}\")",
                  "children": [
                    {
                      "value": "raise ValueError(f\"No IP addresses found for {ascii_hostname}\")",
                      "children": [
                        {
                          "value": "ValueError(f\"No IP addresses found for {ascii_hostname}\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(f\"No IP addresses found for {ascii_hostname}\")",
                              "children": [
                                {
                                  "value": "f\"No IP addresses found for {ascii_hostname}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "No IP addresses found for",
                                      "children": []
                                    },
                                    {
                                      "value": "{ascii_hostname}",
                                      "children": [
                                        {
                                          "value": "ascii_hostname",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Check if any resolved IP address falls into blocked ranges",
              "children": []
            },
            {
              "value": "for ip in ip_addresses:\n        if _is_ip_blocked(ip):\n            raise ValueError(\n                f\"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n            )",
              "children": [
                {
                  "value": "ip",
                  "children": []
                },
                {
                  "value": "ip_addresses",
                  "children": []
                },
                {
                  "value": "if _is_ip_blocked(ip):\n            raise ValueError(\n                f\"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n            )",
                  "children": [
                    {
                      "value": "if _is_ip_blocked(ip):\n            raise ValueError(\n                f\"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n            )",
                      "children": [
                        {
                          "value": "_is_ip_blocked(ip)",
                          "children": [
                            {
                              "value": "_is_ip_blocked",
                              "children": []
                            },
                            {
                              "value": "(ip)",
                              "children": [
                                {
                                  "value": "ip",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(\n                f\"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n            )",
                          "children": [
                            {
                              "value": "raise ValueError(\n                f\"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n            )",
                              "children": [
                                {
                                  "value": "ValueError(\n                f\"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n            )",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                f\"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n            )",
                                      "children": [
                                        {
                                          "value": "f\"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Access to private IP address",
                                              "children": []
                                            },
                                            {
                                              "value": "{ip}",
                                              "children": [
                                                {
                                                  "value": "ip",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "for hostname",
                                              "children": []
                                            },
                                            {
                                              "value": "{ascii_hostname}",
                                              "children": [
                                                {
                                                  "value": "ascii_hostname",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "is not allowed.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return url",
              "children": [
                {
                  "value": "url",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class Requests:\n    \"\"\"\n    A wrapper around the requests library that validates URLs before making requests.\n    \"\"\"\n\n    def __init__(\n        self,\n        trusted_origins: list[str] | None = None,\n        raise_for_status: bool = True,\n        extra_url_validator: Callable[[str], str] | None = None,\n        extra_headers: dict[str, str] | None = None,\n    ):\n        self.trusted_origins = []\n        for url in trusted_origins or []:\n            hostname = urlparse(url).hostname\n            if not hostname:\n                raise ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")\n            self.trusted_origins.append(hostname)\n\n        self.raise_for_status = raise_for_status\n        self.extra_url_validator = extra_url_validator\n        self.extra_headers = extra_headers\n\n    def request(\n        self, method, url, headers=None, allow_redirects=False, *args, **kwargs\n    ) -> req.Response:\n        if self.extra_headers is not None:\n            headers = {**(headers or {}), **self.extra_headers}\n\n        url = validate_url(url, self.trusted_origins)\n        if self.extra_url_validator is not None:\n            url = self.extra_url_validator(url)\n\n        response = req.request(\n            method,\n            url,\n            headers=headers,\n            allow_redirects=allow_redirects,\n            *args,\n            **kwargs,\n        )\n        if self.raise_for_status:\n            response.raise_for_status()\n\n        return response\n\n    def get(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"GET\", url, *args, **kwargs)\n\n    def post(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"POST\", url, *args, **kwargs)\n\n    def put(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"PUT\", url, *args, **kwargs)\n\n    def delete(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"DELETE\", url, *args, **kwargs)\n\n    def head(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"HEAD\", url, *args, **kwargs)\n\n    def options(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"OPTIONS\", url, *args, **kwargs)\n\n    def patch(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"PATCH\", url, *args, **kwargs)",
      "children": [
        {
          "value": "Requests",
          "children": []
        },
        {
          "value": "\"\"\"\n    A wrapper around the requests library that validates URLs before making requests.\n    \"\"\"\n\n    def __init__(\n        self,\n        trusted_origins: list[str] | None = None,\n        raise_for_status: bool = True,\n        extra_url_validator: Callable[[str], str] | None = None,\n        extra_headers: dict[str, str] | None = None,\n    ):\n        self.trusted_origins = []\n        for url in trusted_origins or []:\n            hostname = urlparse(url).hostname\n            if not hostname:\n                raise ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")\n            self.trusted_origins.append(hostname)\n\n        self.raise_for_status = raise_for_status\n        self.extra_url_validator = extra_url_validator\n        self.extra_headers = extra_headers\n\n    def request(\n        self, method, url, headers=None, allow_redirects=False, *args, **kwargs\n    ) -> req.Response:\n        if self.extra_headers is not None:\n            headers = {**(headers or {}), **self.extra_headers}\n\n        url = validate_url(url, self.trusted_origins)\n        if self.extra_url_validator is not None:\n            url = self.extra_url_validator(url)\n\n        response = req.request(\n            method,\n            url,\n            headers=headers,\n            allow_redirects=allow_redirects,\n            *args,\n            **kwargs,\n        )\n        if self.raise_for_status:\n            response.raise_for_status()\n\n        return response\n\n    def get(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"GET\", url, *args, **kwargs)\n\n    def post(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"POST\", url, *args, **kwargs)\n\n    def put(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"PUT\", url, *args, **kwargs)\n\n    def delete(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"DELETE\", url, *args, **kwargs)\n\n    def head(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"HEAD\", url, *args, **kwargs)\n\n    def options(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"OPTIONS\", url, *args, **kwargs)\n\n    def patch(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"PATCH\", url, *args, **kwargs)",
          "children": [
            {
              "value": "\"\"\"\n    A wrapper around the requests library that validates URLs before making requests.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    A wrapper around the requests library that validates URLs before making requests.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "A wrapper around the requests library that validates URLs before making requests.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(\n        self,\n        trusted_origins: list[str] | None = None,\n        raise_for_status: bool = True,\n        extra_url_validator: Callable[[str], str] | None = None,\n        extra_headers: dict[str, str] | None = None,\n    ):\n        self.trusted_origins = []\n        for url in trusted_origins or []:\n            hostname = urlparse(url).hostname\n            if not hostname:\n                raise ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")\n            self.trusted_origins.append(hostname)\n\n        self.raise_for_status = raise_for_status\n        self.extra_url_validator = extra_url_validator\n        self.extra_headers = extra_headers",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(\n        self,\n        trusted_origins: list[str] | None = None,\n        raise_for_status: bool = True,\n        extra_url_validator: Callable[[str], str] | None = None,\n        extra_headers: dict[str, str] | None = None,\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "trusted_origins: list[str] | None = None",
                      "children": [
                        {
                          "value": "trusted_origins",
                          "children": []
                        },
                        {
                          "value": "list[str] | None",
                          "children": [
                            {
                              "value": "list[str] | None",
                              "children": [
                                {
                                  "value": "list[str]",
                                  "children": [
                                    {
                                      "value": "list[str]",
                                      "children": [
                                        {
                                          "value": "list",
                                          "children": []
                                        },
                                        {
                                          "value": "[str]",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "None",
                                  "children": [
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise_for_status: bool = True",
                      "children": [
                        {
                          "value": "raise_for_status",
                          "children": []
                        },
                        {
                          "value": "bool",
                          "children": [
                            {
                              "value": "bool",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "True",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "extra_url_validator: Callable[[str], str] | None = None",
                      "children": [
                        {
                          "value": "extra_url_validator",
                          "children": []
                        },
                        {
                          "value": "Callable[[str], str] | None",
                          "children": [
                            {
                              "value": "Callable[[str], str] | None",
                              "children": [
                                {
                                  "value": "Callable[[str], str]",
                                  "children": [
                                    {
                                      "value": "Callable[[str], str]",
                                      "children": [
                                        {
                                          "value": "Callable",
                                          "children": []
                                        },
                                        {
                                          "value": "[[str], str]",
                                          "children": [
                                            {
                                              "value": "[str]",
                                              "children": [
                                                {
                                                  "value": "[str]",
                                                  "children": [
                                                    {
                                                      "value": "str",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "str",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "None",
                                  "children": [
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "extra_headers: dict[str, str] | None = None",
                      "children": [
                        {
                          "value": "extra_headers",
                          "children": []
                        },
                        {
                          "value": "dict[str, str] | None",
                          "children": [
                            {
                              "value": "dict[str, str] | None",
                              "children": [
                                {
                                  "value": "dict[str, str]",
                                  "children": [
                                    {
                                      "value": "dict[str, str]",
                                      "children": [
                                        {
                                          "value": "dict",
                                          "children": []
                                        },
                                        {
                                          "value": "[str, str]",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "str",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "None",
                                  "children": [
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "self.trusted_origins = []\n        for url in trusted_origins or []:\n            hostname = urlparse(url).hostname\n            if not hostname:\n                raise ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")\n            self.trusted_origins.append(hostname)\n\n        self.raise_for_status = raise_for_status\n        self.extra_url_validator = extra_url_validator\n        self.extra_headers = extra_headers",
                  "children": [
                    {
                      "value": "self.trusted_origins = []",
                      "children": [
                        {
                          "value": "self.trusted_origins = []",
                          "children": [
                            {
                              "value": "self.trusted_origins",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "trusted_origins",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "[]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for url in trusted_origins or []:\n            hostname = urlparse(url).hostname\n            if not hostname:\n                raise ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")\n            self.trusted_origins.append(hostname)",
                      "children": [
                        {
                          "value": "url",
                          "children": []
                        },
                        {
                          "value": "trusted_origins or []",
                          "children": [
                            {
                              "value": "trusted_origins",
                              "children": []
                            },
                            {
                              "value": "[]",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "hostname = urlparse(url).hostname\n            if not hostname:\n                raise ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")\n            self.trusted_origins.append(hostname)",
                          "children": [
                            {
                              "value": "hostname = urlparse(url).hostname",
                              "children": [
                                {
                                  "value": "hostname = urlparse(url).hostname",
                                  "children": [
                                    {
                                      "value": "hostname",
                                      "children": []
                                    },
                                    {
                                      "value": "urlparse(url).hostname",
                                      "children": [
                                        {
                                          "value": "urlparse(url)",
                                          "children": [
                                            {
                                              "value": "urlparse",
                                              "children": []
                                            },
                                            {
                                              "value": "(url)",
                                              "children": [
                                                {
                                                  "value": "url",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "hostname",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if not hostname:\n                raise ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")",
                              "children": [
                                {
                                  "value": "not hostname",
                                  "children": [
                                    {
                                      "value": "hostname",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "raise ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")",
                                  "children": [
                                    {
                                      "value": "raise ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")",
                                      "children": [
                                        {
                                          "value": "ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")",
                                          "children": [
                                            {
                                              "value": "ValueError",
                                              "children": []
                                            },
                                            {
                                              "value": "(f\"Invalid URL: Unable to determine hostname of {url}\")",
                                              "children": [
                                                {
                                                  "value": "f\"Invalid URL: Unable to determine hostname of {url}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Invalid URL: Unable to determine hostname of",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{url}",
                                                      "children": [
                                                        {
                                                          "value": "url",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "self.trusted_origins.append(hostname)",
                              "children": [
                                {
                                  "value": "self.trusted_origins.append(hostname)",
                                  "children": [
                                    {
                                      "value": "self.trusted_origins.append",
                                      "children": [
                                        {
                                          "value": "self.trusted_origins",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "trusted_origins",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "append",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(hostname)",
                                      "children": [
                                        {
                                          "value": "hostname",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.raise_for_status = raise_for_status",
                      "children": [
                        {
                          "value": "self.raise_for_status = raise_for_status",
                          "children": [
                            {
                              "value": "self.raise_for_status",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "raise_for_status",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "raise_for_status",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.extra_url_validator = extra_url_validator",
                      "children": [
                        {
                          "value": "self.extra_url_validator = extra_url_validator",
                          "children": [
                            {
                              "value": "self.extra_url_validator",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "extra_url_validator",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "extra_url_validator",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.extra_headers = extra_headers",
                      "children": [
                        {
                          "value": "self.extra_headers = extra_headers",
                          "children": [
                            {
                              "value": "self.extra_headers",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "extra_headers",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "extra_headers",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def request(\n        self, method, url, headers=None, allow_redirects=False, *args, **kwargs\n    ) -> req.Response:\n        if self.extra_headers is not None:\n            headers = {**(headers or {}), **self.extra_headers}\n\n        url = validate_url(url, self.trusted_origins)\n        if self.extra_url_validator is not None:\n            url = self.extra_url_validator(url)\n\n        response = req.request(\n            method,\n            url,\n            headers=headers,\n            allow_redirects=allow_redirects,\n            *args,\n            **kwargs,\n        )\n        if self.raise_for_status:\n            response.raise_for_status()\n\n        return response",
              "children": [
                {
                  "value": "request",
                  "children": []
                },
                {
                  "value": "(\n        self, method, url, headers=None, allow_redirects=False, *args, **kwargs\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "method",
                      "children": []
                    },
                    {
                      "value": "url",
                      "children": []
                    },
                    {
                      "value": "headers=None",
                      "children": [
                        {
                          "value": "headers",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "allow_redirects=False",
                      "children": [
                        {
                          "value": "allow_redirects",
                          "children": []
                        },
                        {
                          "value": "False",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "*args",
                      "children": [
                        {
                          "value": "args",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "req.Response",
                  "children": [
                    {
                      "value": "req.Response",
                      "children": [
                        {
                          "value": "req",
                          "children": []
                        },
                        {
                          "value": "Response",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if self.extra_headers is not None:\n            headers = {**(headers or {}), **self.extra_headers}\n\n        url = validate_url(url, self.trusted_origins)\n        if self.extra_url_validator is not None:\n            url = self.extra_url_validator(url)\n\n        response = req.request(\n            method,\n            url,\n            headers=headers,\n            allow_redirects=allow_redirects,\n            *args,\n            **kwargs,\n        )\n        if self.raise_for_status:\n            response.raise_for_status()\n\n        return response",
                  "children": [
                    {
                      "value": "if self.extra_headers is not None:\n            headers = {**(headers or {}), **self.extra_headers}",
                      "children": [
                        {
                          "value": "self.extra_headers is not None",
                          "children": [
                            {
                              "value": "self.extra_headers",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "extra_headers",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "headers = {**(headers or {}), **self.extra_headers}",
                          "children": [
                            {
                              "value": "headers = {**(headers or {}), **self.extra_headers}",
                              "children": [
                                {
                                  "value": "headers = {**(headers or {}), **self.extra_headers}",
                                  "children": [
                                    {
                                      "value": "headers",
                                      "children": []
                                    },
                                    {
                                      "value": "{**(headers or {}), **self.extra_headers}",
                                      "children": [
                                        {
                                          "value": "**(headers or {})",
                                          "children": [
                                            {
                                              "value": "(headers or {})",
                                              "children": [
                                                {
                                                  "value": "headers or {}",
                                                  "children": [
                                                    {
                                                      "value": "headers",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{}",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "**self.extra_headers",
                                          "children": [
                                            {
                                              "value": "self.extra_headers",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "extra_headers",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "url = validate_url(url, self.trusted_origins)",
                      "children": [
                        {
                          "value": "url = validate_url(url, self.trusted_origins)",
                          "children": [
                            {
                              "value": "url",
                              "children": []
                            },
                            {
                              "value": "validate_url(url, self.trusted_origins)",
                              "children": [
                                {
                                  "value": "validate_url",
                                  "children": []
                                },
                                {
                                  "value": "(url, self.trusted_origins)",
                                  "children": [
                                    {
                                      "value": "url",
                                      "children": []
                                    },
                                    {
                                      "value": "self.trusted_origins",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "trusted_origins",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if self.extra_url_validator is not None:\n            url = self.extra_url_validator(url)",
                      "children": [
                        {
                          "value": "self.extra_url_validator is not None",
                          "children": [
                            {
                              "value": "self.extra_url_validator",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "extra_url_validator",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "url = self.extra_url_validator(url)",
                          "children": [
                            {
                              "value": "url = self.extra_url_validator(url)",
                              "children": [
                                {
                                  "value": "url = self.extra_url_validator(url)",
                                  "children": [
                                    {
                                      "value": "url",
                                      "children": []
                                    },
                                    {
                                      "value": "self.extra_url_validator(url)",
                                      "children": [
                                        {
                                          "value": "self.extra_url_validator",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "extra_url_validator",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(url)",
                                          "children": [
                                            {
                                              "value": "url",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "response = req.request(\n            method,\n            url,\n            headers=headers,\n            allow_redirects=allow_redirects,\n            *args,\n            **kwargs,\n        )",
                      "children": [
                        {
                          "value": "response = req.request(\n            method,\n            url,\n            headers=headers,\n            allow_redirects=allow_redirects,\n            *args,\n            **kwargs,\n        )",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "req.request(\n            method,\n            url,\n            headers=headers,\n            allow_redirects=allow_redirects,\n            *args,\n            **kwargs,\n        )",
                              "children": [
                                {
                                  "value": "req.request",
                                  "children": [
                                    {
                                      "value": "req",
                                      "children": []
                                    },
                                    {
                                      "value": "request",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            method,\n            url,\n            headers=headers,\n            allow_redirects=allow_redirects,\n            *args,\n            **kwargs,\n        )",
                                  "children": [
                                    {
                                      "value": "method",
                                      "children": []
                                    },
                                    {
                                      "value": "url",
                                      "children": []
                                    },
                                    {
                                      "value": "headers=headers",
                                      "children": [
                                        {
                                          "value": "headers",
                                          "children": []
                                        },
                                        {
                                          "value": "headers",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "allow_redirects=allow_redirects",
                                      "children": [
                                        {
                                          "value": "allow_redirects",
                                          "children": []
                                        },
                                        {
                                          "value": "allow_redirects",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "*args",
                                      "children": [
                                        {
                                          "value": "args",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "**kwargs",
                                      "children": [
                                        {
                                          "value": "kwargs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if self.raise_for_status:\n            response.raise_for_status()",
                      "children": [
                        {
                          "value": "self.raise_for_status",
                          "children": [
                            {
                              "value": "self",
                              "children": []
                            },
                            {
                              "value": "raise_for_status",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "response.raise_for_status()",
                          "children": [
                            {
                              "value": "response.raise_for_status()",
                              "children": [
                                {
                                  "value": "response.raise_for_status()",
                                  "children": [
                                    {
                                      "value": "response.raise_for_status",
                                      "children": [
                                        {
                                          "value": "response",
                                          "children": []
                                        },
                                        {
                                          "value": "raise_for_status",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return response",
                      "children": [
                        {
                          "value": "response",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def get(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"GET\", url, *args, **kwargs)",
              "children": [
                {
                  "value": "get",
                  "children": []
                },
                {
                  "value": "(self, url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "url",
                      "children": []
                    },
                    {
                      "value": "*args",
                      "children": [
                        {
                          "value": "args",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "req.Response",
                  "children": [
                    {
                      "value": "req.Response",
                      "children": [
                        {
                          "value": "req",
                          "children": []
                        },
                        {
                          "value": "Response",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return self.request(\"GET\", url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "return self.request(\"GET\", url, *args, **kwargs)",
                      "children": [
                        {
                          "value": "self.request(\"GET\", url, *args, **kwargs)",
                          "children": [
                            {
                              "value": "self.request",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "request",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"GET\", url, *args, **kwargs)",
                              "children": [
                                {
                                  "value": "\"GET\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "GET",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "url",
                                  "children": []
                                },
                                {
                                  "value": "*args",
                                  "children": [
                                    {
                                      "value": "args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs",
                                  "children": [
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def post(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"POST\", url, *args, **kwargs)",
              "children": [
                {
                  "value": "post",
                  "children": []
                },
                {
                  "value": "(self, url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "url",
                      "children": []
                    },
                    {
                      "value": "*args",
                      "children": [
                        {
                          "value": "args",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "req.Response",
                  "children": [
                    {
                      "value": "req.Response",
                      "children": [
                        {
                          "value": "req",
                          "children": []
                        },
                        {
                          "value": "Response",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return self.request(\"POST\", url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "return self.request(\"POST\", url, *args, **kwargs)",
                      "children": [
                        {
                          "value": "self.request(\"POST\", url, *args, **kwargs)",
                          "children": [
                            {
                              "value": "self.request",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "request",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"POST\", url, *args, **kwargs)",
                              "children": [
                                {
                                  "value": "\"POST\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "POST",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "url",
                                  "children": []
                                },
                                {
                                  "value": "*args",
                                  "children": [
                                    {
                                      "value": "args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs",
                                  "children": [
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def put(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"PUT\", url, *args, **kwargs)",
              "children": [
                {
                  "value": "put",
                  "children": []
                },
                {
                  "value": "(self, url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "url",
                      "children": []
                    },
                    {
                      "value": "*args",
                      "children": [
                        {
                          "value": "args",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "req.Response",
                  "children": [
                    {
                      "value": "req.Response",
                      "children": [
                        {
                          "value": "req",
                          "children": []
                        },
                        {
                          "value": "Response",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return self.request(\"PUT\", url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "return self.request(\"PUT\", url, *args, **kwargs)",
                      "children": [
                        {
                          "value": "self.request(\"PUT\", url, *args, **kwargs)",
                          "children": [
                            {
                              "value": "self.request",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "request",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"PUT\", url, *args, **kwargs)",
                              "children": [
                                {
                                  "value": "\"PUT\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "PUT",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "url",
                                  "children": []
                                },
                                {
                                  "value": "*args",
                                  "children": [
                                    {
                                      "value": "args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs",
                                  "children": [
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def delete(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"DELETE\", url, *args, **kwargs)",
              "children": [
                {
                  "value": "delete",
                  "children": []
                },
                {
                  "value": "(self, url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "url",
                      "children": []
                    },
                    {
                      "value": "*args",
                      "children": [
                        {
                          "value": "args",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "req.Response",
                  "children": [
                    {
                      "value": "req.Response",
                      "children": [
                        {
                          "value": "req",
                          "children": []
                        },
                        {
                          "value": "Response",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return self.request(\"DELETE\", url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "return self.request(\"DELETE\", url, *args, **kwargs)",
                      "children": [
                        {
                          "value": "self.request(\"DELETE\", url, *args, **kwargs)",
                          "children": [
                            {
                              "value": "self.request",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "request",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"DELETE\", url, *args, **kwargs)",
                              "children": [
                                {
                                  "value": "\"DELETE\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "DELETE",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "url",
                                  "children": []
                                },
                                {
                                  "value": "*args",
                                  "children": [
                                    {
                                      "value": "args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs",
                                  "children": [
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def head(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"HEAD\", url, *args, **kwargs)",
              "children": [
                {
                  "value": "head",
                  "children": []
                },
                {
                  "value": "(self, url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "url",
                      "children": []
                    },
                    {
                      "value": "*args",
                      "children": [
                        {
                          "value": "args",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "req.Response",
                  "children": [
                    {
                      "value": "req.Response",
                      "children": [
                        {
                          "value": "req",
                          "children": []
                        },
                        {
                          "value": "Response",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return self.request(\"HEAD\", url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "return self.request(\"HEAD\", url, *args, **kwargs)",
                      "children": [
                        {
                          "value": "self.request(\"HEAD\", url, *args, **kwargs)",
                          "children": [
                            {
                              "value": "self.request",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "request",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"HEAD\", url, *args, **kwargs)",
                              "children": [
                                {
                                  "value": "\"HEAD\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "HEAD",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "url",
                                  "children": []
                                },
                                {
                                  "value": "*args",
                                  "children": [
                                    {
                                      "value": "args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs",
                                  "children": [
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def options(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"OPTIONS\", url, *args, **kwargs)",
              "children": [
                {
                  "value": "options",
                  "children": []
                },
                {
                  "value": "(self, url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "url",
                      "children": []
                    },
                    {
                      "value": "*args",
                      "children": [
                        {
                          "value": "args",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "req.Response",
                  "children": [
                    {
                      "value": "req.Response",
                      "children": [
                        {
                          "value": "req",
                          "children": []
                        },
                        {
                          "value": "Response",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return self.request(\"OPTIONS\", url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "return self.request(\"OPTIONS\", url, *args, **kwargs)",
                      "children": [
                        {
                          "value": "self.request(\"OPTIONS\", url, *args, **kwargs)",
                          "children": [
                            {
                              "value": "self.request",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "request",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"OPTIONS\", url, *args, **kwargs)",
                              "children": [
                                {
                                  "value": "\"OPTIONS\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "OPTIONS",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "url",
                                  "children": []
                                },
                                {
                                  "value": "*args",
                                  "children": [
                                    {
                                      "value": "args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs",
                                  "children": [
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def patch(self, url, *args, **kwargs) -> req.Response:\n        return self.request(\"PATCH\", url, *args, **kwargs)",
              "children": [
                {
                  "value": "patch",
                  "children": []
                },
                {
                  "value": "(self, url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "url",
                      "children": []
                    },
                    {
                      "value": "*args",
                      "children": [
                        {
                          "value": "args",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "req.Response",
                  "children": [
                    {
                      "value": "req.Response",
                      "children": [
                        {
                          "value": "req",
                          "children": []
                        },
                        {
                          "value": "Response",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return self.request(\"PATCH\", url, *args, **kwargs)",
                  "children": [
                    {
                      "value": "return self.request(\"PATCH\", url, *args, **kwargs)",
                      "children": [
                        {
                          "value": "self.request(\"PATCH\", url, *args, **kwargs)",
                          "children": [
                            {
                              "value": "self.request",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "request",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"PATCH\", url, *args, **kwargs)",
                              "children": [
                                {
                                  "value": "\"PATCH\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "PATCH",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "url",
                                  "children": []
                                },
                                {
                                  "value": "*args",
                                  "children": [
                                    {
                                      "value": "args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs",
                                  "children": [
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "requests = Requests(trusted_origins=Config().trust_endpoints_for_requests)",
      "children": [
        {
          "value": "requests = Requests(trusted_origins=Config().trust_endpoints_for_requests)",
          "children": [
            {
              "value": "requests",
              "children": []
            },
            {
              "value": "Requests(trusted_origins=Config().trust_endpoints_for_requests)",
              "children": [
                {
                  "value": "Requests",
                  "children": []
                },
                {
                  "value": "(trusted_origins=Config().trust_endpoints_for_requests)",
                  "children": [
                    {
                      "value": "trusted_origins=Config().trust_endpoints_for_requests",
                      "children": [
                        {
                          "value": "trusted_origins",
                          "children": []
                        },
                        {
                          "value": "Config().trust_endpoints_for_requests",
                          "children": [
                            {
                              "value": "Config()",
                              "children": [
                                {
                                  "value": "Config",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "trust_endpoints_for_requests",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}