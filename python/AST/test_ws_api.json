{
  "value": "from typing import cast\nfrom unittest.mock import AsyncMock\n\nimport pytest\nfrom fastapi import WebSocket, WebSocketDisconnect\n\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.ws_api import (\n    Methods,\n    WsMessage,\n    handle_subscribe,\n    handle_unsubscribe,\n    websocket_router,\n)\n\n\n@pytest.fixture\ndef mock_websocket() -> AsyncMock:\n    return AsyncMock(spec=WebSocket)\n\n\n@pytest.fixture\ndef mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)\n\n\n@pytest.mark.asyncio\nasync def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\nasync def test_websocket_router_unsubscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE)\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n@pytest.mark.asyncio\nasync def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE)\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
  "children": [
    {
      "value": "from typing import cast",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "cast",
          "children": [
            {
              "value": "cast",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from unittest.mock import AsyncMock",
      "children": [
        {
          "value": "unittest.mock",
          "children": [
            {
              "value": "unittest",
              "children": []
            },
            {
              "value": "mock",
              "children": []
            }
          ]
        },
        {
          "value": "AsyncMock",
          "children": [
            {
              "value": "AsyncMock",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import pytest",
      "children": [
        {
          "value": "pytest",
          "children": [
            {
              "value": "pytest",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from fastapi import WebSocket, WebSocketDisconnect",
      "children": [
        {
          "value": "fastapi",
          "children": [
            {
              "value": "fastapi",
              "children": []
            }
          ]
        },
        {
          "value": "WebSocket",
          "children": [
            {
              "value": "WebSocket",
              "children": []
            }
          ]
        },
        {
          "value": "WebSocketDisconnect",
          "children": [
            {
              "value": "WebSocketDisconnect",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.server.conn_manager import ConnectionManager",
      "children": [
        {
          "value": "backend.server.conn_manager",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "server",
              "children": []
            },
            {
              "value": "conn_manager",
              "children": []
            }
          ]
        },
        {
          "value": "ConnectionManager",
          "children": [
            {
              "value": "ConnectionManager",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.server.ws_api import (\n    Methods,\n    WsMessage,\n    handle_subscribe,\n    handle_unsubscribe,\n    websocket_router,\n)",
      "children": [
        {
          "value": "backend.server.ws_api",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "server",
              "children": []
            },
            {
              "value": "ws_api",
              "children": []
            }
          ]
        },
        {
          "value": "Methods",
          "children": [
            {
              "value": "Methods",
              "children": []
            }
          ]
        },
        {
          "value": "WsMessage",
          "children": [
            {
              "value": "WsMessage",
              "children": []
            }
          ]
        },
        {
          "value": "handle_subscribe",
          "children": [
            {
              "value": "handle_subscribe",
              "children": []
            }
          ]
        },
        {
          "value": "handle_unsubscribe",
          "children": [
            {
              "value": "handle_unsubscribe",
              "children": []
            }
          ]
        },
        {
          "value": "websocket_router",
          "children": [
            {
              "value": "websocket_router",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "@pytest.fixture\ndef mock_websocket() -> AsyncMock:\n    return AsyncMock(spec=WebSocket)",
      "children": [
        {
          "value": "@pytest.fixture",
          "children": [
            {
              "value": "pytest.fixture",
              "children": [
                {
                  "value": "pytest",
                  "children": []
                },
                {
                  "value": "fixture",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "def mock_websocket() -> AsyncMock:\n    return AsyncMock(spec=WebSocket)",
          "children": [
            {
              "value": "mock_websocket",
              "children": []
            },
            {
              "value": "()",
              "children": []
            },
            {
              "value": "AsyncMock",
              "children": [
                {
                  "value": "AsyncMock",
                  "children": []
                }
              ]
            },
            {
              "value": "return AsyncMock(spec=WebSocket)",
              "children": [
                {
                  "value": "return AsyncMock(spec=WebSocket)",
                  "children": [
                    {
                      "value": "AsyncMock(spec=WebSocket)",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        },
                        {
                          "value": "(spec=WebSocket)",
                          "children": [
                            {
                              "value": "spec=WebSocket",
                              "children": [
                                {
                                  "value": "spec",
                                  "children": []
                                },
                                {
                                  "value": "WebSocket",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@pytest.fixture\ndef mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)",
      "children": [
        {
          "value": "@pytest.fixture",
          "children": [
            {
              "value": "pytest.fixture",
              "children": [
                {
                  "value": "pytest",
                  "children": []
                },
                {
                  "value": "fixture",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "def mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)",
          "children": [
            {
              "value": "mock_manager",
              "children": []
            },
            {
              "value": "()",
              "children": []
            },
            {
              "value": "AsyncMock",
              "children": [
                {
                  "value": "AsyncMock",
                  "children": []
                }
              ]
            },
            {
              "value": "return AsyncMock(spec=ConnectionManager)",
              "children": [
                {
                  "value": "return AsyncMock(spec=ConnectionManager)",
                  "children": [
                    {
                      "value": "AsyncMock(spec=ConnectionManager)",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        },
                        {
                          "value": "(spec=ConnectionManager)",
                          "children": [
                            {
                              "value": "spec=ConnectionManager",
                              "children": [
                                {
                                  "value": "spec",
                                  "children": []
                                },
                                {
                                  "value": "ConnectionManager",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@pytest.mark.asyncio\nasync def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
      "children": [
        {
          "value": "@pytest.mark.asyncio",
          "children": [
            {
              "value": "pytest.mark.asyncio",
              "children": [
                {
                  "value": "pytest.mark",
                  "children": [
                    {
                      "value": "pytest",
                      "children": []
                    },
                    {
                      "value": "mark",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "asyncio",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "async def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
          "children": [
            {
              "value": "test_websocket_router_subscribe",
              "children": []
            },
            {
              "value": "(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n)",
              "children": [
                {
                  "value": "mock_websocket: AsyncMock",
                  "children": [
                    {
                      "value": "mock_websocket",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager: AsyncMock",
                  "children": [
                    {
                      "value": "mock_manager",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "None",
              "children": [
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
              "children": [
                {
                  "value": "mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
                  "children": [
                    {
                      "value": "mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
                      "children": [
                        {
                          "value": "mock_websocket.receive_text.side_effect",
                          "children": [
                            {
                              "value": "mock_websocket.receive_text",
                              "children": [
                                {
                                  "value": "mock_websocket",
                                  "children": []
                                },
                                {
                                  "value": "receive_text",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "side_effect",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "[\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
                          "children": [
                            {
                              "value": "WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json()",
                              "children": [
                                {
                                  "value": "WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json",
                                  "children": [
                                    {
                                      "value": "WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        )",
                                      "children": [
                                        {
                                          "value": "WsMessage",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        )",
                                          "children": [
                                            {
                                              "value": "method=Methods.SUBSCRIBE",
                                              "children": [
                                                {
                                                  "value": "method",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Methods.SUBSCRIBE",
                                                  "children": [
                                                    {
                                                      "value": "Methods",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "SUBSCRIBE",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "data={\"graph_id\": \"test_graph\"}",
                                              "children": [
                                                {
                                                  "value": "data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{\"graph_id\": \"test_graph\"}",
                                                  "children": [
                                                    {
                                                      "value": "\"graph_id\": \"test_graph\"",
                                                      "children": [
                                                        {
                                                          "value": "\"graph_id\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "graph_id",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"test_graph\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "test_graph",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "model_dump_json",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "WebSocketDisconnect()",
                              "children": [
                                {
                                  "value": "WebSocketDisconnect",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                  "children": [
                    {
                      "value": "await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                      "children": [
                        {
                          "value": "websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                          "children": [
                            {
                              "value": "websocket_router",
                              "children": []
                            },
                            {
                              "value": "(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                              "children": [
                                {
                                  "value": "cast(WebSocket, mock_websocket)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(WebSocket, mock_websocket)",
                                      "children": [
                                        {
                                          "value": "WebSocket",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "cast(ConnectionManager, mock_manager)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(ConnectionManager, mock_manager)",
                                      "children": [
                                        {
                                          "value": "ConnectionManager",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_manager",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager.connect.assert_called_once_with(mock_websocket)",
                  "children": [
                    {
                      "value": "mock_manager.connect.assert_called_once_with(mock_websocket)",
                      "children": [
                        {
                          "value": "mock_manager.connect.assert_called_once_with",
                          "children": [
                            {
                              "value": "mock_manager.connect",
                              "children": [
                                {
                                  "value": "mock_manager",
                                  "children": []
                                },
                                {
                                  "value": "connect",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once_with",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(mock_websocket)",
                          "children": [
                            {
                              "value": "mock_websocket",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)",
                  "children": [
                    {
                      "value": "mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)",
                      "children": [
                        {
                          "value": "mock_manager.subscribe.assert_called_once_with",
                          "children": [
                            {
                              "value": "mock_manager.subscribe",
                              "children": [
                                {
                                  "value": "mock_manager",
                                  "children": []
                                },
                                {
                                  "value": "subscribe",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once_with",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\"test_graph\", mock_websocket)",
                          "children": [
                            {
                              "value": "\"test_graph\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "test_graph",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "mock_websocket",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_websocket.send_text.assert_called_once()",
                  "children": [
                    {
                      "value": "mock_websocket.send_text.assert_called_once()",
                      "children": [
                        {
                          "value": "mock_websocket.send_text.assert_called_once",
                          "children": [
                            {
                              "value": "mock_websocket.send_text",
                              "children": [
                                {
                                  "value": "mock_websocket",
                                  "children": []
                                },
                                {
                                  "value": "send_text",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"method\":\"subscribe\"'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"method\":\"subscribe\"",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"success\":true'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"success\":true",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager.disconnect.assert_called_once_with(mock_websocket)",
                  "children": [
                    {
                      "value": "mock_manager.disconnect.assert_called_once_with(mock_websocket)",
                      "children": [
                        {
                          "value": "mock_manager.disconnect.assert_called_once_with",
                          "children": [
                            {
                              "value": "mock_manager.disconnect",
                              "children": [
                                {
                                  "value": "mock_manager",
                                  "children": []
                                },
                                {
                                  "value": "disconnect",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once_with",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(mock_websocket)",
                          "children": [
                            {
                              "value": "mock_websocket",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@pytest.mark.asyncio\nasync def test_websocket_router_unsubscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
      "children": [
        {
          "value": "@pytest.mark.asyncio",
          "children": [
            {
              "value": "pytest.mark.asyncio",
              "children": [
                {
                  "value": "pytest.mark",
                  "children": [
                    {
                      "value": "pytest",
                      "children": []
                    },
                    {
                      "value": "mark",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "asyncio",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "async def test_websocket_router_unsubscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
          "children": [
            {
              "value": "test_websocket_router_unsubscribe",
              "children": []
            },
            {
              "value": "(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n)",
              "children": [
                {
                  "value": "mock_websocket: AsyncMock",
                  "children": [
                    {
                      "value": "mock_websocket",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager: AsyncMock",
                  "children": [
                    {
                      "value": "mock_manager",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "None",
              "children": [
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
              "children": [
                {
                  "value": "mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
                  "children": [
                    {
                      "value": "mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
                      "children": [
                        {
                          "value": "mock_websocket.receive_text.side_effect",
                          "children": [
                            {
                              "value": "mock_websocket.receive_text",
                              "children": [
                                {
                                  "value": "mock_websocket",
                                  "children": []
                                },
                                {
                                  "value": "receive_text",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "side_effect",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "[\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
                          "children": [
                            {
                              "value": "WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json()",
                              "children": [
                                {
                                  "value": "WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json",
                                  "children": [
                                    {
                                      "value": "WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        )",
                                      "children": [
                                        {
                                          "value": "WsMessage",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        )",
                                          "children": [
                                            {
                                              "value": "method=Methods.UNSUBSCRIBE",
                                              "children": [
                                                {
                                                  "value": "method",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Methods.UNSUBSCRIBE",
                                                  "children": [
                                                    {
                                                      "value": "Methods",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "UNSUBSCRIBE",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "data={\"graph_id\": \"test_graph\"}",
                                              "children": [
                                                {
                                                  "value": "data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{\"graph_id\": \"test_graph\"}",
                                                  "children": [
                                                    {
                                                      "value": "\"graph_id\": \"test_graph\"",
                                                      "children": [
                                                        {
                                                          "value": "\"graph_id\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "graph_id",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"test_graph\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "test_graph",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "model_dump_json",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "WebSocketDisconnect()",
                              "children": [
                                {
                                  "value": "WebSocketDisconnect",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                  "children": [
                    {
                      "value": "await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                      "children": [
                        {
                          "value": "websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                          "children": [
                            {
                              "value": "websocket_router",
                              "children": []
                            },
                            {
                              "value": "(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                              "children": [
                                {
                                  "value": "cast(WebSocket, mock_websocket)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(WebSocket, mock_websocket)",
                                      "children": [
                                        {
                                          "value": "WebSocket",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "cast(ConnectionManager, mock_manager)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(ConnectionManager, mock_manager)",
                                      "children": [
                                        {
                                          "value": "ConnectionManager",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_manager",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager.connect.assert_called_once_with(mock_websocket)",
                  "children": [
                    {
                      "value": "mock_manager.connect.assert_called_once_with(mock_websocket)",
                      "children": [
                        {
                          "value": "mock_manager.connect.assert_called_once_with",
                          "children": [
                            {
                              "value": "mock_manager.connect",
                              "children": [
                                {
                                  "value": "mock_manager",
                                  "children": []
                                },
                                {
                                  "value": "connect",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once_with",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(mock_websocket)",
                          "children": [
                            {
                              "value": "mock_websocket",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)",
                  "children": [
                    {
                      "value": "mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)",
                      "children": [
                        {
                          "value": "mock_manager.unsubscribe.assert_called_once_with",
                          "children": [
                            {
                              "value": "mock_manager.unsubscribe",
                              "children": [
                                {
                                  "value": "mock_manager",
                                  "children": []
                                },
                                {
                                  "value": "unsubscribe",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once_with",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\"test_graph\", mock_websocket)",
                          "children": [
                            {
                              "value": "\"test_graph\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "test_graph",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "mock_websocket",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_websocket.send_text.assert_called_once()",
                  "children": [
                    {
                      "value": "mock_websocket.send_text.assert_called_once()",
                      "children": [
                        {
                          "value": "mock_websocket.send_text.assert_called_once",
                          "children": [
                            {
                              "value": "mock_websocket.send_text",
                              "children": [
                                {
                                  "value": "mock_websocket",
                                  "children": []
                                },
                                {
                                  "value": "send_text",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"method\":\"unsubscribe\"'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"method\":\"unsubscribe\"",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"success\":true'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"success\":true",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager.disconnect.assert_called_once_with(mock_websocket)",
                  "children": [
                    {
                      "value": "mock_manager.disconnect.assert_called_once_with(mock_websocket)",
                      "children": [
                        {
                          "value": "mock_manager.disconnect.assert_called_once_with",
                          "children": [
                            {
                              "value": "mock_manager.disconnect",
                              "children": [
                                {
                                  "value": "mock_manager",
                                  "children": []
                                },
                                {
                                  "value": "disconnect",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once_with",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(mock_websocket)",
                          "children": [
                            {
                              "value": "mock_websocket",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
      "children": [
        {
          "value": "@pytest.mark.asyncio",
          "children": [
            {
              "value": "pytest.mark.asyncio",
              "children": [
                {
                  "value": "pytest.mark",
                  "children": [
                    {
                      "value": "pytest",
                      "children": []
                    },
                    {
                      "value": "mark",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "asyncio",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "async def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
          "children": [
            {
              "value": "test_websocket_router_invalid_method",
              "children": []
            },
            {
              "value": "(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n)",
              "children": [
                {
                  "value": "mock_websocket: AsyncMock",
                  "children": [
                    {
                      "value": "mock_websocket",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager: AsyncMock",
                  "children": [
                    {
                      "value": "mock_manager",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "None",
              "children": [
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
              "children": [
                {
                  "value": "mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
                  "children": [
                    {
                      "value": "mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
                      "children": [
                        {
                          "value": "mock_websocket.receive_text.side_effect",
                          "children": [
                            {
                              "value": "mock_websocket.receive_text",
                              "children": [
                                {
                                  "value": "mock_websocket",
                                  "children": []
                                },
                                {
                                  "value": "receive_text",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "side_effect",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "[\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
                          "children": [
                            {
                              "value": "WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json()",
                              "children": [
                                {
                                  "value": "WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json",
                                  "children": [
                                    {
                                      "value": "WsMessage(method=Methods.EXECUTION_EVENT)",
                                      "children": [
                                        {
                                          "value": "WsMessage",
                                          "children": []
                                        },
                                        {
                                          "value": "(method=Methods.EXECUTION_EVENT)",
                                          "children": [
                                            {
                                              "value": "method=Methods.EXECUTION_EVENT",
                                              "children": [
                                                {
                                                  "value": "method",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Methods.EXECUTION_EVENT",
                                                  "children": [
                                                    {
                                                      "value": "Methods",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "EXECUTION_EVENT",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "model_dump_json",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "WebSocketDisconnect()",
                              "children": [
                                {
                                  "value": "WebSocketDisconnect",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                  "children": [
                    {
                      "value": "await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                      "children": [
                        {
                          "value": "websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                          "children": [
                            {
                              "value": "websocket_router",
                              "children": []
                            },
                            {
                              "value": "(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                              "children": [
                                {
                                  "value": "cast(WebSocket, mock_websocket)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(WebSocket, mock_websocket)",
                                      "children": [
                                        {
                                          "value": "WebSocket",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "cast(ConnectionManager, mock_manager)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(ConnectionManager, mock_manager)",
                                      "children": [
                                        {
                                          "value": "ConnectionManager",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_manager",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager.connect.assert_called_once_with(mock_websocket)",
                  "children": [
                    {
                      "value": "mock_manager.connect.assert_called_once_with(mock_websocket)",
                      "children": [
                        {
                          "value": "mock_manager.connect.assert_called_once_with",
                          "children": [
                            {
                              "value": "mock_manager.connect",
                              "children": [
                                {
                                  "value": "mock_manager",
                                  "children": []
                                },
                                {
                                  "value": "connect",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once_with",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(mock_websocket)",
                          "children": [
                            {
                              "value": "mock_websocket",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_websocket.send_text.assert_called_once()",
                  "children": [
                    {
                      "value": "mock_websocket.send_text.assert_called_once()",
                      "children": [
                        {
                          "value": "mock_websocket.send_text.assert_called_once",
                          "children": [
                            {
                              "value": "mock_websocket.send_text",
                              "children": [
                                {
                                  "value": "mock_websocket",
                                  "children": []
                                },
                                {
                                  "value": "send_text",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"method\":\"error\"'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"method\":\"error\"",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"success\":false'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"success\":false",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager.disconnect.assert_called_once_with(mock_websocket)",
                  "children": [
                    {
                      "value": "mock_manager.disconnect.assert_called_once_with(mock_websocket)",
                      "children": [
                        {
                          "value": "mock_manager.disconnect.assert_called_once_with",
                          "children": [
                            {
                              "value": "mock_manager.disconnect",
                              "children": [
                                {
                                  "value": "mock_manager",
                                  "children": []
                                },
                                {
                                  "value": "disconnect",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once_with",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(mock_websocket)",
                          "children": [
                            {
                              "value": "mock_websocket",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@pytest.mark.asyncio\nasync def test_handle_subscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
      "children": [
        {
          "value": "@pytest.mark.asyncio",
          "children": [
            {
              "value": "pytest.mark.asyncio",
              "children": [
                {
                  "value": "pytest.mark",
                  "children": [
                    {
                      "value": "pytest",
                      "children": []
                    },
                    {
                      "value": "mark",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "asyncio",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "async def test_handle_subscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
          "children": [
            {
              "value": "test_handle_subscribe_success",
              "children": []
            },
            {
              "value": "(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n)",
              "children": [
                {
                  "value": "mock_websocket: AsyncMock",
                  "children": [
                    {
                      "value": "mock_websocket",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager: AsyncMock",
                  "children": [
                    {
                      "value": "mock_manager",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "None",
              "children": [
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
              "children": [
                {
                  "value": "message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})",
                  "children": [
                    {
                      "value": "message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})",
                      "children": [
                        {
                          "value": "message",
                          "children": []
                        },
                        {
                          "value": "WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})",
                          "children": [
                            {
                              "value": "WsMessage",
                              "children": []
                            },
                            {
                              "value": "(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})",
                              "children": [
                                {
                                  "value": "method=Methods.SUBSCRIBE",
                                  "children": [
                                    {
                                      "value": "method",
                                      "children": []
                                    },
                                    {
                                      "value": "Methods.SUBSCRIBE",
                                      "children": [
                                        {
                                          "value": "Methods",
                                          "children": []
                                        },
                                        {
                                          "value": "SUBSCRIBE",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "data={\"graph_id\": \"test_graph\"}",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"graph_id\": \"test_graph\"}",
                                      "children": [
                                        {
                                          "value": "\"graph_id\": \"test_graph\"",
                                          "children": [
                                            {
                                              "value": "\"graph_id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "graph_id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"test_graph\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "test_graph",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                  "children": [
                    {
                      "value": "await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                      "children": [
                        {
                          "value": "handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                          "children": [
                            {
                              "value": "handle_subscribe",
                              "children": []
                            },
                            {
                              "value": "(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                              "children": [
                                {
                                  "value": "cast(WebSocket, mock_websocket)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(WebSocket, mock_websocket)",
                                      "children": [
                                        {
                                          "value": "WebSocket",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "cast(ConnectionManager, mock_manager)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(ConnectionManager, mock_manager)",
                                      "children": [
                                        {
                                          "value": "ConnectionManager",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_manager",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "message",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)",
                  "children": [
                    {
                      "value": "mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)",
                      "children": [
                        {
                          "value": "mock_manager.subscribe.assert_called_once_with",
                          "children": [
                            {
                              "value": "mock_manager.subscribe",
                              "children": [
                                {
                                  "value": "mock_manager",
                                  "children": []
                                },
                                {
                                  "value": "subscribe",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once_with",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\"test_graph\", mock_websocket)",
                          "children": [
                            {
                              "value": "\"test_graph\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "test_graph",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "mock_websocket",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_websocket.send_text.assert_called_once()",
                  "children": [
                    {
                      "value": "mock_websocket.send_text.assert_called_once()",
                      "children": [
                        {
                          "value": "mock_websocket.send_text.assert_called_once",
                          "children": [
                            {
                              "value": "mock_websocket.send_text",
                              "children": [
                                {
                                  "value": "mock_websocket",
                                  "children": []
                                },
                                {
                                  "value": "send_text",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"method\":\"subscribe\"'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"method\":\"subscribe\"",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"success\":true'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"success\":true",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@pytest.mark.asyncio\nasync def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE)\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
      "children": [
        {
          "value": "@pytest.mark.asyncio",
          "children": [
            {
              "value": "pytest.mark.asyncio",
              "children": [
                {
                  "value": "pytest.mark",
                  "children": [
                    {
                      "value": "pytest",
                      "children": []
                    },
                    {
                      "value": "mark",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "asyncio",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "async def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE)\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
          "children": [
            {
              "value": "test_handle_subscribe_missing_data",
              "children": []
            },
            {
              "value": "(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n)",
              "children": [
                {
                  "value": "mock_websocket: AsyncMock",
                  "children": [
                    {
                      "value": "mock_websocket",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager: AsyncMock",
                  "children": [
                    {
                      "value": "mock_manager",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "None",
              "children": [
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "message = WsMessage(method=Methods.SUBSCRIBE)\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
              "children": [
                {
                  "value": "message = WsMessage(method=Methods.SUBSCRIBE)",
                  "children": [
                    {
                      "value": "message = WsMessage(method=Methods.SUBSCRIBE)",
                      "children": [
                        {
                          "value": "message",
                          "children": []
                        },
                        {
                          "value": "WsMessage(method=Methods.SUBSCRIBE)",
                          "children": [
                            {
                              "value": "WsMessage",
                              "children": []
                            },
                            {
                              "value": "(method=Methods.SUBSCRIBE)",
                              "children": [
                                {
                                  "value": "method=Methods.SUBSCRIBE",
                                  "children": [
                                    {
                                      "value": "method",
                                      "children": []
                                    },
                                    {
                                      "value": "Methods.SUBSCRIBE",
                                      "children": [
                                        {
                                          "value": "Methods",
                                          "children": []
                                        },
                                        {
                                          "value": "SUBSCRIBE",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                  "children": [
                    {
                      "value": "await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                      "children": [
                        {
                          "value": "handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                          "children": [
                            {
                              "value": "handle_subscribe",
                              "children": []
                            },
                            {
                              "value": "(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                              "children": [
                                {
                                  "value": "cast(WebSocket, mock_websocket)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(WebSocket, mock_websocket)",
                                      "children": [
                                        {
                                          "value": "WebSocket",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "cast(ConnectionManager, mock_manager)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(ConnectionManager, mock_manager)",
                                      "children": [
                                        {
                                          "value": "ConnectionManager",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_manager",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "message",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager.subscribe.assert_not_called()",
                  "children": [
                    {
                      "value": "mock_manager.subscribe.assert_not_called()",
                      "children": [
                        {
                          "value": "mock_manager.subscribe.assert_not_called",
                          "children": [
                            {
                              "value": "mock_manager.subscribe",
                              "children": [
                                {
                                  "value": "mock_manager",
                                  "children": []
                                },
                                {
                                  "value": "subscribe",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_not_called",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_websocket.send_text.assert_called_once()",
                  "children": [
                    {
                      "value": "mock_websocket.send_text.assert_called_once()",
                      "children": [
                        {
                          "value": "mock_websocket.send_text.assert_called_once",
                          "children": [
                            {
                              "value": "mock_websocket.send_text",
                              "children": [
                                {
                                  "value": "mock_websocket",
                                  "children": []
                                },
                                {
                                  "value": "send_text",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"method\":\"error\"'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"method\":\"error\"",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"success\":false'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"success\":false",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@pytest.mark.asyncio\nasync def test_handle_unsubscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
      "children": [
        {
          "value": "@pytest.mark.asyncio",
          "children": [
            {
              "value": "pytest.mark.asyncio",
              "children": [
                {
                  "value": "pytest.mark",
                  "children": [
                    {
                      "value": "pytest",
                      "children": []
                    },
                    {
                      "value": "mark",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "asyncio",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "async def test_handle_unsubscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
          "children": [
            {
              "value": "test_handle_unsubscribe_success",
              "children": []
            },
            {
              "value": "(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n)",
              "children": [
                {
                  "value": "mock_websocket: AsyncMock",
                  "children": [
                    {
                      "value": "mock_websocket",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager: AsyncMock",
                  "children": [
                    {
                      "value": "mock_manager",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "None",
              "children": [
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
              "children": [
                {
                  "value": "message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})",
                  "children": [
                    {
                      "value": "message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})",
                      "children": [
                        {
                          "value": "message",
                          "children": []
                        },
                        {
                          "value": "WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})",
                          "children": [
                            {
                              "value": "WsMessage",
                              "children": []
                            },
                            {
                              "value": "(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})",
                              "children": [
                                {
                                  "value": "method=Methods.UNSUBSCRIBE",
                                  "children": [
                                    {
                                      "value": "method",
                                      "children": []
                                    },
                                    {
                                      "value": "Methods.UNSUBSCRIBE",
                                      "children": [
                                        {
                                          "value": "Methods",
                                          "children": []
                                        },
                                        {
                                          "value": "UNSUBSCRIBE",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "data={\"graph_id\": \"test_graph\"}",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"graph_id\": \"test_graph\"}",
                                      "children": [
                                        {
                                          "value": "\"graph_id\": \"test_graph\"",
                                          "children": [
                                            {
                                              "value": "\"graph_id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "graph_id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"test_graph\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "test_graph",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                  "children": [
                    {
                      "value": "await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                      "children": [
                        {
                          "value": "handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                          "children": [
                            {
                              "value": "handle_unsubscribe",
                              "children": []
                            },
                            {
                              "value": "(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                              "children": [
                                {
                                  "value": "cast(WebSocket, mock_websocket)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(WebSocket, mock_websocket)",
                                      "children": [
                                        {
                                          "value": "WebSocket",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "cast(ConnectionManager, mock_manager)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(ConnectionManager, mock_manager)",
                                      "children": [
                                        {
                                          "value": "ConnectionManager",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_manager",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "message",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)",
                  "children": [
                    {
                      "value": "mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)",
                      "children": [
                        {
                          "value": "mock_manager.unsubscribe.assert_called_once_with",
                          "children": [
                            {
                              "value": "mock_manager.unsubscribe",
                              "children": [
                                {
                                  "value": "mock_manager",
                                  "children": []
                                },
                                {
                                  "value": "unsubscribe",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once_with",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\"test_graph\", mock_websocket)",
                          "children": [
                            {
                              "value": "\"test_graph\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "test_graph",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "mock_websocket",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_websocket.send_text.assert_called_once()",
                  "children": [
                    {
                      "value": "mock_websocket.send_text.assert_called_once()",
                      "children": [
                        {
                          "value": "mock_websocket.send_text.assert_called_once",
                          "children": [
                            {
                              "value": "mock_websocket.send_text",
                              "children": [
                                {
                                  "value": "mock_websocket",
                                  "children": []
                                },
                                {
                                  "value": "send_text",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"method\":\"unsubscribe\"'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"method\":\"unsubscribe\"",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"success\":true' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"success\":true'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"success\":true",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@pytest.mark.asyncio\nasync def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE)\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
      "children": [
        {
          "value": "@pytest.mark.asyncio",
          "children": [
            {
              "value": "pytest.mark.asyncio",
              "children": [
                {
                  "value": "pytest.mark",
                  "children": [
                    {
                      "value": "pytest",
                      "children": []
                    },
                    {
                      "value": "mark",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "asyncio",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "async def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE)\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
          "children": [
            {
              "value": "test_handle_unsubscribe_missing_data",
              "children": []
            },
            {
              "value": "(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n)",
              "children": [
                {
                  "value": "mock_websocket: AsyncMock",
                  "children": [
                    {
                      "value": "mock_websocket",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager: AsyncMock",
                  "children": [
                    {
                      "value": "mock_manager",
                      "children": []
                    },
                    {
                      "value": "AsyncMock",
                      "children": [
                        {
                          "value": "AsyncMock",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "None",
              "children": [
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "message = WsMessage(method=Methods.UNSUBSCRIBE)\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
              "children": [
                {
                  "value": "message = WsMessage(method=Methods.UNSUBSCRIBE)",
                  "children": [
                    {
                      "value": "message = WsMessage(method=Methods.UNSUBSCRIBE)",
                      "children": [
                        {
                          "value": "message",
                          "children": []
                        },
                        {
                          "value": "WsMessage(method=Methods.UNSUBSCRIBE)",
                          "children": [
                            {
                              "value": "WsMessage",
                              "children": []
                            },
                            {
                              "value": "(method=Methods.UNSUBSCRIBE)",
                              "children": [
                                {
                                  "value": "method=Methods.UNSUBSCRIBE",
                                  "children": [
                                    {
                                      "value": "method",
                                      "children": []
                                    },
                                    {
                                      "value": "Methods.UNSUBSCRIBE",
                                      "children": [
                                        {
                                          "value": "Methods",
                                          "children": []
                                        },
                                        {
                                          "value": "UNSUBSCRIBE",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                  "children": [
                    {
                      "value": "await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                      "children": [
                        {
                          "value": "handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                          "children": [
                            {
                              "value": "handle_unsubscribe",
                              "children": []
                            },
                            {
                              "value": "(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )",
                              "children": [
                                {
                                  "value": "cast(WebSocket, mock_websocket)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(WebSocket, mock_websocket)",
                                      "children": [
                                        {
                                          "value": "WebSocket",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "cast(ConnectionManager, mock_manager)",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(ConnectionManager, mock_manager)",
                                      "children": [
                                        {
                                          "value": "ConnectionManager",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_manager",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "message",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_manager.unsubscribe.assert_not_called()",
                  "children": [
                    {
                      "value": "mock_manager.unsubscribe.assert_not_called()",
                      "children": [
                        {
                          "value": "mock_manager.unsubscribe.assert_not_called",
                          "children": [
                            {
                              "value": "mock_manager.unsubscribe",
                              "children": [
                                {
                                  "value": "mock_manager",
                                  "children": []
                                },
                                {
                                  "value": "unsubscribe",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_not_called",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "mock_websocket.send_text.assert_called_once()",
                  "children": [
                    {
                      "value": "mock_websocket.send_text.assert_called_once()",
                      "children": [
                        {
                          "value": "mock_websocket.send_text.assert_called_once",
                          "children": [
                            {
                              "value": "mock_websocket.send_text",
                              "children": [
                                {
                                  "value": "mock_websocket",
                                  "children": []
                                },
                                {
                                  "value": "send_text",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "assert_called_once",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"method\":\"error\"'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"method\":\"error\"",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                  "children": [
                    {
                      "value": "'\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                      "children": [
                        {
                          "value": "'\"success\":false'",
                          "children": [
                            {
                              "value": "'",
                              "children": []
                            },
                            {
                              "value": "\"success\":false",
                              "children": []
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mock_websocket.send_text.call_args[0][0]",
                          "children": [
                            {
                              "value": "mock_websocket.send_text.call_args[0]",
                              "children": [
                                {
                                  "value": "mock_websocket.send_text.call_args",
                                  "children": [
                                    {
                                      "value": "mock_websocket.send_text",
                                      "children": [
                                        {
                                          "value": "mock_websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "call_args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}