{
  "value": "# -*- coding: utf-8 -*-\nfrom collections import deque\nfrom enum import Enum\n\n\nclass State(Enum):\n    unvisited = 0\n    visited = 1\n\n\nclass Graph(object):\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False\n\n\nclass Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []\n\n\nclass LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]\n\n\nclass PersonServer(object):\n\n    def __init__(self):\n        self.people = {}  # key: person_id, value: person\n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results\n\n\nclass UserGraphService(object):\n\n    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass",
  "children": [
    {
      "value": "# -*- coding: utf-8 -*-",
      "children": []
    },
    {
      "value": "from collections import deque",
      "children": [
        {
          "value": "collections",
          "children": [
            {
              "value": "collections",
              "children": []
            }
          ]
        },
        {
          "value": "deque",
          "children": [
            {
              "value": "deque",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from enum import Enum",
      "children": [
        {
          "value": "enum",
          "children": [
            {
              "value": "enum",
              "children": []
            }
          ]
        },
        {
          "value": "Enum",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class State(Enum):\n    unvisited = 0\n    visited = 1",
      "children": [
        {
          "value": "State",
          "children": []
        },
        {
          "value": "(Enum)",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        },
        {
          "value": "unvisited = 0\n    visited = 1",
          "children": [
            {
              "value": "unvisited = 0",
              "children": [
                {
                  "value": "unvisited = 0",
                  "children": [
                    {
                      "value": "unvisited",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "visited = 1",
              "children": [
                {
                  "value": "visited = 1",
                  "children": [
                    {
                      "value": "visited",
                      "children": []
                    },
                    {
                      "value": "1",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class Graph(object):\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
      "children": [
        {
          "value": "Graph",
          "children": []
        },
        {
          "value": "(object)",
          "children": [
            {
              "value": "object",
              "children": []
            }
          ]
        },
        {
          "value": "def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
          "children": [
            {
              "value": "def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
              "children": [
                {
                  "value": "bfs",
                  "children": []
                },
                {
                  "value": "(self, source, dest)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "source",
                      "children": []
                    },
                    {
                      "value": "dest",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
                  "children": [
                    {
                      "value": "if source is None:\n            return False",
                      "children": [
                        {
                          "value": "source is None",
                          "children": [
                            {
                              "value": "source",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "return False",
                          "children": [
                            {
                              "value": "return False",
                              "children": [
                                {
                                  "value": "False",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "queue = deque()",
                      "children": [
                        {
                          "value": "queue = deque()",
                          "children": [
                            {
                              "value": "queue",
                              "children": []
                            },
                            {
                              "value": "deque()",
                              "children": [
                                {
                                  "value": "deque",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "queue.append(source)",
                      "children": [
                        {
                          "value": "queue.append(source)",
                          "children": [
                            {
                              "value": "queue.append",
                              "children": [
                                {
                                  "value": "queue",
                                  "children": []
                                },
                                {
                                  "value": "append",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(source)",
                              "children": [
                                {
                                  "value": "source",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "source.visit_state = State.visited",
                      "children": [
                        {
                          "value": "source.visit_state = State.visited",
                          "children": [
                            {
                              "value": "source.visit_state",
                              "children": [
                                {
                                  "value": "source",
                                  "children": []
                                },
                                {
                                  "value": "visit_state",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "State.visited",
                              "children": [
                                {
                                  "value": "State",
                                  "children": []
                                },
                                {
                                  "value": "visited",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                      "children": [
                        {
                          "value": "queue",
                          "children": []
                        },
                        {
                          "value": "node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                          "children": [
                            {
                              "value": "node = queue.popleft()",
                              "children": [
                                {
                                  "value": "node = queue.popleft()",
                                  "children": [
                                    {
                                      "value": "node",
                                      "children": []
                                    },
                                    {
                                      "value": "queue.popleft()",
                                      "children": [
                                        {
                                          "value": "queue.popleft",
                                          "children": [
                                            {
                                              "value": "queue",
                                              "children": []
                                            },
                                            {
                                              "value": "popleft",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "print(node)",
                              "children": [
                                {
                                  "value": "print(node)",
                                  "children": [
                                    {
                                      "value": "print",
                                      "children": []
                                    },
                                    {
                                      "value": "(node)",
                                      "children": [
                                        {
                                          "value": "node",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if dest is node:\n                return True",
                              "children": [
                                {
                                  "value": "dest is node",
                                  "children": [
                                    {
                                      "value": "dest",
                                      "children": []
                                    },
                                    {
                                      "value": "node",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "return True",
                                  "children": [
                                    {
                                      "value": "return True",
                                      "children": [
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                              "children": [
                                {
                                  "value": "adjacent_node",
                                  "children": []
                                },
                                {
                                  "value": "node.adj_nodes.values()",
                                  "children": [
                                    {
                                      "value": "node.adj_nodes.values",
                                      "children": [
                                        {
                                          "value": "node.adj_nodes",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            },
                                            {
                                              "value": "adj_nodes",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "values",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                                  "children": [
                                    {
                                      "value": "if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                                      "children": [
                                        {
                                          "value": "adjacent_node.visit_state == State.unvisited",
                                          "children": [
                                            {
                                              "value": "adjacent_node.visit_state",
                                              "children": [
                                                {
                                                  "value": "adjacent_node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "visit_state",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "State.unvisited",
                                              "children": [
                                                {
                                                  "value": "State",
                                                  "children": []
                                                },
                                                {
                                                  "value": "unvisited",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                                          "children": [
                                            {
                                              "value": "queue.append(adjacent_node)",
                                              "children": [
                                                {
                                                  "value": "queue.append(adjacent_node)",
                                                  "children": [
                                                    {
                                                      "value": "queue.append",
                                                      "children": [
                                                        {
                                                          "value": "queue",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "append",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(adjacent_node)",
                                                      "children": [
                                                        {
                                                          "value": "adjacent_node",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "adjacent_node.visit_state = State.visited",
                                              "children": [
                                                {
                                                  "value": "adjacent_node.visit_state = State.visited",
                                                  "children": [
                                                    {
                                                      "value": "adjacent_node.visit_state",
                                                      "children": [
                                                        {
                                                          "value": "adjacent_node",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "visit_state",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "State.visited",
                                                      "children": [
                                                        {
                                                          "value": "State",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "visited",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return False",
                      "children": [
                        {
                          "value": "False",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []",
      "children": [
        {
          "value": "Person",
          "children": []
        },
        {
          "value": "(object)",
          "children": [
            {
              "value": "object",
              "children": []
            }
          ]
        },
        {
          "value": "def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []",
          "children": [
            {
              "value": "def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, id, name)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "id",
                      "children": []
                    },
                    {
                      "value": "name",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.id = id\n        self.name = name\n        self.friend_ids = []",
                  "children": [
                    {
                      "value": "self.id = id",
                      "children": [
                        {
                          "value": "self.id = id",
                          "children": [
                            {
                              "value": "self.id",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "id",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.name = name",
                      "children": [
                        {
                          "value": "self.name = name",
                          "children": [
                            {
                              "value": "self.name",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "name",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "name",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.friend_ids = []",
                      "children": [
                        {
                          "value": "self.friend_ids = []",
                          "children": [
                            {
                              "value": "self.friend_ids",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "friend_ids",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "[]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
      "children": [
        {
          "value": "LookupService",
          "children": []
        },
        {
          "value": "(object)",
          "children": [
            {
              "value": "object",
              "children": []
            }
          ]
        },
        {
          "value": "def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
          "children": [
            {
              "value": "def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.lookup = {}  # key: person_id, value: person_server",
                  "children": [
                    {
                      "value": "self.lookup = {}",
                      "children": [
                        {
                          "value": "self.lookup = {}",
                          "children": [
                            {
                              "value": "self.lookup",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "lookup",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "{}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# key: person_id, value: person_server",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
              "children": [
                {
                  "value": "get_person",
                  "children": []
                },
                {
                  "value": "(self, person_id)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "person_id",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
                  "children": [
                    {
                      "value": "person_server = self.lookup[person_id]",
                      "children": [
                        {
                          "value": "person_server = self.lookup[person_id]",
                          "children": [
                            {
                              "value": "person_server",
                              "children": []
                            },
                            {
                              "value": "self.lookup[person_id]",
                              "children": [
                                {
                                  "value": "self.lookup",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "lookup",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "person_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return person_server.people[person_id]",
                      "children": [
                        {
                          "value": "person_server.people[person_id]",
                          "children": [
                            {
                              "value": "person_server.people",
                              "children": [
                                {
                                  "value": "person_server",
                                  "children": []
                                },
                                {
                                  "value": "people",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "person_id",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class PersonServer(object):\n\n    def __init__(self):\n        self.people = {}  # key: person_id, value: person\n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results",
      "children": [
        {
          "value": "PersonServer",
          "children": []
        },
        {
          "value": "(object)",
          "children": [
            {
              "value": "object",
              "children": []
            }
          ]
        },
        {
          "value": "def __init__(self):\n        self.people = {}  # key: person_id, value: person\n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results",
          "children": [
            {
              "value": "def __init__(self):\n        self.people = {}  # key: person_id, value: person",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.people = {}  # key: person_id, value: person",
                  "children": [
                    {
                      "value": "self.people = {}",
                      "children": [
                        {
                          "value": "self.people = {}",
                          "children": [
                            {
                              "value": "self.people",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "people",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "{}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# key: person_id, value: person",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results",
              "children": [
                {
                  "value": "get_people",
                  "children": []
                },
                {
                  "value": "(self, ids)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "ids",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results",
                  "children": [
                    {
                      "value": "results = []",
                      "children": [
                        {
                          "value": "results = []",
                          "children": [
                            {
                              "value": "results",
                              "children": []
                            },
                            {
                              "value": "[]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for id in ids:\n            if id in self.people:\n                results.append(self.people[id])",
                      "children": [
                        {
                          "value": "id",
                          "children": []
                        },
                        {
                          "value": "ids",
                          "children": []
                        },
                        {
                          "value": "if id in self.people:\n                results.append(self.people[id])",
                          "children": [
                            {
                              "value": "if id in self.people:\n                results.append(self.people[id])",
                              "children": [
                                {
                                  "value": "id in self.people",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "self.people",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "people",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "results.append(self.people[id])",
                                  "children": [
                                    {
                                      "value": "results.append(self.people[id])",
                                      "children": [
                                        {
                                          "value": "results.append(self.people[id])",
                                          "children": [
                                            {
                                              "value": "results.append",
                                              "children": [
                                                {
                                                  "value": "results",
                                                  "children": []
                                                },
                                                {
                                                  "value": "append",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(self.people[id])",
                                              "children": [
                                                {
                                                  "value": "self.people[id]",
                                                  "children": [
                                                    {
                                                      "value": "self.people",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "people",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return results",
                      "children": [
                        {
                          "value": "results",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class UserGraphService(object):\n\n    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass",
      "children": [
        {
          "value": "UserGraphService",
          "children": []
        },
        {
          "value": "(object)",
          "children": [
            {
              "value": "object",
              "children": []
            }
          ]
        },
        {
          "value": "def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass",
          "children": [
            {
              "value": "def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, person_ids, lookup)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "person_ids",
                      "children": []
                    },
                    {
                      "value": "lookup",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()",
                  "children": [
                    {
                      "value": "self.lookup = lookup",
                      "children": [
                        {
                          "value": "self.lookup = lookup",
                          "children": [
                            {
                              "value": "self.lookup",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "lookup",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "lookup",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.person_ids = person_ids",
                      "children": [
                        {
                          "value": "self.person_ids = person_ids",
                          "children": [
                            {
                              "value": "self.person_ids",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "person_ids",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "person_ids",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.visited_ids = set()",
                      "children": [
                        {
                          "value": "self.visited_ids = set()",
                          "children": [
                            {
                              "value": "self.visited_ids",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "visited_ids",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "set()",
                              "children": [
                                {
                                  "value": "set",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass",
              "children": [
                {
                  "value": "bfs",
                  "children": []
                },
                {
                  "value": "(self, source, dest)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "source",
                      "children": []
                    },
                    {
                      "value": "dest",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# Use self.visited_ids to track visited nodes",
                  "children": []
                },
                {
                  "value": "# Use self.lookup to translate a person_id to a Person",
                  "children": []
                },
                {
                  "value": "pass",
                  "children": [
                    {
                      "value": "pass",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}