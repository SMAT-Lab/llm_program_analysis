{
  "value": "import logging\nimport os\nimport signal\nimport sys\nfrom abc import ABC, abstractmethod\nfrom multiprocessing import Process, set_start_method\nfrom typing import Optional\n\nfrom backend.util.logging import configure_logging\nfrom backend.util.metrics import sentry_init\n\nlogger = logging.getLogger(__name__)\n_SERVICE_NAME = \"MainProcess\"\n\n\ndef get_service_name():\n    return _SERVICE_NAME\n\n\ndef set_service_name(name: str):\n    global _SERVICE_NAME\n    _SERVICE_NAME = name\n\n\nclass AppProcess(ABC):\n    \"\"\"\n    A class to represent an object that can be executed in a background process.\n    \"\"\"\n\n    process: Optional[Process] = None\n\n    set_start_method(\"spawn\", force=True)\n    configure_logging()\n    sentry_init()\n\n    # Methods that are executed INSIDE the process #\n\n    @abstractmethod\n    def run(self):\n        \"\"\"\n        The method that will be executed in the process.\n        \"\"\"\n        pass\n\n    @classmethod\n    @property\n    def service_name(cls) -> str:\n        return cls.__name__\n\n    def cleanup(self):\n        \"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"\n        pass\n\n    def health_check(self):\n        \"\"\"\n        A method to check the health of the process.\n        \"\"\"\n        pass\n\n    def execute_run_command(self, silent):\n        signal.signal(signal.SIGTERM, self._self_terminate)\n\n        try:\n            if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")\n\n            set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()\n        except (KeyboardInterrupt, SystemExit) as e:\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")\n\n    def _self_terminate(self, signum: int, frame):\n        self.cleanup()\n        sys.exit(0)\n\n    # Methods that are executed OUTSIDE the process #\n\n    def __enter__(self):\n        self.start(background=True)\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.stop()\n\n    def start(self, background: bool = False, silent: bool = False, **proc_args) -> int:\n        \"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"\n        if not background:\n            self.execute_run_command(silent)\n            return 0\n\n        self.process = Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )\n        self.process.start()\n        self.health_check()\n        return self.process.pid or 0\n\n    def stop(self):\n        \"\"\"\n        Stop the background process.\n        \"\"\"\n        if not self.process:\n            return\n\n        self.process.terminate()\n        self.process.join()\n        self.process = None",
  "children": [
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import os",
      "children": [
        {
          "value": "os",
          "children": [
            {
              "value": "os",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import signal",
      "children": [
        {
          "value": "signal",
          "children": [
            {
              "value": "signal",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import sys",
      "children": [
        {
          "value": "sys",
          "children": [
            {
              "value": "sys",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from abc import ABC, abstractmethod",
      "children": [
        {
          "value": "abc",
          "children": [
            {
              "value": "abc",
              "children": []
            }
          ]
        },
        {
          "value": "ABC",
          "children": [
            {
              "value": "ABC",
              "children": []
            }
          ]
        },
        {
          "value": "abstractmethod",
          "children": [
            {
              "value": "abstractmethod",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from multiprocessing import Process, set_start_method",
      "children": [
        {
          "value": "multiprocessing",
          "children": [
            {
              "value": "multiprocessing",
              "children": []
            }
          ]
        },
        {
          "value": "Process",
          "children": [
            {
              "value": "Process",
              "children": []
            }
          ]
        },
        {
          "value": "set_start_method",
          "children": [
            {
              "value": "set_start_method",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Optional",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Optional",
          "children": [
            {
              "value": "Optional",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.logging import configure_logging",
      "children": [
        {
          "value": "backend.util.logging",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "logging",
              "children": []
            }
          ]
        },
        {
          "value": "configure_logging",
          "children": [
            {
              "value": "configure_logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.metrics import sentry_init",
      "children": [
        {
          "value": "backend.util.metrics",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "metrics",
              "children": []
            }
          ]
        },
        {
          "value": "sentry_init",
          "children": [
            {
              "value": "sentry_init",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "_SERVICE_NAME = \"MainProcess\"",
      "children": [
        {
          "value": "_SERVICE_NAME = \"MainProcess\"",
          "children": [
            {
              "value": "_SERVICE_NAME",
              "children": []
            },
            {
              "value": "\"MainProcess\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "MainProcess",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def get_service_name():\n    return _SERVICE_NAME",
      "children": [
        {
          "value": "get_service_name",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "return _SERVICE_NAME",
          "children": [
            {
              "value": "return _SERVICE_NAME",
              "children": [
                {
                  "value": "_SERVICE_NAME",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def set_service_name(name: str):\n    global _SERVICE_NAME\n    _SERVICE_NAME = name",
      "children": [
        {
          "value": "set_service_name",
          "children": []
        },
        {
          "value": "(name: str)",
          "children": [
            {
              "value": "name: str",
              "children": [
                {
                  "value": "name",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "global _SERVICE_NAME\n    _SERVICE_NAME = name",
          "children": [
            {
              "value": "global _SERVICE_NAME",
              "children": [
                {
                  "value": "_SERVICE_NAME",
                  "children": []
                }
              ]
            },
            {
              "value": "_SERVICE_NAME = name",
              "children": [
                {
                  "value": "_SERVICE_NAME = name",
                  "children": [
                    {
                      "value": "_SERVICE_NAME",
                      "children": []
                    },
                    {
                      "value": "name",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class AppProcess(ABC):\n    \"\"\"\n    A class to represent an object that can be executed in a background process.\n    \"\"\"\n\n    process: Optional[Process] = None\n\n    set_start_method(\"spawn\", force=True)\n    configure_logging()\n    sentry_init()\n\n    # Methods that are executed INSIDE the process #\n\n    @abstractmethod\n    def run(self):\n        \"\"\"\n        The method that will be executed in the process.\n        \"\"\"\n        pass\n\n    @classmethod\n    @property\n    def service_name(cls) -> str:\n        return cls.__name__\n\n    def cleanup(self):\n        \"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"\n        pass\n\n    def health_check(self):\n        \"\"\"\n        A method to check the health of the process.\n        \"\"\"\n        pass\n\n    def execute_run_command(self, silent):\n        signal.signal(signal.SIGTERM, self._self_terminate)\n\n        try:\n            if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")\n\n            set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()\n        except (KeyboardInterrupt, SystemExit) as e:\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")\n\n    def _self_terminate(self, signum: int, frame):\n        self.cleanup()\n        sys.exit(0)\n\n    # Methods that are executed OUTSIDE the process #\n\n    def __enter__(self):\n        self.start(background=True)\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.stop()\n\n    def start(self, background: bool = False, silent: bool = False, **proc_args) -> int:\n        \"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"\n        if not background:\n            self.execute_run_command(silent)\n            return 0\n\n        self.process = Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )\n        self.process.start()\n        self.health_check()\n        return self.process.pid or 0\n\n    def stop(self):\n        \"\"\"\n        Stop the background process.\n        \"\"\"\n        if not self.process:\n            return\n\n        self.process.terminate()\n        self.process.join()\n        self.process = None",
      "children": [
        {
          "value": "AppProcess",
          "children": []
        },
        {
          "value": "(ABC)",
          "children": [
            {
              "value": "ABC",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    A class to represent an object that can be executed in a background process.\n    \"\"\"\n\n    process: Optional[Process] = None\n\n    set_start_method(\"spawn\", force=True)\n    configure_logging()\n    sentry_init()\n\n    # Methods that are executed INSIDE the process #\n\n    @abstractmethod\n    def run(self):\n        \"\"\"\n        The method that will be executed in the process.\n        \"\"\"\n        pass\n\n    @classmethod\n    @property\n    def service_name(cls) -> str:\n        return cls.__name__\n\n    def cleanup(self):\n        \"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"\n        pass\n\n    def health_check(self):\n        \"\"\"\n        A method to check the health of the process.\n        \"\"\"\n        pass\n\n    def execute_run_command(self, silent):\n        signal.signal(signal.SIGTERM, self._self_terminate)\n\n        try:\n            if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")\n\n            set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()\n        except (KeyboardInterrupt, SystemExit) as e:\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")\n\n    def _self_terminate(self, signum: int, frame):\n        self.cleanup()\n        sys.exit(0)\n\n    # Methods that are executed OUTSIDE the process #\n\n    def __enter__(self):\n        self.start(background=True)\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.stop()\n\n    def start(self, background: bool = False, silent: bool = False, **proc_args) -> int:\n        \"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"\n        if not background:\n            self.execute_run_command(silent)\n            return 0\n\n        self.process = Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )\n        self.process.start()\n        self.health_check()\n        return self.process.pid or 0\n\n    def stop(self):\n        \"\"\"\n        Stop the background process.\n        \"\"\"\n        if not self.process:\n            return\n\n        self.process.terminate()\n        self.process.join()\n        self.process = None",
          "children": [
            {
              "value": "\"\"\"\n    A class to represent an object that can be executed in a background process.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    A class to represent an object that can be executed in a background process.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "A class to represent an object that can be executed in a background process.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "process: Optional[Process] = None",
              "children": [
                {
                  "value": "process: Optional[Process] = None",
                  "children": [
                    {
                      "value": "process",
                      "children": []
                    },
                    {
                      "value": "Optional[Process]",
                      "children": [
                        {
                          "value": "Optional[Process]",
                          "children": [
                            {
                              "value": "Optional",
                              "children": []
                            },
                            {
                              "value": "[Process]",
                              "children": [
                                {
                                  "value": "Process",
                                  "children": [
                                    {
                                      "value": "Process",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "set_start_method(\"spawn\", force=True)",
              "children": [
                {
                  "value": "set_start_method(\"spawn\", force=True)",
                  "children": [
                    {
                      "value": "set_start_method",
                      "children": []
                    },
                    {
                      "value": "(\"spawn\", force=True)",
                      "children": [
                        {
                          "value": "\"spawn\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "spawn",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "force=True",
                          "children": [
                            {
                              "value": "force",
                              "children": []
                            },
                            {
                              "value": "True",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "configure_logging()",
              "children": [
                {
                  "value": "configure_logging()",
                  "children": [
                    {
                      "value": "configure_logging",
                      "children": []
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "sentry_init()",
              "children": [
                {
                  "value": "sentry_init()",
                  "children": [
                    {
                      "value": "sentry_init",
                      "children": []
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Methods that are executed INSIDE the process #",
              "children": []
            },
            {
              "value": "@abstractmethod\n    def run(self):\n        \"\"\"\n        The method that will be executed in the process.\n        \"\"\"\n        pass",
              "children": [
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def run(self):\n        \"\"\"\n        The method that will be executed in the process.\n        \"\"\"\n        pass",
                  "children": [
                    {
                      "value": "run",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"\"\"\n        The method that will be executed in the process.\n        \"\"\"\n        pass",
                      "children": [
                        {
                          "value": "\"\"\"\n        The method that will be executed in the process.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"\n        The method that will be executed in the process.\n        \"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "The method that will be executed in the process.",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "pass",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@classmethod\n    @property\n    def service_name(cls) -> str:\n        return cls.__name__",
              "children": [
                {
                  "value": "@classmethod",
                  "children": [
                    {
                      "value": "classmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def service_name(cls) -> str:\n        return cls.__name__",
                  "children": [
                    {
                      "value": "service_name",
                      "children": []
                    },
                    {
                      "value": "(cls)",
                      "children": [
                        {
                          "value": "cls",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return cls.__name__",
                      "children": [
                        {
                          "value": "return cls.__name__",
                          "children": [
                            {
                              "value": "cls.__name__",
                              "children": [
                                {
                                  "value": "cls",
                                  "children": []
                                },
                                {
                                  "value": "__name__",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def cleanup(self):\n        \"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"\n        pass",
              "children": [
                {
                  "value": "cleanup",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"\n        pass",
                  "children": [
                    {
                      "value": "\"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "pass",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def health_check(self):\n        \"\"\"\n        A method to check the health of the process.\n        \"\"\"\n        pass",
              "children": [
                {
                  "value": "health_check",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"\n        A method to check the health of the process.\n        \"\"\"\n        pass",
                  "children": [
                    {
                      "value": "\"\"\"\n        A method to check the health of the process.\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        A method to check the health of the process.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "A method to check the health of the process.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "pass",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def execute_run_command(self, silent):\n        signal.signal(signal.SIGTERM, self._self_terminate)\n\n        try:\n            if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")\n\n            set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()\n        except (KeyboardInterrupt, SystemExit) as e:\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
              "children": [
                {
                  "value": "execute_run_command",
                  "children": []
                },
                {
                  "value": "(self, silent)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "silent",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "signal.signal(signal.SIGTERM, self._self_terminate)\n\n        try:\n            if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")\n\n            set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()\n        except (KeyboardInterrupt, SystemExit) as e:\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
                  "children": [
                    {
                      "value": "signal.signal(signal.SIGTERM, self._self_terminate)",
                      "children": [
                        {
                          "value": "signal.signal(signal.SIGTERM, self._self_terminate)",
                          "children": [
                            {
                              "value": "signal.signal",
                              "children": [
                                {
                                  "value": "signal",
                                  "children": []
                                },
                                {
                                  "value": "signal",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(signal.SIGTERM, self._self_terminate)",
                              "children": [
                                {
                                  "value": "signal.SIGTERM",
                                  "children": [
                                    {
                                      "value": "signal",
                                      "children": []
                                    },
                                    {
                                      "value": "SIGTERM",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self._self_terminate",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_self_terminate",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "try:\n            if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")\n\n            set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()\n        except (KeyboardInterrupt, SystemExit) as e:\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
                      "children": [
                        {
                          "value": "if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")\n\n            set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()",
                          "children": [
                            {
                              "value": "if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")",
                              "children": [
                                {
                                  "value": "silent",
                                  "children": []
                                },
                                {
                                  "value": "sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")",
                                  "children": [
                                    {
                                      "value": "sys.stdout = open(os.devnull, \"w\")",
                                      "children": [
                                        {
                                          "value": "sys.stdout = open(os.devnull, \"w\")",
                                          "children": [
                                            {
                                              "value": "sys.stdout",
                                              "children": [
                                                {
                                                  "value": "sys",
                                                  "children": []
                                                },
                                                {
                                                  "value": "stdout",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "open(os.devnull, \"w\")",
                                              "children": [
                                                {
                                                  "value": "open",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(os.devnull, \"w\")",
                                                  "children": [
                                                    {
                                                      "value": "os.devnull",
                                                      "children": [
                                                        {
                                                          "value": "os",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "devnull",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"w\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "w",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "sys.stderr = open(os.devnull, \"w\")",
                                      "children": [
                                        {
                                          "value": "sys.stderr = open(os.devnull, \"w\")",
                                          "children": [
                                            {
                                              "value": "sys.stderr",
                                              "children": [
                                                {
                                                  "value": "sys",
                                                  "children": []
                                                },
                                                {
                                                  "value": "stderr",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "open(os.devnull, \"w\")",
                                              "children": [
                                                {
                                                  "value": "open",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(os.devnull, \"w\")",
                                                  "children": [
                                                    {
                                                      "value": "os.devnull",
                                                      "children": [
                                                        {
                                                          "value": "os",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "devnull",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"w\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "w",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "set_service_name(self.service_name)",
                              "children": [
                                {
                                  "value": "set_service_name(self.service_name)",
                                  "children": [
                                    {
                                      "value": "set_service_name",
                                      "children": []
                                    },
                                    {
                                      "value": "(self.service_name)",
                                      "children": [
                                        {
                                          "value": "self.service_name",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "service_name",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "logger.info(f\"[{self.service_name}] Starting...\")",
                              "children": [
                                {
                                  "value": "logger.info(f\"[{self.service_name}] Starting...\")",
                                  "children": [
                                    {
                                      "value": "logger.info",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(f\"[{self.service_name}] Starting...\")",
                                      "children": [
                                        {
                                          "value": "f\"[{self.service_name}] Starting...\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "[",
                                              "children": []
                                            },
                                            {
                                              "value": "{self.service_name}",
                                              "children": [
                                                {
                                                  "value": "self.service_name",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "service_name",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "] Starting...",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "self.run()",
                              "children": [
                                {
                                  "value": "self.run()",
                                  "children": [
                                    {
                                      "value": "self.run",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "run",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except (KeyboardInterrupt, SystemExit) as e:\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
                          "children": [
                            {
                              "value": "(KeyboardInterrupt, SystemExit) as e",
                              "children": [
                                {
                                  "value": "(KeyboardInterrupt, SystemExit)",
                                  "children": [
                                    {
                                      "value": "KeyboardInterrupt",
                                      "children": []
                                    },
                                    {
                                      "value": "SystemExit",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
                              "children": [
                                {
                                  "value": "logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
                                  "children": [
                                    {
                                      "value": "logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
                                      "children": [
                                        {
                                          "value": "logger.warning",
                                          "children": [
                                            {
                                              "value": "logger",
                                              "children": []
                                            },
                                            {
                                              "value": "warning",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
                                          "children": [
                                            {
                                              "value": "f\"[{self.service_name}] Terminated: {e}; quitting...\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{self.service_name}",
                                                  "children": [
                                                    {
                                                      "value": "self.service_name",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "service_name",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "] Terminated:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{e}",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "; quitting...",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def _self_terminate(self, signum: int, frame):\n        self.cleanup()\n        sys.exit(0)",
              "children": [
                {
                  "value": "_self_terminate",
                  "children": []
                },
                {
                  "value": "(self, signum: int, frame)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "signum: int",
                      "children": [
                        {
                          "value": "signum",
                          "children": []
                        },
                        {
                          "value": "int",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "frame",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.cleanup()\n        sys.exit(0)",
                  "children": [
                    {
                      "value": "self.cleanup()",
                      "children": [
                        {
                          "value": "self.cleanup()",
                          "children": [
                            {
                              "value": "self.cleanup",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "cleanup",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "sys.exit(0)",
                      "children": [
                        {
                          "value": "sys.exit(0)",
                          "children": [
                            {
                              "value": "sys.exit",
                              "children": [
                                {
                                  "value": "sys",
                                  "children": []
                                },
                                {
                                  "value": "exit",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(0)",
                              "children": [
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Methods that are executed OUTSIDE the process #",
              "children": []
            },
            {
              "value": "def __enter__(self):\n        self.start(background=True)\n        return self",
              "children": [
                {
                  "value": "__enter__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.start(background=True)\n        return self",
                  "children": [
                    {
                      "value": "self.start(background=True)",
                      "children": [
                        {
                          "value": "self.start(background=True)",
                          "children": [
                            {
                              "value": "self.start",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "start",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(background=True)",
                              "children": [
                                {
                                  "value": "background=True",
                                  "children": [
                                    {
                                      "value": "background",
                                      "children": []
                                    },
                                    {
                                      "value": "True",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return self",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __exit__(self, *args, **kwargs):\n        self.stop()",
              "children": [
                {
                  "value": "__exit__",
                  "children": []
                },
                {
                  "value": "(self, *args, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "*args",
                      "children": [
                        {
                          "value": "args",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "self.stop()",
                  "children": [
                    {
                      "value": "self.stop()",
                      "children": [
                        {
                          "value": "self.stop()",
                          "children": [
                            {
                              "value": "self.stop",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "stop",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def start(self, background: bool = False, silent: bool = False, **proc_args) -> int:\n        \"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"\n        if not background:\n            self.execute_run_command(silent)\n            return 0\n\n        self.process = Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )\n        self.process.start()\n        self.health_check()\n        return self.process.pid or 0",
              "children": [
                {
                  "value": "start",
                  "children": []
                },
                {
                  "value": "(self, background: bool = False, silent: bool = False, **proc_args)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "background: bool = False",
                      "children": [
                        {
                          "value": "background",
                          "children": []
                        },
                        {
                          "value": "bool",
                          "children": [
                            {
                              "value": "bool",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "False",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "silent: bool = False",
                      "children": [
                        {
                          "value": "silent",
                          "children": []
                        },
                        {
                          "value": "bool",
                          "children": [
                            {
                              "value": "bool",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "False",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**proc_args",
                      "children": [
                        {
                          "value": "proc_args",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"\n        if not background:\n            self.execute_run_command(silent)\n            return 0\n\n        self.process = Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )\n        self.process.start()\n        self.health_check()\n        return self.process.pid or 0",
                  "children": [
                    {
                      "value": "\"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not background:\n            self.execute_run_command(silent)\n            return 0",
                      "children": [
                        {
                          "value": "not background",
                          "children": [
                            {
                              "value": "background",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "self.execute_run_command(silent)\n            return 0",
                          "children": [
                            {
                              "value": "self.execute_run_command(silent)",
                              "children": [
                                {
                                  "value": "self.execute_run_command(silent)",
                                  "children": [
                                    {
                                      "value": "self.execute_run_command",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "execute_run_command",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(silent)",
                                      "children": [
                                        {
                                          "value": "silent",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "return 0",
                              "children": [
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.process = Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )",
                      "children": [
                        {
                          "value": "self.process = Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )",
                          "children": [
                            {
                              "value": "self.process",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "process",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )",
                              "children": [
                                {
                                  "value": "Process",
                                  "children": []
                                },
                                {
                                  "value": "(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )",
                                  "children": [
                                    {
                                      "value": "name=self.__class__.__name__",
                                      "children": [
                                        {
                                          "value": "name",
                                          "children": []
                                        },
                                        {
                                          "value": "self.__class__.__name__",
                                          "children": [
                                            {
                                              "value": "self.__class__",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "__class__",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "__name__",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "target=self.execute_run_command",
                                      "children": [
                                        {
                                          "value": "target",
                                          "children": []
                                        },
                                        {
                                          "value": "self.execute_run_command",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "execute_run_command",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "args=(silent,)",
                                      "children": [
                                        {
                                          "value": "args",
                                          "children": []
                                        },
                                        {
                                          "value": "(silent,)",
                                          "children": [
                                            {
                                              "value": "silent",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "**proc_args",
                                      "children": [
                                        {
                                          "value": "proc_args",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.process.start()",
                      "children": [
                        {
                          "value": "self.process.start()",
                          "children": [
                            {
                              "value": "self.process.start",
                              "children": [
                                {
                                  "value": "self.process",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "process",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "start",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.health_check()",
                      "children": [
                        {
                          "value": "self.health_check()",
                          "children": [
                            {
                              "value": "self.health_check",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "health_check",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return self.process.pid or 0",
                      "children": [
                        {
                          "value": "self.process.pid or 0",
                          "children": [
                            {
                              "value": "self.process.pid",
                              "children": [
                                {
                                  "value": "self.process",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "process",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "pid",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def stop(self):\n        \"\"\"\n        Stop the background process.\n        \"\"\"\n        if not self.process:\n            return\n\n        self.process.terminate()\n        self.process.join()\n        self.process = None",
              "children": [
                {
                  "value": "stop",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"\n        Stop the background process.\n        \"\"\"\n        if not self.process:\n            return\n\n        self.process.terminate()\n        self.process.join()\n        self.process = None",
                  "children": [
                    {
                      "value": "\"\"\"\n        Stop the background process.\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        Stop the background process.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Stop the background process.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not self.process:\n            return",
                      "children": [
                        {
                          "value": "not self.process",
                          "children": [
                            {
                              "value": "self.process",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "process",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return",
                          "children": [
                            {
                              "value": "return",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.process.terminate()",
                      "children": [
                        {
                          "value": "self.process.terminate()",
                          "children": [
                            {
                              "value": "self.process.terminate",
                              "children": [
                                {
                                  "value": "self.process",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "process",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "terminate",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.process.join()",
                      "children": [
                        {
                          "value": "self.process.join()",
                          "children": [
                            {
                              "value": "self.process.join",
                              "children": [
                                {
                                  "value": "self.process",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "process",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "join",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.process = None",
                      "children": [
                        {
                          "value": "self.process = None",
                          "children": [
                            {
                              "value": "self.process",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "process",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}