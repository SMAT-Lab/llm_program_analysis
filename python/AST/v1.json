{
  "value": "import asyncio\nimport logging\nfrom collections import defaultdict\nfrom typing import TYPE_CHECKING, Annotated, Any, Sequence\n\nimport pydantic\nfrom autogpt_libs.auth.middleware import auth_middleware\nfrom autogpt_libs.feature_flag.client import feature_flag\nfrom autogpt_libs.utils.cache import thread_cached\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import Optional, TypedDict\n\nimport backend.data.block\nimport backend.server.integrations.router\nimport backend.server.routers.analytics\nfrom backend.data import execution as execution_db\nfrom backend.data import graph as graph_db\nfrom backend.data.api_key import (\n    APIKeyError,\n    APIKeyNotFoundError,\n    APIKeyPermissionError,\n    APIKeyWithoutHash,\n    generate_api_key,\n    get_api_key_by_id,\n    list_user_api_keys,\n    revoke_api_key,\n    suspend_api_key,\n    update_api_key_permissions,\n)\nfrom backend.data.block import BlockInput, CompletedBlockOutput\nfrom backend.data.credit import get_block_costs, get_user_credit_model\nfrom backend.data.user import get_or_create_user\nfrom backend.executor import ExecutionManager, ExecutionScheduler, scheduler\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.webhooks.graph_lifecycle_hooks import (\n    on_graph_activate,\n    on_graph_deactivate,\n)\nfrom backend.server.model import (\n    CreateAPIKeyRequest,\n    CreateAPIKeyResponse,\n    CreateGraph,\n    SetGraphActiveVersion,\n    UpdatePermissionsRequest,\n)\nfrom backend.server.utils import get_user_id\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\n    from backend.data.model import Credentials\n\n\n@thread_cached\ndef execution_manager_client() -> ExecutionManager:\n    return get_service_client(ExecutionManager)\n\n\n@thread_cached\ndef execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)\n\n\nsettings = Settings()\nlogger = logging.getLogger(__name__)\nintegration_creds_manager = IntegrationCredentialsManager()\n\n\n_user_credit_model = get_user_credit_model()\n\n# Define the API routes\nv1_router = APIRouter()\n\nv1_router.include_router(\n    backend.server.integrations.router.router,\n    prefix=\"/integrations\",\n    tags=[\"integrations\"],\n)\n\nv1_router.include_router(\n    backend.server.routers.analytics.router,\n    prefix=\"/analytics\",\n    tags=[\"analytics\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n########################################################\n##################### Auth #############################\n########################################################\n\n\n@v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])\nasync def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n    user = await get_or_create_user(user_data)\n    return user.model_dump()\n\n\n########################################################\n##################### Blocks ###########################\n########################################################\n\n\n@v1_router.get(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])\ndef get_graph_blocks() -> Sequence[dict[Any, Any]]:\n    blocks = [block() for block in backend.data.block.get_blocks().values()]\n    costs = get_block_costs()\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]\n\n\n@v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef execute_graph_block(block_id: str, data: BlockInput) -> CompletedBlockOutput:\n    obj = backend.data.block.get_block(block_id)\n    if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")\n\n    output = defaultdict(list)\n    for name, data in obj.execute(data):\n        output[name].append(data)\n    return output\n\n\n########################################################\n##################### Credits ##########################\n########################################################\n\n\n@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n\n\n########################################################\n##################### Graphs ###########################\n########################################################\n\n\nclass DeleteGraphResponse(TypedDict):\n    version_counts: int\n\n\n@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs\n\n\n@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n\n\nasync def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n        graph.version = 1\n    else:\n        raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )\n\n    graph.is_template = is_template\n    graph.is_active = not is_template\n    graph.reassign_ids(user_id=user_id, reassign_graph_id=True)\n\n    graph = await graph_db.create_graph(graph, user_id=user_id)\n    graph = await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )\n    return graph\n\n\n@v1_router.delete(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def delete_graph(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> DeleteGraphResponse:\n    if active_version := await graph_db.get_graph(graph_id, user_id=user_id):\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        await on_graph_deactivate(active_version, get_credentials)\n\n    return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}\n\n\n@v1_router.put(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.put(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def update_graph(\n    graph_id: str,\n    graph: graph_db.Graph,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> graph_db.GraphModel:\n    # Sanity check\n    if graph.id and graph.id != graph_id:\n        raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")\n\n    # Determine new version\n    existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not existing_versions:\n        raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")\n    latest_version_number = max(g.version for g in existing_versions)\n    graph.version = latest_version_number + 1\n\n    latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )\n    current_active_version = next((v for v in existing_versions if v.is_active), None)\n    if latest_version_graph.is_template != graph.is_template:\n        raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )\n    graph.is_active = not graph.is_template\n    graph = graph_db.make_graph_model(graph, user_id)\n    graph.reassign_ids(user_id=user_id)\n\n    new_graph_version = await graph_db.create_graph(graph, user_id=user_id)\n\n    if new_graph_version.is_active:\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        # Handle activation of the new graph first to ensure continuity\n        new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n        # Ensure new version is the only active version\n        await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n        if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )\n\n    return new_graph_version\n\n\n@v1_router.put(\n    path=\"/graphs/{graph_id}/versions/active\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def set_graph_active_version(\n    graph_id: str,\n    request_body: SetGraphActiveVersion,\n    user_id: Annotated[str, Depends(get_user_id)],\n):\n    new_active_version = request_body.active_graph_version\n    new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )\n    if not new_active_graph:\n        raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")\n\n    current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)\n\n    def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)\n\n    # Handle activation of the new graph first to ensure continuity\n    await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )\n    # Ensure new version is the only active version\n    await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )\n    if current_active_graph and current_active_graph.version != new_active_version:\n        # Handle deactivation of the previously active version\n        await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )\n\n\n@v1_router.post(\n    path=\"/graphs/{graph_id}/execute\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef execute_graph(\n    graph_id: str,\n    node_input: dict[Any, Any],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, Any]:  # FIXME: add proper return type\n    try:\n        graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}\n    except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)\n\n\n@v1_router.post(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def stop_graph_run(\n    graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[execution_db.ExecutionResult]:\n    if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\n        raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")\n\n    await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )\n\n    # Retrieve & return canceled graph execution in its final state\n    return await execution_db.get_execution_results(graph_exec_id)\n\n\n@v1_router.get(\n    path=\"/executions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_executions(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[graph_db.GraphExecution]:\n    return await graph_db.get_executions(user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_run_node_execution_results(\n    graph_id: str,\n    graph_exec_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Sequence[execution_db.ExecutionResult]:\n    graph = await graph_db.get_graph(graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n\n    return await execution_db.get_execution_results(graph_exec_id)\n\n\n########################################################\n##################### Templates ########################\n########################################################\n\n\n@v1_router.get(\n    path=\"/templates\",\n    tags=[\"graphs\", \"templates\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_templates(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)\n\n\n@v1_router.get(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_template(\n    graph_id: str, version: int | None = None\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(graph_id, version, template=True)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")\n    return graph\n\n\n@v1_router.post(\n    path=\"/templates\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def create_new_template(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=True, user_id=user_id)\n\n\n########################################################\n##################### Schedules ########################\n########################################################\n\n\nclass ScheduleCreationRequest(pydantic.BaseModel):\n    cron: str\n    input_data: dict[Any, Any]\n    graph_id: str\n\n\n@v1_router.post(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def create_schedule(\n    user_id: Annotated[str, Depends(get_user_id)],\n    schedule: ScheduleCreationRequest,\n) -> scheduler.JobInfo:\n    graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )\n\n    return await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )\n\n\n@v1_router.delete(\n    path=\"/schedules/{schedule_id}\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef delete_schedule(\n    schedule_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[Any, Any]:\n    execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\n    return {\"id\": schedule_id}\n\n\n@v1_router.get(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef get_execution_schedules(\n    user_id: Annotated[str, Depends(get_user_id)],\n    graph_id: str | None = None,\n) -> list[scheduler.JobInfo]:\n    return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )\n\n\n########################################################\n#####################  API KEY ##############################\n########################################################\n\n\n@v1_router.post(\n    \"/api-keys\",\n    response_model=list[CreateAPIKeyResponse] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def create_api_key(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n) -> CreateAPIKeyResponse:\n    \"\"\"Create a new API key\"\"\"\n    try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)\n    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.get(\n    \"/api-keys\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_keys(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> list[APIKeyWithoutHash]:\n    \"\"\"List all API keys for the user\"\"\"\n    try:\n        return await list_user_api_keys(user_id)\n    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.get(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> APIKeyWithoutHash:\n    \"\"\"Get a specific API key\"\"\"\n    try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n        return api_key\n    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.delete(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def delete_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Revoke an API key\"\"\"\n    try:\n        return await revoke_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.post(\n    \"/api-keys/{key_id}/suspend\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def suspend_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Suspend an API key\"\"\"\n    try:\n        return await suspend_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n\n\n@v1_router.put(\n    \"/api-keys/{key_id}/permissions\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def update_permissions(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Update API key permissions\"\"\"\n    try:\n        return await update_api_key_permissions(key_id, user_id, request.permissions)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
  "children": [
    {
      "value": "import asyncio",
      "children": [
        {
          "value": "asyncio",
          "children": [
            {
              "value": "asyncio",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from collections import defaultdict",
      "children": [
        {
          "value": "collections",
          "children": [
            {
              "value": "collections",
              "children": []
            }
          ]
        },
        {
          "value": "defaultdict",
          "children": [
            {
              "value": "defaultdict",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import TYPE_CHECKING, Annotated, Any, Sequence",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "TYPE_CHECKING",
          "children": [
            {
              "value": "TYPE_CHECKING",
              "children": []
            }
          ]
        },
        {
          "value": "Annotated",
          "children": [
            {
              "value": "Annotated",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "Sequence",
          "children": [
            {
              "value": "Sequence",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import pydantic",
      "children": [
        {
          "value": "pydantic",
          "children": [
            {
              "value": "pydantic",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from autogpt_libs.auth.middleware import auth_middleware",
      "children": [
        {
          "value": "autogpt_libs.auth.middleware",
          "children": [
            {
              "value": "autogpt_libs",
              "children": []
            },
            {
              "value": "auth",
              "children": []
            },
            {
              "value": "middleware",
              "children": []
            }
          ]
        },
        {
          "value": "auth_middleware",
          "children": [
            {
              "value": "auth_middleware",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from autogpt_libs.feature_flag.client import feature_flag",
      "children": [
        {
          "value": "autogpt_libs.feature_flag.client",
          "children": [
            {
              "value": "autogpt_libs",
              "children": []
            },
            {
              "value": "feature_flag",
              "children": []
            },
            {
              "value": "client",
              "children": []
            }
          ]
        },
        {
          "value": "feature_flag",
          "children": [
            {
              "value": "feature_flag",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from autogpt_libs.utils.cache import thread_cached",
      "children": [
        {
          "value": "autogpt_libs.utils.cache",
          "children": [
            {
              "value": "autogpt_libs",
              "children": []
            },
            {
              "value": "utils",
              "children": []
            },
            {
              "value": "cache",
              "children": []
            }
          ]
        },
        {
          "value": "thread_cached",
          "children": [
            {
              "value": "thread_cached",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from fastapi import APIRouter, Depends, HTTPException",
      "children": [
        {
          "value": "fastapi",
          "children": [
            {
              "value": "fastapi",
              "children": []
            }
          ]
        },
        {
          "value": "APIRouter",
          "children": [
            {
              "value": "APIRouter",
              "children": []
            }
          ]
        },
        {
          "value": "Depends",
          "children": [
            {
              "value": "Depends",
              "children": []
            }
          ]
        },
        {
          "value": "HTTPException",
          "children": [
            {
              "value": "HTTPException",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing_extensions import Optional, TypedDict",
      "children": [
        {
          "value": "typing_extensions",
          "children": [
            {
              "value": "typing_extensions",
              "children": []
            }
          ]
        },
        {
          "value": "Optional",
          "children": [
            {
              "value": "Optional",
              "children": []
            }
          ]
        },
        {
          "value": "TypedDict",
          "children": [
            {
              "value": "TypedDict",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import backend.data.block",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import backend.server.integrations.router",
      "children": [
        {
          "value": "backend.server.integrations.router",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "server",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "router",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import backend.server.routers.analytics",
      "children": [
        {
          "value": "backend.server.routers.analytics",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "server",
              "children": []
            },
            {
              "value": "routers",
              "children": []
            },
            {
              "value": "analytics",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data import execution as execution_db",
      "children": [
        {
          "value": "backend.data",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            }
          ]
        },
        {
          "value": "execution as execution_db",
          "children": [
            {
              "value": "execution",
              "children": [
                {
                  "value": "execution",
                  "children": []
                }
              ]
            },
            {
              "value": "execution_db",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data import graph as graph_db",
      "children": [
        {
          "value": "backend.data",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            }
          ]
        },
        {
          "value": "graph as graph_db",
          "children": [
            {
              "value": "graph",
              "children": [
                {
                  "value": "graph",
                  "children": []
                }
              ]
            },
            {
              "value": "graph_db",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.api_key import (\n    APIKeyError,\n    APIKeyNotFoundError,\n    APIKeyPermissionError,\n    APIKeyWithoutHash,\n    generate_api_key,\n    get_api_key_by_id,\n    list_user_api_keys,\n    revoke_api_key,\n    suspend_api_key,\n    update_api_key_permissions,\n)",
      "children": [
        {
          "value": "backend.data.api_key",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "api_key",
              "children": []
            }
          ]
        },
        {
          "value": "APIKeyError",
          "children": [
            {
              "value": "APIKeyError",
              "children": []
            }
          ]
        },
        {
          "value": "APIKeyNotFoundError",
          "children": [
            {
              "value": "APIKeyNotFoundError",
              "children": []
            }
          ]
        },
        {
          "value": "APIKeyPermissionError",
          "children": [
            {
              "value": "APIKeyPermissionError",
              "children": []
            }
          ]
        },
        {
          "value": "APIKeyWithoutHash",
          "children": [
            {
              "value": "APIKeyWithoutHash",
              "children": []
            }
          ]
        },
        {
          "value": "generate_api_key",
          "children": [
            {
              "value": "generate_api_key",
              "children": []
            }
          ]
        },
        {
          "value": "get_api_key_by_id",
          "children": [
            {
              "value": "get_api_key_by_id",
              "children": []
            }
          ]
        },
        {
          "value": "list_user_api_keys",
          "children": [
            {
              "value": "list_user_api_keys",
              "children": []
            }
          ]
        },
        {
          "value": "revoke_api_key",
          "children": [
            {
              "value": "revoke_api_key",
              "children": []
            }
          ]
        },
        {
          "value": "suspend_api_key",
          "children": [
            {
              "value": "suspend_api_key",
              "children": []
            }
          ]
        },
        {
          "value": "update_api_key_permissions",
          "children": [
            {
              "value": "update_api_key_permissions",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block import BlockInput, CompletedBlockOutput",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        },
        {
          "value": "BlockInput",
          "children": [
            {
              "value": "BlockInput",
              "children": []
            }
          ]
        },
        {
          "value": "CompletedBlockOutput",
          "children": [
            {
              "value": "CompletedBlockOutput",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.credit import get_block_costs, get_user_credit_model",
      "children": [
        {
          "value": "backend.data.credit",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "credit",
              "children": []
            }
          ]
        },
        {
          "value": "get_block_costs",
          "children": [
            {
              "value": "get_block_costs",
              "children": []
            }
          ]
        },
        {
          "value": "get_user_credit_model",
          "children": [
            {
              "value": "get_user_credit_model",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.user import get_or_create_user",
      "children": [
        {
          "value": "backend.data.user",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "user",
              "children": []
            }
          ]
        },
        {
          "value": "get_or_create_user",
          "children": [
            {
              "value": "get_or_create_user",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.executor import ExecutionManager, ExecutionScheduler, scheduler",
      "children": [
        {
          "value": "backend.executor",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "executor",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionManager",
          "children": [
            {
              "value": "ExecutionManager",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionScheduler",
          "children": [
            {
              "value": "ExecutionScheduler",
              "children": []
            }
          ]
        },
        {
          "value": "scheduler",
          "children": [
            {
              "value": "scheduler",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.creds_manager import IntegrationCredentialsManager",
      "children": [
        {
          "value": "backend.integrations.creds_manager",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "creds_manager",
              "children": []
            }
          ]
        },
        {
          "value": "IntegrationCredentialsManager",
          "children": [
            {
              "value": "IntegrationCredentialsManager",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.webhooks.graph_lifecycle_hooks import (\n    on_graph_activate,\n    on_graph_deactivate,\n)",
      "children": [
        {
          "value": "backend.integrations.webhooks.graph_lifecycle_hooks",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "webhooks",
              "children": []
            },
            {
              "value": "graph_lifecycle_hooks",
              "children": []
            }
          ]
        },
        {
          "value": "on_graph_activate",
          "children": [
            {
              "value": "on_graph_activate",
              "children": []
            }
          ]
        },
        {
          "value": "on_graph_deactivate",
          "children": [
            {
              "value": "on_graph_deactivate",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.server.model import (\n    CreateAPIKeyRequest,\n    CreateAPIKeyResponse,\n    CreateGraph,\n    SetGraphActiveVersion,\n    UpdatePermissionsRequest,\n)",
      "children": [
        {
          "value": "backend.server.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "server",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "CreateAPIKeyRequest",
          "children": [
            {
              "value": "CreateAPIKeyRequest",
              "children": []
            }
          ]
        },
        {
          "value": "CreateAPIKeyResponse",
          "children": [
            {
              "value": "CreateAPIKeyResponse",
              "children": []
            }
          ]
        },
        {
          "value": "CreateGraph",
          "children": [
            {
              "value": "CreateGraph",
              "children": []
            }
          ]
        },
        {
          "value": "SetGraphActiveVersion",
          "children": [
            {
              "value": "SetGraphActiveVersion",
              "children": []
            }
          ]
        },
        {
          "value": "UpdatePermissionsRequest",
          "children": [
            {
              "value": "UpdatePermissionsRequest",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.server.utils import get_user_id",
      "children": [
        {
          "value": "backend.server.utils",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "server",
              "children": []
            },
            {
              "value": "utils",
              "children": []
            }
          ]
        },
        {
          "value": "get_user_id",
          "children": [
            {
              "value": "get_user_id",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.service import get_service_client",
      "children": [
        {
          "value": "backend.util.service",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "service",
              "children": []
            }
          ]
        },
        {
          "value": "get_service_client",
          "children": [
            {
              "value": "get_service_client",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Settings",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Settings",
          "children": [
            {
              "value": "Settings",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "if TYPE_CHECKING:\n    from backend.data.model import Credentials",
      "children": [
        {
          "value": "TYPE_CHECKING",
          "children": []
        },
        {
          "value": "from backend.data.model import Credentials",
          "children": [
            {
              "value": "from backend.data.model import Credentials",
              "children": [
                {
                  "value": "backend.data.model",
                  "children": [
                    {
                      "value": "backend",
                      "children": []
                    },
                    {
                      "value": "data",
                      "children": []
                    },
                    {
                      "value": "model",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "Credentials",
                  "children": [
                    {
                      "value": "Credentials",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@thread_cached\ndef execution_manager_client() -> ExecutionManager:\n    return get_service_client(ExecutionManager)",
      "children": [
        {
          "value": "@thread_cached",
          "children": [
            {
              "value": "thread_cached",
              "children": []
            }
          ]
        },
        {
          "value": "def execution_manager_client() -> ExecutionManager:\n    return get_service_client(ExecutionManager)",
          "children": [
            {
              "value": "execution_manager_client",
              "children": []
            },
            {
              "value": "()",
              "children": []
            },
            {
              "value": "ExecutionManager",
              "children": [
                {
                  "value": "ExecutionManager",
                  "children": []
                }
              ]
            },
            {
              "value": "return get_service_client(ExecutionManager)",
              "children": [
                {
                  "value": "return get_service_client(ExecutionManager)",
                  "children": [
                    {
                      "value": "get_service_client(ExecutionManager)",
                      "children": [
                        {
                          "value": "get_service_client",
                          "children": []
                        },
                        {
                          "value": "(ExecutionManager)",
                          "children": [
                            {
                              "value": "ExecutionManager",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@thread_cached\ndef execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)",
      "children": [
        {
          "value": "@thread_cached",
          "children": [
            {
              "value": "thread_cached",
              "children": []
            }
          ]
        },
        {
          "value": "def execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)",
          "children": [
            {
              "value": "execution_scheduler_client",
              "children": []
            },
            {
              "value": "()",
              "children": []
            },
            {
              "value": "ExecutionScheduler",
              "children": [
                {
                  "value": "ExecutionScheduler",
                  "children": []
                }
              ]
            },
            {
              "value": "return get_service_client(ExecutionScheduler)",
              "children": [
                {
                  "value": "return get_service_client(ExecutionScheduler)",
                  "children": [
                    {
                      "value": "get_service_client(ExecutionScheduler)",
                      "children": [
                        {
                          "value": "get_service_client",
                          "children": []
                        },
                        {
                          "value": "(ExecutionScheduler)",
                          "children": [
                            {
                              "value": "ExecutionScheduler",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "settings = Settings()",
      "children": [
        {
          "value": "settings = Settings()",
          "children": [
            {
              "value": "settings",
              "children": []
            },
            {
              "value": "Settings()",
              "children": [
                {
                  "value": "Settings",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "integration_creds_manager = IntegrationCredentialsManager()",
      "children": [
        {
          "value": "integration_creds_manager = IntegrationCredentialsManager()",
          "children": [
            {
              "value": "integration_creds_manager",
              "children": []
            },
            {
              "value": "IntegrationCredentialsManager()",
              "children": [
                {
                  "value": "IntegrationCredentialsManager",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "_user_credit_model = get_user_credit_model()",
      "children": [
        {
          "value": "_user_credit_model = get_user_credit_model()",
          "children": [
            {
              "value": "_user_credit_model",
              "children": []
            },
            {
              "value": "get_user_credit_model()",
              "children": [
                {
                  "value": "get_user_credit_model",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# Define the API routes",
      "children": []
    },
    {
      "value": "v1_router = APIRouter()",
      "children": [
        {
          "value": "v1_router = APIRouter()",
          "children": [
            {
              "value": "v1_router",
              "children": []
            },
            {
              "value": "APIRouter()",
              "children": [
                {
                  "value": "APIRouter",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "v1_router.include_router(\n    backend.server.integrations.router.router,\n    prefix=\"/integrations\",\n    tags=[\"integrations\"],\n)",
      "children": [
        {
          "value": "v1_router.include_router(\n    backend.server.integrations.router.router,\n    prefix=\"/integrations\",\n    tags=[\"integrations\"],\n)",
          "children": [
            {
              "value": "v1_router.include_router",
              "children": [
                {
                  "value": "v1_router",
                  "children": []
                },
                {
                  "value": "include_router",
                  "children": []
                }
              ]
            },
            {
              "value": "(\n    backend.server.integrations.router.router,\n    prefix=\"/integrations\",\n    tags=[\"integrations\"],\n)",
              "children": [
                {
                  "value": "backend.server.integrations.router.router",
                  "children": [
                    {
                      "value": "backend.server.integrations.router",
                      "children": [
                        {
                          "value": "backend.server.integrations",
                          "children": [
                            {
                              "value": "backend.server",
                              "children": [
                                {
                                  "value": "backend",
                                  "children": []
                                },
                                {
                                  "value": "server",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "integrations",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "router",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "router",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "prefix=\"/integrations\"",
                  "children": [
                    {
                      "value": "prefix",
                      "children": []
                    },
                    {
                      "value": "\"/integrations\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/integrations",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "tags=[\"integrations\"]",
                  "children": [
                    {
                      "value": "tags",
                      "children": []
                    },
                    {
                      "value": "[\"integrations\"]",
                      "children": [
                        {
                          "value": "\"integrations\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "integrations",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "v1_router.include_router(\n    backend.server.routers.analytics.router,\n    prefix=\"/analytics\",\n    tags=[\"analytics\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "children": [
        {
          "value": "v1_router.include_router(\n    backend.server.routers.analytics.router,\n    prefix=\"/analytics\",\n    tags=[\"analytics\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.include_router",
              "children": [
                {
                  "value": "v1_router",
                  "children": []
                },
                {
                  "value": "include_router",
                  "children": []
                }
              ]
            },
            {
              "value": "(\n    backend.server.routers.analytics.router,\n    prefix=\"/analytics\",\n    tags=[\"analytics\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "backend.server.routers.analytics.router",
                  "children": [
                    {
                      "value": "backend.server.routers.analytics",
                      "children": [
                        {
                          "value": "backend.server.routers",
                          "children": [
                            {
                              "value": "backend.server",
                              "children": [
                                {
                                  "value": "backend",
                                  "children": []
                                },
                                {
                                  "value": "server",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "routers",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "analytics",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "router",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "prefix=\"/analytics\"",
                  "children": [
                    {
                      "value": "prefix",
                      "children": []
                    },
                    {
                      "value": "\"/analytics\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/analytics",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "tags=[\"analytics\"]",
                  "children": [
                    {
                      "value": "tags",
                      "children": []
                    },
                    {
                      "value": "[\"analytics\"]",
                      "children": [
                        {
                          "value": "\"analytics\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "analytics",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "dependencies=[Depends(auth_middleware)]",
                  "children": [
                    {
                      "value": "dependencies",
                      "children": []
                    },
                    {
                      "value": "[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "Depends(auth_middleware)",
                          "children": [
                            {
                              "value": "Depends",
                              "children": []
                            },
                            {
                              "value": "(auth_middleware)",
                              "children": [
                                {
                                  "value": "auth_middleware",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "##################### Auth #############################",
      "children": []
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "@v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])\nasync def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n    user = await get_or_create_user(user_data)\n    return user.model_dump()",
      "children": [
        {
          "value": "@v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])",
          "children": [
            {
              "value": "v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])",
              "children": [
                {
                  "value": "v1_router.post",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "post",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])",
                  "children": [
                    {
                      "value": "\"/auth/user\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/auth/user",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"auth\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"auth\"]",
                          "children": [
                            {
                              "value": "\"auth\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "auth",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n    user = await get_or_create_user(user_data)\n    return user.model_dump()",
          "children": [
            {
              "value": "get_or_create_user_route",
              "children": []
            },
            {
              "value": "(user_data: dict = Depends(auth_middleware))",
              "children": [
                {
                  "value": "user_data: dict = Depends(auth_middleware)",
                  "children": [
                    {
                      "value": "user_data",
                      "children": []
                    },
                    {
                      "value": "dict",
                      "children": [
                        {
                          "value": "dict",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "Depends(auth_middleware)",
                      "children": [
                        {
                          "value": "Depends",
                          "children": []
                        },
                        {
                          "value": "(auth_middleware)",
                          "children": [
                            {
                              "value": "auth_middleware",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "user = await get_or_create_user(user_data)\n    return user.model_dump()",
              "children": [
                {
                  "value": "user = await get_or_create_user(user_data)",
                  "children": [
                    {
                      "value": "user = await get_or_create_user(user_data)",
                      "children": [
                        {
                          "value": "user",
                          "children": []
                        },
                        {
                          "value": "await get_or_create_user(user_data)",
                          "children": [
                            {
                              "value": "get_or_create_user(user_data)",
                              "children": [
                                {
                                  "value": "get_or_create_user",
                                  "children": []
                                },
                                {
                                  "value": "(user_data)",
                                  "children": [
                                    {
                                      "value": "user_data",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return user.model_dump()",
                  "children": [
                    {
                      "value": "user.model_dump()",
                      "children": [
                        {
                          "value": "user.model_dump",
                          "children": [
                            {
                              "value": "user",
                              "children": []
                            },
                            {
                              "value": "model_dump",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "##################### Blocks ###########################",
      "children": []
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "@v1_router.get(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])\ndef get_graph_blocks() -> Sequence[dict[Any, Any]]:\n    blocks = [block() for block in backend.data.block.get_blocks().values()]\n    costs = get_block_costs()\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]",
      "children": [
        {
          "value": "@v1_router.get(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])",
          "children": [
            {
              "value": "v1_router.get(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])",
                  "children": [
                    {
                      "value": "path=\"/blocks\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/blocks\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/blocks",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"blocks\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"blocks\"]",
                          "children": [
                            {
                              "value": "\"blocks\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "blocks",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "def get_graph_blocks() -> Sequence[dict[Any, Any]]:\n    blocks = [block() for block in backend.data.block.get_blocks().values()]\n    costs = get_block_costs()\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]",
          "children": [
            {
              "value": "get_graph_blocks",
              "children": []
            },
            {
              "value": "()",
              "children": []
            },
            {
              "value": "Sequence[dict[Any, Any]]",
              "children": [
                {
                  "value": "Sequence[dict[Any, Any]]",
                  "children": [
                    {
                      "value": "Sequence",
                      "children": []
                    },
                    {
                      "value": "[dict[Any, Any]]",
                      "children": [
                        {
                          "value": "dict[Any, Any]",
                          "children": [
                            {
                              "value": "dict[Any, Any]",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                },
                                {
                                  "value": "[Any, Any]",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": [
                                        {
                                          "value": "Any",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "Any",
                                      "children": [
                                        {
                                          "value": "Any",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "blocks = [block() for block in backend.data.block.get_blocks().values()]\n    costs = get_block_costs()\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]",
              "children": [
                {
                  "value": "blocks = [block() for block in backend.data.block.get_blocks().values()]",
                  "children": [
                    {
                      "value": "blocks = [block() for block in backend.data.block.get_blocks().values()]",
                      "children": [
                        {
                          "value": "blocks",
                          "children": []
                        },
                        {
                          "value": "[block() for block in backend.data.block.get_blocks().values()]",
                          "children": [
                            {
                              "value": "block()",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "for block in backend.data.block.get_blocks().values()",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "backend.data.block.get_blocks().values()",
                                  "children": [
                                    {
                                      "value": "backend.data.block.get_blocks().values",
                                      "children": [
                                        {
                                          "value": "backend.data.block.get_blocks()",
                                          "children": [
                                            {
                                              "value": "backend.data.block.get_blocks",
                                              "children": [
                                                {
                                                  "value": "backend.data.block",
                                                  "children": [
                                                    {
                                                      "value": "backend.data",
                                                      "children": [
                                                        {
                                                          "value": "backend",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "data",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "block",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "get_blocks",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "values",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "costs = get_block_costs()",
                  "children": [
                    {
                      "value": "costs = get_block_costs()",
                      "children": [
                        {
                          "value": "costs",
                          "children": []
                        },
                        {
                          "value": "get_block_costs()",
                          "children": [
                            {
                              "value": "get_block_costs",
                              "children": []
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]",
                  "children": [
                    {
                      "value": "[{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]",
                      "children": [
                        {
                          "value": "{**b.to_dict(), \"costs\": costs.get(b.id, [])}",
                          "children": [
                            {
                              "value": "**b.to_dict()",
                              "children": [
                                {
                                  "value": "b.to_dict()",
                                  "children": [
                                    {
                                      "value": "b.to_dict",
                                      "children": [
                                        {
                                          "value": "b",
                                          "children": []
                                        },
                                        {
                                          "value": "to_dict",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"costs\": costs.get(b.id, [])",
                              "children": [
                                {
                                  "value": "\"costs\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "costs",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "costs.get(b.id, [])",
                                  "children": [
                                    {
                                      "value": "costs.get",
                                      "children": [
                                        {
                                          "value": "costs",
                                          "children": []
                                        },
                                        {
                                          "value": "get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(b.id, [])",
                                      "children": [
                                        {
                                          "value": "b.id",
                                          "children": [
                                            {
                                              "value": "b",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "[]",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for b in blocks",
                          "children": [
                            {
                              "value": "b",
                              "children": []
                            },
                            {
                              "value": "blocks",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef execute_graph_block(block_id: str, data: BlockInput) -> CompletedBlockOutput:\n    obj = backend.data.block.get_block(block_id)\n    if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")\n\n    output = defaultdict(list)\n    for name, data in obj.execute(data):\n        output[name].append(data)\n    return output",
      "children": [
        {
          "value": "@v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.post",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "post",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/blocks/{block_id}/execute\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/blocks/{block_id}/execute\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/blocks/{block_id}/execute",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"blocks\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"blocks\"]",
                          "children": [
                            {
                              "value": "\"blocks\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "blocks",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "def execute_graph_block(block_id: str, data: BlockInput) -> CompletedBlockOutput:\n    obj = backend.data.block.get_block(block_id)\n    if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")\n\n    output = defaultdict(list)\n    for name, data in obj.execute(data):\n        output[name].append(data)\n    return output",
          "children": [
            {
              "value": "execute_graph_block",
              "children": []
            },
            {
              "value": "(block_id: str, data: BlockInput)",
              "children": [
                {
                  "value": "block_id: str",
                  "children": [
                    {
                      "value": "block_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "data: BlockInput",
                  "children": [
                    {
                      "value": "data",
                      "children": []
                    },
                    {
                      "value": "BlockInput",
                      "children": [
                        {
                          "value": "BlockInput",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "CompletedBlockOutput",
              "children": [
                {
                  "value": "CompletedBlockOutput",
                  "children": []
                }
              ]
            },
            {
              "value": "obj = backend.data.block.get_block(block_id)\n    if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")\n\n    output = defaultdict(list)\n    for name, data in obj.execute(data):\n        output[name].append(data)\n    return output",
              "children": [
                {
                  "value": "obj = backend.data.block.get_block(block_id)",
                  "children": [
                    {
                      "value": "obj = backend.data.block.get_block(block_id)",
                      "children": [
                        {
                          "value": "obj",
                          "children": []
                        },
                        {
                          "value": "backend.data.block.get_block(block_id)",
                          "children": [
                            {
                              "value": "backend.data.block.get_block",
                              "children": [
                                {
                                  "value": "backend.data.block",
                                  "children": [
                                    {
                                      "value": "backend.data",
                                      "children": [
                                        {
                                          "value": "backend",
                                          "children": []
                                        },
                                        {
                                          "value": "data",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "block",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "get_block",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(block_id)",
                              "children": [
                                {
                                  "value": "block_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")",
                  "children": [
                    {
                      "value": "not obj",
                      "children": [
                        {
                          "value": "obj",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")",
                      "children": [
                        {
                          "value": "raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")",
                          "children": [
                            {
                              "value": "HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(status_code=404, detail=f\"Block #{block_id} not found.\")",
                                  "children": [
                                    {
                                      "value": "status_code=404",
                                      "children": [
                                        {
                                          "value": "status_code",
                                          "children": []
                                        },
                                        {
                                          "value": "404",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "detail=f\"Block #{block_id} not found.\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "f\"Block #{block_id} not found.\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Block #",
                                              "children": []
                                            },
                                            {
                                              "value": "{block_id}",
                                              "children": [
                                                {
                                                  "value": "block_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not found.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "output = defaultdict(list)",
                  "children": [
                    {
                      "value": "output = defaultdict(list)",
                      "children": [
                        {
                          "value": "output",
                          "children": []
                        },
                        {
                          "value": "defaultdict(list)",
                          "children": [
                            {
                              "value": "defaultdict",
                              "children": []
                            },
                            {
                              "value": "(list)",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "for name, data in obj.execute(data):\n        output[name].append(data)",
                  "children": [
                    {
                      "value": "name, data",
                      "children": [
                        {
                          "value": "name",
                          "children": []
                        },
                        {
                          "value": "data",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "obj.execute(data)",
                      "children": [
                        {
                          "value": "obj.execute",
                          "children": [
                            {
                              "value": "obj",
                              "children": []
                            },
                            {
                              "value": "execute",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(data)",
                          "children": [
                            {
                              "value": "data",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "output[name].append(data)",
                      "children": [
                        {
                          "value": "output[name].append(data)",
                          "children": [
                            {
                              "value": "output[name].append(data)",
                              "children": [
                                {
                                  "value": "output[name].append",
                                  "children": [
                                    {
                                      "value": "output[name]",
                                      "children": [
                                        {
                                          "value": "output",
                                          "children": []
                                        },
                                        {
                                          "value": "name",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "append",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(data)",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return output",
                  "children": [
                    {
                      "value": "output",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "##################### Credits ##########################",
      "children": []
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}",
      "children": [
        {
          "value": "@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])",
          "children": [
            {
              "value": "v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(path=\"/credits\", dependencies=[Depends(auth_middleware)])",
                  "children": [
                    {
                      "value": "path=\"/credits\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/credits\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/credits",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}",
          "children": [
            {
              "value": "get_user_credits",
              "children": []
            },
            {
              "value": "(\n    user_id: Annotated[str, Depends(get_user_id)],\n)",
              "children": [
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "dict[str, int]",
              "children": [
                {
                  "value": "dict[str, int]",
                  "children": [
                    {
                      "value": "dict",
                      "children": []
                    },
                    {
                      "value": "[str, int]",
                      "children": [
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "int",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Credits can go negative, so ensure it's at least 0 for user to see.",
              "children": []
            },
            {
              "value": "return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}",
              "children": [
                {
                  "value": "return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}",
                  "children": [
                    {
                      "value": "{\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}",
                      "children": [
                        {
                          "value": "\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)",
                          "children": [
                            {
                              "value": "\"credits\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "credits",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "max(await _user_credit_model.get_or_refill_credit(user_id), 0)",
                              "children": [
                                {
                                  "value": "max",
                                  "children": []
                                },
                                {
                                  "value": "(await _user_credit_model.get_or_refill_credit(user_id), 0)",
                                  "children": [
                                    {
                                      "value": "await _user_credit_model.get_or_refill_credit(user_id)",
                                      "children": [
                                        {
                                          "value": "_user_credit_model.get_or_refill_credit(user_id)",
                                          "children": [
                                            {
                                              "value": "_user_credit_model.get_or_refill_credit",
                                              "children": [
                                                {
                                                  "value": "_user_credit_model",
                                                  "children": []
                                                },
                                                {
                                                  "value": "get_or_refill_credit",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(user_id)",
                                              "children": [
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "##################### Graphs ###########################",
      "children": []
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "class DeleteGraphResponse(TypedDict):\n    version_counts: int",
      "children": [
        {
          "value": "DeleteGraphResponse",
          "children": []
        },
        {
          "value": "(TypedDict)",
          "children": [
            {
              "value": "TypedDict",
              "children": []
            }
          ]
        },
        {
          "value": "version_counts: int",
          "children": [
            {
              "value": "version_counts: int",
              "children": [
                {
                  "value": "version_counts: int",
                  "children": [
                    {
                      "value": "version_counts",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)",
      "children": [
        {
          "value": "@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])",
          "children": [
            {
              "value": "v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])",
                  "children": [
                    {
                      "value": "path=\"/graphs\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/graphs\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/graphs",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)",
          "children": [
            {
              "value": "get_graphs",
              "children": []
            },
            {
              "value": "(\n    user_id: Annotated[str, Depends(get_user_id)]\n)",
              "children": [
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "Sequence[graph_db.GraphModel]",
              "children": [
                {
                  "value": "Sequence[graph_db.GraphModel]",
                  "children": [
                    {
                      "value": "Sequence",
                      "children": []
                    },
                    {
                      "value": "[graph_db.GraphModel]",
                      "children": [
                        {
                          "value": "graph_db.GraphModel",
                          "children": [
                            {
                              "value": "graph_db.GraphModel",
                              "children": [
                                {
                                  "value": "graph_db",
                                  "children": []
                                },
                                {
                                  "value": "GraphModel",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)",
              "children": [
                {
                  "value": "return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)",
                  "children": [
                    {
                      "value": "await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)",
                      "children": [
                        {
                          "value": "graph_db.get_graphs(filter_by=\"active\", user_id=user_id)",
                          "children": [
                            {
                              "value": "graph_db.get_graphs",
                              "children": [
                                {
                                  "value": "graph_db",
                                  "children": []
                                },
                                {
                                  "value": "get_graphs",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(filter_by=\"active\", user_id=user_id)",
                              "children": [
                                {
                                  "value": "filter_by=\"active\"",
                                  "children": [
                                    {
                                      "value": "filter_by",
                                      "children": []
                                    },
                                    {
                                      "value": "\"active\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "active",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "user_id=user_id",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph",
      "children": [
        {
          "value": "@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
          "children": [
            {
              "value": "v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
                  "children": [
                    {
                      "value": "path=\"/graphs/{graph_id}\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/graphs/{graph_id}\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/graphs/{graph_id}",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/graphs/{graph_id}/versions/{version}\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/graphs/{graph_id}/versions/{version}\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/graphs/{graph_id}/versions/{version}",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph",
          "children": [
            {
              "value": "get_graph",
              "children": []
            },
            {
              "value": "(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n)",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "version: int | None = None",
                  "children": [
                    {
                      "value": "version",
                      "children": []
                    },
                    {
                      "value": "int | None",
                      "children": [
                        {
                          "value": "int | None",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "hide_credentials: bool = False",
                  "children": [
                    {
                      "value": "hide_credentials",
                      "children": []
                    },
                    {
                      "value": "bool",
                      "children": [
                        {
                          "value": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "False",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_db.GraphModel",
              "children": [
                {
                  "value": "graph_db.GraphModel",
                  "children": [
                    {
                      "value": "graph_db",
                      "children": []
                    },
                    {
                      "value": "GraphModel",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph",
              "children": [
                {
                  "value": "graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )",
                  "children": [
                    {
                      "value": "graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        },
                        {
                          "value": "await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )",
                          "children": [
                            {
                              "value": "graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )",
                              "children": [
                                {
                                  "value": "graph_db.get_graph",
                                  "children": [
                                    {
                                      "value": "graph_db",
                                      "children": []
                                    },
                                    {
                                      "value": "get_graph",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )",
                                  "children": [
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    },
                                    {
                                      "value": "version",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id=user_id",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for_export=hide_credentials",
                                      "children": [
                                        {
                                          "value": "for_export",
                                          "children": []
                                        },
                                        {
                                          "value": "hide_credentials",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                  "children": [
                    {
                      "value": "not graph",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                      "children": [
                        {
                          "value": "raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                          "children": [
                            {
                              "value": "HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                                  "children": [
                                    {
                                      "value": "status_code=404",
                                      "children": [
                                        {
                                          "value": "status_code",
                                          "children": []
                                        },
                                        {
                                          "value": "404",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "detail=f\"Graph #{graph_id} not found.\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "f\"Graph #{graph_id} not found.\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Graph #",
                                              "children": []
                                            },
                                            {
                                              "value": "{graph_id}",
                                              "children": [
                                                {
                                                  "value": "graph_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not found.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return graph",
                  "children": [
                    {
                      "value": "graph",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs",
      "children": [
        {
          "value": "@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/graphs/{graph_id}/versions\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/graphs/{graph_id}/versions\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/graphs/{graph_id}/versions",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/templates/{graph_id}/versions\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/templates/{graph_id}/versions\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/templates/{graph_id}/versions",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"templates\", \"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"templates\", \"graphs\"]",
                          "children": [
                            {
                              "value": "\"templates\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "templates",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs",
          "children": [
            {
              "value": "get_graph_all_versions",
              "children": []
            },
            {
              "value": "(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n)",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "Sequence[graph_db.GraphModel]",
              "children": [
                {
                  "value": "Sequence[graph_db.GraphModel]",
                  "children": [
                    {
                      "value": "Sequence",
                      "children": []
                    },
                    {
                      "value": "[graph_db.GraphModel]",
                      "children": [
                        {
                          "value": "graph_db.GraphModel",
                          "children": [
                            {
                              "value": "graph_db.GraphModel",
                              "children": [
                                {
                                  "value": "graph_db",
                                  "children": []
                                },
                                {
                                  "value": "GraphModel",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs",
              "children": [
                {
                  "value": "graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)",
                  "children": [
                    {
                      "value": "graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)",
                      "children": [
                        {
                          "value": "graphs",
                          "children": []
                        },
                        {
                          "value": "await graph_db.get_graph_all_versions(graph_id, user_id=user_id)",
                          "children": [
                            {
                              "value": "graph_db.get_graph_all_versions(graph_id, user_id=user_id)",
                              "children": [
                                {
                                  "value": "graph_db.get_graph_all_versions",
                                  "children": [
                                    {
                                      "value": "graph_db",
                                      "children": []
                                    },
                                    {
                                      "value": "get_graph_all_versions",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(graph_id, user_id=user_id)",
                                  "children": [
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id=user_id",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                  "children": [
                    {
                      "value": "not graphs",
                      "children": [
                        {
                          "value": "graphs",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                      "children": [
                        {
                          "value": "raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                          "children": [
                            {
                              "value": "HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                                  "children": [
                                    {
                                      "value": "status_code=404",
                                      "children": [
                                        {
                                          "value": "status_code",
                                          "children": []
                                        },
                                        {
                                          "value": "404",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "detail=f\"Graph #{graph_id} not found.\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "f\"Graph #{graph_id} not found.\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Graph #",
                                              "children": []
                                            },
                                            {
                                              "value": "{graph_id}",
                                              "children": [
                                                {
                                                  "value": "graph_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not found.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return graphs",
                  "children": [
                    {
                      "value": "graphs",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)",
      "children": [
        {
          "value": "@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
          "children": [
            {
              "value": "v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
              "children": [
                {
                  "value": "v1_router.post",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "post",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
                  "children": [
                    {
                      "value": "path=\"/graphs\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/graphs\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/graphs",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)",
          "children": [
            {
              "value": "create_new_graph",
              "children": []
            },
            {
              "value": "(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n)",
              "children": [
                {
                  "value": "create_graph: CreateGraph",
                  "children": [
                    {
                      "value": "create_graph",
                      "children": []
                    },
                    {
                      "value": "CreateGraph",
                      "children": [
                        {
                          "value": "CreateGraph",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_db.GraphModel",
              "children": [
                {
                  "value": "graph_db.GraphModel",
                  "children": [
                    {
                      "value": "graph_db",
                      "children": []
                    },
                    {
                      "value": "GraphModel",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "return await do_create_graph(create_graph, is_template=False, user_id=user_id)",
              "children": [
                {
                  "value": "return await do_create_graph(create_graph, is_template=False, user_id=user_id)",
                  "children": [
                    {
                      "value": "await do_create_graph(create_graph, is_template=False, user_id=user_id)",
                      "children": [
                        {
                          "value": "do_create_graph(create_graph, is_template=False, user_id=user_id)",
                          "children": [
                            {
                              "value": "do_create_graph",
                              "children": []
                            },
                            {
                              "value": "(create_graph, is_template=False, user_id=user_id)",
                              "children": [
                                {
                                  "value": "create_graph",
                                  "children": []
                                },
                                {
                                  "value": "is_template=False",
                                  "children": [
                                    {
                                      "value": "is_template",
                                      "children": []
                                    },
                                    {
                                      "value": "False",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "user_id=user_id",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n        graph.version = 1\n    else:\n        raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )\n\n    graph.is_template = is_template\n    graph.is_active = not is_template\n    graph.reassign_ids(user_id=user_id, reassign_graph_id=True)\n\n    graph = await graph_db.create_graph(graph, user_id=user_id)\n    graph = await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )\n    return graph",
      "children": [
        {
          "value": "do_create_graph",
          "children": []
        },
        {
          "value": "(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n)",
          "children": [
            {
              "value": "create_graph: CreateGraph",
              "children": [
                {
                  "value": "create_graph",
                  "children": []
                },
                {
                  "value": "CreateGraph",
                  "children": [
                    {
                      "value": "CreateGraph",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "is_template: bool",
              "children": [
                {
                  "value": "is_template",
                  "children": []
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# user_id doesn't have to be annotated like on other endpoints,",
              "children": []
            },
            {
              "value": "# because create_graph isn't used directly as an endpoint",
              "children": []
            },
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "graph_db.GraphModel",
          "children": [
            {
              "value": "graph_db.GraphModel",
              "children": [
                {
                  "value": "graph_db",
                  "children": []
                },
                {
                  "value": "GraphModel",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n        graph.version = 1\n    else:\n        raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )\n\n    graph.is_template = is_template\n    graph.is_active = not is_template\n    graph.reassign_ids(user_id=user_id, reassign_graph_id=True)\n\n    graph = await graph_db.create_graph(graph, user_id=user_id)\n    graph = await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )\n    return graph",
          "children": [
            {
              "value": "if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n        graph.version = 1\n    else:\n        raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )",
              "children": [
                {
                  "value": "create_graph.graph",
                  "children": [
                    {
                      "value": "create_graph",
                      "children": []
                    },
                    {
                      "value": "graph",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "graph = graph_db.make_graph_model(create_graph.graph, user_id)",
                  "children": [
                    {
                      "value": "graph = graph_db.make_graph_model(create_graph.graph, user_id)",
                      "children": [
                        {
                          "value": "graph = graph_db.make_graph_model(create_graph.graph, user_id)",
                          "children": [
                            {
                              "value": "graph",
                              "children": []
                            },
                            {
                              "value": "graph_db.make_graph_model(create_graph.graph, user_id)",
                              "children": [
                                {
                                  "value": "graph_db.make_graph_model",
                                  "children": [
                                    {
                                      "value": "graph_db",
                                      "children": []
                                    },
                                    {
                                      "value": "make_graph_model",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(create_graph.graph, user_id)",
                                  "children": [
                                    {
                                      "value": "create_graph.graph",
                                      "children": [
                                        {
                                          "value": "create_graph",
                                          "children": []
                                        },
                                        {
                                          "value": "graph",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n        graph.version = 1",
                  "children": [
                    {
                      "value": "create_graph.template_id",
                      "children": [
                        {
                          "value": "create_graph",
                          "children": []
                        },
                        {
                          "value": "template_id",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "# Create a new graph from a template",
                      "children": []
                    },
                    {
                      "value": "graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n        graph.version = 1",
                      "children": [
                        {
                          "value": "graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )",
                          "children": [
                            {
                              "value": "graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )",
                              "children": [
                                {
                                  "value": "graph",
                                  "children": []
                                },
                                {
                                  "value": "await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )",
                                  "children": [
                                    {
                                      "value": "graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )",
                                      "children": [
                                        {
                                          "value": "graph_db.get_graph",
                                          "children": [
                                            {
                                              "value": "graph_db",
                                              "children": []
                                            },
                                            {
                                              "value": "get_graph",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )",
                                          "children": [
                                            {
                                              "value": "create_graph.template_id",
                                              "children": [
                                                {
                                                  "value": "create_graph",
                                                  "children": []
                                                },
                                                {
                                                  "value": "template_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "create_graph.template_version",
                                              "children": [
                                                {
                                                  "value": "create_graph",
                                                  "children": []
                                                },
                                                {
                                                  "value": "template_version",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "template=True",
                                              "children": [
                                                {
                                                  "value": "template",
                                                  "children": []
                                                },
                                                {
                                                  "value": "True",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id=user_id",
                                              "children": [
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )",
                          "children": [
                            {
                              "value": "not graph",
                              "children": [
                                {
                                  "value": "graph",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )",
                              "children": [
                                {
                                  "value": "raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )",
                                  "children": [
                                    {
                                      "value": "HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )",
                                      "children": [
                                        {
                                          "value": "HTTPException",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )",
                                          "children": [
                                            {
                                              "value": "400",
                                              "children": []
                                            },
                                            {
                                              "value": "detail=f\"Template #{create_graph.template_id} not found\"",
                                              "children": [
                                                {
                                                  "value": "detail",
                                                  "children": []
                                                },
                                                {
                                                  "value": "f\"Template #{create_graph.template_id} not found\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Template #",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{create_graph.template_id}",
                                                      "children": [
                                                        {
                                                          "value": "create_graph.template_id",
                                                          "children": [
                                                            {
                                                              "value": "create_graph",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "template_id",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "not found",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "graph.version = 1",
                          "children": [
                            {
                              "value": "graph.version = 1",
                              "children": [
                                {
                                  "value": "graph.version",
                                  "children": [
                                    {
                                      "value": "graph",
                                      "children": []
                                    },
                                    {
                                      "value": "version",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )",
                  "children": [
                    {
                      "value": "raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )",
                      "children": [
                        {
                          "value": "raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )",
                          "children": [
                            {
                              "value": "HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )",
                                  "children": [
                                    {
                                      "value": "status_code=400",
                                      "children": [
                                        {
                                          "value": "status_code",
                                          "children": []
                                        },
                                        {
                                          "value": "400",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "detail=\"Either graph or template_id must be provided.\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Either graph or template_id must be provided.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Either graph or template_id must be provided.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph.is_template = is_template",
              "children": [
                {
                  "value": "graph.is_template = is_template",
                  "children": [
                    {
                      "value": "graph.is_template",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        },
                        {
                          "value": "is_template",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "is_template",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph.is_active = not is_template",
              "children": [
                {
                  "value": "graph.is_active = not is_template",
                  "children": [
                    {
                      "value": "graph.is_active",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        },
                        {
                          "value": "is_active",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "not is_template",
                      "children": [
                        {
                          "value": "is_template",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph.reassign_ids(user_id=user_id, reassign_graph_id=True)",
              "children": [
                {
                  "value": "graph.reassign_ids(user_id=user_id, reassign_graph_id=True)",
                  "children": [
                    {
                      "value": "graph.reassign_ids",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        },
                        {
                          "value": "reassign_ids",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(user_id=user_id, reassign_graph_id=True)",
                      "children": [
                        {
                          "value": "user_id=user_id",
                          "children": [
                            {
                              "value": "user_id",
                              "children": []
                            },
                            {
                              "value": "user_id",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "reassign_graph_id=True",
                          "children": [
                            {
                              "value": "reassign_graph_id",
                              "children": []
                            },
                            {
                              "value": "True",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph = await graph_db.create_graph(graph, user_id=user_id)",
              "children": [
                {
                  "value": "graph = await graph_db.create_graph(graph, user_id=user_id)",
                  "children": [
                    {
                      "value": "graph",
                      "children": []
                    },
                    {
                      "value": "await graph_db.create_graph(graph, user_id=user_id)",
                      "children": [
                        {
                          "value": "graph_db.create_graph(graph, user_id=user_id)",
                          "children": [
                            {
                              "value": "graph_db.create_graph",
                              "children": [
                                {
                                  "value": "graph_db",
                                  "children": []
                                },
                                {
                                  "value": "create_graph",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(graph, user_id=user_id)",
                              "children": [
                                {
                                  "value": "graph",
                                  "children": []
                                },
                                {
                                  "value": "user_id=user_id",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph = await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )",
              "children": [
                {
                  "value": "graph = await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )",
                  "children": [
                    {
                      "value": "graph",
                      "children": []
                    },
                    {
                      "value": "await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )",
                      "children": [
                        {
                          "value": "on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )",
                          "children": [
                            {
                              "value": "on_graph_activate",
                              "children": []
                            },
                            {
                              "value": "(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )",
                              "children": [
                                {
                                  "value": "graph",
                                  "children": []
                                },
                                {
                                  "value": "get_credentials=lambda id: integration_creds_manager.get(user_id, id)",
                                  "children": [
                                    {
                                      "value": "get_credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "lambda id: integration_creds_manager.get(user_id, id)",
                                      "children": [
                                        {
                                          "value": "id",
                                          "children": [
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "integration_creds_manager.get(user_id, id)",
                                          "children": [
                                            {
                                              "value": "integration_creds_manager.get",
                                              "children": [
                                                {
                                                  "value": "integration_creds_manager",
                                                  "children": []
                                                },
                                                {
                                                  "value": "get",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(user_id, id)",
                                              "children": [
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return graph",
              "children": [
                {
                  "value": "graph",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.delete(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\nasync def delete_graph(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> DeleteGraphResponse:\n    if active_version := await graph_db.get_graph(graph_id, user_id=user_id):\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        await on_graph_deactivate(active_version, get_credentials)\n\n    return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}",
      "children": [
        {
          "value": "@v1_router.delete(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
          "children": [
            {
              "value": "v1_router.delete(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
              "children": [
                {
                  "value": "v1_router.delete",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "delete",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
                  "children": [
                    {
                      "value": "path=\"/graphs/{graph_id}\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/graphs/{graph_id}\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/graphs/{graph_id}",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def delete_graph(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> DeleteGraphResponse:\n    if active_version := await graph_db.get_graph(graph_id, user_id=user_id):\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        await on_graph_deactivate(active_version, get_credentials)\n\n    return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}",
          "children": [
            {
              "value": "delete_graph",
              "children": []
            },
            {
              "value": "(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n)",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "DeleteGraphResponse",
              "children": [
                {
                  "value": "DeleteGraphResponse",
                  "children": []
                }
              ]
            },
            {
              "value": "if active_version := await graph_db.get_graph(graph_id, user_id=user_id):\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        await on_graph_deactivate(active_version, get_credentials)\n\n    return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}",
              "children": [
                {
                  "value": "if active_version := await graph_db.get_graph(graph_id, user_id=user_id):\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        await on_graph_deactivate(active_version, get_credentials)",
                  "children": [
                    {
                      "value": "active_version := await graph_db.get_graph(graph_id, user_id=user_id)",
                      "children": [
                        {
                          "value": "active_version",
                          "children": []
                        },
                        {
                          "value": "await graph_db.get_graph(graph_id, user_id=user_id)",
                          "children": [
                            {
                              "value": "graph_db.get_graph(graph_id, user_id=user_id)",
                              "children": [
                                {
                                  "value": "graph_db.get_graph",
                                  "children": [
                                    {
                                      "value": "graph_db",
                                      "children": []
                                    },
                                    {
                                      "value": "get_graph",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(graph_id, user_id=user_id)",
                                  "children": [
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id=user_id",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        await on_graph_deactivate(active_version, get_credentials)",
                      "children": [
                        {
                          "value": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)",
                          "children": [
                            {
                              "value": "get_credentials",
                              "children": []
                            },
                            {
                              "value": "(credentials_id: str)",
                              "children": [
                                {
                                  "value": "credentials_id: str",
                                  "children": [
                                    {
                                      "value": "credentials_id",
                                      "children": []
                                    },
                                    {
                                      "value": "str",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"Credentials | None\"",
                              "children": [
                                {
                                  "value": "\"Credentials | None\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Credentials | None",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "return integration_creds_manager.get(user_id, credentials_id)",
                              "children": [
                                {
                                  "value": "return integration_creds_manager.get(user_id, credentials_id)",
                                  "children": [
                                    {
                                      "value": "integration_creds_manager.get(user_id, credentials_id)",
                                      "children": [
                                        {
                                          "value": "integration_creds_manager.get",
                                          "children": [
                                            {
                                              "value": "integration_creds_manager",
                                              "children": []
                                            },
                                            {
                                              "value": "get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(user_id, credentials_id)",
                                          "children": [
                                            {
                                              "value": "user_id",
                                              "children": []
                                            },
                                            {
                                              "value": "credentials_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "await on_graph_deactivate(active_version, get_credentials)",
                          "children": [
                            {
                              "value": "await on_graph_deactivate(active_version, get_credentials)",
                              "children": [
                                {
                                  "value": "on_graph_deactivate(active_version, get_credentials)",
                                  "children": [
                                    {
                                      "value": "on_graph_deactivate",
                                      "children": []
                                    },
                                    {
                                      "value": "(active_version, get_credentials)",
                                      "children": [
                                        {
                                          "value": "active_version",
                                          "children": []
                                        },
                                        {
                                          "value": "get_credentials",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}",
                  "children": [
                    {
                      "value": "{\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}",
                      "children": [
                        {
                          "value": "\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)",
                          "children": [
                            {
                              "value": "\"version_counts\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "version_counts",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "await graph_db.delete_graph(graph_id, user_id=user_id)",
                              "children": [
                                {
                                  "value": "graph_db.delete_graph(graph_id, user_id=user_id)",
                                  "children": [
                                    {
                                      "value": "graph_db.delete_graph",
                                      "children": [
                                        {
                                          "value": "graph_db",
                                          "children": []
                                        },
                                        {
                                          "value": "delete_graph",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(graph_id, user_id=user_id)",
                                      "children": [
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id=user_id",
                                          "children": [
                                            {
                                              "value": "user_id",
                                              "children": []
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.put(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.put(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def update_graph(\n    graph_id: str,\n    graph: graph_db.Graph,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> graph_db.GraphModel:\n    # Sanity check\n    if graph.id and graph.id != graph_id:\n        raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")\n\n    # Determine new version\n    existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not existing_versions:\n        raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")\n    latest_version_number = max(g.version for g in existing_versions)\n    graph.version = latest_version_number + 1\n\n    latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )\n    current_active_version = next((v for v in existing_versions if v.is_active), None)\n    if latest_version_graph.is_template != graph.is_template:\n        raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )\n    graph.is_active = not graph.is_template\n    graph = graph_db.make_graph_model(graph, user_id)\n    graph.reassign_ids(user_id=user_id)\n\n    new_graph_version = await graph_db.create_graph(graph, user_id=user_id)\n\n    if new_graph_version.is_active:\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        # Handle activation of the new graph first to ensure continuity\n        new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n        # Ensure new version is the only active version\n        await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n        if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )\n\n    return new_graph_version",
      "children": [
        {
          "value": "@v1_router.put(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
          "children": [
            {
              "value": "v1_router.put(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
              "children": [
                {
                  "value": "v1_router.put",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "put",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
                  "children": [
                    {
                      "value": "path=\"/graphs/{graph_id}\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/graphs/{graph_id}\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/graphs/{graph_id}",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "@v1_router.put(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.put(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.put",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "put",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/templates/{graph_id}\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/templates/{graph_id}\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/templates/{graph_id}",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"templates\", \"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"templates\", \"graphs\"]",
                          "children": [
                            {
                              "value": "\"templates\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "templates",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def update_graph(\n    graph_id: str,\n    graph: graph_db.Graph,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> graph_db.GraphModel:\n    # Sanity check\n    if graph.id and graph.id != graph_id:\n        raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")\n\n    # Determine new version\n    existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not existing_versions:\n        raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")\n    latest_version_number = max(g.version for g in existing_versions)\n    graph.version = latest_version_number + 1\n\n    latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )\n    current_active_version = next((v for v in existing_versions if v.is_active), None)\n    if latest_version_graph.is_template != graph.is_template:\n        raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )\n    graph.is_active = not graph.is_template\n    graph = graph_db.make_graph_model(graph, user_id)\n    graph.reassign_ids(user_id=user_id)\n\n    new_graph_version = await graph_db.create_graph(graph, user_id=user_id)\n\n    if new_graph_version.is_active:\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        # Handle activation of the new graph first to ensure continuity\n        new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n        # Ensure new version is the only active version\n        await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n        if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )\n\n    return new_graph_version",
          "children": [
            {
              "value": "update_graph",
              "children": []
            },
            {
              "value": "(\n    graph_id: str,\n    graph: graph_db.Graph,\n    user_id: Annotated[str, Depends(get_user_id)],\n)",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "graph: graph_db.Graph",
                  "children": [
                    {
                      "value": "graph",
                      "children": []
                    },
                    {
                      "value": "graph_db.Graph",
                      "children": [
                        {
                          "value": "graph_db.Graph",
                          "children": [
                            {
                              "value": "graph_db",
                              "children": []
                            },
                            {
                              "value": "Graph",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_db.GraphModel",
              "children": [
                {
                  "value": "graph_db.GraphModel",
                  "children": [
                    {
                      "value": "graph_db",
                      "children": []
                    },
                    {
                      "value": "GraphModel",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Sanity check",
              "children": []
            },
            {
              "value": "if graph.id and graph.id != graph_id:\n        raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")\n\n    # Determine new version\n    existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not existing_versions:\n        raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")\n    latest_version_number = max(g.version for g in existing_versions)\n    graph.version = latest_version_number + 1\n\n    latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )\n    current_active_version = next((v for v in existing_versions if v.is_active), None)\n    if latest_version_graph.is_template != graph.is_template:\n        raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )\n    graph.is_active = not graph.is_template\n    graph = graph_db.make_graph_model(graph, user_id)\n    graph.reassign_ids(user_id=user_id)\n\n    new_graph_version = await graph_db.create_graph(graph, user_id=user_id)\n\n    if new_graph_version.is_active:\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        # Handle activation of the new graph first to ensure continuity\n        new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n        # Ensure new version is the only active version\n        await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n        if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )\n\n    return new_graph_version",
              "children": [
                {
                  "value": "if graph.id and graph.id != graph_id:\n        raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")",
                  "children": [
                    {
                      "value": "graph.id and graph.id != graph_id",
                      "children": [
                        {
                          "value": "graph.id",
                          "children": [
                            {
                              "value": "graph",
                              "children": []
                            },
                            {
                              "value": "id",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "graph.id != graph_id",
                          "children": [
                            {
                              "value": "graph.id",
                              "children": [
                                {
                                  "value": "graph",
                                  "children": []
                                },
                                {
                                  "value": "id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "graph_id",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")",
                      "children": [
                        {
                          "value": "raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")",
                          "children": [
                            {
                              "value": "HTTPException(400, detail=\"Graph ID does not match ID in URI\")",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(400, detail=\"Graph ID does not match ID in URI\")",
                                  "children": [
                                    {
                                      "value": "400",
                                      "children": []
                                    },
                                    {
                                      "value": "detail=\"Graph ID does not match ID in URI\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Graph ID does not match ID in URI\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Graph ID does not match ID in URI",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Determine new version",
                  "children": []
                },
                {
                  "value": "existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)",
                  "children": [
                    {
                      "value": "existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)",
                      "children": [
                        {
                          "value": "existing_versions",
                          "children": []
                        },
                        {
                          "value": "await graph_db.get_graph_all_versions(graph_id, user_id=user_id)",
                          "children": [
                            {
                              "value": "graph_db.get_graph_all_versions(graph_id, user_id=user_id)",
                              "children": [
                                {
                                  "value": "graph_db.get_graph_all_versions",
                                  "children": [
                                    {
                                      "value": "graph_db",
                                      "children": []
                                    },
                                    {
                                      "value": "get_graph_all_versions",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(graph_id, user_id=user_id)",
                                  "children": [
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id=user_id",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not existing_versions:\n        raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")",
                  "children": [
                    {
                      "value": "not existing_versions",
                      "children": [
                        {
                          "value": "existing_versions",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")",
                      "children": [
                        {
                          "value": "raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")",
                          "children": [
                            {
                              "value": "HTTPException(404, detail=f\"Graph #{graph_id} not found\")",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(404, detail=f\"Graph #{graph_id} not found\")",
                                  "children": [
                                    {
                                      "value": "404",
                                      "children": []
                                    },
                                    {
                                      "value": "detail=f\"Graph #{graph_id} not found\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "f\"Graph #{graph_id} not found\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Graph #",
                                              "children": []
                                            },
                                            {
                                              "value": "{graph_id}",
                                              "children": [
                                                {
                                                  "value": "graph_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not found",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "latest_version_number = max(g.version for g in existing_versions)",
                  "children": [
                    {
                      "value": "latest_version_number = max(g.version for g in existing_versions)",
                      "children": [
                        {
                          "value": "latest_version_number",
                          "children": []
                        },
                        {
                          "value": "max(g.version for g in existing_versions)",
                          "children": [
                            {
                              "value": "max",
                              "children": []
                            },
                            {
                              "value": "(g.version for g in existing_versions)",
                              "children": [
                                {
                                  "value": "g.version",
                                  "children": [
                                    {
                                      "value": "g",
                                      "children": []
                                    },
                                    {
                                      "value": "version",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "for g in existing_versions",
                                  "children": [
                                    {
                                      "value": "g",
                                      "children": []
                                    },
                                    {
                                      "value": "existing_versions",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "graph.version = latest_version_number + 1",
                  "children": [
                    {
                      "value": "graph.version = latest_version_number + 1",
                      "children": [
                        {
                          "value": "graph.version",
                          "children": [
                            {
                              "value": "graph",
                              "children": []
                            },
                            {
                              "value": "version",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "latest_version_number + 1",
                          "children": [
                            {
                              "value": "latest_version_number",
                              "children": []
                            },
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )",
                  "children": [
                    {
                      "value": "latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )",
                      "children": [
                        {
                          "value": "latest_version_graph",
                          "children": []
                        },
                        {
                          "value": "next(\n        v for v in existing_versions if v.version == latest_version_number\n    )",
                          "children": [
                            {
                              "value": "next",
                              "children": []
                            },
                            {
                              "value": "(\n        v for v in existing_versions if v.version == latest_version_number\n    )",
                              "children": [
                                {
                                  "value": "v",
                                  "children": []
                                },
                                {
                                  "value": "for v in existing_versions",
                                  "children": [
                                    {
                                      "value": "v",
                                      "children": []
                                    },
                                    {
                                      "value": "existing_versions",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "if v.version == latest_version_number",
                                  "children": [
                                    {
                                      "value": "v.version == latest_version_number",
                                      "children": [
                                        {
                                          "value": "v.version",
                                          "children": [
                                            {
                                              "value": "v",
                                              "children": []
                                            },
                                            {
                                              "value": "version",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "latest_version_number",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "current_active_version = next((v for v in existing_versions if v.is_active), None)",
                  "children": [
                    {
                      "value": "current_active_version = next((v for v in existing_versions if v.is_active), None)",
                      "children": [
                        {
                          "value": "current_active_version",
                          "children": []
                        },
                        {
                          "value": "next((v for v in existing_versions if v.is_active), None)",
                          "children": [
                            {
                              "value": "next",
                              "children": []
                            },
                            {
                              "value": "((v for v in existing_versions if v.is_active), None)",
                              "children": [
                                {
                                  "value": "(v for v in existing_versions if v.is_active)",
                                  "children": [
                                    {
                                      "value": "v",
                                      "children": []
                                    },
                                    {
                                      "value": "for v in existing_versions",
                                      "children": [
                                        {
                                          "value": "v",
                                          "children": []
                                        },
                                        {
                                          "value": "existing_versions",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if v.is_active",
                                      "children": [
                                        {
                                          "value": "v.is_active",
                                          "children": [
                                            {
                                              "value": "v",
                                              "children": []
                                            },
                                            {
                                              "value": "is_active",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if latest_version_graph.is_template != graph.is_template:\n        raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )",
                  "children": [
                    {
                      "value": "latest_version_graph.is_template != graph.is_template",
                      "children": [
                        {
                          "value": "latest_version_graph.is_template",
                          "children": [
                            {
                              "value": "latest_version_graph",
                              "children": []
                            },
                            {
                              "value": "is_template",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "graph.is_template",
                          "children": [
                            {
                              "value": "graph",
                              "children": []
                            },
                            {
                              "value": "is_template",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )",
                      "children": [
                        {
                          "value": "raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )",
                          "children": [
                            {
                              "value": "HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )",
                                  "children": [
                                    {
                                      "value": "400",
                                      "children": []
                                    },
                                    {
                                      "value": "detail=\"Changing is_template on an existing graph is forbidden\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Changing is_template on an existing graph is forbidden\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Changing is_template on an existing graph is forbidden",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "graph.is_active = not graph.is_template",
                  "children": [
                    {
                      "value": "graph.is_active = not graph.is_template",
                      "children": [
                        {
                          "value": "graph.is_active",
                          "children": [
                            {
                              "value": "graph",
                              "children": []
                            },
                            {
                              "value": "is_active",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "not graph.is_template",
                          "children": [
                            {
                              "value": "graph.is_template",
                              "children": [
                                {
                                  "value": "graph",
                                  "children": []
                                },
                                {
                                  "value": "is_template",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "graph = graph_db.make_graph_model(graph, user_id)",
                  "children": [
                    {
                      "value": "graph = graph_db.make_graph_model(graph, user_id)",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        },
                        {
                          "value": "graph_db.make_graph_model(graph, user_id)",
                          "children": [
                            {
                              "value": "graph_db.make_graph_model",
                              "children": [
                                {
                                  "value": "graph_db",
                                  "children": []
                                },
                                {
                                  "value": "make_graph_model",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(graph, user_id)",
                              "children": [
                                {
                                  "value": "graph",
                                  "children": []
                                },
                                {
                                  "value": "user_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "graph.reassign_ids(user_id=user_id)",
                  "children": [
                    {
                      "value": "graph.reassign_ids(user_id=user_id)",
                      "children": [
                        {
                          "value": "graph.reassign_ids",
                          "children": [
                            {
                              "value": "graph",
                              "children": []
                            },
                            {
                              "value": "reassign_ids",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(user_id=user_id)",
                          "children": [
                            {
                              "value": "user_id=user_id",
                              "children": [
                                {
                                  "value": "user_id",
                                  "children": []
                                },
                                {
                                  "value": "user_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "new_graph_version = await graph_db.create_graph(graph, user_id=user_id)",
                  "children": [
                    {
                      "value": "new_graph_version = await graph_db.create_graph(graph, user_id=user_id)",
                      "children": [
                        {
                          "value": "new_graph_version",
                          "children": []
                        },
                        {
                          "value": "await graph_db.create_graph(graph, user_id=user_id)",
                          "children": [
                            {
                              "value": "graph_db.create_graph(graph, user_id=user_id)",
                              "children": [
                                {
                                  "value": "graph_db.create_graph",
                                  "children": [
                                    {
                                      "value": "graph_db",
                                      "children": []
                                    },
                                    {
                                      "value": "create_graph",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(graph, user_id=user_id)",
                                  "children": [
                                    {
                                      "value": "graph",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id=user_id",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if new_graph_version.is_active:\n\n        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        # Handle activation of the new graph first to ensure continuity\n        new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n        # Ensure new version is the only active version\n        await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n        if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )",
                  "children": [
                    {
                      "value": "new_graph_version.is_active",
                      "children": [
                        {
                          "value": "new_graph_version",
                          "children": []
                        },
                        {
                          "value": "is_active",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        # Handle activation of the new graph first to ensure continuity\n        new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n        # Ensure new version is the only active version\n        await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n        if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )",
                      "children": [
                        {
                          "value": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)",
                          "children": [
                            {
                              "value": "get_credentials",
                              "children": []
                            },
                            {
                              "value": "(credentials_id: str)",
                              "children": [
                                {
                                  "value": "credentials_id: str",
                                  "children": [
                                    {
                                      "value": "credentials_id",
                                      "children": []
                                    },
                                    {
                                      "value": "str",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"Credentials | None\"",
                              "children": [
                                {
                                  "value": "\"Credentials | None\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Credentials | None",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "return integration_creds_manager.get(user_id, credentials_id)",
                              "children": [
                                {
                                  "value": "return integration_creds_manager.get(user_id, credentials_id)",
                                  "children": [
                                    {
                                      "value": "integration_creds_manager.get(user_id, credentials_id)",
                                      "children": [
                                        {
                                          "value": "integration_creds_manager.get",
                                          "children": [
                                            {
                                              "value": "integration_creds_manager",
                                              "children": []
                                            },
                                            {
                                              "value": "get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(user_id, credentials_id)",
                                          "children": [
                                            {
                                              "value": "user_id",
                                              "children": []
                                            },
                                            {
                                              "value": "credentials_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# Handle activation of the new graph first to ensure continuity",
                          "children": []
                        },
                        {
                          "value": "new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )",
                          "children": [
                            {
                              "value": "new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )",
                              "children": [
                                {
                                  "value": "new_graph_version",
                                  "children": []
                                },
                                {
                                  "value": "await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )",
                                  "children": [
                                    {
                                      "value": "on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )",
                                      "children": [
                                        {
                                          "value": "on_graph_activate",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )",
                                          "children": [
                                            {
                                              "value": "new_graph_version",
                                              "children": []
                                            },
                                            {
                                              "value": "get_credentials=get_credentials",
                                              "children": [
                                                {
                                                  "value": "get_credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "get_credentials",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# Ensure new version is the only active version",
                          "children": []
                        },
                        {
                          "value": "await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )",
                          "children": [
                            {
                              "value": "await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )",
                              "children": [
                                {
                                  "value": "graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )",
                                  "children": [
                                    {
                                      "value": "graph_db.set_graph_active_version",
                                      "children": [
                                        {
                                          "value": "graph_db",
                                          "children": []
                                        },
                                        {
                                          "value": "set_graph_active_version",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )",
                                      "children": [
                                        {
                                          "value": "graph_id=graph_id",
                                          "children": [
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "version=new_graph_version.version",
                                          "children": [
                                            {
                                              "value": "version",
                                              "children": []
                                            },
                                            {
                                              "value": "new_graph_version.version",
                                              "children": [
                                                {
                                                  "value": "new_graph_version",
                                                  "children": []
                                                },
                                                {
                                                  "value": "version",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "user_id=user_id",
                                          "children": [
                                            {
                                              "value": "user_id",
                                              "children": []
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )",
                          "children": [
                            {
                              "value": "current_active_version",
                              "children": []
                            },
                            {
                              "value": "# Handle deactivation of the previously active version",
                              "children": []
                            },
                            {
                              "value": "await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )",
                              "children": [
                                {
                                  "value": "await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )",
                                  "children": [
                                    {
                                      "value": "await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )",
                                      "children": [
                                        {
                                          "value": "on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )",
                                          "children": [
                                            {
                                              "value": "on_graph_deactivate",
                                              "children": []
                                            },
                                            {
                                              "value": "(\n                current_active_version,\n                get_credentials=get_credentials,\n            )",
                                              "children": [
                                                {
                                                  "value": "current_active_version",
                                                  "children": []
                                                },
                                                {
                                                  "value": "get_credentials=get_credentials",
                                                  "children": [
                                                    {
                                                      "value": "get_credentials",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "get_credentials",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return new_graph_version",
                  "children": [
                    {
                      "value": "new_graph_version",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.put(\n    path=\"/graphs/{graph_id}/versions/active\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def set_graph_active_version(\n    graph_id: str,\n    request_body: SetGraphActiveVersion,\n    user_id: Annotated[str, Depends(get_user_id)],\n):\n    new_active_version = request_body.active_graph_version\n    new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )\n    if not new_active_graph:\n        raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")\n\n    current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)\n\n    def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)\n\n    # Handle activation of the new graph first to ensure continuity\n    await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )\n    # Ensure new version is the only active version\n    await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )\n    if current_active_graph and current_active_graph.version != new_active_version:\n        # Handle deactivation of the previously active version\n        await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )",
      "children": [
        {
          "value": "@v1_router.put(\n    path=\"/graphs/{graph_id}/versions/active\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.put(\n    path=\"/graphs/{graph_id}/versions/active\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.put",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "put",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/graphs/{graph_id}/versions/active\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/graphs/{graph_id}/versions/active\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/graphs/{graph_id}/versions/active\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/graphs/{graph_id}/versions/active",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def set_graph_active_version(\n    graph_id: str,\n    request_body: SetGraphActiveVersion,\n    user_id: Annotated[str, Depends(get_user_id)],\n):\n    new_active_version = request_body.active_graph_version\n    new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )\n    if not new_active_graph:\n        raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")\n\n    current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)\n\n    def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)\n\n    # Handle activation of the new graph first to ensure continuity\n    await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )\n    # Ensure new version is the only active version\n    await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )\n    if current_active_graph and current_active_graph.version != new_active_version:\n        # Handle deactivation of the previously active version\n        await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )",
          "children": [
            {
              "value": "set_graph_active_version",
              "children": []
            },
            {
              "value": "(\n    graph_id: str,\n    request_body: SetGraphActiveVersion,\n    user_id: Annotated[str, Depends(get_user_id)],\n)",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "request_body: SetGraphActiveVersion",
                  "children": [
                    {
                      "value": "request_body",
                      "children": []
                    },
                    {
                      "value": "SetGraphActiveVersion",
                      "children": [
                        {
                          "value": "SetGraphActiveVersion",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "new_active_version = request_body.active_graph_version\n    new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )\n    if not new_active_graph:\n        raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")\n\n    current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)\n\n    def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)\n\n    # Handle activation of the new graph first to ensure continuity\n    await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )\n    # Ensure new version is the only active version\n    await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )\n    if current_active_graph and current_active_graph.version != new_active_version:\n        # Handle deactivation of the previously active version\n        await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )",
              "children": [
                {
                  "value": "new_active_version = request_body.active_graph_version",
                  "children": [
                    {
                      "value": "new_active_version = request_body.active_graph_version",
                      "children": [
                        {
                          "value": "new_active_version",
                          "children": []
                        },
                        {
                          "value": "request_body.active_graph_version",
                          "children": [
                            {
                              "value": "request_body",
                              "children": []
                            },
                            {
                              "value": "active_graph_version",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )",
                  "children": [
                    {
                      "value": "new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )",
                      "children": [
                        {
                          "value": "new_active_graph",
                          "children": []
                        },
                        {
                          "value": "await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )",
                          "children": [
                            {
                              "value": "graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )",
                              "children": [
                                {
                                  "value": "graph_db.get_graph",
                                  "children": [
                                    {
                                      "value": "graph_db",
                                      "children": []
                                    },
                                    {
                                      "value": "get_graph",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n        graph_id, new_active_version, user_id=user_id\n    )",
                                  "children": [
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    },
                                    {
                                      "value": "new_active_version",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id=user_id",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not new_active_graph:\n        raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")",
                  "children": [
                    {
                      "value": "not new_active_graph",
                      "children": [
                        {
                          "value": "new_active_graph",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")",
                      "children": [
                        {
                          "value": "raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")",
                          "children": [
                            {
                              "value": "HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(404, f\"Graph #{graph_id} v{new_active_version} not found\")",
                                  "children": [
                                    {
                                      "value": "404",
                                      "children": []
                                    },
                                    {
                                      "value": "f\"Graph #{graph_id} v{new_active_version} not found\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Graph #",
                                          "children": []
                                        },
                                        {
                                          "value": "{graph_id}",
                                          "children": [
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "v",
                                          "children": []
                                        },
                                        {
                                          "value": "{new_active_version}",
                                          "children": [
                                            {
                                              "value": "new_active_version",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "not found",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)",
                  "children": [
                    {
                      "value": "current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)",
                      "children": [
                        {
                          "value": "current_active_graph",
                          "children": []
                        },
                        {
                          "value": "await graph_db.get_graph(graph_id, user_id=user_id)",
                          "children": [
                            {
                              "value": "graph_db.get_graph(graph_id, user_id=user_id)",
                              "children": [
                                {
                                  "value": "graph_db.get_graph",
                                  "children": [
                                    {
                                      "value": "graph_db",
                                      "children": []
                                    },
                                    {
                                      "value": "get_graph",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(graph_id, user_id=user_id)",
                                  "children": [
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id=user_id",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)",
                  "children": [
                    {
                      "value": "get_credentials",
                      "children": []
                    },
                    {
                      "value": "(credentials_id: str)",
                      "children": [
                        {
                          "value": "credentials_id: str",
                          "children": [
                            {
                              "value": "credentials_id",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "\"Credentials | None\"",
                      "children": [
                        {
                          "value": "\"Credentials | None\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Credentials | None",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return integration_creds_manager.get(user_id, credentials_id)",
                      "children": [
                        {
                          "value": "return integration_creds_manager.get(user_id, credentials_id)",
                          "children": [
                            {
                              "value": "integration_creds_manager.get(user_id, credentials_id)",
                              "children": [
                                {
                                  "value": "integration_creds_manager.get",
                                  "children": [
                                    {
                                      "value": "integration_creds_manager",
                                      "children": []
                                    },
                                    {
                                      "value": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(user_id, credentials_id)",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    },
                                    {
                                      "value": "credentials_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Handle activation of the new graph first to ensure continuity",
                  "children": []
                },
                {
                  "value": "await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )",
                  "children": [
                    {
                      "value": "await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )",
                      "children": [
                        {
                          "value": "on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )",
                          "children": [
                            {
                              "value": "on_graph_activate",
                              "children": []
                            },
                            {
                              "value": "(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )",
                              "children": [
                                {
                                  "value": "new_active_graph",
                                  "children": []
                                },
                                {
                                  "value": "get_credentials=get_credentials",
                                  "children": [
                                    {
                                      "value": "get_credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "get_credentials",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Ensure new version is the only active version",
                  "children": []
                },
                {
                  "value": "await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )",
                  "children": [
                    {
                      "value": "await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )",
                      "children": [
                        {
                          "value": "graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )",
                          "children": [
                            {
                              "value": "graph_db.set_graph_active_version",
                              "children": [
                                {
                                  "value": "graph_db",
                                  "children": []
                                },
                                {
                                  "value": "set_graph_active_version",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )",
                              "children": [
                                {
                                  "value": "graph_id=graph_id",
                                  "children": [
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    },
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "version=new_active_version",
                                  "children": [
                                    {
                                      "value": "version",
                                      "children": []
                                    },
                                    {
                                      "value": "new_active_version",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "user_id=user_id",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if current_active_graph and current_active_graph.version != new_active_version:\n        # Handle deactivation of the previously active version\n        await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )",
                  "children": [
                    {
                      "value": "current_active_graph and current_active_graph.version != new_active_version",
                      "children": [
                        {
                          "value": "current_active_graph",
                          "children": []
                        },
                        {
                          "value": "current_active_graph.version != new_active_version",
                          "children": [
                            {
                              "value": "current_active_graph.version",
                              "children": [
                                {
                                  "value": "current_active_graph",
                                  "children": []
                                },
                                {
                                  "value": "version",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "new_active_version",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Handle deactivation of the previously active version",
                      "children": []
                    },
                    {
                      "value": "await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )",
                      "children": [
                        {
                          "value": "await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )",
                          "children": [
                            {
                              "value": "await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )",
                              "children": [
                                {
                                  "value": "on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )",
                                  "children": [
                                    {
                                      "value": "on_graph_deactivate",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )",
                                      "children": [
                                        {
                                          "value": "current_active_graph",
                                          "children": []
                                        },
                                        {
                                          "value": "get_credentials=get_credentials",
                                          "children": [
                                            {
                                              "value": "get_credentials",
                                              "children": []
                                            },
                                            {
                                              "value": "get_credentials",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.post(\n    path=\"/graphs/{graph_id}/execute\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef execute_graph(\n    graph_id: str,\n    node_input: dict[Any, Any],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, Any]:  # FIXME: add proper return type\n    try:\n        graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}\n    except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)",
      "children": [
        {
          "value": "@v1_router.post(\n    path=\"/graphs/{graph_id}/execute\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.post(\n    path=\"/graphs/{graph_id}/execute\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.post",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "post",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/graphs/{graph_id}/execute\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/graphs/{graph_id}/execute\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/graphs/{graph_id}/execute\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/graphs/{graph_id}/execute",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "def execute_graph(\n    graph_id: str,\n    node_input: dict[Any, Any],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, Any]:  # FIXME: add proper return type\n    try:\n        graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}\n    except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)",
          "children": [
            {
              "value": "execute_graph",
              "children": []
            },
            {
              "value": "(\n    graph_id: str,\n    node_input: dict[Any, Any],\n    user_id: Annotated[str, Depends(get_user_id)],\n)",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "node_input: dict[Any, Any]",
                  "children": [
                    {
                      "value": "node_input",
                      "children": []
                    },
                    {
                      "value": "dict[Any, Any]",
                      "children": [
                        {
                          "value": "dict[Any, Any]",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            },
                            {
                              "value": "[Any, Any]",
                              "children": [
                                {
                                  "value": "Any",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Any",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "dict[str, Any]",
              "children": [
                {
                  "value": "dict[str, Any]",
                  "children": [
                    {
                      "value": "dict",
                      "children": []
                    },
                    {
                      "value": "[str, Any]",
                      "children": [
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "Any",
                          "children": [
                            {
                              "value": "Any",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# FIXME: add proper return type",
              "children": []
            },
            {
              "value": "try:\n        graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}\n    except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)",
              "children": [
                {
                  "value": "try:\n        graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}\n    except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)",
                  "children": [
                    {
                      "value": "graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}",
                      "children": [
                        {
                          "value": "graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )",
                          "children": [
                            {
                              "value": "graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )",
                              "children": [
                                {
                                  "value": "graph_exec",
                                  "children": []
                                },
                                {
                                  "value": "execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )",
                                  "children": [
                                    {
                                      "value": "execution_manager_client().add_execution",
                                      "children": [
                                        {
                                          "value": "execution_manager_client()",
                                          "children": [
                                            {
                                              "value": "execution_manager_client",
                                              "children": []
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "add_execution",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            graph_id, node_input, user_id=user_id\n        )",
                                      "children": [
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        },
                                        {
                                          "value": "node_input",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id=user_id",
                                          "children": [
                                            {
                                              "value": "user_id",
                                              "children": []
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return {\"id\": graph_exec.graph_exec_id}",
                          "children": [
                            {
                              "value": "{\"id\": graph_exec.graph_exec_id}",
                              "children": [
                                {
                                  "value": "\"id\": graph_exec.graph_exec_id",
                                  "children": [
                                    {
                                      "value": "\"id\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "id",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "graph_exec.graph_exec_id",
                                      "children": [
                                        {
                                          "value": "graph_exec",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_exec_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)",
                      "children": [
                        {
                          "value": "Exception as e",
                          "children": [
                            {
                              "value": "Exception",
                              "children": []
                            },
                            {
                              "value": "e",
                              "children": [
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)",
                          "children": [
                            {
                              "value": "msg = e.__str__().encode().decode(\"unicode_escape\")",
                              "children": [
                                {
                                  "value": "msg = e.__str__().encode().decode(\"unicode_escape\")",
                                  "children": [
                                    {
                                      "value": "msg",
                                      "children": []
                                    },
                                    {
                                      "value": "e.__str__().encode().decode(\"unicode_escape\")",
                                      "children": [
                                        {
                                          "value": "e.__str__().encode().decode",
                                          "children": [
                                            {
                                              "value": "e.__str__().encode()",
                                              "children": [
                                                {
                                                  "value": "e.__str__().encode",
                                                  "children": [
                                                    {
                                                      "value": "e.__str__()",
                                                      "children": [
                                                        {
                                                          "value": "e.__str__",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "__str__",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "()",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "encode",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "decode",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"unicode_escape\")",
                                          "children": [
                                            {
                                              "value": "\"unicode_escape\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "unicode_escape",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(status_code=400, detail=msg)",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=400, detail=msg)",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=400, detail=msg)",
                                      "children": [
                                        {
                                          "value": "status_code=400",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "400",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=msg",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "msg",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.post(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def stop_graph_run(\n    graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[execution_db.ExecutionResult]:\n    if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\n        raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")\n\n    await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )\n\n    # Retrieve & return canceled graph execution in its final state\n    return await execution_db.get_execution_results(graph_exec_id)",
      "children": [
        {
          "value": "@v1_router.post(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.post(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.post",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "post",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/graphs/{graph_id}/executions/{graph_exec_id}/stop",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def stop_graph_run(\n    graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[execution_db.ExecutionResult]:\n    if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\n        raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")\n\n    await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )\n\n    # Retrieve & return canceled graph execution in its final state\n    return await execution_db.get_execution_results(graph_exec_id)",
          "children": [
            {
              "value": "stop_graph_run",
              "children": []
            },
            {
              "value": "(\n    graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]\n)",
              "children": [
                {
                  "value": "graph_exec_id: str",
                  "children": [
                    {
                      "value": "graph_exec_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "Sequence[execution_db.ExecutionResult]",
              "children": [
                {
                  "value": "Sequence[execution_db.ExecutionResult]",
                  "children": [
                    {
                      "value": "Sequence",
                      "children": []
                    },
                    {
                      "value": "[execution_db.ExecutionResult]",
                      "children": [
                        {
                          "value": "execution_db.ExecutionResult",
                          "children": [
                            {
                              "value": "execution_db.ExecutionResult",
                              "children": [
                                {
                                  "value": "execution_db",
                                  "children": []
                                },
                                {
                                  "value": "ExecutionResult",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\n        raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")\n\n    await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )\n\n    # Retrieve & return canceled graph execution in its final state\n    return await execution_db.get_execution_results(graph_exec_id)",
              "children": [
                {
                  "value": "if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\n        raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")",
                  "children": [
                    {
                      "value": "not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id)",
                      "children": [
                        {
                          "value": "await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id)",
                          "children": [
                            {
                              "value": "graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id)",
                              "children": [
                                {
                                  "value": "graph_db.get_execution",
                                  "children": [
                                    {
                                      "value": "graph_db",
                                      "children": []
                                    },
                                    {
                                      "value": "get_execution",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(user_id=user_id, execution_id=graph_exec_id)",
                                  "children": [
                                    {
                                      "value": "user_id=user_id",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "execution_id=graph_exec_id",
                                      "children": [
                                        {
                                          "value": "execution_id",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_exec_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")",
                      "children": [
                        {
                          "value": "raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")",
                          "children": [
                            {
                              "value": "HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(404, detail=f\"Agent execution #{graph_exec_id} not found\")",
                                  "children": [
                                    {
                                      "value": "404",
                                      "children": []
                                    },
                                    {
                                      "value": "detail=f\"Agent execution #{graph_exec_id} not found\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "f\"Agent execution #{graph_exec_id} not found\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Agent execution #",
                                              "children": []
                                            },
                                            {
                                              "value": "{graph_exec_id}",
                                              "children": [
                                                {
                                                  "value": "graph_exec_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not found",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )",
                  "children": [
                    {
                      "value": "await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )",
                      "children": [
                        {
                          "value": "asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )",
                          "children": [
                            {
                              "value": "asyncio.to_thread",
                              "children": [
                                {
                                  "value": "asyncio",
                                  "children": []
                                },
                                {
                                  "value": "to_thread",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )",
                              "children": [
                                {
                                  "value": "lambda: execution_manager_client().cancel_execution(graph_exec_id)",
                                  "children": [
                                    {
                                      "value": "execution_manager_client().cancel_execution(graph_exec_id)",
                                      "children": [
                                        {
                                          "value": "execution_manager_client().cancel_execution",
                                          "children": [
                                            {
                                              "value": "execution_manager_client()",
                                              "children": [
                                                {
                                                  "value": "execution_manager_client",
                                                  "children": []
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "cancel_execution",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(graph_exec_id)",
                                          "children": [
                                            {
                                              "value": "graph_exec_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Retrieve & return canceled graph execution in its final state",
                  "children": []
                },
                {
                  "value": "return await execution_db.get_execution_results(graph_exec_id)",
                  "children": [
                    {
                      "value": "await execution_db.get_execution_results(graph_exec_id)",
                      "children": [
                        {
                          "value": "execution_db.get_execution_results(graph_exec_id)",
                          "children": [
                            {
                              "value": "execution_db.get_execution_results",
                              "children": [
                                {
                                  "value": "execution_db",
                                  "children": []
                                },
                                {
                                  "value": "get_execution_results",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(graph_exec_id)",
                              "children": [
                                {
                                  "value": "graph_exec_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.get(\n    path=\"/executions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_executions(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[graph_db.GraphExecution]:\n    return await graph_db.get_executions(user_id=user_id)",
      "children": [
        {
          "value": "@v1_router.get(\n    path=\"/executions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.get(\n    path=\"/executions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/executions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/executions\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/executions\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/executions",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def get_executions(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[graph_db.GraphExecution]:\n    return await graph_db.get_executions(user_id=user_id)",
          "children": [
            {
              "value": "get_executions",
              "children": []
            },
            {
              "value": "(\n    user_id: Annotated[str, Depends(get_user_id)],\n)",
              "children": [
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "list[graph_db.GraphExecution]",
              "children": [
                {
                  "value": "list[graph_db.GraphExecution]",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    },
                    {
                      "value": "[graph_db.GraphExecution]",
                      "children": [
                        {
                          "value": "graph_db.GraphExecution",
                          "children": [
                            {
                              "value": "graph_db.GraphExecution",
                              "children": [
                                {
                                  "value": "graph_db",
                                  "children": []
                                },
                                {
                                  "value": "GraphExecution",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return await graph_db.get_executions(user_id=user_id)",
              "children": [
                {
                  "value": "return await graph_db.get_executions(user_id=user_id)",
                  "children": [
                    {
                      "value": "await graph_db.get_executions(user_id=user_id)",
                      "children": [
                        {
                          "value": "graph_db.get_executions(user_id=user_id)",
                          "children": [
                            {
                              "value": "graph_db.get_executions",
                              "children": [
                                {
                                  "value": "graph_db",
                                  "children": []
                                },
                                {
                                  "value": "get_executions",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(user_id=user_id)",
                              "children": [
                                {
                                  "value": "user_id=user_id",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.get(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_graph_run_node_execution_results(\n    graph_id: str,\n    graph_exec_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Sequence[execution_db.ExecutionResult]:\n    graph = await graph_db.get_graph(graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n\n    return await execution_db.get_execution_results(graph_exec_id)",
      "children": [
        {
          "value": "@v1_router.get(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.get(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/graphs/{graph_id}/executions/{graph_exec_id}\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/graphs/{graph_id}/executions/{graph_exec_id}\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/graphs/{graph_id}/executions/{graph_exec_id}",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def get_graph_run_node_execution_results(\n    graph_id: str,\n    graph_exec_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Sequence[execution_db.ExecutionResult]:\n    graph = await graph_db.get_graph(graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n\n    return await execution_db.get_execution_results(graph_exec_id)",
          "children": [
            {
              "value": "get_graph_run_node_execution_results",
              "children": []
            },
            {
              "value": "(\n    graph_id: str,\n    graph_exec_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n)",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "graph_exec_id: str",
                  "children": [
                    {
                      "value": "graph_exec_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "Sequence[execution_db.ExecutionResult]",
              "children": [
                {
                  "value": "Sequence[execution_db.ExecutionResult]",
                  "children": [
                    {
                      "value": "Sequence",
                      "children": []
                    },
                    {
                      "value": "[execution_db.ExecutionResult]",
                      "children": [
                        {
                          "value": "execution_db.ExecutionResult",
                          "children": [
                            {
                              "value": "execution_db.ExecutionResult",
                              "children": [
                                {
                                  "value": "execution_db",
                                  "children": []
                                },
                                {
                                  "value": "ExecutionResult",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph = await graph_db.get_graph(graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n\n    return await execution_db.get_execution_results(graph_exec_id)",
              "children": [
                {
                  "value": "graph = await graph_db.get_graph(graph_id, user_id=user_id)",
                  "children": [
                    {
                      "value": "graph = await graph_db.get_graph(graph_id, user_id=user_id)",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        },
                        {
                          "value": "await graph_db.get_graph(graph_id, user_id=user_id)",
                          "children": [
                            {
                              "value": "graph_db.get_graph(graph_id, user_id=user_id)",
                              "children": [
                                {
                                  "value": "graph_db.get_graph",
                                  "children": [
                                    {
                                      "value": "graph_db",
                                      "children": []
                                    },
                                    {
                                      "value": "get_graph",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(graph_id, user_id=user_id)",
                                  "children": [
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id=user_id",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                  "children": [
                    {
                      "value": "not graph",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                      "children": [
                        {
                          "value": "raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                          "children": [
                            {
                              "value": "HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                                  "children": [
                                    {
                                      "value": "status_code=404",
                                      "children": [
                                        {
                                          "value": "status_code",
                                          "children": []
                                        },
                                        {
                                          "value": "404",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "detail=f\"Graph #{graph_id} not found.\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "f\"Graph #{graph_id} not found.\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Graph #",
                                              "children": []
                                            },
                                            {
                                              "value": "{graph_id}",
                                              "children": [
                                                {
                                                  "value": "graph_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not found.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return await execution_db.get_execution_results(graph_exec_id)",
                  "children": [
                    {
                      "value": "await execution_db.get_execution_results(graph_exec_id)",
                      "children": [
                        {
                          "value": "execution_db.get_execution_results(graph_exec_id)",
                          "children": [
                            {
                              "value": "execution_db.get_execution_results",
                              "children": [
                                {
                                  "value": "execution_db",
                                  "children": []
                                },
                                {
                                  "value": "get_execution_results",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(graph_exec_id)",
                              "children": [
                                {
                                  "value": "graph_exec_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "##################### Templates ########################",
      "children": []
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "@v1_router.get(\n    path=\"/templates\",\n    tags=[\"graphs\", \"templates\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_templates(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)",
      "children": [
        {
          "value": "@v1_router.get(\n    path=\"/templates\",\n    tags=[\"graphs\", \"templates\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.get(\n    path=\"/templates\",\n    tags=[\"graphs\", \"templates\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/templates\",\n    tags=[\"graphs\", \"templates\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/templates\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/templates\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/templates",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"graphs\", \"templates\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"graphs\", \"templates\"]",
                          "children": [
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"templates\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "templates",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def get_templates(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)",
          "children": [
            {
              "value": "get_templates",
              "children": []
            },
            {
              "value": "(\n    user_id: Annotated[str, Depends(get_user_id)]\n)",
              "children": [
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "Sequence[graph_db.GraphModel]",
              "children": [
                {
                  "value": "Sequence[graph_db.GraphModel]",
                  "children": [
                    {
                      "value": "Sequence",
                      "children": []
                    },
                    {
                      "value": "[graph_db.GraphModel]",
                      "children": [
                        {
                          "value": "graph_db.GraphModel",
                          "children": [
                            {
                              "value": "graph_db.GraphModel",
                              "children": [
                                {
                                  "value": "graph_db",
                                  "children": []
                                },
                                {
                                  "value": "GraphModel",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)",
              "children": [
                {
                  "value": "return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)",
                  "children": [
                    {
                      "value": "await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)",
                      "children": [
                        {
                          "value": "graph_db.get_graphs(filter_by=\"template\", user_id=user_id)",
                          "children": [
                            {
                              "value": "graph_db.get_graphs",
                              "children": [
                                {
                                  "value": "graph_db",
                                  "children": []
                                },
                                {
                                  "value": "get_graphs",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(filter_by=\"template\", user_id=user_id)",
                              "children": [
                                {
                                  "value": "filter_by=\"template\"",
                                  "children": [
                                    {
                                      "value": "filter_by",
                                      "children": []
                                    },
                                    {
                                      "value": "\"template\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "template",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "user_id=user_id",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.get(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def get_template(\n    graph_id: str, version: int | None = None\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(graph_id, version, template=True)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")\n    return graph",
      "children": [
        {
          "value": "@v1_router.get(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.get(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/templates/{graph_id}\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/templates/{graph_id}\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/templates/{graph_id}",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"templates\", \"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"templates\", \"graphs\"]",
                          "children": [
                            {
                              "value": "\"templates\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "templates",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def get_template(\n    graph_id: str, version: int | None = None\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(graph_id, version, template=True)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")\n    return graph",
          "children": [
            {
              "value": "get_template",
              "children": []
            },
            {
              "value": "(\n    graph_id: str, version: int | None = None\n)",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "version: int | None = None",
                  "children": [
                    {
                      "value": "version",
                      "children": []
                    },
                    {
                      "value": "int | None",
                      "children": [
                        {
                          "value": "int | None",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_db.GraphModel",
              "children": [
                {
                  "value": "graph_db.GraphModel",
                  "children": [
                    {
                      "value": "graph_db",
                      "children": []
                    },
                    {
                      "value": "GraphModel",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph = await graph_db.get_graph(graph_id, version, template=True)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")\n    return graph",
              "children": [
                {
                  "value": "graph = await graph_db.get_graph(graph_id, version, template=True)",
                  "children": [
                    {
                      "value": "graph = await graph_db.get_graph(graph_id, version, template=True)",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        },
                        {
                          "value": "await graph_db.get_graph(graph_id, version, template=True)",
                          "children": [
                            {
                              "value": "graph_db.get_graph(graph_id, version, template=True)",
                              "children": [
                                {
                                  "value": "graph_db.get_graph",
                                  "children": [
                                    {
                                      "value": "graph_db",
                                      "children": []
                                    },
                                    {
                                      "value": "get_graph",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(graph_id, version, template=True)",
                                  "children": [
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    },
                                    {
                                      "value": "version",
                                      "children": []
                                    },
                                    {
                                      "value": "template=True",
                                      "children": [
                                        {
                                          "value": "template",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not graph:\n        raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")",
                  "children": [
                    {
                      "value": "not graph",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")",
                      "children": [
                        {
                          "value": "raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")",
                          "children": [
                            {
                              "value": "HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(status_code=404, detail=f\"Template #{graph_id} not found.\")",
                                  "children": [
                                    {
                                      "value": "status_code=404",
                                      "children": [
                                        {
                                          "value": "status_code",
                                          "children": []
                                        },
                                        {
                                          "value": "404",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "detail=f\"Template #{graph_id} not found.\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "f\"Template #{graph_id} not found.\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Template #",
                                              "children": []
                                            },
                                            {
                                              "value": "{graph_id}",
                                              "children": [
                                                {
                                                  "value": "graph_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not found.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return graph",
                  "children": [
                    {
                      "value": "graph",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.post(\n    path=\"/templates\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def create_new_template(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=True, user_id=user_id)",
      "children": [
        {
          "value": "@v1_router.post(\n    path=\"/templates\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.post(\n    path=\"/templates\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.post",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "post",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/templates\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/templates\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/templates\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/templates",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"templates\", \"graphs\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"templates\", \"graphs\"]",
                          "children": [
                            {
                              "value": "\"templates\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "templates",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"graphs\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "graphs",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def create_new_template(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=True, user_id=user_id)",
          "children": [
            {
              "value": "create_new_template",
              "children": []
            },
            {
              "value": "(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n)",
              "children": [
                {
                  "value": "create_graph: CreateGraph",
                  "children": [
                    {
                      "value": "create_graph",
                      "children": []
                    },
                    {
                      "value": "CreateGraph",
                      "children": [
                        {
                          "value": "CreateGraph",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_db.GraphModel",
              "children": [
                {
                  "value": "graph_db.GraphModel",
                  "children": [
                    {
                      "value": "graph_db",
                      "children": []
                    },
                    {
                      "value": "GraphModel",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "return await do_create_graph(create_graph, is_template=True, user_id=user_id)",
              "children": [
                {
                  "value": "return await do_create_graph(create_graph, is_template=True, user_id=user_id)",
                  "children": [
                    {
                      "value": "await do_create_graph(create_graph, is_template=True, user_id=user_id)",
                      "children": [
                        {
                          "value": "do_create_graph(create_graph, is_template=True, user_id=user_id)",
                          "children": [
                            {
                              "value": "do_create_graph",
                              "children": []
                            },
                            {
                              "value": "(create_graph, is_template=True, user_id=user_id)",
                              "children": [
                                {
                                  "value": "create_graph",
                                  "children": []
                                },
                                {
                                  "value": "is_template=True",
                                  "children": [
                                    {
                                      "value": "is_template",
                                      "children": []
                                    },
                                    {
                                      "value": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "user_id=user_id",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "##################### Schedules ########################",
      "children": []
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "class ScheduleCreationRequest(pydantic.BaseModel):\n    cron: str\n    input_data: dict[Any, Any]\n    graph_id: str",
      "children": [
        {
          "value": "ScheduleCreationRequest",
          "children": []
        },
        {
          "value": "(pydantic.BaseModel)",
          "children": [
            {
              "value": "pydantic.BaseModel",
              "children": [
                {
                  "value": "pydantic",
                  "children": []
                },
                {
                  "value": "BaseModel",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "cron: str\n    input_data: dict[Any, Any]\n    graph_id: str",
          "children": [
            {
              "value": "cron: str",
              "children": [
                {
                  "value": "cron: str",
                  "children": [
                    {
                      "value": "cron",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "input_data: dict[Any, Any]",
              "children": [
                {
                  "value": "input_data: dict[Any, Any]",
                  "children": [
                    {
                      "value": "input_data",
                      "children": []
                    },
                    {
                      "value": "dict[Any, Any]",
                      "children": [
                        {
                          "value": "dict[Any, Any]",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            },
                            {
                              "value": "[Any, Any]",
                              "children": [
                                {
                                  "value": "Any",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Any",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_id: str",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.post(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\nasync def create_schedule(\n    user_id: Annotated[str, Depends(get_user_id)],\n    schedule: ScheduleCreationRequest,\n) -> scheduler.JobInfo:\n    graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )\n\n    return await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )",
      "children": [
        {
          "value": "@v1_router.post(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.post(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.post",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "post",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/schedules\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/schedules\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/schedules",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"schedules\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"schedules\"]",
                          "children": [
                            {
                              "value": "\"schedules\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "schedules",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def create_schedule(\n    user_id: Annotated[str, Depends(get_user_id)],\n    schedule: ScheduleCreationRequest,\n) -> scheduler.JobInfo:\n    graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )\n\n    return await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )",
          "children": [
            {
              "value": "create_schedule",
              "children": []
            },
            {
              "value": "(\n    user_id: Annotated[str, Depends(get_user_id)],\n    schedule: ScheduleCreationRequest,\n)",
              "children": [
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "schedule: ScheduleCreationRequest",
                  "children": [
                    {
                      "value": "schedule",
                      "children": []
                    },
                    {
                      "value": "ScheduleCreationRequest",
                      "children": [
                        {
                          "value": "ScheduleCreationRequest",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "scheduler.JobInfo",
              "children": [
                {
                  "value": "scheduler.JobInfo",
                  "children": [
                    {
                      "value": "scheduler",
                      "children": []
                    },
                    {
                      "value": "JobInfo",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )\n\n    return await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )",
              "children": [
                {
                  "value": "graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)",
                  "children": [
                    {
                      "value": "graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        },
                        {
                          "value": "await graph_db.get_graph(schedule.graph_id, user_id=user_id)",
                          "children": [
                            {
                              "value": "graph_db.get_graph(schedule.graph_id, user_id=user_id)",
                              "children": [
                                {
                                  "value": "graph_db.get_graph",
                                  "children": [
                                    {
                                      "value": "graph_db",
                                      "children": []
                                    },
                                    {
                                      "value": "get_graph",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(schedule.graph_id, user_id=user_id)",
                                  "children": [
                                    {
                                      "value": "schedule.graph_id",
                                      "children": [
                                        {
                                          "value": "schedule",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "user_id=user_id",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not graph:\n        raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )",
                  "children": [
                    {
                      "value": "not graph",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )",
                      "children": [
                        {
                          "value": "raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )",
                          "children": [
                            {
                              "value": "HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )",
                                  "children": [
                                    {
                                      "value": "status_code=404",
                                      "children": [
                                        {
                                          "value": "status_code",
                                          "children": []
                                        },
                                        {
                                          "value": "404",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "detail=f\"Graph #{schedule.graph_id} not found.\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "f\"Graph #{schedule.graph_id} not found.\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Graph #",
                                              "children": []
                                            },
                                            {
                                              "value": "{schedule.graph_id}",
                                              "children": [
                                                {
                                                  "value": "schedule.graph_id",
                                                  "children": [
                                                    {
                                                      "value": "schedule",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "graph_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not found.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )",
                  "children": [
                    {
                      "value": "await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )",
                      "children": [
                        {
                          "value": "asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )",
                          "children": [
                            {
                              "value": "asyncio.to_thread",
                              "children": [
                                {
                                  "value": "asyncio",
                                  "children": []
                                },
                                {
                                  "value": "to_thread",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )",
                              "children": [
                                {
                                  "value": "lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )",
                                  "children": [
                                    {
                                      "value": "execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )",
                                      "children": [
                                        {
                                          "value": "execution_scheduler_client().add_execution_schedule",
                                          "children": [
                                            {
                                              "value": "execution_scheduler_client()",
                                              "children": [
                                                {
                                                  "value": "execution_scheduler_client",
                                                  "children": []
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "add_execution_schedule",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )",
                                          "children": [
                                            {
                                              "value": "graph_id=schedule.graph_id",
                                              "children": [
                                                {
                                                  "value": "graph_id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "schedule.graph_id",
                                                  "children": [
                                                    {
                                                      "value": "schedule",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "graph_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_version=graph.version",
                                              "children": [
                                                {
                                                  "value": "graph_version",
                                                  "children": []
                                                },
                                                {
                                                  "value": "graph.version",
                                                  "children": [
                                                    {
                                                      "value": "graph",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "version",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "cron=schedule.cron",
                                              "children": [
                                                {
                                                  "value": "cron",
                                                  "children": []
                                                },
                                                {
                                                  "value": "schedule.cron",
                                                  "children": [
                                                    {
                                                      "value": "schedule",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "cron",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "input_data=schedule.input_data",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "schedule.input_data",
                                                  "children": [
                                                    {
                                                      "value": "schedule",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id=user_id",
                                              "children": [
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.delete(\n    path=\"/schedules/{schedule_id}\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef delete_schedule(\n    schedule_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[Any, Any]:\n    execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\n    return {\"id\": schedule_id}",
      "children": [
        {
          "value": "@v1_router.delete(\n    path=\"/schedules/{schedule_id}\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.delete(\n    path=\"/schedules/{schedule_id}\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.delete",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "delete",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/schedules/{schedule_id}\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/schedules/{schedule_id}\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/schedules/{schedule_id}\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/schedules/{schedule_id}",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"schedules\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"schedules\"]",
                          "children": [
                            {
                              "value": "\"schedules\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "schedules",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "def delete_schedule(\n    schedule_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[Any, Any]:\n    execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\n    return {\"id\": schedule_id}",
          "children": [
            {
              "value": "delete_schedule",
              "children": []
            },
            {
              "value": "(\n    schedule_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n)",
              "children": [
                {
                  "value": "schedule_id: str",
                  "children": [
                    {
                      "value": "schedule_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "dict[Any, Any]",
              "children": [
                {
                  "value": "dict[Any, Any]",
                  "children": [
                    {
                      "value": "dict",
                      "children": []
                    },
                    {
                      "value": "[Any, Any]",
                      "children": [
                        {
                          "value": "Any",
                          "children": [
                            {
                              "value": "Any",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "Any",
                          "children": [
                            {
                              "value": "Any",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\n    return {\"id\": schedule_id}",
              "children": [
                {
                  "value": "execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)",
                  "children": [
                    {
                      "value": "execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)",
                      "children": [
                        {
                          "value": "execution_scheduler_client().delete_schedule",
                          "children": [
                            {
                              "value": "execution_scheduler_client()",
                              "children": [
                                {
                                  "value": "execution_scheduler_client",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "delete_schedule",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(schedule_id, user_id=user_id)",
                          "children": [
                            {
                              "value": "schedule_id",
                              "children": []
                            },
                            {
                              "value": "user_id=user_id",
                              "children": [
                                {
                                  "value": "user_id",
                                  "children": []
                                },
                                {
                                  "value": "user_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return {\"id\": schedule_id}",
                  "children": [
                    {
                      "value": "{\"id\": schedule_id}",
                      "children": [
                        {
                          "value": "\"id\": schedule_id",
                          "children": [
                            {
                              "value": "\"id\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "id",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "schedule_id",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.get(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\ndef get_execution_schedules(\n    user_id: Annotated[str, Depends(get_user_id)],\n    graph_id: str | None = None,\n) -> list[scheduler.JobInfo]:\n    return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )",
      "children": [
        {
          "value": "@v1_router.get(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.get(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "path=\"/schedules\"",
                      "children": [
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "\"/schedules\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "/schedules",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"schedules\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"schedules\"]",
                          "children": [
                            {
                              "value": "\"schedules\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "schedules",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "def get_execution_schedules(\n    user_id: Annotated[str, Depends(get_user_id)],\n    graph_id: str | None = None,\n) -> list[scheduler.JobInfo]:\n    return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )",
          "children": [
            {
              "value": "get_execution_schedules",
              "children": []
            },
            {
              "value": "(\n    user_id: Annotated[str, Depends(get_user_id)],\n    graph_id: str | None = None,\n)",
              "children": [
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "graph_id: str | None = None",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str | None",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "list[scheduler.JobInfo]",
              "children": [
                {
                  "value": "list[scheduler.JobInfo]",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    },
                    {
                      "value": "[scheduler.JobInfo]",
                      "children": [
                        {
                          "value": "scheduler.JobInfo",
                          "children": [
                            {
                              "value": "scheduler.JobInfo",
                              "children": [
                                {
                                  "value": "scheduler",
                                  "children": []
                                },
                                {
                                  "value": "JobInfo",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )",
              "children": [
                {
                  "value": "return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )",
                  "children": [
                    {
                      "value": "execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )",
                      "children": [
                        {
                          "value": "execution_scheduler_client().get_execution_schedules",
                          "children": [
                            {
                              "value": "execution_scheduler_client()",
                              "children": [
                                {
                                  "value": "execution_scheduler_client",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "get_execution_schedules",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\n        user_id=user_id,\n        graph_id=graph_id,\n    )",
                          "children": [
                            {
                              "value": "user_id=user_id",
                              "children": [
                                {
                                  "value": "user_id",
                                  "children": []
                                },
                                {
                                  "value": "user_id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "graph_id=graph_id",
                              "children": [
                                {
                                  "value": "graph_id",
                                  "children": []
                                },
                                {
                                  "value": "graph_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "#####################  API KEY ##############################",
      "children": []
    },
    {
      "value": "########################################################",
      "children": []
    },
    {
      "value": "@v1_router.post(\n    \"/api-keys\",\n    response_model=list[CreateAPIKeyResponse] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def create_api_key(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n) -> CreateAPIKeyResponse:\n    \"\"\"Create a new API key\"\"\"\n    try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)\n    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
      "children": [
        {
          "value": "@v1_router.post(\n    \"/api-keys\",\n    response_model=list[CreateAPIKeyResponse] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.post(\n    \"/api-keys\",\n    response_model=list[CreateAPIKeyResponse] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.post",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "post",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    \"/api-keys\",\n    response_model=list[CreateAPIKeyResponse] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "\"/api-keys\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/api-keys",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "response_model=list[CreateAPIKeyResponse] | dict[str, str]",
                      "children": [
                        {
                          "value": "response_model",
                          "children": []
                        },
                        {
                          "value": "list[CreateAPIKeyResponse] | dict[str, str]",
                          "children": [
                            {
                              "value": "list[CreateAPIKeyResponse]",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "CreateAPIKeyResponse",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "dict[str, str]",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"api-keys\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"api-keys\"]",
                          "children": [
                            {
                              "value": "\"api-keys\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "api-keys",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "@feature_flag(\"api-keys-enabled\")",
          "children": [
            {
              "value": "feature_flag(\"api-keys-enabled\")",
              "children": [
                {
                  "value": "feature_flag",
                  "children": []
                },
                {
                  "value": "(\"api-keys-enabled\")",
                  "children": [
                    {
                      "value": "\"api-keys-enabled\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "api-keys-enabled",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def create_api_key(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n) -> CreateAPIKeyResponse:\n    \"\"\"Create a new API key\"\"\"\n    try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)\n    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
          "children": [
            {
              "value": "create_api_key",
              "children": []
            },
            {
              "value": "(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n)",
              "children": [
                {
                  "value": "request: CreateAPIKeyRequest",
                  "children": [
                    {
                      "value": "request",
                      "children": []
                    },
                    {
                      "value": "CreateAPIKeyRequest",
                      "children": [
                        {
                          "value": "CreateAPIKeyRequest",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "CreateAPIKeyResponse",
              "children": [
                {
                  "value": "CreateAPIKeyResponse",
                  "children": []
                }
              ]
            },
            {
              "value": "\"\"\"Create a new API key\"\"\"\n    try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)\n    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
              "children": [
                {
                  "value": "\"\"\"Create a new API key\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"Create a new API key\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"",
                          "children": []
                        },
                        {
                          "value": "Create a new API key",
                          "children": []
                        },
                        {
                          "value": "\"\"\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)\n    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                  "children": [
                    {
                      "value": "api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)",
                      "children": [
                        {
                          "value": "api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )",
                          "children": [
                            {
                              "value": "api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )",
                              "children": [
                                {
                                  "value": "api_key, plain_text",
                                  "children": [
                                    {
                                      "value": "api_key",
                                      "children": []
                                    },
                                    {
                                      "value": "plain_text",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )",
                                  "children": [
                                    {
                                      "value": "generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )",
                                      "children": [
                                        {
                                          "value": "generate_api_key",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )",
                                          "children": [
                                            {
                                              "value": "name=request.name",
                                              "children": [
                                                {
                                                  "value": "name",
                                                  "children": []
                                                },
                                                {
                                                  "value": "request.name",
                                                  "children": [
                                                    {
                                                      "value": "request",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "name",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id=user_id",
                                              "children": [
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "permissions=request.permissions",
                                              "children": [
                                                {
                                                  "value": "permissions",
                                                  "children": []
                                                },
                                                {
                                                  "value": "request.permissions",
                                                  "children": [
                                                    {
                                                      "value": "request",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "permissions",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "description=request.description",
                                              "children": [
                                                {
                                                  "value": "description",
                                                  "children": []
                                                },
                                                {
                                                  "value": "request.description",
                                                  "children": [
                                                    {
                                                      "value": "request",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "description",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)",
                          "children": [
                            {
                              "value": "CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)",
                              "children": [
                                {
                                  "value": "CreateAPIKeyResponse",
                                  "children": []
                                },
                                {
                                  "value": "(api_key=api_key, plain_text_key=plain_text)",
                                  "children": [
                                    {
                                      "value": "api_key=api_key",
                                      "children": [
                                        {
                                          "value": "api_key",
                                          "children": []
                                        },
                                        {
                                          "value": "api_key",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "plain_text_key=plain_text",
                                      "children": [
                                        {
                                          "value": "plain_text_key",
                                          "children": []
                                        },
                                        {
                                          "value": "plain_text",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                      "children": [
                        {
                          "value": "APIKeyError as e",
                          "children": [
                            {
                              "value": "APIKeyError",
                              "children": []
                            },
                            {
                              "value": "e",
                              "children": [
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                          "children": [
                            {
                              "value": "logger.error(f\"Failed to create API key: {str(e)}\")",
                              "children": [
                                {
                                  "value": "logger.error(f\"Failed to create API key: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "logger.error",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(f\"Failed to create API key: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "f\"Failed to create API key: {str(e)}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Failed to create API key:",
                                              "children": []
                                            },
                                            {
                                              "value": "{str(e)}",
                                              "children": [
                                                {
                                                  "value": "str(e)",
                                                  "children": [
                                                    {
                                                      "value": "str",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(e)",
                                                      "children": [
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(status_code=400, detail=str(e))",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=400, detail=str(e))",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=400, detail=str(e))",
                                      "children": [
                                        {
                                          "value": "status_code=400",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "400",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=str(e)",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.get(\n    \"/api-keys\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_keys(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> list[APIKeyWithoutHash]:\n    \"\"\"List all API keys for the user\"\"\"\n    try:\n        return await list_user_api_keys(user_id)\n    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
      "children": [
        {
          "value": "@v1_router.get(\n    \"/api-keys\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.get(\n    \"/api-keys\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    \"/api-keys\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "\"/api-keys\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/api-keys",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "response_model=list[APIKeyWithoutHash] | dict[str, str]",
                      "children": [
                        {
                          "value": "response_model",
                          "children": []
                        },
                        {
                          "value": "list[APIKeyWithoutHash] | dict[str, str]",
                          "children": [
                            {
                              "value": "list[APIKeyWithoutHash]",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "APIKeyWithoutHash",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "dict[str, str]",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"api-keys\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"api-keys\"]",
                          "children": [
                            {
                              "value": "\"api-keys\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "api-keys",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "@feature_flag(\"api-keys-enabled\")",
          "children": [
            {
              "value": "feature_flag(\"api-keys-enabled\")",
              "children": [
                {
                  "value": "feature_flag",
                  "children": []
                },
                {
                  "value": "(\"api-keys-enabled\")",
                  "children": [
                    {
                      "value": "\"api-keys-enabled\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "api-keys-enabled",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def get_api_keys(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> list[APIKeyWithoutHash]:\n    \"\"\"List all API keys for the user\"\"\"\n    try:\n        return await list_user_api_keys(user_id)\n    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
          "children": [
            {
              "value": "get_api_keys",
              "children": []
            },
            {
              "value": "(\n    user_id: Annotated[str, Depends(get_user_id)]\n)",
              "children": [
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "list[APIKeyWithoutHash]",
              "children": [
                {
                  "value": "list[APIKeyWithoutHash]",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    },
                    {
                      "value": "[APIKeyWithoutHash]",
                      "children": [
                        {
                          "value": "APIKeyWithoutHash",
                          "children": [
                            {
                              "value": "APIKeyWithoutHash",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "\"\"\"List all API keys for the user\"\"\"\n    try:\n        return await list_user_api_keys(user_id)\n    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
              "children": [
                {
                  "value": "\"\"\"List all API keys for the user\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"List all API keys for the user\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"",
                          "children": []
                        },
                        {
                          "value": "List all API keys for the user",
                          "children": []
                        },
                        {
                          "value": "\"\"\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n        return await list_user_api_keys(user_id)\n    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                  "children": [
                    {
                      "value": "return await list_user_api_keys(user_id)",
                      "children": [
                        {
                          "value": "return await list_user_api_keys(user_id)",
                          "children": [
                            {
                              "value": "await list_user_api_keys(user_id)",
                              "children": [
                                {
                                  "value": "list_user_api_keys(user_id)",
                                  "children": [
                                    {
                                      "value": "list_user_api_keys",
                                      "children": []
                                    },
                                    {
                                      "value": "(user_id)",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                      "children": [
                        {
                          "value": "APIKeyError as e",
                          "children": [
                            {
                              "value": "APIKeyError",
                              "children": []
                            },
                            {
                              "value": "e",
                              "children": [
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                          "children": [
                            {
                              "value": "logger.error(f\"Failed to list API keys: {str(e)}\")",
                              "children": [
                                {
                                  "value": "logger.error(f\"Failed to list API keys: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "logger.error",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(f\"Failed to list API keys: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "f\"Failed to list API keys: {str(e)}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Failed to list API keys:",
                                              "children": []
                                            },
                                            {
                                              "value": "{str(e)}",
                                              "children": [
                                                {
                                                  "value": "str(e)",
                                                  "children": [
                                                    {
                                                      "value": "str",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(e)",
                                                      "children": [
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(status_code=400, detail=str(e))",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=400, detail=str(e))",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=400, detail=str(e))",
                                      "children": [
                                        {
                                          "value": "status_code=400",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "400",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=str(e)",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.get(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def get_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> APIKeyWithoutHash:\n    \"\"\"Get a specific API key\"\"\"\n    try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n        return api_key\n    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
      "children": [
        {
          "value": "@v1_router.get(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.get(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.get",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "\"/api-keys/{key_id}\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/api-keys/{key_id}",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "response_model=list[APIKeyWithoutHash] | dict[str, str]",
                      "children": [
                        {
                          "value": "response_model",
                          "children": []
                        },
                        {
                          "value": "list[APIKeyWithoutHash] | dict[str, str]",
                          "children": [
                            {
                              "value": "list[APIKeyWithoutHash]",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "APIKeyWithoutHash",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "dict[str, str]",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"api-keys\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"api-keys\"]",
                          "children": [
                            {
                              "value": "\"api-keys\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "api-keys",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "@feature_flag(\"api-keys-enabled\")",
          "children": [
            {
              "value": "feature_flag(\"api-keys-enabled\")",
              "children": [
                {
                  "value": "feature_flag",
                  "children": []
                },
                {
                  "value": "(\"api-keys-enabled\")",
                  "children": [
                    {
                      "value": "\"api-keys-enabled\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "api-keys-enabled",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def get_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> APIKeyWithoutHash:\n    \"\"\"Get a specific API key\"\"\"\n    try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n        return api_key\n    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
          "children": [
            {
              "value": "get_api_key",
              "children": []
            },
            {
              "value": "(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n)",
              "children": [
                {
                  "value": "key_id: str",
                  "children": [
                    {
                      "value": "key_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "APIKeyWithoutHash",
              "children": [
                {
                  "value": "APIKeyWithoutHash",
                  "children": []
                }
              ]
            },
            {
              "value": "\"\"\"Get a specific API key\"\"\"\n    try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n        return api_key\n    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
              "children": [
                {
                  "value": "\"\"\"Get a specific API key\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"Get a specific API key\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"",
                          "children": []
                        },
                        {
                          "value": "Get a specific API key",
                          "children": []
                        },
                        {
                          "value": "\"\"\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n        return api_key\n    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                  "children": [
                    {
                      "value": "api_key = await get_api_key_by_id(key_id, user_id)\n        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n        return api_key",
                      "children": [
                        {
                          "value": "api_key = await get_api_key_by_id(key_id, user_id)",
                          "children": [
                            {
                              "value": "api_key = await get_api_key_by_id(key_id, user_id)",
                              "children": [
                                {
                                  "value": "api_key",
                                  "children": []
                                },
                                {
                                  "value": "await get_api_key_by_id(key_id, user_id)",
                                  "children": [
                                    {
                                      "value": "get_api_key_by_id(key_id, user_id)",
                                      "children": [
                                        {
                                          "value": "get_api_key_by_id",
                                          "children": []
                                        },
                                        {
                                          "value": "(key_id, user_id)",
                                          "children": [
                                            {
                                              "value": "key_id",
                                              "children": []
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")",
                          "children": [
                            {
                              "value": "not api_key",
                              "children": [
                                {
                                  "value": "api_key",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(status_code=404, detail=\"API key not found\")",
                              "children": [
                                {
                                  "value": "raise HTTPException(status_code=404, detail=\"API key not found\")",
                                  "children": [
                                    {
                                      "value": "HTTPException(status_code=404, detail=\"API key not found\")",
                                      "children": [
                                        {
                                          "value": "HTTPException",
                                          "children": []
                                        },
                                        {
                                          "value": "(status_code=404, detail=\"API key not found\")",
                                          "children": [
                                            {
                                              "value": "status_code=404",
                                              "children": [
                                                {
                                                  "value": "status_code",
                                                  "children": []
                                                },
                                                {
                                                  "value": "404",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "detail=\"API key not found\"",
                                              "children": [
                                                {
                                                  "value": "detail",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"API key not found\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "API key not found",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return api_key",
                          "children": [
                            {
                              "value": "api_key",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                      "children": [
                        {
                          "value": "APIKeyError as e",
                          "children": [
                            {
                              "value": "APIKeyError",
                              "children": []
                            },
                            {
                              "value": "e",
                              "children": [
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                          "children": [
                            {
                              "value": "logger.error(f\"Failed to get API key: {str(e)}\")",
                              "children": [
                                {
                                  "value": "logger.error(f\"Failed to get API key: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "logger.error",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(f\"Failed to get API key: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "f\"Failed to get API key: {str(e)}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Failed to get API key:",
                                              "children": []
                                            },
                                            {
                                              "value": "{str(e)}",
                                              "children": [
                                                {
                                                  "value": "str(e)",
                                                  "children": [
                                                    {
                                                      "value": "str",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(e)",
                                                      "children": [
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(status_code=400, detail=str(e))",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=400, detail=str(e))",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=400, detail=str(e))",
                                      "children": [
                                        {
                                          "value": "status_code=400",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "400",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=str(e)",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.delete(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def delete_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Revoke an API key\"\"\"\n    try:\n        return await revoke_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
      "children": [
        {
          "value": "@v1_router.delete(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.delete(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.delete",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "delete",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "\"/api-keys/{key_id}\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/api-keys/{key_id}",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "response_model=list[APIKeyWithoutHash] | dict[str, str]",
                      "children": [
                        {
                          "value": "response_model",
                          "children": []
                        },
                        {
                          "value": "list[APIKeyWithoutHash] | dict[str, str]",
                          "children": [
                            {
                              "value": "list[APIKeyWithoutHash]",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "APIKeyWithoutHash",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "dict[str, str]",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"api-keys\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"api-keys\"]",
                          "children": [
                            {
                              "value": "\"api-keys\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "api-keys",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "@feature_flag(\"api-keys-enabled\")",
          "children": [
            {
              "value": "feature_flag(\"api-keys-enabled\")",
              "children": [
                {
                  "value": "feature_flag",
                  "children": []
                },
                {
                  "value": "(\"api-keys-enabled\")",
                  "children": [
                    {
                      "value": "\"api-keys-enabled\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "api-keys-enabled",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def delete_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Revoke an API key\"\"\"\n    try:\n        return await revoke_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
          "children": [
            {
              "value": "delete_api_key",
              "children": []
            },
            {
              "value": "(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n)",
              "children": [
                {
                  "value": "key_id: str",
                  "children": [
                    {
                      "value": "key_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "Optional[APIKeyWithoutHash]",
              "children": [
                {
                  "value": "Optional[APIKeyWithoutHash]",
                  "children": [
                    {
                      "value": "Optional",
                      "children": []
                    },
                    {
                      "value": "[APIKeyWithoutHash]",
                      "children": [
                        {
                          "value": "APIKeyWithoutHash",
                          "children": [
                            {
                              "value": "APIKeyWithoutHash",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "\"\"\"Revoke an API key\"\"\"\n    try:\n        return await revoke_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
              "children": [
                {
                  "value": "\"\"\"Revoke an API key\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"Revoke an API key\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"",
                          "children": []
                        },
                        {
                          "value": "Revoke an API key",
                          "children": []
                        },
                        {
                          "value": "\"\"\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n        return await revoke_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                  "children": [
                    {
                      "value": "return await revoke_api_key(key_id, user_id)",
                      "children": [
                        {
                          "value": "return await revoke_api_key(key_id, user_id)",
                          "children": [
                            {
                              "value": "await revoke_api_key(key_id, user_id)",
                              "children": [
                                {
                                  "value": "revoke_api_key(key_id, user_id)",
                                  "children": [
                                    {
                                      "value": "revoke_api_key",
                                      "children": []
                                    },
                                    {
                                      "value": "(key_id, user_id)",
                                      "children": [
                                        {
                                          "value": "key_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")",
                      "children": [
                        {
                          "value": "APIKeyNotFoundError",
                          "children": []
                        },
                        {
                          "value": "raise HTTPException(status_code=404, detail=\"API key not found\")",
                          "children": [
                            {
                              "value": "raise HTTPException(status_code=404, detail=\"API key not found\")",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=404, detail=\"API key not found\")",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=404, detail=\"API key not found\")",
                                      "children": [
                                        {
                                          "value": "status_code=404",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "404",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=\"API key not found\"",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "\"API key not found\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "API key not found",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")",
                      "children": [
                        {
                          "value": "APIKeyPermissionError",
                          "children": []
                        },
                        {
                          "value": "raise HTTPException(status_code=403, detail=\"Permission denied\")",
                          "children": [
                            {
                              "value": "raise HTTPException(status_code=403, detail=\"Permission denied\")",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=403, detail=\"Permission denied\")",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=403, detail=\"Permission denied\")",
                                      "children": [
                                        {
                                          "value": "status_code=403",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "403",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=\"Permission denied\"",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "\"Permission denied\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Permission denied",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                      "children": [
                        {
                          "value": "APIKeyError as e",
                          "children": [
                            {
                              "value": "APIKeyError",
                              "children": []
                            },
                            {
                              "value": "e",
                              "children": [
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                          "children": [
                            {
                              "value": "logger.error(f\"Failed to revoke API key: {str(e)}\")",
                              "children": [
                                {
                                  "value": "logger.error(f\"Failed to revoke API key: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "logger.error",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(f\"Failed to revoke API key: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "f\"Failed to revoke API key: {str(e)}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Failed to revoke API key:",
                                              "children": []
                                            },
                                            {
                                              "value": "{str(e)}",
                                              "children": [
                                                {
                                                  "value": "str(e)",
                                                  "children": [
                                                    {
                                                      "value": "str",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(e)",
                                                      "children": [
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(status_code=400, detail=str(e))",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=400, detail=str(e))",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=400, detail=str(e))",
                                      "children": [
                                        {
                                          "value": "status_code=400",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "400",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=str(e)",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.post(\n    \"/api-keys/{key_id}/suspend\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def suspend_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Suspend an API key\"\"\"\n    try:\n        return await suspend_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
      "children": [
        {
          "value": "@v1_router.post(\n    \"/api-keys/{key_id}/suspend\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.post(\n    \"/api-keys/{key_id}/suspend\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.post",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "post",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    \"/api-keys/{key_id}/suspend\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "\"/api-keys/{key_id}/suspend\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/api-keys/{key_id}/suspend",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "response_model=list[APIKeyWithoutHash] | dict[str, str]",
                      "children": [
                        {
                          "value": "response_model",
                          "children": []
                        },
                        {
                          "value": "list[APIKeyWithoutHash] | dict[str, str]",
                          "children": [
                            {
                              "value": "list[APIKeyWithoutHash]",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "APIKeyWithoutHash",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "dict[str, str]",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"api-keys\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"api-keys\"]",
                          "children": [
                            {
                              "value": "\"api-keys\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "api-keys",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "@feature_flag(\"api-keys-enabled\")",
          "children": [
            {
              "value": "feature_flag(\"api-keys-enabled\")",
              "children": [
                {
                  "value": "feature_flag",
                  "children": []
                },
                {
                  "value": "(\"api-keys-enabled\")",
                  "children": [
                    {
                      "value": "\"api-keys-enabled\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "api-keys-enabled",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def suspend_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Suspend an API key\"\"\"\n    try:\n        return await suspend_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
          "children": [
            {
              "value": "suspend_key",
              "children": []
            },
            {
              "value": "(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n)",
              "children": [
                {
                  "value": "key_id: str",
                  "children": [
                    {
                      "value": "key_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "Optional[APIKeyWithoutHash]",
              "children": [
                {
                  "value": "Optional[APIKeyWithoutHash]",
                  "children": [
                    {
                      "value": "Optional",
                      "children": []
                    },
                    {
                      "value": "[APIKeyWithoutHash]",
                      "children": [
                        {
                          "value": "APIKeyWithoutHash",
                          "children": [
                            {
                              "value": "APIKeyWithoutHash",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "\"\"\"Suspend an API key\"\"\"\n    try:\n        return await suspend_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
              "children": [
                {
                  "value": "\"\"\"Suspend an API key\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"Suspend an API key\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"",
                          "children": []
                        },
                        {
                          "value": "Suspend an API key",
                          "children": []
                        },
                        {
                          "value": "\"\"\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n        return await suspend_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                  "children": [
                    {
                      "value": "return await suspend_api_key(key_id, user_id)",
                      "children": [
                        {
                          "value": "return await suspend_api_key(key_id, user_id)",
                          "children": [
                            {
                              "value": "await suspend_api_key(key_id, user_id)",
                              "children": [
                                {
                                  "value": "suspend_api_key(key_id, user_id)",
                                  "children": [
                                    {
                                      "value": "suspend_api_key",
                                      "children": []
                                    },
                                    {
                                      "value": "(key_id, user_id)",
                                      "children": [
                                        {
                                          "value": "key_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")",
                      "children": [
                        {
                          "value": "APIKeyNotFoundError",
                          "children": []
                        },
                        {
                          "value": "raise HTTPException(status_code=404, detail=\"API key not found\")",
                          "children": [
                            {
                              "value": "raise HTTPException(status_code=404, detail=\"API key not found\")",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=404, detail=\"API key not found\")",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=404, detail=\"API key not found\")",
                                      "children": [
                                        {
                                          "value": "status_code=404",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "404",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=\"API key not found\"",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "\"API key not found\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "API key not found",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")",
                      "children": [
                        {
                          "value": "APIKeyPermissionError",
                          "children": []
                        },
                        {
                          "value": "raise HTTPException(status_code=403, detail=\"Permission denied\")",
                          "children": [
                            {
                              "value": "raise HTTPException(status_code=403, detail=\"Permission denied\")",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=403, detail=\"Permission denied\")",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=403, detail=\"Permission denied\")",
                                      "children": [
                                        {
                                          "value": "status_code=403",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "403",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=\"Permission denied\"",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "\"Permission denied\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Permission denied",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                      "children": [
                        {
                          "value": "APIKeyError as e",
                          "children": [
                            {
                              "value": "APIKeyError",
                              "children": []
                            },
                            {
                              "value": "e",
                              "children": [
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                          "children": [
                            {
                              "value": "logger.error(f\"Failed to suspend API key: {str(e)}\")",
                              "children": [
                                {
                                  "value": "logger.error(f\"Failed to suspend API key: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "logger.error",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(f\"Failed to suspend API key: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "f\"Failed to suspend API key: {str(e)}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Failed to suspend API key:",
                                              "children": []
                                            },
                                            {
                                              "value": "{str(e)}",
                                              "children": [
                                                {
                                                  "value": "str(e)",
                                                  "children": [
                                                    {
                                                      "value": "str",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(e)",
                                                      "children": [
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(status_code=400, detail=str(e))",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=400, detail=str(e))",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=400, detail=str(e))",
                                      "children": [
                                        {
                                          "value": "status_code=400",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "400",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=str(e)",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@v1_router.put(\n    \"/api-keys/{key_id}/permissions\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\nasync def update_permissions(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Update API key permissions\"\"\"\n    try:\n        return await update_api_key_permissions(key_id, user_id, request.permissions)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
      "children": [
        {
          "value": "@v1_router.put(\n    \"/api-keys/{key_id}/permissions\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
          "children": [
            {
              "value": "v1_router.put(\n    \"/api-keys/{key_id}/permissions\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
              "children": [
                {
                  "value": "v1_router.put",
                  "children": [
                    {
                      "value": "v1_router",
                      "children": []
                    },
                    {
                      "value": "put",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n    \"/api-keys/{key_id}/permissions\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
                  "children": [
                    {
                      "value": "\"/api-keys/{key_id}/permissions\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/api-keys/{key_id}/permissions",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "response_model=list[APIKeyWithoutHash] | dict[str, str]",
                      "children": [
                        {
                          "value": "response_model",
                          "children": []
                        },
                        {
                          "value": "list[APIKeyWithoutHash] | dict[str, str]",
                          "children": [
                            {
                              "value": "list[APIKeyWithoutHash]",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "APIKeyWithoutHash",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "dict[str, str]",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tags=[\"api-keys\"]",
                      "children": [
                        {
                          "value": "tags",
                          "children": []
                        },
                        {
                          "value": "[\"api-keys\"]",
                          "children": [
                            {
                              "value": "\"api-keys\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "api-keys",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dependencies=[Depends(auth_middleware)]",
                      "children": [
                        {
                          "value": "dependencies",
                          "children": []
                        },
                        {
                          "value": "[Depends(auth_middleware)]",
                          "children": [
                            {
                              "value": "Depends(auth_middleware)",
                              "children": [
                                {
                                  "value": "Depends",
                                  "children": []
                                },
                                {
                                  "value": "(auth_middleware)",
                                  "children": [
                                    {
                                      "value": "auth_middleware",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "@feature_flag(\"api-keys-enabled\")",
          "children": [
            {
              "value": "feature_flag(\"api-keys-enabled\")",
              "children": [
                {
                  "value": "feature_flag",
                  "children": []
                },
                {
                  "value": "(\"api-keys-enabled\")",
                  "children": [
                    {
                      "value": "\"api-keys-enabled\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "api-keys-enabled",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def update_permissions(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Update API key permissions\"\"\"\n    try:\n        return await update_api_key_permissions(key_id, user_id, request.permissions)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
          "children": [
            {
              "value": "update_permissions",
              "children": []
            },
            {
              "value": "(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n)",
              "children": [
                {
                  "value": "key_id: str",
                  "children": [
                    {
                      "value": "key_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "request: UpdatePermissionsRequest",
                  "children": [
                    {
                      "value": "request",
                      "children": []
                    },
                    {
                      "value": "UpdatePermissionsRequest",
                      "children": [
                        {
                          "value": "UpdatePermissionsRequest",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "Optional[APIKeyWithoutHash]",
              "children": [
                {
                  "value": "Optional[APIKeyWithoutHash]",
                  "children": [
                    {
                      "value": "Optional",
                      "children": []
                    },
                    {
                      "value": "[APIKeyWithoutHash]",
                      "children": [
                        {
                          "value": "APIKeyWithoutHash",
                          "children": [
                            {
                              "value": "APIKeyWithoutHash",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "\"\"\"Update API key permissions\"\"\"\n    try:\n        return await update_api_key_permissions(key_id, user_id, request.permissions)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
              "children": [
                {
                  "value": "\"\"\"Update API key permissions\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"Update API key permissions\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"",
                          "children": []
                        },
                        {
                          "value": "Update API key permissions",
                          "children": []
                        },
                        {
                          "value": "\"\"\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n        return await update_api_key_permissions(key_id, user_id, request.permissions)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                  "children": [
                    {
                      "value": "return await update_api_key_permissions(key_id, user_id, request.permissions)",
                      "children": [
                        {
                          "value": "return await update_api_key_permissions(key_id, user_id, request.permissions)",
                          "children": [
                            {
                              "value": "await update_api_key_permissions(key_id, user_id, request.permissions)",
                              "children": [
                                {
                                  "value": "update_api_key_permissions(key_id, user_id, request.permissions)",
                                  "children": [
                                    {
                                      "value": "update_api_key_permissions",
                                      "children": []
                                    },
                                    {
                                      "value": "(key_id, user_id, request.permissions)",
                                      "children": [
                                        {
                                          "value": "key_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "request.permissions",
                                          "children": [
                                            {
                                              "value": "request",
                                              "children": []
                                            },
                                            {
                                              "value": "permissions",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")",
                      "children": [
                        {
                          "value": "APIKeyNotFoundError",
                          "children": []
                        },
                        {
                          "value": "raise HTTPException(status_code=404, detail=\"API key not found\")",
                          "children": [
                            {
                              "value": "raise HTTPException(status_code=404, detail=\"API key not found\")",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=404, detail=\"API key not found\")",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=404, detail=\"API key not found\")",
                                      "children": [
                                        {
                                          "value": "status_code=404",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "404",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=\"API key not found\"",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "\"API key not found\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "API key not found",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")",
                      "children": [
                        {
                          "value": "APIKeyPermissionError",
                          "children": []
                        },
                        {
                          "value": "raise HTTPException(status_code=403, detail=\"Permission denied\")",
                          "children": [
                            {
                              "value": "raise HTTPException(status_code=403, detail=\"Permission denied\")",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=403, detail=\"Permission denied\")",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=403, detail=\"Permission denied\")",
                                      "children": [
                                        {
                                          "value": "status_code=403",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "403",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=\"Permission denied\"",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "\"Permission denied\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Permission denied",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                      "children": [
                        {
                          "value": "APIKeyError as e",
                          "children": [
                            {
                              "value": "APIKeyError",
                              "children": []
                            },
                            {
                              "value": "e",
                              "children": [
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
                          "children": [
                            {
                              "value": "logger.error(f\"Failed to update API key permissions: {str(e)}\")",
                              "children": [
                                {
                                  "value": "logger.error(f\"Failed to update API key permissions: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "logger.error",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(f\"Failed to update API key permissions: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "f\"Failed to update API key permissions: {str(e)}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Failed to update API key permissions:",
                                              "children": []
                                            },
                                            {
                                              "value": "{str(e)}",
                                              "children": [
                                                {
                                                  "value": "str(e)",
                                                  "children": [
                                                    {
                                                      "value": "str",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(e)",
                                                      "children": [
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(status_code=400, detail=str(e))",
                              "children": [
                                {
                                  "value": "HTTPException(status_code=400, detail=str(e))",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(status_code=400, detail=str(e))",
                                      "children": [
                                        {
                                          "value": "status_code=400",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "400",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=str(e)",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}