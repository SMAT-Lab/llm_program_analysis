{
  "value": "\"\"\"\nGiven a partially filled 9x9 2D array, the objective is to fill a 9x9\nsquare grid with digits numbered 1 to 9, so that every row, column, and\nand each of the nine 3x3 sub-grids contains all of the digits.\n\nThis can be solved using Backtracking and is similar to n-queens.\nWe check to see if a cell is safe or not and recursively call the\nfunction on the next column to see if it returns True. if yes, we\nhave solved the puzzle. else, we backtrack and place another number\nin that cell and repeat this process.\n\"\"\"\n\nfrom __future__ import annotations\n\nMatrix = list[list[int]]\n\n# assigning initial values to the grid\ninitial_grid: Matrix = [\n    [3, 0, 6, 5, 0, 8, 4, 0, 0],\n    [5, 2, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n]\n\n# a grid with no solution\nno_solution: Matrix = [\n    [5, 0, 6, 5, 0, 8, 4, 0, 3],\n    [5, 2, 0, 0, 0, 0, 0, 0, 2],\n    [1, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n]\n\n\ndef is_safe(grid: Matrix, row: int, column: int, n: int) -> bool:\n    \"\"\"\n    This function checks the grid to see if each row,\n    column, and the 3x3 subgrids contain the digit 'n'.\n    It returns False if it is not 'safe' (a duplicate digit\n    is found) else returns True if it is 'safe'\n    \"\"\"\n    for i in range(9):\n        if n in {grid[row][i], grid[i][column]}:\n            return False\n\n    for i in range(3):\n        for j in range(3):\n            if grid[(row - row % 3) + i][(column - column % 3) + j] == n:\n                return False\n\n    return True\n\n\ndef find_empty_location(grid: Matrix) -> tuple[int, int] | None:\n    \"\"\"\n    This function finds an empty location so that we can assign a number\n    for that particular row and column.\n    \"\"\"\n    for i in range(9):\n        for j in range(9):\n            if grid[i][j] == 0:\n                return i, j\n    return None\n\n\ndef sudoku(grid: Matrix) -> Matrix | None:\n    \"\"\"\n    Takes a partially filled-in grid and attempts to assign values to\n    all unassigned locations in such a way to meet the requirements\n    for Sudoku solution (non-duplication across rows, columns, and boxes)\n\n    >>> sudoku(initial_grid)  # doctest: +NORMALIZE_WHITESPACE\n    [[3, 1, 6, 5, 7, 8, 4, 9, 2],\n     [5, 2, 9, 1, 3, 4, 7, 6, 8],\n     [4, 8, 7, 6, 2, 9, 5, 3, 1],\n     [2, 6, 3, 4, 1, 5, 9, 8, 7],\n     [9, 7, 4, 8, 6, 3, 1, 2, 5],\n     [8, 5, 1, 7, 9, 2, 6, 4, 3],\n     [1, 3, 8, 9, 4, 7, 2, 5, 6],\n     [6, 9, 2, 3, 5, 1, 8, 7, 4],\n     [7, 4, 5, 2, 8, 6, 3, 1, 9]]\n     >>> sudoku(no_solution) is None\n     True\n    \"\"\"\n    if location := find_empty_location(grid):\n        row, column = location\n    else:\n        # If the location is ``None``, then the grid is solved.\n        return grid\n\n    for digit in range(1, 10):\n        if is_safe(grid, row, column, digit):\n            grid[row][column] = digit\n\n            if sudoku(grid) is not None:\n                return grid\n\n            grid[row][column] = 0\n\n    return None\n\n\ndef print_solution(grid: Matrix) -> None:\n    \"\"\"\n    A function to print the solution in the form\n    of a 9x9 grid\n    \"\"\"\n    for row in grid:\n        for cell in row:\n            print(cell, end=\" \")\n        print()\n\n\nif __name__ == \"__main__\":\n    # make a copy of grid so that you can compare with the unmodified grid\n    for example_grid in (initial_grid, no_solution):\n        print(\"\\nExample grid:\\n\" + \"=\" * 20)\n        print_solution(example_grid)\n        print(\"\\nExample grid solution:\")\n        solution = sudoku(example_grid)\n        if solution is not None:\n            print_solution(solution)\n        else:\n            print(\"Cannot find a solution.\")",
  "children": [
    {
      "value": "\"\"\"\nGiven a partially filled 9x9 2D array, the objective is to fill a 9x9\nsquare grid with digits numbered 1 to 9, so that every row, column, and\nand each of the nine 3x3 sub-grids contains all of the digits.\n\nThis can be solved using Backtracking and is similar to n-queens.\nWe check to see if a cell is safe or not and recursively call the\nfunction on the next column to see if it returns True. if yes, we\nhave solved the puzzle. else, we backtrack and place another number\nin that cell and repeat this process.\n\"\"\"",
      "children": [
        {
          "value": "\"\"\"\nGiven a partially filled 9x9 2D array, the objective is to fill a 9x9\nsquare grid with digits numbered 1 to 9, so that every row, column, and\nand each of the nine 3x3 sub-grids contains all of the digits.\n\nThis can be solved using Backtracking and is similar to n-queens.\nWe check to see if a cell is safe or not and recursively call the\nfunction on the next column to see if it returns True. if yes, we\nhave solved the puzzle. else, we backtrack and place another number\nin that cell and repeat this process.\n\"\"\"",
          "children": [
            {
              "value": "\"\"\"",
              "children": []
            },
            {
              "value": "Given a partially filled 9x9 2D array, the objective is to fill a 9x9\nsquare grid with digits numbered 1 to 9, so that every row, column, and\nand each of the nine 3x3 sub-grids contains all of the digits.\n\nThis can be solved using Backtracking and is similar to n-queens.\nWe check to see if a cell is safe or not and recursively call the\nfunction on the next column to see if it returns True. if yes, we\nhave solved the puzzle. else, we backtrack and place another number\nin that cell and repeat this process.",
              "children": []
            },
            {
              "value": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from __future__ import annotations",
      "children": [
        {
          "value": "annotations",
          "children": [
            {
              "value": "annotations",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "Matrix = list[list[int]]",
      "children": [
        {
          "value": "Matrix = list[list[int]]",
          "children": [
            {
              "value": "Matrix",
              "children": []
            },
            {
              "value": "list[list[int]]",
              "children": [
                {
                  "value": "list",
                  "children": []
                },
                {
                  "value": "list[int]",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# assigning initial values to the grid",
      "children": []
    },
    {
      "value": "initial_grid: Matrix = [\n    [3, 0, 6, 5, 0, 8, 4, 0, 0],\n    [5, 2, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n]",
      "children": [
        {
          "value": "initial_grid: Matrix = [\n    [3, 0, 6, 5, 0, 8, 4, 0, 0],\n    [5, 2, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n]",
          "children": [
            {
              "value": "initial_grid",
              "children": []
            },
            {
              "value": "Matrix",
              "children": [
                {
                  "value": "Matrix",
                  "children": []
                }
              ]
            },
            {
              "value": "[\n    [3, 0, 6, 5, 0, 8, 4, 0, 0],\n    [5, 2, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n]",
              "children": [
                {
                  "value": "[3, 0, 6, 5, 0, 8, 4, 0, 0]",
                  "children": [
                    {
                      "value": "3",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "6",
                      "children": []
                    },
                    {
                      "value": "5",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "8",
                      "children": []
                    },
                    {
                      "value": "4",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[5, 2, 0, 0, 0, 0, 0, 0, 0]",
                  "children": [
                    {
                      "value": "5",
                      "children": []
                    },
                    {
                      "value": "2",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[0, 8, 7, 0, 0, 0, 0, 3, 1]",
                  "children": [
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "8",
                      "children": []
                    },
                    {
                      "value": "7",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "3",
                      "children": []
                    },
                    {
                      "value": "1",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[0, 0, 3, 0, 1, 0, 0, 8, 0]",
                  "children": [
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "3",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "1",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "8",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[9, 0, 0, 8, 6, 3, 0, 0, 5]",
                  "children": [
                    {
                      "value": "9",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "8",
                      "children": []
                    },
                    {
                      "value": "6",
                      "children": []
                    },
                    {
                      "value": "3",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "5",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[0, 5, 0, 0, 9, 0, 6, 0, 0]",
                  "children": [
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "5",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "9",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "6",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[1, 3, 0, 0, 0, 0, 2, 5, 0]",
                  "children": [
                    {
                      "value": "1",
                      "children": []
                    },
                    {
                      "value": "3",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "2",
                      "children": []
                    },
                    {
                      "value": "5",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[0, 0, 0, 0, 0, 0, 0, 7, 4]",
                  "children": [
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "7",
                      "children": []
                    },
                    {
                      "value": "4",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[0, 0, 5, 2, 0, 6, 3, 0, 0]",
                  "children": [
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "5",
                      "children": []
                    },
                    {
                      "value": "2",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "6",
                      "children": []
                    },
                    {
                      "value": "3",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# a grid with no solution",
      "children": []
    },
    {
      "value": "no_solution: Matrix = [\n    [5, 0, 6, 5, 0, 8, 4, 0, 3],\n    [5, 2, 0, 0, 0, 0, 0, 0, 2],\n    [1, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n]",
      "children": [
        {
          "value": "no_solution: Matrix = [\n    [5, 0, 6, 5, 0, 8, 4, 0, 3],\n    [5, 2, 0, 0, 0, 0, 0, 0, 2],\n    [1, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n]",
          "children": [
            {
              "value": "no_solution",
              "children": []
            },
            {
              "value": "Matrix",
              "children": [
                {
                  "value": "Matrix",
                  "children": []
                }
              ]
            },
            {
              "value": "[\n    [5, 0, 6, 5, 0, 8, 4, 0, 3],\n    [5, 2, 0, 0, 0, 0, 0, 0, 2],\n    [1, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n]",
              "children": [
                {
                  "value": "[5, 0, 6, 5, 0, 8, 4, 0, 3]",
                  "children": [
                    {
                      "value": "5",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "6",
                      "children": []
                    },
                    {
                      "value": "5",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "8",
                      "children": []
                    },
                    {
                      "value": "4",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "3",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[5, 2, 0, 0, 0, 0, 0, 0, 2]",
                  "children": [
                    {
                      "value": "5",
                      "children": []
                    },
                    {
                      "value": "2",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "2",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[1, 8, 7, 0, 0, 0, 0, 3, 1]",
                  "children": [
                    {
                      "value": "1",
                      "children": []
                    },
                    {
                      "value": "8",
                      "children": []
                    },
                    {
                      "value": "7",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "3",
                      "children": []
                    },
                    {
                      "value": "1",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[0, 0, 3, 0, 1, 0, 0, 8, 0]",
                  "children": [
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "3",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "1",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "8",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[9, 0, 0, 8, 6, 3, 0, 0, 5]",
                  "children": [
                    {
                      "value": "9",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "8",
                      "children": []
                    },
                    {
                      "value": "6",
                      "children": []
                    },
                    {
                      "value": "3",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "5",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[0, 5, 0, 0, 9, 0, 6, 0, 0]",
                  "children": [
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "5",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "9",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "6",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[1, 3, 0, 0, 0, 0, 2, 5, 0]",
                  "children": [
                    {
                      "value": "1",
                      "children": []
                    },
                    {
                      "value": "3",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "2",
                      "children": []
                    },
                    {
                      "value": "5",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[0, 0, 0, 0, 0, 0, 0, 7, 4]",
                  "children": [
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "7",
                      "children": []
                    },
                    {
                      "value": "4",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "[0, 0, 5, 2, 0, 6, 3, 0, 0]",
                  "children": [
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "5",
                      "children": []
                    },
                    {
                      "value": "2",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "6",
                      "children": []
                    },
                    {
                      "value": "3",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def is_safe(grid: Matrix, row: int, column: int, n: int) -> bool:\n    \"\"\"\n    This function checks the grid to see if each row,\n    column, and the 3x3 subgrids contain the digit 'n'.\n    It returns False if it is not 'safe' (a duplicate digit\n    is found) else returns True if it is 'safe'\n    \"\"\"\n    for i in range(9):\n        if n in {grid[row][i], grid[i][column]}:\n            return False\n\n    for i in range(3):\n        for j in range(3):\n            if grid[(row - row % 3) + i][(column - column % 3) + j] == n:\n                return False\n\n    return True",
      "children": [
        {
          "value": "is_safe",
          "children": []
        },
        {
          "value": "(grid: Matrix, row: int, column: int, n: int)",
          "children": [
            {
              "value": "grid: Matrix",
              "children": [
                {
                  "value": "grid",
                  "children": []
                },
                {
                  "value": "Matrix",
                  "children": [
                    {
                      "value": "Matrix",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "row: int",
              "children": [
                {
                  "value": "row",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "column: int",
              "children": [
                {
                  "value": "column",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "n: int",
              "children": [
                {
                  "value": "n",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "bool",
          "children": [
            {
              "value": "bool",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    This function checks the grid to see if each row,\n    column, and the 3x3 subgrids contain the digit 'n'.\n    It returns False if it is not 'safe' (a duplicate digit\n    is found) else returns True if it is 'safe'\n    \"\"\"\n    for i in range(9):\n        if n in {grid[row][i], grid[i][column]}:\n            return False\n\n    for i in range(3):\n        for j in range(3):\n            if grid[(row - row % 3) + i][(column - column % 3) + j] == n:\n                return False\n\n    return True",
          "children": [
            {
              "value": "\"\"\"\n    This function checks the grid to see if each row,\n    column, and the 3x3 subgrids contain the digit 'n'.\n    It returns False if it is not 'safe' (a duplicate digit\n    is found) else returns True if it is 'safe'\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    This function checks the grid to see if each row,\n    column, and the 3x3 subgrids contain the digit 'n'.\n    It returns False if it is not 'safe' (a duplicate digit\n    is found) else returns True if it is 'safe'\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "This function checks the grid to see if each row,\n    column, and the 3x3 subgrids contain the digit 'n'.\n    It returns False if it is not 'safe' (a duplicate digit\n    is found) else returns True if it is 'safe'",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "for i in range(9):\n        if n in {grid[row][i], grid[i][column]}:\n            return False",
              "children": [
                {
                  "value": "i",
                  "children": []
                },
                {
                  "value": "range(9)",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(9)",
                      "children": [
                        {
                          "value": "9",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if n in {grid[row][i], grid[i][column]}:\n            return False",
                  "children": [
                    {
                      "value": "if n in {grid[row][i], grid[i][column]}:\n            return False",
                      "children": [
                        {
                          "value": "n in {grid[row][i], grid[i][column]}",
                          "children": [
                            {
                              "value": "n",
                              "children": []
                            },
                            {
                              "value": "{grid[row][i], grid[i][column]}",
                              "children": [
                                {
                                  "value": "grid[row][i]",
                                  "children": [
                                    {
                                      "value": "grid[row]",
                                      "children": [
                                        {
                                          "value": "grid",
                                          "children": []
                                        },
                                        {
                                          "value": "row",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "i",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "grid[i][column]",
                                  "children": [
                                    {
                                      "value": "grid[i]",
                                      "children": [
                                        {
                                          "value": "grid",
                                          "children": []
                                        },
                                        {
                                          "value": "i",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "column",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return False",
                          "children": [
                            {
                              "value": "return False",
                              "children": [
                                {
                                  "value": "False",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for i in range(3):\n        for j in range(3):\n            if grid[(row - row % 3) + i][(column - column % 3) + j] == n:\n                return False",
              "children": [
                {
                  "value": "i",
                  "children": []
                },
                {
                  "value": "range(3)",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(3)",
                      "children": [
                        {
                          "value": "3",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "for j in range(3):\n            if grid[(row - row % 3) + i][(column - column % 3) + j] == n:\n                return False",
                  "children": [
                    {
                      "value": "for j in range(3):\n            if grid[(row - row % 3) + i][(column - column % 3) + j] == n:\n                return False",
                      "children": [
                        {
                          "value": "j",
                          "children": []
                        },
                        {
                          "value": "range(3)",
                          "children": [
                            {
                              "value": "range",
                              "children": []
                            },
                            {
                              "value": "(3)",
                              "children": [
                                {
                                  "value": "3",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if grid[(row - row % 3) + i][(column - column % 3) + j] == n:\n                return False",
                          "children": [
                            {
                              "value": "if grid[(row - row % 3) + i][(column - column % 3) + j] == n:\n                return False",
                              "children": [
                                {
                                  "value": "grid[(row - row % 3) + i][(column - column % 3) + j] == n",
                                  "children": [
                                    {
                                      "value": "grid[(row - row % 3) + i][(column - column % 3) + j]",
                                      "children": [
                                        {
                                          "value": "grid[(row - row % 3) + i]",
                                          "children": [
                                            {
                                              "value": "grid",
                                              "children": []
                                            },
                                            {
                                              "value": "(row - row % 3) + i",
                                              "children": [
                                                {
                                                  "value": "(row - row % 3)",
                                                  "children": [
                                                    {
                                                      "value": "row - row % 3",
                                                      "children": [
                                                        {
                                                          "value": "row",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "row % 3",
                                                          "children": [
                                                            {
                                                              "value": "row",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "3",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "i",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(column - column % 3) + j",
                                          "children": [
                                            {
                                              "value": "(column - column % 3)",
                                              "children": [
                                                {
                                                  "value": "column - column % 3",
                                                  "children": [
                                                    {
                                                      "value": "column",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "column % 3",
                                                      "children": [
                                                        {
                                                          "value": "column",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "3",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "j",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "n",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "return False",
                                  "children": [
                                    {
                                      "value": "return False",
                                      "children": [
                                        {
                                          "value": "False",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return True",
              "children": [
                {
                  "value": "True",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def find_empty_location(grid: Matrix) -> tuple[int, int] | None:\n    \"\"\"\n    This function finds an empty location so that we can assign a number\n    for that particular row and column.\n    \"\"\"\n    for i in range(9):\n        for j in range(9):\n            if grid[i][j] == 0:\n                return i, j\n    return None",
      "children": [
        {
          "value": "find_empty_location",
          "children": []
        },
        {
          "value": "(grid: Matrix)",
          "children": [
            {
              "value": "grid: Matrix",
              "children": [
                {
                  "value": "grid",
                  "children": []
                },
                {
                  "value": "Matrix",
                  "children": [
                    {
                      "value": "Matrix",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "tuple[int, int] | None",
          "children": [
            {
              "value": "tuple[int, int] | None",
              "children": [
                {
                  "value": "tuple[int, int]",
                  "children": [
                    {
                      "value": "tuple[int, int]",
                      "children": [
                        {
                          "value": "tuple",
                          "children": []
                        },
                        {
                          "value": "[int, int]",
                          "children": [
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": [
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    This function finds an empty location so that we can assign a number\n    for that particular row and column.\n    \"\"\"\n    for i in range(9):\n        for j in range(9):\n            if grid[i][j] == 0:\n                return i, j\n    return None",
          "children": [
            {
              "value": "\"\"\"\n    This function finds an empty location so that we can assign a number\n    for that particular row and column.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    This function finds an empty location so that we can assign a number\n    for that particular row and column.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "This function finds an empty location so that we can assign a number\n    for that particular row and column.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "for i in range(9):\n        for j in range(9):\n            if grid[i][j] == 0:\n                return i, j",
              "children": [
                {
                  "value": "i",
                  "children": []
                },
                {
                  "value": "range(9)",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(9)",
                      "children": [
                        {
                          "value": "9",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "for j in range(9):\n            if grid[i][j] == 0:\n                return i, j",
                  "children": [
                    {
                      "value": "for j in range(9):\n            if grid[i][j] == 0:\n                return i, j",
                      "children": [
                        {
                          "value": "j",
                          "children": []
                        },
                        {
                          "value": "range(9)",
                          "children": [
                            {
                              "value": "range",
                              "children": []
                            },
                            {
                              "value": "(9)",
                              "children": [
                                {
                                  "value": "9",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if grid[i][j] == 0:\n                return i, j",
                          "children": [
                            {
                              "value": "if grid[i][j] == 0:\n                return i, j",
                              "children": [
                                {
                                  "value": "grid[i][j] == 0",
                                  "children": [
                                    {
                                      "value": "grid[i][j]",
                                      "children": [
                                        {
                                          "value": "grid[i]",
                                          "children": [
                                            {
                                              "value": "grid",
                                              "children": []
                                            },
                                            {
                                              "value": "i",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "j",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "return i, j",
                                  "children": [
                                    {
                                      "value": "return i, j",
                                      "children": [
                                        {
                                          "value": "i, j",
                                          "children": [
                                            {
                                              "value": "i",
                                              "children": []
                                            },
                                            {
                                              "value": "j",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return None",
              "children": [
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def sudoku(grid: Matrix) -> Matrix | None:\n    \"\"\"\n    Takes a partially filled-in grid and attempts to assign values to\n    all unassigned locations in such a way to meet the requirements\n    for Sudoku solution (non-duplication across rows, columns, and boxes)\n\n    >>> sudoku(initial_grid)  # doctest: +NORMALIZE_WHITESPACE\n    [[3, 1, 6, 5, 7, 8, 4, 9, 2],\n     [5, 2, 9, 1, 3, 4, 7, 6, 8],\n     [4, 8, 7, 6, 2, 9, 5, 3, 1],\n     [2, 6, 3, 4, 1, 5, 9, 8, 7],\n     [9, 7, 4, 8, 6, 3, 1, 2, 5],\n     [8, 5, 1, 7, 9, 2, 6, 4, 3],\n     [1, 3, 8, 9, 4, 7, 2, 5, 6],\n     [6, 9, 2, 3, 5, 1, 8, 7, 4],\n     [7, 4, 5, 2, 8, 6, 3, 1, 9]]\n     >>> sudoku(no_solution) is None\n     True\n    \"\"\"\n    if location := find_empty_location(grid):\n        row, column = location\n    else:\n        # If the location is ``None``, then the grid is solved.\n        return grid\n\n    for digit in range(1, 10):\n        if is_safe(grid, row, column, digit):\n            grid[row][column] = digit\n\n            if sudoku(grid) is not None:\n                return grid\n\n            grid[row][column] = 0\n\n    return None",
      "children": [
        {
          "value": "sudoku",
          "children": []
        },
        {
          "value": "(grid: Matrix)",
          "children": [
            {
              "value": "grid: Matrix",
              "children": [
                {
                  "value": "grid",
                  "children": []
                },
                {
                  "value": "Matrix",
                  "children": [
                    {
                      "value": "Matrix",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Matrix | None",
          "children": [
            {
              "value": "Matrix | None",
              "children": [
                {
                  "value": "Matrix",
                  "children": []
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Takes a partially filled-in grid and attempts to assign values to\n    all unassigned locations in such a way to meet the requirements\n    for Sudoku solution (non-duplication across rows, columns, and boxes)\n\n    >>> sudoku(initial_grid)  # doctest: +NORMALIZE_WHITESPACE\n    [[3, 1, 6, 5, 7, 8, 4, 9, 2],\n     [5, 2, 9, 1, 3, 4, 7, 6, 8],\n     [4, 8, 7, 6, 2, 9, 5, 3, 1],\n     [2, 6, 3, 4, 1, 5, 9, 8, 7],\n     [9, 7, 4, 8, 6, 3, 1, 2, 5],\n     [8, 5, 1, 7, 9, 2, 6, 4, 3],\n     [1, 3, 8, 9, 4, 7, 2, 5, 6],\n     [6, 9, 2, 3, 5, 1, 8, 7, 4],\n     [7, 4, 5, 2, 8, 6, 3, 1, 9]]\n     >>> sudoku(no_solution) is None\n     True\n    \"\"\"\n    if location := find_empty_location(grid):\n        row, column = location\n    else:\n        # If the location is ``None``, then the grid is solved.\n        return grid\n\n    for digit in range(1, 10):\n        if is_safe(grid, row, column, digit):\n            grid[row][column] = digit\n\n            if sudoku(grid) is not None:\n                return grid\n\n            grid[row][column] = 0\n\n    return None",
          "children": [
            {
              "value": "\"\"\"\n    Takes a partially filled-in grid and attempts to assign values to\n    all unassigned locations in such a way to meet the requirements\n    for Sudoku solution (non-duplication across rows, columns, and boxes)\n\n    >>> sudoku(initial_grid)  # doctest: +NORMALIZE_WHITESPACE\n    [[3, 1, 6, 5, 7, 8, 4, 9, 2],\n     [5, 2, 9, 1, 3, 4, 7, 6, 8],\n     [4, 8, 7, 6, 2, 9, 5, 3, 1],\n     [2, 6, 3, 4, 1, 5, 9, 8, 7],\n     [9, 7, 4, 8, 6, 3, 1, 2, 5],\n     [8, 5, 1, 7, 9, 2, 6, 4, 3],\n     [1, 3, 8, 9, 4, 7, 2, 5, 6],\n     [6, 9, 2, 3, 5, 1, 8, 7, 4],\n     [7, 4, 5, 2, 8, 6, 3, 1, 9]]\n     >>> sudoku(no_solution) is None\n     True\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Takes a partially filled-in grid and attempts to assign values to\n    all unassigned locations in such a way to meet the requirements\n    for Sudoku solution (non-duplication across rows, columns, and boxes)\n\n    >>> sudoku(initial_grid)  # doctest: +NORMALIZE_WHITESPACE\n    [[3, 1, 6, 5, 7, 8, 4, 9, 2],\n     [5, 2, 9, 1, 3, 4, 7, 6, 8],\n     [4, 8, 7, 6, 2, 9, 5, 3, 1],\n     [2, 6, 3, 4, 1, 5, 9, 8, 7],\n     [9, 7, 4, 8, 6, 3, 1, 2, 5],\n     [8, 5, 1, 7, 9, 2, 6, 4, 3],\n     [1, 3, 8, 9, 4, 7, 2, 5, 6],\n     [6, 9, 2, 3, 5, 1, 8, 7, 4],\n     [7, 4, 5, 2, 8, 6, 3, 1, 9]]\n     >>> sudoku(no_solution) is None\n     True\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Takes a partially filled-in grid and attempts to assign values to\n    all unassigned locations in such a way to meet the requirements\n    for Sudoku solution (non-duplication across rows, columns, and boxes)\n\n    >>> sudoku(initial_grid)  # doctest: +NORMALIZE_WHITESPACE\n    [[3, 1, 6, 5, 7, 8, 4, 9, 2],\n     [5, 2, 9, 1, 3, 4, 7, 6, 8],\n     [4, 8, 7, 6, 2, 9, 5, 3, 1],\n     [2, 6, 3, 4, 1, 5, 9, 8, 7],\n     [9, 7, 4, 8, 6, 3, 1, 2, 5],\n     [8, 5, 1, 7, 9, 2, 6, 4, 3],\n     [1, 3, 8, 9, 4, 7, 2, 5, 6],\n     [6, 9, 2, 3, 5, 1, 8, 7, 4],\n     [7, 4, 5, 2, 8, 6, 3, 1, 9]]\n     >>> sudoku(no_solution) is None\n     True",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if location := find_empty_location(grid):\n        row, column = location\n    else:\n        # If the location is ``None``, then the grid is solved.\n        return grid",
              "children": [
                {
                  "value": "location := find_empty_location(grid)",
                  "children": [
                    {
                      "value": "location",
                      "children": []
                    },
                    {
                      "value": "find_empty_location(grid)",
                      "children": [
                        {
                          "value": "find_empty_location",
                          "children": []
                        },
                        {
                          "value": "(grid)",
                          "children": [
                            {
                              "value": "grid",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "row, column = location",
                  "children": [
                    {
                      "value": "row, column = location",
                      "children": [
                        {
                          "value": "row, column = location",
                          "children": [
                            {
                              "value": "row, column",
                              "children": [
                                {
                                  "value": "row",
                                  "children": []
                                },
                                {
                                  "value": "column",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "location",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        # If the location is ``None``, then the grid is solved.\n        return grid",
                  "children": [
                    {
                      "value": "# If the location is ``None``, then the grid is solved.",
                      "children": []
                    },
                    {
                      "value": "return grid",
                      "children": [
                        {
                          "value": "return grid",
                          "children": [
                            {
                              "value": "grid",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for digit in range(1, 10):\n        if is_safe(grid, row, column, digit):\n            grid[row][column] = digit\n\n            if sudoku(grid) is not None:\n                return grid\n\n            grid[row][column] = 0",
              "children": [
                {
                  "value": "digit",
                  "children": []
                },
                {
                  "value": "range(1, 10)",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(1, 10)",
                      "children": [
                        {
                          "value": "1",
                          "children": []
                        },
                        {
                          "value": "10",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if is_safe(grid, row, column, digit):\n            grid[row][column] = digit\n\n            if sudoku(grid) is not None:\n                return grid\n\n            grid[row][column] = 0",
                  "children": [
                    {
                      "value": "if is_safe(grid, row, column, digit):\n            grid[row][column] = digit\n\n            if sudoku(grid) is not None:\n                return grid\n\n            grid[row][column] = 0",
                      "children": [
                        {
                          "value": "is_safe(grid, row, column, digit)",
                          "children": [
                            {
                              "value": "is_safe",
                              "children": []
                            },
                            {
                              "value": "(grid, row, column, digit)",
                              "children": [
                                {
                                  "value": "grid",
                                  "children": []
                                },
                                {
                                  "value": "row",
                                  "children": []
                                },
                                {
                                  "value": "column",
                                  "children": []
                                },
                                {
                                  "value": "digit",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "grid[row][column] = digit\n\n            if sudoku(grid) is not None:\n                return grid\n\n            grid[row][column] = 0",
                          "children": [
                            {
                              "value": "grid[row][column] = digit",
                              "children": [
                                {
                                  "value": "grid[row][column] = digit",
                                  "children": [
                                    {
                                      "value": "grid[row][column]",
                                      "children": [
                                        {
                                          "value": "grid[row]",
                                          "children": [
                                            {
                                              "value": "grid",
                                              "children": []
                                            },
                                            {
                                              "value": "row",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "column",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "digit",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if sudoku(grid) is not None:\n                return grid",
                              "children": [
                                {
                                  "value": "sudoku(grid) is not None",
                                  "children": [
                                    {
                                      "value": "sudoku(grid)",
                                      "children": [
                                        {
                                          "value": "sudoku",
                                          "children": []
                                        },
                                        {
                                          "value": "(grid)",
                                          "children": [
                                            {
                                              "value": "grid",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "return grid",
                                  "children": [
                                    {
                                      "value": "return grid",
                                      "children": [
                                        {
                                          "value": "grid",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "grid[row][column] = 0",
                              "children": [
                                {
                                  "value": "grid[row][column] = 0",
                                  "children": [
                                    {
                                      "value": "grid[row][column]",
                                      "children": [
                                        {
                                          "value": "grid[row]",
                                          "children": [
                                            {
                                              "value": "grid",
                                              "children": []
                                            },
                                            {
                                              "value": "row",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "column",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return None",
              "children": [
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def print_solution(grid: Matrix) -> None:\n    \"\"\"\n    A function to print the solution in the form\n    of a 9x9 grid\n    \"\"\"\n    for row in grid:\n        for cell in row:\n            print(cell, end=\" \")\n        print()",
      "children": [
        {
          "value": "print_solution",
          "children": []
        },
        {
          "value": "(grid: Matrix)",
          "children": [
            {
              "value": "grid: Matrix",
              "children": [
                {
                  "value": "grid",
                  "children": []
                },
                {
                  "value": "Matrix",
                  "children": [
                    {
                      "value": "Matrix",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    A function to print the solution in the form\n    of a 9x9 grid\n    \"\"\"\n    for row in grid:\n        for cell in row:\n            print(cell, end=\" \")\n        print()",
          "children": [
            {
              "value": "\"\"\"\n    A function to print the solution in the form\n    of a 9x9 grid\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    A function to print the solution in the form\n    of a 9x9 grid\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "A function to print the solution in the form\n    of a 9x9 grid",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "for row in grid:\n        for cell in row:\n            print(cell, end=\" \")\n        print()",
              "children": [
                {
                  "value": "row",
                  "children": []
                },
                {
                  "value": "grid",
                  "children": []
                },
                {
                  "value": "for cell in row:\n            print(cell, end=\" \")\n        print()",
                  "children": [
                    {
                      "value": "for cell in row:\n            print(cell, end=\" \")",
                      "children": [
                        {
                          "value": "cell",
                          "children": []
                        },
                        {
                          "value": "row",
                          "children": []
                        },
                        {
                          "value": "print(cell, end=\" \")",
                          "children": [
                            {
                              "value": "print(cell, end=\" \")",
                              "children": [
                                {
                                  "value": "print(cell, end=\" \")",
                                  "children": [
                                    {
                                      "value": "print",
                                      "children": []
                                    },
                                    {
                                      "value": "(cell, end=\" \")",
                                      "children": [
                                        {
                                          "value": "cell",
                                          "children": []
                                        },
                                        {
                                          "value": "end=\" \"",
                                          "children": [
                                            {
                                              "value": "end",
                                              "children": []
                                            },
                                            {
                                              "value": "\" \"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "print()",
                      "children": [
                        {
                          "value": "print()",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == \"__main__\":\n    # make a copy of grid so that you can compare with the unmodified grid\n    for example_grid in (initial_grid, no_solution):\n        print(\"\\nExample grid:\\n\" + \"=\" * 20)\n        print_solution(example_grid)\n        print(\"\\nExample grid solution:\")\n        solution = sudoku(example_grid)\n        if solution is not None:\n            print_solution(solution)\n        else:\n            print(\"Cannot find a solution.\")",
      "children": [
        {
          "value": "__name__ == \"__main__\"",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "\"__main__\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "# make a copy of grid so that you can compare with the unmodified grid",
          "children": []
        },
        {
          "value": "for example_grid in (initial_grid, no_solution):\n        print(\"\\nExample grid:\\n\" + \"=\" * 20)\n        print_solution(example_grid)\n        print(\"\\nExample grid solution:\")\n        solution = sudoku(example_grid)\n        if solution is not None:\n            print_solution(solution)\n        else:\n            print(\"Cannot find a solution.\")",
          "children": [
            {
              "value": "for example_grid in (initial_grid, no_solution):\n        print(\"\\nExample grid:\\n\" + \"=\" * 20)\n        print_solution(example_grid)\n        print(\"\\nExample grid solution:\")\n        solution = sudoku(example_grid)\n        if solution is not None:\n            print_solution(solution)\n        else:\n            print(\"Cannot find a solution.\")",
              "children": [
                {
                  "value": "example_grid",
                  "children": []
                },
                {
                  "value": "(initial_grid, no_solution)",
                  "children": [
                    {
                      "value": "initial_grid",
                      "children": []
                    },
                    {
                      "value": "no_solution",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "print(\"\\nExample grid:\\n\" + \"=\" * 20)\n        print_solution(example_grid)\n        print(\"\\nExample grid solution:\")\n        solution = sudoku(example_grid)\n        if solution is not None:\n            print_solution(solution)\n        else:\n            print(\"Cannot find a solution.\")",
                  "children": [
                    {
                      "value": "print(\"\\nExample grid:\\n\" + \"=\" * 20)",
                      "children": [
                        {
                          "value": "print(\"\\nExample grid:\\n\" + \"=\" * 20)",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "(\"\\nExample grid:\\n\" + \"=\" * 20)",
                              "children": [
                                {
                                  "value": "\"\\nExample grid:\\n\" + \"=\" * 20",
                                  "children": [
                                    {
                                      "value": "\"\\nExample grid:\\n\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "\\nExample grid:\\n",
                                          "children": [
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"=\" * 20",
                                      "children": [
                                        {
                                          "value": "\"=\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "=",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "20",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "print_solution(example_grid)",
                      "children": [
                        {
                          "value": "print_solution(example_grid)",
                          "children": [
                            {
                              "value": "print_solution",
                              "children": []
                            },
                            {
                              "value": "(example_grid)",
                              "children": [
                                {
                                  "value": "example_grid",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "print(\"\\nExample grid solution:\")",
                      "children": [
                        {
                          "value": "print(\"\\nExample grid solution:\")",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "(\"\\nExample grid solution:\")",
                              "children": [
                                {
                                  "value": "\"\\nExample grid solution:\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "\\nExample grid solution:",
                                      "children": [
                                        {
                                          "value": "\\n",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "solution = sudoku(example_grid)",
                      "children": [
                        {
                          "value": "solution = sudoku(example_grid)",
                          "children": [
                            {
                              "value": "solution",
                              "children": []
                            },
                            {
                              "value": "sudoku(example_grid)",
                              "children": [
                                {
                                  "value": "sudoku",
                                  "children": []
                                },
                                {
                                  "value": "(example_grid)",
                                  "children": [
                                    {
                                      "value": "example_grid",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if solution is not None:\n            print_solution(solution)\n        else:\n            print(\"Cannot find a solution.\")",
                      "children": [
                        {
                          "value": "solution is not None",
                          "children": [
                            {
                              "value": "solution",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "print_solution(solution)",
                          "children": [
                            {
                              "value": "print_solution(solution)",
                              "children": [
                                {
                                  "value": "print_solution(solution)",
                                  "children": [
                                    {
                                      "value": "print_solution",
                                      "children": []
                                    },
                                    {
                                      "value": "(solution)",
                                      "children": [
                                        {
                                          "value": "solution",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            print(\"Cannot find a solution.\")",
                          "children": [
                            {
                              "value": "print(\"Cannot find a solution.\")",
                              "children": [
                                {
                                  "value": "print(\"Cannot find a solution.\")",
                                  "children": [
                                    {
                                      "value": "print(\"Cannot find a solution.\")",
                                      "children": [
                                        {
                                          "value": "print",
                                          "children": []
                                        },
                                        {
                                          "value": "(\"Cannot find a solution.\")",
                                          "children": [
                                            {
                                              "value": "\"Cannot find a solution.\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Cannot find a solution.",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}