{
  "value": "import subprocess\nimport sys\nimport time\n\n\ndef wait_for_postgres(max_retries=5, delay=5):\n    for _ in range(max_retries):\n        try:\n            result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )\n            if \"accepting connections\" in result.stdout:\n                print(\"PostgreSQL is ready.\")\n                return True\n        except subprocess.CalledProcessError:\n            print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n            time.sleep(delay)\n    print(\"Failed to connect to PostgreSQL.\")\n    return False\n\n\ndef run_command(command, check=True):\n    try:\n        subprocess.run(command, check=check)\n    except subprocess.CalledProcessError as e:\n        print(f\"Command failed: {e}\")\n        sys.exit(1)\n\n\ndef test():\n    # Start PostgreSQL with Docker Compose\n    run_command(\n        [\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]\n    )\n\n    if not wait_for_postgres():\n        run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n        sys.exit(1)\n\n    # Run Prisma migrations\n    run_command([\"prisma\", \"migrate\", \"dev\"])\n\n    # Run the tests\n    result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)\n\n    run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n\n    sys.exit(result.returncode)",
  "children": [
    {
      "value": "import subprocess",
      "children": [
        {
          "value": "subprocess",
          "children": [
            {
              "value": "subprocess",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import sys",
      "children": [
        {
          "value": "sys",
          "children": [
            {
              "value": "sys",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import time",
      "children": [
        {
          "value": "time",
          "children": [
            {
              "value": "time",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def wait_for_postgres(max_retries=5, delay=5):\n    for _ in range(max_retries):\n        try:\n            result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )\n            if \"accepting connections\" in result.stdout:\n                print(\"PostgreSQL is ready.\")\n                return True\n        except subprocess.CalledProcessError:\n            print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n            time.sleep(delay)\n    print(\"Failed to connect to PostgreSQL.\")\n    return False",
      "children": [
        {
          "value": "wait_for_postgres",
          "children": []
        },
        {
          "value": "(max_retries=5, delay=5)",
          "children": [
            {
              "value": "max_retries=5",
              "children": [
                {
                  "value": "max_retries",
                  "children": []
                },
                {
                  "value": "5",
                  "children": []
                }
              ]
            },
            {
              "value": "delay=5",
              "children": [
                {
                  "value": "delay",
                  "children": []
                },
                {
                  "value": "5",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "for _ in range(max_retries):\n        try:\n            result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )\n            if \"accepting connections\" in result.stdout:\n                print(\"PostgreSQL is ready.\")\n                return True\n        except subprocess.CalledProcessError:\n            print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n            time.sleep(delay)\n    print(\"Failed to connect to PostgreSQL.\")\n    return False",
          "children": [
            {
              "value": "for _ in range(max_retries):\n        try:\n            result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )\n            if \"accepting connections\" in result.stdout:\n                print(\"PostgreSQL is ready.\")\n                return True\n        except subprocess.CalledProcessError:\n            print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n            time.sleep(delay)",
              "children": [
                {
                  "value": "_",
                  "children": []
                },
                {
                  "value": "range(max_retries)",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(max_retries)",
                      "children": [
                        {
                          "value": "max_retries",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n            result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )\n            if \"accepting connections\" in result.stdout:\n                print(\"PostgreSQL is ready.\")\n                return True\n        except subprocess.CalledProcessError:\n            print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n            time.sleep(delay)",
                  "children": [
                    {
                      "value": "try:\n            result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )\n            if \"accepting connections\" in result.stdout:\n                print(\"PostgreSQL is ready.\")\n                return True\n        except subprocess.CalledProcessError:\n            print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n            time.sleep(delay)",
                      "children": [
                        {
                          "value": "result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )\n            if \"accepting connections\" in result.stdout:\n                print(\"PostgreSQL is ready.\")\n                return True",
                          "children": [
                            {
                              "value": "result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )",
                              "children": [
                                {
                                  "value": "result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )",
                                  "children": [
                                    {
                                      "value": "result",
                                      "children": []
                                    },
                                    {
                                      "value": "subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )",
                                      "children": [
                                        {
                                          "value": "subprocess.run",
                                          "children": [
                                            {
                                              "value": "subprocess",
                                              "children": []
                                            },
                                            {
                                              "value": "run",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )",
                                          "children": [
                                            {
                                              "value": "[\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ]",
                                              "children": [
                                                {
                                                  "value": "\"docker\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "docker",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"compose\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "compose",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"-f\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "-f",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"docker-compose.test.yaml\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "docker-compose.test.yaml",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"exec\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "exec",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"postgres-test\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "postgres-test",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"pg_isready\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "pg_isready",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"-U\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "-U",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"postgres\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "postgres",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"-d\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "-d",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"postgres\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "postgres",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "check=True",
                                              "children": [
                                                {
                                                  "value": "check",
                                                  "children": []
                                                },
                                                {
                                                  "value": "True",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "capture_output=True",
                                              "children": [
                                                {
                                                  "value": "capture_output",
                                                  "children": []
                                                },
                                                {
                                                  "value": "True",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "text=True",
                                              "children": [
                                                {
                                                  "value": "text",
                                                  "children": []
                                                },
                                                {
                                                  "value": "True",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if \"accepting connections\" in result.stdout:\n                print(\"PostgreSQL is ready.\")\n                return True",
                              "children": [
                                {
                                  "value": "\"accepting connections\" in result.stdout",
                                  "children": [
                                    {
                                      "value": "\"accepting connections\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "accepting connections",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "result.stdout",
                                      "children": [
                                        {
                                          "value": "result",
                                          "children": []
                                        },
                                        {
                                          "value": "stdout",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "print(\"PostgreSQL is ready.\")\n                return True",
                                  "children": [
                                    {
                                      "value": "print(\"PostgreSQL is ready.\")",
                                      "children": [
                                        {
                                          "value": "print(\"PostgreSQL is ready.\")",
                                          "children": [
                                            {
                                              "value": "print",
                                              "children": []
                                            },
                                            {
                                              "value": "(\"PostgreSQL is ready.\")",
                                              "children": [
                                                {
                                                  "value": "\"PostgreSQL is ready.\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "PostgreSQL is ready.",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "return True",
                                      "children": [
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except subprocess.CalledProcessError:\n            print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n            time.sleep(delay)",
                          "children": [
                            {
                              "value": "subprocess.CalledProcessError",
                              "children": [
                                {
                                  "value": "subprocess",
                                  "children": []
                                },
                                {
                                  "value": "CalledProcessError",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n            time.sleep(delay)",
                              "children": [
                                {
                                  "value": "print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")",
                                  "children": [
                                    {
                                      "value": "print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")",
                                      "children": [
                                        {
                                          "value": "print",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")",
                                          "children": [
                                            {
                                              "value": "f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "PostgreSQL is not ready yet. Retrying in",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{delay}",
                                                  "children": [
                                                    {
                                                      "value": "delay",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "seconds...",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "time.sleep(delay)",
                                  "children": [
                                    {
                                      "value": "time.sleep(delay)",
                                      "children": [
                                        {
                                          "value": "time.sleep",
                                          "children": [
                                            {
                                              "value": "time",
                                              "children": []
                                            },
                                            {
                                              "value": "sleep",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(delay)",
                                          "children": [
                                            {
                                              "value": "delay",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "print(\"Failed to connect to PostgreSQL.\")",
              "children": [
                {
                  "value": "print(\"Failed to connect to PostgreSQL.\")",
                  "children": [
                    {
                      "value": "print",
                      "children": []
                    },
                    {
                      "value": "(\"Failed to connect to PostgreSQL.\")",
                      "children": [
                        {
                          "value": "\"Failed to connect to PostgreSQL.\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Failed to connect to PostgreSQL.",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return False",
              "children": [
                {
                  "value": "False",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def run_command(command, check=True):\n    try:\n        subprocess.run(command, check=check)\n    except subprocess.CalledProcessError as e:\n        print(f\"Command failed: {e}\")\n        sys.exit(1)",
      "children": [
        {
          "value": "run_command",
          "children": []
        },
        {
          "value": "(command, check=True)",
          "children": [
            {
              "value": "command",
              "children": []
            },
            {
              "value": "check=True",
              "children": [
                {
                  "value": "check",
                  "children": []
                },
                {
                  "value": "True",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "try:\n        subprocess.run(command, check=check)\n    except subprocess.CalledProcessError as e:\n        print(f\"Command failed: {e}\")\n        sys.exit(1)",
          "children": [
            {
              "value": "try:\n        subprocess.run(command, check=check)\n    except subprocess.CalledProcessError as e:\n        print(f\"Command failed: {e}\")\n        sys.exit(1)",
              "children": [
                {
                  "value": "subprocess.run(command, check=check)",
                  "children": [
                    {
                      "value": "subprocess.run(command, check=check)",
                      "children": [
                        {
                          "value": "subprocess.run(command, check=check)",
                          "children": [
                            {
                              "value": "subprocess.run",
                              "children": [
                                {
                                  "value": "subprocess",
                                  "children": []
                                },
                                {
                                  "value": "run",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(command, check=check)",
                              "children": [
                                {
                                  "value": "command",
                                  "children": []
                                },
                                {
                                  "value": "check=check",
                                  "children": [
                                    {
                                      "value": "check",
                                      "children": []
                                    },
                                    {
                                      "value": "check",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except subprocess.CalledProcessError as e:\n        print(f\"Command failed: {e}\")\n        sys.exit(1)",
                  "children": [
                    {
                      "value": "subprocess.CalledProcessError as e",
                      "children": [
                        {
                          "value": "subprocess.CalledProcessError",
                          "children": [
                            {
                              "value": "subprocess",
                              "children": []
                            },
                            {
                              "value": "CalledProcessError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "print(f\"Command failed: {e}\")\n        sys.exit(1)",
                      "children": [
                        {
                          "value": "print(f\"Command failed: {e}\")",
                          "children": [
                            {
                              "value": "print(f\"Command failed: {e}\")",
                              "children": [
                                {
                                  "value": "print",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Command failed: {e}\")",
                                  "children": [
                                    {
                                      "value": "f\"Command failed: {e}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Command failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{e}",
                                          "children": [
                                            {
                                              "value": "e",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "sys.exit(1)",
                          "children": [
                            {
                              "value": "sys.exit(1)",
                              "children": [
                                {
                                  "value": "sys.exit",
                                  "children": [
                                    {
                                      "value": "sys",
                                      "children": []
                                    },
                                    {
                                      "value": "exit",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(1)",
                                  "children": [
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def test():\n    # Start PostgreSQL with Docker Compose\n    run_command(\n        [\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]\n    )\n\n    if not wait_for_postgres():\n        run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n        sys.exit(1)\n\n    # Run Prisma migrations\n    run_command([\"prisma\", \"migrate\", \"dev\"])\n\n    # Run the tests\n    result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)\n\n    run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n\n    sys.exit(result.returncode)",
      "children": [
        {
          "value": "test",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "# Start PostgreSQL with Docker Compose",
          "children": []
        },
        {
          "value": "run_command(\n        [\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]\n    )\n\n    if not wait_for_postgres():\n        run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n        sys.exit(1)\n\n    # Run Prisma migrations\n    run_command([\"prisma\", \"migrate\", \"dev\"])\n\n    # Run the tests\n    result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)\n\n    run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n\n    sys.exit(result.returncode)",
          "children": [
            {
              "value": "run_command(\n        [\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]\n    )",
              "children": [
                {
                  "value": "run_command(\n        [\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]\n    )",
                  "children": [
                    {
                      "value": "run_command",
                      "children": []
                    },
                    {
                      "value": "(\n        [\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]\n    )",
                      "children": [
                        {
                          "value": "[\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]",
                          "children": [
                            {
                              "value": "\"docker\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "docker",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"compose\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "compose",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"-f\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "-f",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"docker-compose.test.yaml\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "docker-compose.test.yaml",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"up\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "up",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"-d\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "-d",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"postgres-test\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "postgres-test",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not wait_for_postgres():\n        run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n        sys.exit(1)",
              "children": [
                {
                  "value": "not wait_for_postgres()",
                  "children": [
                    {
                      "value": "wait_for_postgres()",
                      "children": [
                        {
                          "value": "wait_for_postgres",
                          "children": []
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n        sys.exit(1)",
                  "children": [
                    {
                      "value": "run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])",
                      "children": [
                        {
                          "value": "run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])",
                          "children": [
                            {
                              "value": "run_command",
                              "children": []
                            },
                            {
                              "value": "([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])",
                              "children": [
                                {
                                  "value": "[\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"]",
                                  "children": [
                                    {
                                      "value": "\"docker\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "docker",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"compose\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "compose",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"-f\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "-f",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"docker-compose.test.yaml\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "docker-compose.test.yaml",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"down\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "down",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "sys.exit(1)",
                      "children": [
                        {
                          "value": "sys.exit(1)",
                          "children": [
                            {
                              "value": "sys.exit",
                              "children": [
                                {
                                  "value": "sys",
                                  "children": []
                                },
                                {
                                  "value": "exit",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(1)",
                              "children": [
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Run Prisma migrations",
              "children": []
            },
            {
              "value": "run_command([\"prisma\", \"migrate\", \"dev\"])",
              "children": [
                {
                  "value": "run_command([\"prisma\", \"migrate\", \"dev\"])",
                  "children": [
                    {
                      "value": "run_command",
                      "children": []
                    },
                    {
                      "value": "([\"prisma\", \"migrate\", \"dev\"])",
                      "children": [
                        {
                          "value": "[\"prisma\", \"migrate\", \"dev\"]",
                          "children": [
                            {
                              "value": "\"prisma\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"migrate\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "migrate",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"dev\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "dev",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Run the tests",
              "children": []
            },
            {
              "value": "result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)",
              "children": [
                {
                  "value": "result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)",
                  "children": [
                    {
                      "value": "result",
                      "children": []
                    },
                    {
                      "value": "subprocess.run([\"pytest\"] + sys.argv[1:], check=False)",
                      "children": [
                        {
                          "value": "subprocess.run",
                          "children": [
                            {
                              "value": "subprocess",
                              "children": []
                            },
                            {
                              "value": "run",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "([\"pytest\"] + sys.argv[1:], check=False)",
                          "children": [
                            {
                              "value": "[\"pytest\"] + sys.argv[1:]",
                              "children": [
                                {
                                  "value": "[\"pytest\"]",
                                  "children": [
                                    {
                                      "value": "\"pytest\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "pytest",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "sys.argv[1:]",
                                  "children": [
                                    {
                                      "value": "sys.argv",
                                      "children": [
                                        {
                                          "value": "sys",
                                          "children": []
                                        },
                                        {
                                          "value": "argv",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "1:",
                                      "children": [
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "check=False",
                              "children": [
                                {
                                  "value": "check",
                                  "children": []
                                },
                                {
                                  "value": "False",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])",
              "children": [
                {
                  "value": "run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])",
                  "children": [
                    {
                      "value": "run_command",
                      "children": []
                    },
                    {
                      "value": "([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])",
                      "children": [
                        {
                          "value": "[\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"]",
                          "children": [
                            {
                              "value": "\"docker\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "docker",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"compose\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "compose",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"-f\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "-f",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"docker-compose.test.yaml\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "docker-compose.test.yaml",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"down\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "down",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "sys.exit(result.returncode)",
              "children": [
                {
                  "value": "sys.exit(result.returncode)",
                  "children": [
                    {
                      "value": "sys.exit",
                      "children": [
                        {
                          "value": "sys",
                          "children": []
                        },
                        {
                          "value": "exit",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(result.returncode)",
                      "children": [
                        {
                          "value": "result.returncode",
                          "children": [
                            {
                              "value": "result",
                              "children": []
                            },
                            {
                              "value": "returncode",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}