{
  "value": "import hashlib\nimport hmac\nimport logging\n\nimport requests\nfrom fastapi import HTTPException, Request\nfrom strenum import StrEnum\n\nfrom backend.data import integrations\nfrom backend.data.model import Credentials\nfrom backend.integrations.providers import ProviderName\n\nfrom ._base import BaseWebhooksManager\n\nlogger = logging.getLogger(__name__)\n\n\n# --8<-- [start:GithubWebhooksManager]\nclass GithubWebhookType(StrEnum):\n    REPO = \"repo\"\n\n\nclass GithubWebhooksManager(BaseWebhooksManager):\n    PROVIDER_NAME = ProviderName.GITHUB\n\n    WebhookType = GithubWebhookType\n\n    GITHUB_API_URL = \"https://api.github.com\"\n    GITHUB_API_DEFAULT_HEADERS = {\"Accept\": \"application/vnd.github.v3+json\"}\n\n    @classmethod\n    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n        if not (event_type := request.headers.get(\"X-GitHub-Event\")):\n            raise HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )\n\n        if not (signature_header := request.headers.get(\"X-Hub-Signature-256\")):\n            raise HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )\n\n        payload_body = await request.body()\n        hash_object = hmac.new(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )\n        expected_signature = \"sha256=\" + hash_object.hexdigest()\n\n        if not hmac.compare_digest(expected_signature, signature_header):\n            raise HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )\n\n        payload = await request.json()\n        if action := payload.get(\"action\"):\n            event_type += f\".{action}\"\n\n        return payload, event_type\n\n    async def trigger_ping(\n        self, webhook: integrations.Webhook, credentials: Credentials | None\n    ) -> None:\n        if not credentials:\n            raise ValueError(\"Credentials are required but were not passed\")\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        repo, github_hook_id = webhook.resource, webhook.provider_webhook_id\n        ping_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\"\n\n        response = requests.post(ping_url, headers=headers)\n\n        if response.status_code != 204:\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")\n\n    async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: GithubWebhookType,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        if webhook_type == self.WebhookType.REPO and resource.count(\"/\") > 1:\n            raise ValueError(\"Invalid repo format: expected 'owner/repo'\")\n\n        # Extract main event, e.g. `pull_request.opened` -> `pull_request`\n        github_events = list({event.split(\".\")[0] for event in events})\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n        webhook_data = {\n            \"name\": \"web\",\n            \"active\": True,\n            \"events\": github_events,\n            \"config\": {\n                \"url\": ingress_url,\n                \"content_type\": \"json\",\n                \"insecure_ssl\": \"0\",\n                \"secret\": secret,\n            },\n        }\n\n        response = requests.post(\n            f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\",\n            headers=headers,\n            json=webhook_data,\n        )\n\n        if response.status_code != 201:\n            error_msg = extract_github_error_msg(response)\n            if \"not found\" in error_msg.lower():\n                error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )\n            raise ValueError(f\"Failed to create GitHub webhook: {error_msg}\")\n\n        webhook_id = response.json()[\"id\"]\n        config = response.json()[\"config\"]\n\n        return str(webhook_id), config\n\n    async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:\n        webhook_type = self.WebhookType(webhook.webhook_type)\n        if webhook.credentials_id != credentials.id:\n            raise ValueError(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        if webhook_type == self.WebhookType.REPO:\n            repo = webhook.resource\n            delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"  # noqa\n        else:\n            raise NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )\n\n        response = requests.delete(delete_url, headers=headers)\n\n        if response.status_code not in [204, 404]:\n            # 204 means successful deletion, 404 means the webhook was already deleted\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")\n\n        # If we reach here, the webhook was successfully deleted or didn't exist\n\n\n# --8<-- [end:GithubWebhooksManager]\n\n\ndef extract_github_error_msg(response: requests.Response) -> str:\n    error_msgs = []\n    resp = response.json()\n    if resp.get(\"message\"):\n        error_msgs.append(resp[\"message\"])\n    if resp.get(\"errors\"):\n        error_msgs.extend(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])\n    if resp.get(\"error\"):\n        if isinstance(resp[\"error\"], dict):\n            error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))\n        else:\n            error_msgs.append(resp[\"error\"])\n    return \"\\n\".join(error_msgs)",
  "children": [
    {
      "value": "import hashlib",
      "children": [
        {
          "value": "hashlib",
          "children": [
            {
              "value": "hashlib",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import hmac",
      "children": [
        {
          "value": "hmac",
          "children": [
            {
              "value": "hmac",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import requests",
      "children": [
        {
          "value": "requests",
          "children": [
            {
              "value": "requests",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from fastapi import HTTPException, Request",
      "children": [
        {
          "value": "fastapi",
          "children": [
            {
              "value": "fastapi",
              "children": []
            }
          ]
        },
        {
          "value": "HTTPException",
          "children": [
            {
              "value": "HTTPException",
              "children": []
            }
          ]
        },
        {
          "value": "Request",
          "children": [
            {
              "value": "Request",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from strenum import StrEnum",
      "children": [
        {
          "value": "strenum",
          "children": [
            {
              "value": "strenum",
              "children": []
            }
          ]
        },
        {
          "value": "StrEnum",
          "children": [
            {
              "value": "StrEnum",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data import integrations",
      "children": [
        {
          "value": "backend.data",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            }
          ]
        },
        {
          "value": "integrations",
          "children": [
            {
              "value": "integrations",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import Credentials",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "Credentials",
          "children": [
            {
              "value": "Credentials",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.providers import ProviderName",
      "children": [
        {
          "value": "backend.integrations.providers",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "providers",
              "children": []
            }
          ]
        },
        {
          "value": "ProviderName",
          "children": [
            {
              "value": "ProviderName",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from ._base import BaseWebhooksManager",
      "children": [
        {
          "value": "._base",
          "children": [
            {
              "value": ".",
              "children": []
            },
            {
              "value": "_base",
              "children": [
                {
                  "value": "_base",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "BaseWebhooksManager",
          "children": [
            {
              "value": "BaseWebhooksManager",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# --8<-- [start:GithubWebhooksManager]",
      "children": []
    },
    {
      "value": "class GithubWebhookType(StrEnum):\n    REPO = \"repo\"",
      "children": [
        {
          "value": "GithubWebhookType",
          "children": []
        },
        {
          "value": "(StrEnum)",
          "children": [
            {
              "value": "StrEnum",
              "children": []
            }
          ]
        },
        {
          "value": "REPO = \"repo\"",
          "children": [
            {
              "value": "REPO = \"repo\"",
              "children": [
                {
                  "value": "REPO = \"repo\"",
                  "children": [
                    {
                      "value": "REPO",
                      "children": []
                    },
                    {
                      "value": "\"repo\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "repo",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class GithubWebhooksManager(BaseWebhooksManager):\n    PROVIDER_NAME = ProviderName.GITHUB\n\n    WebhookType = GithubWebhookType\n\n    GITHUB_API_URL = \"https://api.github.com\"\n    GITHUB_API_DEFAULT_HEADERS = {\"Accept\": \"application/vnd.github.v3+json\"}\n\n    @classmethod\n    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n        if not (event_type := request.headers.get(\"X-GitHub-Event\")):\n            raise HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )\n\n        if not (signature_header := request.headers.get(\"X-Hub-Signature-256\")):\n            raise HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )\n\n        payload_body = await request.body()\n        hash_object = hmac.new(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )\n        expected_signature = \"sha256=\" + hash_object.hexdigest()\n\n        if not hmac.compare_digest(expected_signature, signature_header):\n            raise HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )\n\n        payload = await request.json()\n        if action := payload.get(\"action\"):\n            event_type += f\".{action}\"\n\n        return payload, event_type\n\n    async def trigger_ping(\n        self, webhook: integrations.Webhook, credentials: Credentials | None\n    ) -> None:\n        if not credentials:\n            raise ValueError(\"Credentials are required but were not passed\")\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        repo, github_hook_id = webhook.resource, webhook.provider_webhook_id\n        ping_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\"\n\n        response = requests.post(ping_url, headers=headers)\n\n        if response.status_code != 204:\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")\n\n    async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: GithubWebhookType,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        if webhook_type == self.WebhookType.REPO and resource.count(\"/\") > 1:\n            raise ValueError(\"Invalid repo format: expected 'owner/repo'\")\n\n        # Extract main event, e.g. `pull_request.opened` -> `pull_request`\n        github_events = list({event.split(\".\")[0] for event in events})\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n        webhook_data = {\n            \"name\": \"web\",\n            \"active\": True,\n            \"events\": github_events,\n            \"config\": {\n                \"url\": ingress_url,\n                \"content_type\": \"json\",\n                \"insecure_ssl\": \"0\",\n                \"secret\": secret,\n            },\n        }\n\n        response = requests.post(\n            f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\",\n            headers=headers,\n            json=webhook_data,\n        )\n\n        if response.status_code != 201:\n            error_msg = extract_github_error_msg(response)\n            if \"not found\" in error_msg.lower():\n                error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )\n            raise ValueError(f\"Failed to create GitHub webhook: {error_msg}\")\n\n        webhook_id = response.json()[\"id\"]\n        config = response.json()[\"config\"]\n\n        return str(webhook_id), config\n\n    async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:\n        webhook_type = self.WebhookType(webhook.webhook_type)\n        if webhook.credentials_id != credentials.id:\n            raise ValueError(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        if webhook_type == self.WebhookType.REPO:\n            repo = webhook.resource\n            delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"  # noqa\n        else:\n            raise NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )\n\n        response = requests.delete(delete_url, headers=headers)\n\n        if response.status_code not in [204, 404]:\n            # 204 means successful deletion, 404 means the webhook was already deleted\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")\n\n        # If we reach here, the webhook was successfully deleted or didn't exist",
      "children": [
        {
          "value": "GithubWebhooksManager",
          "children": []
        },
        {
          "value": "(BaseWebhooksManager)",
          "children": [
            {
              "value": "BaseWebhooksManager",
              "children": []
            }
          ]
        },
        {
          "value": "PROVIDER_NAME = ProviderName.GITHUB\n\n    WebhookType = GithubWebhookType\n\n    GITHUB_API_URL = \"https://api.github.com\"\n    GITHUB_API_DEFAULT_HEADERS = {\"Accept\": \"application/vnd.github.v3+json\"}\n\n    @classmethod\n    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n        if not (event_type := request.headers.get(\"X-GitHub-Event\")):\n            raise HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )\n\n        if not (signature_header := request.headers.get(\"X-Hub-Signature-256\")):\n            raise HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )\n\n        payload_body = await request.body()\n        hash_object = hmac.new(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )\n        expected_signature = \"sha256=\" + hash_object.hexdigest()\n\n        if not hmac.compare_digest(expected_signature, signature_header):\n            raise HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )\n\n        payload = await request.json()\n        if action := payload.get(\"action\"):\n            event_type += f\".{action}\"\n\n        return payload, event_type\n\n    async def trigger_ping(\n        self, webhook: integrations.Webhook, credentials: Credentials | None\n    ) -> None:\n        if not credentials:\n            raise ValueError(\"Credentials are required but were not passed\")\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        repo, github_hook_id = webhook.resource, webhook.provider_webhook_id\n        ping_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\"\n\n        response = requests.post(ping_url, headers=headers)\n\n        if response.status_code != 204:\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")\n\n    async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: GithubWebhookType,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        if webhook_type == self.WebhookType.REPO and resource.count(\"/\") > 1:\n            raise ValueError(\"Invalid repo format: expected 'owner/repo'\")\n\n        # Extract main event, e.g. `pull_request.opened` -> `pull_request`\n        github_events = list({event.split(\".\")[0] for event in events})\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n        webhook_data = {\n            \"name\": \"web\",\n            \"active\": True,\n            \"events\": github_events,\n            \"config\": {\n                \"url\": ingress_url,\n                \"content_type\": \"json\",\n                \"insecure_ssl\": \"0\",\n                \"secret\": secret,\n            },\n        }\n\n        response = requests.post(\n            f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\",\n            headers=headers,\n            json=webhook_data,\n        )\n\n        if response.status_code != 201:\n            error_msg = extract_github_error_msg(response)\n            if \"not found\" in error_msg.lower():\n                error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )\n            raise ValueError(f\"Failed to create GitHub webhook: {error_msg}\")\n\n        webhook_id = response.json()[\"id\"]\n        config = response.json()[\"config\"]\n\n        return str(webhook_id), config\n\n    async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:\n        webhook_type = self.WebhookType(webhook.webhook_type)\n        if webhook.credentials_id != credentials.id:\n            raise ValueError(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        if webhook_type == self.WebhookType.REPO:\n            repo = webhook.resource\n            delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"  # noqa\n        else:\n            raise NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )\n\n        response = requests.delete(delete_url, headers=headers)\n\n        if response.status_code not in [204, 404]:\n            # 204 means successful deletion, 404 means the webhook was already deleted\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")\n\n        # If we reach here, the webhook was successfully deleted or didn't exist",
          "children": [
            {
              "value": "PROVIDER_NAME = ProviderName.GITHUB",
              "children": [
                {
                  "value": "PROVIDER_NAME = ProviderName.GITHUB",
                  "children": [
                    {
                      "value": "PROVIDER_NAME",
                      "children": []
                    },
                    {
                      "value": "ProviderName.GITHUB",
                      "children": [
                        {
                          "value": "ProviderName",
                          "children": []
                        },
                        {
                          "value": "GITHUB",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "WebhookType = GithubWebhookType",
              "children": [
                {
                  "value": "WebhookType = GithubWebhookType",
                  "children": [
                    {
                      "value": "WebhookType",
                      "children": []
                    },
                    {
                      "value": "GithubWebhookType",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "GITHUB_API_URL = \"https://api.github.com\"",
              "children": [
                {
                  "value": "GITHUB_API_URL = \"https://api.github.com\"",
                  "children": [
                    {
                      "value": "GITHUB_API_URL",
                      "children": []
                    },
                    {
                      "value": "\"https://api.github.com\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "https://api.github.com",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "GITHUB_API_DEFAULT_HEADERS = {\"Accept\": \"application/vnd.github.v3+json\"}",
              "children": [
                {
                  "value": "GITHUB_API_DEFAULT_HEADERS = {\"Accept\": \"application/vnd.github.v3+json\"}",
                  "children": [
                    {
                      "value": "GITHUB_API_DEFAULT_HEADERS",
                      "children": []
                    },
                    {
                      "value": "{\"Accept\": \"application/vnd.github.v3+json\"}",
                      "children": [
                        {
                          "value": "\"Accept\": \"application/vnd.github.v3+json\"",
                          "children": [
                            {
                              "value": "\"Accept\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "Accept",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"application/vnd.github.v3+json\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "application/vnd.github.v3+json",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@classmethod\n    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n        if not (event_type := request.headers.get(\"X-GitHub-Event\")):\n            raise HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )\n\n        if not (signature_header := request.headers.get(\"X-Hub-Signature-256\")):\n            raise HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )\n\n        payload_body = await request.body()\n        hash_object = hmac.new(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )\n        expected_signature = \"sha256=\" + hash_object.hexdigest()\n\n        if not hmac.compare_digest(expected_signature, signature_header):\n            raise HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )\n\n        payload = await request.json()\n        if action := payload.get(\"action\"):\n            event_type += f\".{action}\"\n\n        return payload, event_type",
              "children": [
                {
                  "value": "@classmethod",
                  "children": [
                    {
                      "value": "classmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n        if not (event_type := request.headers.get(\"X-GitHub-Event\")):\n            raise HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )\n\n        if not (signature_header := request.headers.get(\"X-Hub-Signature-256\")):\n            raise HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )\n\n        payload_body = await request.body()\n        hash_object = hmac.new(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )\n        expected_signature = \"sha256=\" + hash_object.hexdigest()\n\n        if not hmac.compare_digest(expected_signature, signature_header):\n            raise HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )\n\n        payload = await request.json()\n        if action := payload.get(\"action\"):\n            event_type += f\".{action}\"\n\n        return payload, event_type",
                  "children": [
                    {
                      "value": "validate_payload",
                      "children": []
                    },
                    {
                      "value": "(\n        cls, webhook: integrations.Webhook, request: Request\n    )",
                      "children": [
                        {
                          "value": "cls",
                          "children": []
                        },
                        {
                          "value": "webhook: integrations.Webhook",
                          "children": [
                            {
                              "value": "webhook",
                              "children": []
                            },
                            {
                              "value": "integrations.Webhook",
                              "children": [
                                {
                                  "value": "integrations.Webhook",
                                  "children": [
                                    {
                                      "value": "integrations",
                                      "children": []
                                    },
                                    {
                                      "value": "Webhook",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "request: Request",
                          "children": [
                            {
                              "value": "request",
                              "children": []
                            },
                            {
                              "value": "Request",
                              "children": [
                                {
                                  "value": "Request",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tuple[dict, str]",
                      "children": [
                        {
                          "value": "tuple[dict, str]",
                          "children": [
                            {
                              "value": "tuple",
                              "children": []
                            },
                            {
                              "value": "[dict, str]",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": [
                                    {
                                      "value": "dict",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not (event_type := request.headers.get(\"X-GitHub-Event\")):\n            raise HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )\n\n        if not (signature_header := request.headers.get(\"X-Hub-Signature-256\")):\n            raise HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )\n\n        payload_body = await request.body()\n        hash_object = hmac.new(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )\n        expected_signature = \"sha256=\" + hash_object.hexdigest()\n\n        if not hmac.compare_digest(expected_signature, signature_header):\n            raise HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )\n\n        payload = await request.json()\n        if action := payload.get(\"action\"):\n            event_type += f\".{action}\"\n\n        return payload, event_type",
                      "children": [
                        {
                          "value": "if not (event_type := request.headers.get(\"X-GitHub-Event\")):\n            raise HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )",
                          "children": [
                            {
                              "value": "not (event_type := request.headers.get(\"X-GitHub-Event\"))",
                              "children": [
                                {
                                  "value": "(event_type := request.headers.get(\"X-GitHub-Event\"))",
                                  "children": [
                                    {
                                      "value": "event_type := request.headers.get(\"X-GitHub-Event\")",
                                      "children": [
                                        {
                                          "value": "event_type",
                                          "children": []
                                        },
                                        {
                                          "value": "request.headers.get(\"X-GitHub-Event\")",
                                          "children": [
                                            {
                                              "value": "request.headers.get",
                                              "children": [
                                                {
                                                  "value": "request.headers",
                                                  "children": [
                                                    {
                                                      "value": "request",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "headers",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "get",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\"X-GitHub-Event\")",
                                              "children": [
                                                {
                                                  "value": "\"X-GitHub-Event\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "X-GitHub-Event",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )",
                              "children": [
                                {
                                  "value": "raise HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )",
                                  "children": [
                                    {
                                      "value": "HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )",
                                      "children": [
                                        {
                                          "value": "HTTPException",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )",
                                          "children": [
                                            {
                                              "value": "status_code=400",
                                              "children": [
                                                {
                                                  "value": "status_code",
                                                  "children": []
                                                },
                                                {
                                                  "value": "400",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "detail=\"X-GitHub-Event header is missing!\"",
                                              "children": [
                                                {
                                                  "value": "detail",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"X-GitHub-Event header is missing!\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "X-GitHub-Event header is missing!",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if not (signature_header := request.headers.get(\"X-Hub-Signature-256\")):\n            raise HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )",
                          "children": [
                            {
                              "value": "not (signature_header := request.headers.get(\"X-Hub-Signature-256\"))",
                              "children": [
                                {
                                  "value": "(signature_header := request.headers.get(\"X-Hub-Signature-256\"))",
                                  "children": [
                                    {
                                      "value": "signature_header := request.headers.get(\"X-Hub-Signature-256\")",
                                      "children": [
                                        {
                                          "value": "signature_header",
                                          "children": []
                                        },
                                        {
                                          "value": "request.headers.get(\"X-Hub-Signature-256\")",
                                          "children": [
                                            {
                                              "value": "request.headers.get",
                                              "children": [
                                                {
                                                  "value": "request.headers",
                                                  "children": [
                                                    {
                                                      "value": "request",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "headers",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "get",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\"X-Hub-Signature-256\")",
                                              "children": [
                                                {
                                                  "value": "\"X-Hub-Signature-256\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "X-Hub-Signature-256",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )",
                              "children": [
                                {
                                  "value": "raise HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )",
                                  "children": [
                                    {
                                      "value": "HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )",
                                      "children": [
                                        {
                                          "value": "HTTPException",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )",
                                          "children": [
                                            {
                                              "value": "status_code=403",
                                              "children": [
                                                {
                                                  "value": "status_code",
                                                  "children": []
                                                },
                                                {
                                                  "value": "403",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "detail=\"X-Hub-Signature-256 header is missing!\"",
                                              "children": [
                                                {
                                                  "value": "detail",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"X-Hub-Signature-256 header is missing!\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "X-Hub-Signature-256 header is missing!",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "payload_body = await request.body()",
                          "children": [
                            {
                              "value": "payload_body = await request.body()",
                              "children": [
                                {
                                  "value": "payload_body",
                                  "children": []
                                },
                                {
                                  "value": "await request.body()",
                                  "children": [
                                    {
                                      "value": "request.body()",
                                      "children": [
                                        {
                                          "value": "request.body",
                                          "children": [
                                            {
                                              "value": "request",
                                              "children": []
                                            },
                                            {
                                              "value": "body",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "hash_object = hmac.new(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )",
                          "children": [
                            {
                              "value": "hash_object = hmac.new(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )",
                              "children": [
                                {
                                  "value": "hash_object",
                                  "children": []
                                },
                                {
                                  "value": "hmac.new(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )",
                                  "children": [
                                    {
                                      "value": "hmac.new",
                                      "children": [
                                        {
                                          "value": "hmac",
                                          "children": []
                                        },
                                        {
                                          "value": "new",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )",
                                      "children": [
                                        {
                                          "value": "webhook.secret.encode(\"utf-8\")",
                                          "children": [
                                            {
                                              "value": "webhook.secret.encode",
                                              "children": [
                                                {
                                                  "value": "webhook.secret",
                                                  "children": [
                                                    {
                                                      "value": "webhook",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "secret",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "encode",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\"utf-8\")",
                                              "children": [
                                                {
                                                  "value": "\"utf-8\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "utf-8",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "msg=payload_body",
                                          "children": [
                                            {
                                              "value": "msg",
                                              "children": []
                                            },
                                            {
                                              "value": "payload_body",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "digestmod=hashlib.sha256",
                                          "children": [
                                            {
                                              "value": "digestmod",
                                              "children": []
                                            },
                                            {
                                              "value": "hashlib.sha256",
                                              "children": [
                                                {
                                                  "value": "hashlib",
                                                  "children": []
                                                },
                                                {
                                                  "value": "sha256",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "expected_signature = \"sha256=\" + hash_object.hexdigest()",
                          "children": [
                            {
                              "value": "expected_signature = \"sha256=\" + hash_object.hexdigest()",
                              "children": [
                                {
                                  "value": "expected_signature",
                                  "children": []
                                },
                                {
                                  "value": "\"sha256=\" + hash_object.hexdigest()",
                                  "children": [
                                    {
                                      "value": "\"sha256=\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "sha256=",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "hash_object.hexdigest()",
                                      "children": [
                                        {
                                          "value": "hash_object.hexdigest",
                                          "children": [
                                            {
                                              "value": "hash_object",
                                              "children": []
                                            },
                                            {
                                              "value": "hexdigest",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if not hmac.compare_digest(expected_signature, signature_header):\n            raise HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )",
                          "children": [
                            {
                              "value": "not hmac.compare_digest(expected_signature, signature_header)",
                              "children": [
                                {
                                  "value": "hmac.compare_digest(expected_signature, signature_header)",
                                  "children": [
                                    {
                                      "value": "hmac.compare_digest",
                                      "children": [
                                        {
                                          "value": "hmac",
                                          "children": []
                                        },
                                        {
                                          "value": "compare_digest",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(expected_signature, signature_header)",
                                      "children": [
                                        {
                                          "value": "expected_signature",
                                          "children": []
                                        },
                                        {
                                          "value": "signature_header",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )",
                              "children": [
                                {
                                  "value": "raise HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )",
                                  "children": [
                                    {
                                      "value": "HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )",
                                      "children": [
                                        {
                                          "value": "HTTPException",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )",
                                          "children": [
                                            {
                                              "value": "status_code=403",
                                              "children": [
                                                {
                                                  "value": "status_code",
                                                  "children": []
                                                },
                                                {
                                                  "value": "403",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "detail=\"Request signatures didn't match!\"",
                                              "children": [
                                                {
                                                  "value": "detail",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"Request signatures didn't match!\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Request signatures didn't match!",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "payload = await request.json()",
                          "children": [
                            {
                              "value": "payload = await request.json()",
                              "children": [
                                {
                                  "value": "payload",
                                  "children": []
                                },
                                {
                                  "value": "await request.json()",
                                  "children": [
                                    {
                                      "value": "request.json()",
                                      "children": [
                                        {
                                          "value": "request.json",
                                          "children": [
                                            {
                                              "value": "request",
                                              "children": []
                                            },
                                            {
                                              "value": "json",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if action := payload.get(\"action\"):\n            event_type += f\".{action}\"",
                          "children": [
                            {
                              "value": "action := payload.get(\"action\")",
                              "children": [
                                {
                                  "value": "action",
                                  "children": []
                                },
                                {
                                  "value": "payload.get(\"action\")",
                                  "children": [
                                    {
                                      "value": "payload.get",
                                      "children": [
                                        {
                                          "value": "payload",
                                          "children": []
                                        },
                                        {
                                          "value": "get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"action\")",
                                      "children": [
                                        {
                                          "value": "\"action\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "action",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "event_type += f\".{action}\"",
                              "children": [
                                {
                                  "value": "event_type += f\".{action}\"",
                                  "children": [
                                    {
                                      "value": "event_type += f\".{action}\"",
                                      "children": [
                                        {
                                          "value": "event_type",
                                          "children": []
                                        },
                                        {
                                          "value": "f\".{action}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": ".",
                                              "children": []
                                            },
                                            {
                                              "value": "{action}",
                                              "children": [
                                                {
                                                  "value": "action",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return payload, event_type",
                          "children": [
                            {
                              "value": "payload, event_type",
                              "children": [
                                {
                                  "value": "payload",
                                  "children": []
                                },
                                {
                                  "value": "event_type",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def trigger_ping(\n        self, webhook: integrations.Webhook, credentials: Credentials | None\n    ) -> None:\n        if not credentials:\n            raise ValueError(\"Credentials are required but were not passed\")\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        repo, github_hook_id = webhook.resource, webhook.provider_webhook_id\n        ping_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\"\n\n        response = requests.post(ping_url, headers=headers)\n\n        if response.status_code != 204:\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")",
              "children": [
                {
                  "value": "trigger_ping",
                  "children": []
                },
                {
                  "value": "(\n        self, webhook: integrations.Webhook, credentials: Credentials | None\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "webhook: integrations.Webhook",
                      "children": [
                        {
                          "value": "webhook",
                          "children": []
                        },
                        {
                          "value": "integrations.Webhook",
                          "children": [
                            {
                              "value": "integrations.Webhook",
                              "children": [
                                {
                                  "value": "integrations",
                                  "children": []
                                },
                                {
                                  "value": "Webhook",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: Credentials | None",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "Credentials | None",
                          "children": [
                            {
                              "value": "Credentials | None",
                              "children": [
                                {
                                  "value": "Credentials",
                                  "children": []
                                },
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": [
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "if not credentials:\n            raise ValueError(\"Credentials are required but were not passed\")\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        repo, github_hook_id = webhook.resource, webhook.provider_webhook_id\n        ping_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\"\n\n        response = requests.post(ping_url, headers=headers)\n\n        if response.status_code != 204:\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")",
                  "children": [
                    {
                      "value": "if not credentials:\n            raise ValueError(\"Credentials are required but were not passed\")",
                      "children": [
                        {
                          "value": "not credentials",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(\"Credentials are required but were not passed\")",
                          "children": [
                            {
                              "value": "raise ValueError(\"Credentials are required but were not passed\")",
                              "children": [
                                {
                                  "value": "ValueError(\"Credentials are required but were not passed\")",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\"Credentials are required but were not passed\")",
                                      "children": [
                                        {
                                          "value": "\"Credentials are required but were not passed\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Credentials are required but were not passed",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }",
                      "children": [
                        {
                          "value": "headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }",
                          "children": [
                            {
                              "value": "headers",
                              "children": []
                            },
                            {
                              "value": "{\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }",
                              "children": [
                                {
                                  "value": "**self.GITHUB_API_DEFAULT_HEADERS",
                                  "children": [
                                    {
                                      "value": "self.GITHUB_API_DEFAULT_HEADERS",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "GITHUB_API_DEFAULT_HEADERS",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"Authorization\": credentials.bearer()",
                                  "children": [
                                    {
                                      "value": "\"Authorization\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Authorization",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "credentials.bearer()",
                                      "children": [
                                        {
                                          "value": "credentials.bearer",
                                          "children": [
                                            {
                                              "value": "credentials",
                                              "children": []
                                            },
                                            {
                                              "value": "bearer",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "repo, github_hook_id = webhook.resource, webhook.provider_webhook_id",
                      "children": [
                        {
                          "value": "repo, github_hook_id = webhook.resource, webhook.provider_webhook_id",
                          "children": [
                            {
                              "value": "repo, github_hook_id",
                              "children": [
                                {
                                  "value": "repo",
                                  "children": []
                                },
                                {
                                  "value": "github_hook_id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "webhook.resource, webhook.provider_webhook_id",
                              "children": [
                                {
                                  "value": "webhook.resource",
                                  "children": [
                                    {
                                      "value": "webhook",
                                      "children": []
                                    },
                                    {
                                      "value": "resource",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "webhook.provider_webhook_id",
                                  "children": [
                                    {
                                      "value": "webhook",
                                      "children": []
                                    },
                                    {
                                      "value": "provider_webhook_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ping_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\"",
                      "children": [
                        {
                          "value": "ping_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\"",
                          "children": [
                            {
                              "value": "ping_url",
                              "children": []
                            },
                            {
                              "value": "f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\"",
                              "children": [
                                {
                                  "value": "f\"",
                                  "children": []
                                },
                                {
                                  "value": "{self.GITHUB_API_URL}",
                                  "children": [
                                    {
                                      "value": "self.GITHUB_API_URL",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "GITHUB_API_URL",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "/repos/",
                                  "children": []
                                },
                                {
                                  "value": "{repo}",
                                  "children": [
                                    {
                                      "value": "repo",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "/hooks/",
                                  "children": []
                                },
                                {
                                  "value": "{github_hook_id}",
                                  "children": [
                                    {
                                      "value": "github_hook_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "/pings",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "response = requests.post(ping_url, headers=headers)",
                      "children": [
                        {
                          "value": "response = requests.post(ping_url, headers=headers)",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "requests.post(ping_url, headers=headers)",
                              "children": [
                                {
                                  "value": "requests.post",
                                  "children": [
                                    {
                                      "value": "requests",
                                      "children": []
                                    },
                                    {
                                      "value": "post",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(ping_url, headers=headers)",
                                  "children": [
                                    {
                                      "value": "ping_url",
                                      "children": []
                                    },
                                    {
                                      "value": "headers=headers",
                                      "children": [
                                        {
                                          "value": "headers",
                                          "children": []
                                        },
                                        {
                                          "value": "headers",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if response.status_code != 204:\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")",
                      "children": [
                        {
                          "value": "response.status_code != 204",
                          "children": [
                            {
                              "value": "response.status_code",
                              "children": [
                                {
                                  "value": "response",
                                  "children": []
                                },
                                {
                                  "value": "status_code",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "204",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")",
                          "children": [
                            {
                              "value": "error_msg = extract_github_error_msg(response)",
                              "children": [
                                {
                                  "value": "error_msg = extract_github_error_msg(response)",
                                  "children": [
                                    {
                                      "value": "error_msg",
                                      "children": []
                                    },
                                    {
                                      "value": "extract_github_error_msg(response)",
                                      "children": [
                                        {
                                          "value": "extract_github_error_msg",
                                          "children": []
                                        },
                                        {
                                          "value": "(response)",
                                          "children": [
                                            {
                                              "value": "response",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")",
                              "children": [
                                {
                                  "value": "ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(f\"Failed to ping GitHub webhook: {error_msg}\")",
                                      "children": [
                                        {
                                          "value": "f\"Failed to ping GitHub webhook: {error_msg}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Failed to ping GitHub webhook:",
                                              "children": []
                                            },
                                            {
                                              "value": "{error_msg}",
                                              "children": [
                                                {
                                                  "value": "error_msg",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: GithubWebhookType,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        if webhook_type == self.WebhookType.REPO and resource.count(\"/\") > 1:\n            raise ValueError(\"Invalid repo format: expected 'owner/repo'\")\n\n        # Extract main event, e.g. `pull_request.opened` -> `pull_request`\n        github_events = list({event.split(\".\")[0] for event in events})\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n        webhook_data = {\n            \"name\": \"web\",\n            \"active\": True,\n            \"events\": github_events,\n            \"config\": {\n                \"url\": ingress_url,\n                \"content_type\": \"json\",\n                \"insecure_ssl\": \"0\",\n                \"secret\": secret,\n            },\n        }\n\n        response = requests.post(\n            f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\",\n            headers=headers,\n            json=webhook_data,\n        )\n\n        if response.status_code != 201:\n            error_msg = extract_github_error_msg(response)\n            if \"not found\" in error_msg.lower():\n                error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )\n            raise ValueError(f\"Failed to create GitHub webhook: {error_msg}\")\n\n        webhook_id = response.json()[\"id\"]\n        config = response.json()[\"config\"]\n\n        return str(webhook_id), config",
              "children": [
                {
                  "value": "_register_webhook",
                  "children": []
                },
                {
                  "value": "(\n        self,\n        credentials: Credentials,\n        webhook_type: GithubWebhookType,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "credentials: Credentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "Credentials",
                          "children": [
                            {
                              "value": "Credentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "webhook_type: GithubWebhookType",
                      "children": [
                        {
                          "value": "webhook_type",
                          "children": []
                        },
                        {
                          "value": "GithubWebhookType",
                          "children": [
                            {
                              "value": "GithubWebhookType",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "resource: str",
                      "children": [
                        {
                          "value": "resource",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "events: list[str]",
                      "children": [
                        {
                          "value": "events",
                          "children": []
                        },
                        {
                          "value": "list[str]",
                          "children": [
                            {
                              "value": "list[str]",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "[str]",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ingress_url: str",
                      "children": [
                        {
                          "value": "ingress_url",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "secret: str",
                      "children": [
                        {
                          "value": "secret",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "tuple[str, dict]",
                  "children": [
                    {
                      "value": "tuple[str, dict]",
                      "children": [
                        {
                          "value": "tuple",
                          "children": []
                        },
                        {
                          "value": "[str, dict]",
                          "children": [
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "dict",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if webhook_type == self.WebhookType.REPO and resource.count(\"/\") > 1:\n            raise ValueError(\"Invalid repo format: expected 'owner/repo'\")\n\n        # Extract main event, e.g. `pull_request.opened` -> `pull_request`\n        github_events = list({event.split(\".\")[0] for event in events})\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n        webhook_data = {\n            \"name\": \"web\",\n            \"active\": True,\n            \"events\": github_events,\n            \"config\": {\n                \"url\": ingress_url,\n                \"content_type\": \"json\",\n                \"insecure_ssl\": \"0\",\n                \"secret\": secret,\n            },\n        }\n\n        response = requests.post(\n            f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\",\n            headers=headers,\n            json=webhook_data,\n        )\n\n        if response.status_code != 201:\n            error_msg = extract_github_error_msg(response)\n            if \"not found\" in error_msg.lower():\n                error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )\n            raise ValueError(f\"Failed to create GitHub webhook: {error_msg}\")\n\n        webhook_id = response.json()[\"id\"]\n        config = response.json()[\"config\"]\n\n        return str(webhook_id), config",
                  "children": [
                    {
                      "value": "if webhook_type == self.WebhookType.REPO and resource.count(\"/\") > 1:\n            raise ValueError(\"Invalid repo format: expected 'owner/repo'\")",
                      "children": [
                        {
                          "value": "webhook_type == self.WebhookType.REPO and resource.count(\"/\") > 1",
                          "children": [
                            {
                              "value": "webhook_type == self.WebhookType.REPO",
                              "children": [
                                {
                                  "value": "webhook_type",
                                  "children": []
                                },
                                {
                                  "value": "self.WebhookType.REPO",
                                  "children": [
                                    {
                                      "value": "self.WebhookType",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "WebhookType",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "REPO",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "resource.count(\"/\") > 1",
                              "children": [
                                {
                                  "value": "resource.count(\"/\")",
                                  "children": [
                                    {
                                      "value": "resource.count",
                                      "children": [
                                        {
                                          "value": "resource",
                                          "children": []
                                        },
                                        {
                                          "value": "count",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"/\")",
                                      "children": [
                                        {
                                          "value": "\"/\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "/",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(\"Invalid repo format: expected 'owner/repo'\")",
                          "children": [
                            {
                              "value": "raise ValueError(\"Invalid repo format: expected 'owner/repo'\")",
                              "children": [
                                {
                                  "value": "ValueError(\"Invalid repo format: expected 'owner/repo'\")",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\"Invalid repo format: expected 'owner/repo'\")",
                                      "children": [
                                        {
                                          "value": "\"Invalid repo format: expected 'owner/repo'\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Invalid repo format: expected 'owner/repo'",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Extract main event, e.g. `pull_request.opened` -> `pull_request`",
                      "children": []
                    },
                    {
                      "value": "github_events = list({event.split(\".\")[0] for event in events})",
                      "children": [
                        {
                          "value": "github_events = list({event.split(\".\")[0] for event in events})",
                          "children": [
                            {
                              "value": "github_events",
                              "children": []
                            },
                            {
                              "value": "list({event.split(\".\")[0] for event in events})",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "({event.split(\".\")[0] for event in events})",
                                  "children": [
                                    {
                                      "value": "{event.split(\".\")[0] for event in events}",
                                      "children": [
                                        {
                                          "value": "event.split(\".\")[0]",
                                          "children": [
                                            {
                                              "value": "event.split(\".\")",
                                              "children": [
                                                {
                                                  "value": "event.split",
                                                  "children": [
                                                    {
                                                      "value": "event",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "split",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\".\")",
                                                  "children": [
                                                    {
                                                      "value": "\".\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": ".",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "0",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "for event in events",
                                          "children": [
                                            {
                                              "value": "event",
                                              "children": []
                                            },
                                            {
                                              "value": "events",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }",
                      "children": [
                        {
                          "value": "headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }",
                          "children": [
                            {
                              "value": "headers",
                              "children": []
                            },
                            {
                              "value": "{\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }",
                              "children": [
                                {
                                  "value": "**self.GITHUB_API_DEFAULT_HEADERS",
                                  "children": [
                                    {
                                      "value": "self.GITHUB_API_DEFAULT_HEADERS",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "GITHUB_API_DEFAULT_HEADERS",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"Authorization\": credentials.bearer()",
                                  "children": [
                                    {
                                      "value": "\"Authorization\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Authorization",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "credentials.bearer()",
                                      "children": [
                                        {
                                          "value": "credentials.bearer",
                                          "children": [
                                            {
                                              "value": "credentials",
                                              "children": []
                                            },
                                            {
                                              "value": "bearer",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "webhook_data = {\n            \"name\": \"web\",\n            \"active\": True,\n            \"events\": github_events,\n            \"config\": {\n                \"url\": ingress_url,\n                \"content_type\": \"json\",\n                \"insecure_ssl\": \"0\",\n                \"secret\": secret,\n            },\n        }",
                      "children": [
                        {
                          "value": "webhook_data = {\n            \"name\": \"web\",\n            \"active\": True,\n            \"events\": github_events,\n            \"config\": {\n                \"url\": ingress_url,\n                \"content_type\": \"json\",\n                \"insecure_ssl\": \"0\",\n                \"secret\": secret,\n            },\n        }",
                          "children": [
                            {
                              "value": "webhook_data",
                              "children": []
                            },
                            {
                              "value": "{\n            \"name\": \"web\",\n            \"active\": True,\n            \"events\": github_events,\n            \"config\": {\n                \"url\": ingress_url,\n                \"content_type\": \"json\",\n                \"insecure_ssl\": \"0\",\n                \"secret\": secret,\n            },\n        }",
                              "children": [
                                {
                                  "value": "\"name\": \"web\"",
                                  "children": [
                                    {
                                      "value": "\"name\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "name",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"web\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "web",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"active\": True",
                                  "children": [
                                    {
                                      "value": "\"active\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "active",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "True",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"events\": github_events",
                                  "children": [
                                    {
                                      "value": "\"events\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "events",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "github_events",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"config\": {\n                \"url\": ingress_url,\n                \"content_type\": \"json\",\n                \"insecure_ssl\": \"0\",\n                \"secret\": secret,\n            }",
                                  "children": [
                                    {
                                      "value": "\"config\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "config",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "{\n                \"url\": ingress_url,\n                \"content_type\": \"json\",\n                \"insecure_ssl\": \"0\",\n                \"secret\": secret,\n            }",
                                      "children": [
                                        {
                                          "value": "\"url\": ingress_url",
                                          "children": [
                                            {
                                              "value": "\"url\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "url",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ingress_url",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"content_type\": \"json\"",
                                          "children": [
                                            {
                                              "value": "\"content_type\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "content_type",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"json\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "json",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"insecure_ssl\": \"0\"",
                                          "children": [
                                            {
                                              "value": "\"insecure_ssl\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "insecure_ssl",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"0\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"secret\": secret",
                                          "children": [
                                            {
                                              "value": "\"secret\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "secret",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "secret",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "response = requests.post(\n            f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\",\n            headers=headers,\n            json=webhook_data,\n        )",
                      "children": [
                        {
                          "value": "response = requests.post(\n            f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\",\n            headers=headers,\n            json=webhook_data,\n        )",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "requests.post(\n            f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\",\n            headers=headers,\n            json=webhook_data,\n        )",
                              "children": [
                                {
                                  "value": "requests.post",
                                  "children": [
                                    {
                                      "value": "requests",
                                      "children": []
                                    },
                                    {
                                      "value": "post",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\",\n            headers=headers,\n            json=webhook_data,\n        )",
                                  "children": [
                                    {
                                      "value": "f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "{self.GITHUB_API_URL}",
                                          "children": [
                                            {
                                              "value": "self.GITHUB_API_URL",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "GITHUB_API_URL",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "/repos/",
                                          "children": []
                                        },
                                        {
                                          "value": "{resource}",
                                          "children": [
                                            {
                                              "value": "resource",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "/hooks",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "headers=headers",
                                      "children": [
                                        {
                                          "value": "headers",
                                          "children": []
                                        },
                                        {
                                          "value": "headers",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "json=webhook_data",
                                      "children": [
                                        {
                                          "value": "json",
                                          "children": []
                                        },
                                        {
                                          "value": "webhook_data",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if response.status_code != 201:\n            error_msg = extract_github_error_msg(response)\n            if \"not found\" in error_msg.lower():\n                error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )\n            raise ValueError(f\"Failed to create GitHub webhook: {error_msg}\")",
                      "children": [
                        {
                          "value": "response.status_code != 201",
                          "children": [
                            {
                              "value": "response.status_code",
                              "children": [
                                {
                                  "value": "response",
                                  "children": []
                                },
                                {
                                  "value": "status_code",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "201",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "error_msg = extract_github_error_msg(response)\n            if \"not found\" in error_msg.lower():\n                error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )\n            raise ValueError(f\"Failed to create GitHub webhook: {error_msg}\")",
                          "children": [
                            {
                              "value": "error_msg = extract_github_error_msg(response)",
                              "children": [
                                {
                                  "value": "error_msg = extract_github_error_msg(response)",
                                  "children": [
                                    {
                                      "value": "error_msg",
                                      "children": []
                                    },
                                    {
                                      "value": "extract_github_error_msg(response)",
                                      "children": [
                                        {
                                          "value": "extract_github_error_msg",
                                          "children": []
                                        },
                                        {
                                          "value": "(response)",
                                          "children": [
                                            {
                                              "value": "response",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if \"not found\" in error_msg.lower():\n                error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )",
                              "children": [
                                {
                                  "value": "\"not found\" in error_msg.lower()",
                                  "children": [
                                    {
                                      "value": "\"not found\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "not found",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "error_msg.lower()",
                                      "children": [
                                        {
                                          "value": "error_msg.lower",
                                          "children": [
                                            {
                                              "value": "error_msg",
                                              "children": []
                                            },
                                            {
                                              "value": "lower",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )",
                                  "children": [
                                    {
                                      "value": "error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )",
                                      "children": [
                                        {
                                          "value": "error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )",
                                          "children": [
                                            {
                                              "value": "error_msg",
                                              "children": []
                                            },
                                            {
                                              "value": "(\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )",
                                              "children": [
                                                {
                                                  "value": "f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"{error_msg} \"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{error_msg}",
                                                          "children": [
                                                            {
                                                              "value": "error_msg",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"(Make sure the GitHub account or API key has 'repo' or \"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(Make sure the GitHub account or API key has 'repo' or",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "f\"webhook create permissions to '{resource}')\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "webhook create permissions to '",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{resource}",
                                                          "children": [
                                                            {
                                                              "value": "resource",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "')",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(f\"Failed to create GitHub webhook: {error_msg}\")",
                              "children": [
                                {
                                  "value": "ValueError(f\"Failed to create GitHub webhook: {error_msg}\")",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(f\"Failed to create GitHub webhook: {error_msg}\")",
                                      "children": [
                                        {
                                          "value": "f\"Failed to create GitHub webhook: {error_msg}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Failed to create GitHub webhook:",
                                              "children": []
                                            },
                                            {
                                              "value": "{error_msg}",
                                              "children": [
                                                {
                                                  "value": "error_msg",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "webhook_id = response.json()[\"id\"]",
                      "children": [
                        {
                          "value": "webhook_id = response.json()[\"id\"]",
                          "children": [
                            {
                              "value": "webhook_id",
                              "children": []
                            },
                            {
                              "value": "response.json()[\"id\"]",
                              "children": [
                                {
                                  "value": "response.json()",
                                  "children": [
                                    {
                                      "value": "response.json",
                                      "children": [
                                        {
                                          "value": "response",
                                          "children": []
                                        },
                                        {
                                          "value": "json",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"id\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "config = response.json()[\"config\"]",
                      "children": [
                        {
                          "value": "config = response.json()[\"config\"]",
                          "children": [
                            {
                              "value": "config",
                              "children": []
                            },
                            {
                              "value": "response.json()[\"config\"]",
                              "children": [
                                {
                                  "value": "response.json()",
                                  "children": [
                                    {
                                      "value": "response.json",
                                      "children": [
                                        {
                                          "value": "response",
                                          "children": []
                                        },
                                        {
                                          "value": "json",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"config\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "config",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return str(webhook_id), config",
                      "children": [
                        {
                          "value": "str(webhook_id), config",
                          "children": [
                            {
                              "value": "str(webhook_id)",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                },
                                {
                                  "value": "(webhook_id)",
                                  "children": [
                                    {
                                      "value": "webhook_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "config",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:\n        webhook_type = self.WebhookType(webhook.webhook_type)\n        if webhook.credentials_id != credentials.id:\n            raise ValueError(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        if webhook_type == self.WebhookType.REPO:\n            repo = webhook.resource\n            delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"  # noqa\n        else:\n            raise NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )\n\n        response = requests.delete(delete_url, headers=headers)\n\n        if response.status_code not in [204, 404]:\n            # 204 means successful deletion, 404 means the webhook was already deleted\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")\n\n        # If we reach here, the webhook was successfully deleted or didn't exist",
              "children": [
                {
                  "value": "_deregister_webhook",
                  "children": []
                },
                {
                  "value": "(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "webhook: integrations.Webhook",
                      "children": [
                        {
                          "value": "webhook",
                          "children": []
                        },
                        {
                          "value": "integrations.Webhook",
                          "children": [
                            {
                              "value": "integrations.Webhook",
                              "children": [
                                {
                                  "value": "integrations",
                                  "children": []
                                },
                                {
                                  "value": "Webhook",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials: Credentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "Credentials",
                          "children": [
                            {
                              "value": "Credentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": [
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "webhook_type = self.WebhookType(webhook.webhook_type)\n        if webhook.credentials_id != credentials.id:\n            raise ValueError(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        if webhook_type == self.WebhookType.REPO:\n            repo = webhook.resource\n            delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"  # noqa\n        else:\n            raise NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )\n\n        response = requests.delete(delete_url, headers=headers)\n\n        if response.status_code not in [204, 404]:\n            # 204 means successful deletion, 404 means the webhook was already deleted\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")\n\n        # If we reach here, the webhook was successfully deleted or didn't exist",
                  "children": [
                    {
                      "value": "webhook_type = self.WebhookType(webhook.webhook_type)",
                      "children": [
                        {
                          "value": "webhook_type = self.WebhookType(webhook.webhook_type)",
                          "children": [
                            {
                              "value": "webhook_type",
                              "children": []
                            },
                            {
                              "value": "self.WebhookType(webhook.webhook_type)",
                              "children": [
                                {
                                  "value": "self.WebhookType",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "WebhookType",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(webhook.webhook_type)",
                                  "children": [
                                    {
                                      "value": "webhook.webhook_type",
                                      "children": [
                                        {
                                          "value": "webhook",
                                          "children": []
                                        },
                                        {
                                          "value": "webhook_type",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if webhook.credentials_id != credentials.id:\n            raise ValueError(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )",
                      "children": [
                        {
                          "value": "webhook.credentials_id != credentials.id",
                          "children": [
                            {
                              "value": "webhook.credentials_id",
                              "children": [
                                {
                                  "value": "webhook",
                                  "children": []
                                },
                                {
                                  "value": "credentials_id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "credentials.id",
                              "children": [
                                {
                                  "value": "credentials",
                                  "children": []
                                },
                                {
                                  "value": "id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )",
                          "children": [
                            {
                              "value": "raise ValueError(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )",
                              "children": [
                                {
                                  "value": "ValueError(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )",
                                      "children": [
                                        {
                                          "value": "f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Webhook #",
                                              "children": []
                                            },
                                            {
                                              "value": "{webhook.id}",
                                              "children": [
                                                {
                                                  "value": "webhook.id",
                                                  "children": [
                                                    {
                                                      "value": "webhook",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "does not belong to credentials",
                                              "children": []
                                            },
                                            {
                                              "value": "{credentials.id}",
                                              "children": [
                                                {
                                                  "value": "credentials.id",
                                                  "children": [
                                                    {
                                                      "value": "credentials",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }",
                      "children": [
                        {
                          "value": "headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }",
                          "children": [
                            {
                              "value": "headers",
                              "children": []
                            },
                            {
                              "value": "{\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }",
                              "children": [
                                {
                                  "value": "**self.GITHUB_API_DEFAULT_HEADERS",
                                  "children": [
                                    {
                                      "value": "self.GITHUB_API_DEFAULT_HEADERS",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "GITHUB_API_DEFAULT_HEADERS",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"Authorization\": credentials.bearer()",
                                  "children": [
                                    {
                                      "value": "\"Authorization\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Authorization",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "credentials.bearer()",
                                      "children": [
                                        {
                                          "value": "credentials.bearer",
                                          "children": [
                                            {
                                              "value": "credentials",
                                              "children": []
                                            },
                                            {
                                              "value": "bearer",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if webhook_type == self.WebhookType.REPO:\n            repo = webhook.resource\n            delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"  # noqa\n        else:\n            raise NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )",
                      "children": [
                        {
                          "value": "webhook_type == self.WebhookType.REPO",
                          "children": [
                            {
                              "value": "webhook_type",
                              "children": []
                            },
                            {
                              "value": "self.WebhookType.REPO",
                              "children": [
                                {
                                  "value": "self.WebhookType",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "WebhookType",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "REPO",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "repo = webhook.resource\n            delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"  # noqa",
                          "children": [
                            {
                              "value": "repo = webhook.resource",
                              "children": [
                                {
                                  "value": "repo = webhook.resource",
                                  "children": [
                                    {
                                      "value": "repo",
                                      "children": []
                                    },
                                    {
                                      "value": "webhook.resource",
                                      "children": [
                                        {
                                          "value": "webhook",
                                          "children": []
                                        },
                                        {
                                          "value": "resource",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"",
                              "children": [
                                {
                                  "value": "delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"",
                                  "children": [
                                    {
                                      "value": "delete_url",
                                      "children": []
                                    },
                                    {
                                      "value": "f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "{self.GITHUB_API_URL}",
                                          "children": [
                                            {
                                              "value": "self.GITHUB_API_URL",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "GITHUB_API_URL",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "/repos/",
                                          "children": []
                                        },
                                        {
                                          "value": "{repo}",
                                          "children": [
                                            {
                                              "value": "repo",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "/hooks/",
                                          "children": []
                                        },
                                        {
                                          "value": "{webhook.provider_webhook_id}",
                                          "children": [
                                            {
                                              "value": "webhook.provider_webhook_id",
                                              "children": [
                                                {
                                                  "value": "webhook",
                                                  "children": []
                                                },
                                                {
                                                  "value": "provider_webhook_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# noqa",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "else:\n            raise NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )",
                          "children": [
                            {
                              "value": "raise NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )",
                              "children": [
                                {
                                  "value": "raise NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )",
                                  "children": [
                                    {
                                      "value": "NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )",
                                      "children": [
                                        {
                                          "value": "NotImplementedError",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )",
                                          "children": [
                                            {
                                              "value": "f\"Unsupported webhook type '{webhook.webhook_type}'\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Unsupported webhook type '",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{webhook.webhook_type}",
                                                  "children": [
                                                    {
                                                      "value": "webhook.webhook_type",
                                                      "children": [
                                                        {
                                                          "value": "webhook",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "webhook_type",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "response = requests.delete(delete_url, headers=headers)",
                      "children": [
                        {
                          "value": "response = requests.delete(delete_url, headers=headers)",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "requests.delete(delete_url, headers=headers)",
                              "children": [
                                {
                                  "value": "requests.delete",
                                  "children": [
                                    {
                                      "value": "requests",
                                      "children": []
                                    },
                                    {
                                      "value": "delete",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(delete_url, headers=headers)",
                                  "children": [
                                    {
                                      "value": "delete_url",
                                      "children": []
                                    },
                                    {
                                      "value": "headers=headers",
                                      "children": [
                                        {
                                          "value": "headers",
                                          "children": []
                                        },
                                        {
                                          "value": "headers",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if response.status_code not in [204, 404]:\n            # 204 means successful deletion, 404 means the webhook was already deleted\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")",
                      "children": [
                        {
                          "value": "response.status_code not in [204, 404]",
                          "children": [
                            {
                              "value": "response.status_code",
                              "children": [
                                {
                                  "value": "response",
                                  "children": []
                                },
                                {
                                  "value": "status_code",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "[204, 404]",
                              "children": [
                                {
                                  "value": "204",
                                  "children": []
                                },
                                {
                                  "value": "404",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# 204 means successful deletion, 404 means the webhook was already deleted",
                          "children": []
                        },
                        {
                          "value": "error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")",
                          "children": [
                            {
                              "value": "error_msg = extract_github_error_msg(response)",
                              "children": [
                                {
                                  "value": "error_msg = extract_github_error_msg(response)",
                                  "children": [
                                    {
                                      "value": "error_msg",
                                      "children": []
                                    },
                                    {
                                      "value": "extract_github_error_msg(response)",
                                      "children": [
                                        {
                                          "value": "extract_github_error_msg",
                                          "children": []
                                        },
                                        {
                                          "value": "(response)",
                                          "children": [
                                            {
                                              "value": "response",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")",
                              "children": [
                                {
                                  "value": "ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(f\"Failed to delete GitHub webhook: {error_msg}\")",
                                      "children": [
                                        {
                                          "value": "f\"Failed to delete GitHub webhook: {error_msg}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Failed to delete GitHub webhook:",
                                              "children": []
                                            },
                                            {
                                              "value": "{error_msg}",
                                              "children": [
                                                {
                                                  "value": "error_msg",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# If we reach here, the webhook was successfully deleted or didn't exist",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# --8<-- [end:GithubWebhooksManager]",
      "children": []
    },
    {
      "value": "def extract_github_error_msg(response: requests.Response) -> str:\n    error_msgs = []\n    resp = response.json()\n    if resp.get(\"message\"):\n        error_msgs.append(resp[\"message\"])\n    if resp.get(\"errors\"):\n        error_msgs.extend(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])\n    if resp.get(\"error\"):\n        if isinstance(resp[\"error\"], dict):\n            error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))\n        else:\n            error_msgs.append(resp[\"error\"])\n    return \"\\n\".join(error_msgs)",
      "children": [
        {
          "value": "extract_github_error_msg",
          "children": []
        },
        {
          "value": "(response: requests.Response)",
          "children": [
            {
              "value": "response: requests.Response",
              "children": [
                {
                  "value": "response",
                  "children": []
                },
                {
                  "value": "requests.Response",
                  "children": [
                    {
                      "value": "requests.Response",
                      "children": [
                        {
                          "value": "requests",
                          "children": []
                        },
                        {
                          "value": "Response",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "str",
          "children": [
            {
              "value": "str",
              "children": []
            }
          ]
        },
        {
          "value": "error_msgs = []\n    resp = response.json()\n    if resp.get(\"message\"):\n        error_msgs.append(resp[\"message\"])\n    if resp.get(\"errors\"):\n        error_msgs.extend(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])\n    if resp.get(\"error\"):\n        if isinstance(resp[\"error\"], dict):\n            error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))\n        else:\n            error_msgs.append(resp[\"error\"])\n    return \"\\n\".join(error_msgs)",
          "children": [
            {
              "value": "error_msgs = []",
              "children": [
                {
                  "value": "error_msgs = []",
                  "children": [
                    {
                      "value": "error_msgs",
                      "children": []
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "resp = response.json()",
              "children": [
                {
                  "value": "resp = response.json()",
                  "children": [
                    {
                      "value": "resp",
                      "children": []
                    },
                    {
                      "value": "response.json()",
                      "children": [
                        {
                          "value": "response.json",
                          "children": [
                            {
                              "value": "response",
                              "children": []
                            },
                            {
                              "value": "json",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if resp.get(\"message\"):\n        error_msgs.append(resp[\"message\"])",
              "children": [
                {
                  "value": "resp.get(\"message\")",
                  "children": [
                    {
                      "value": "resp.get",
                      "children": [
                        {
                          "value": "resp",
                          "children": []
                        },
                        {
                          "value": "get",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"message\")",
                      "children": [
                        {
                          "value": "\"message\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "message",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "error_msgs.append(resp[\"message\"])",
                  "children": [
                    {
                      "value": "error_msgs.append(resp[\"message\"])",
                      "children": [
                        {
                          "value": "error_msgs.append(resp[\"message\"])",
                          "children": [
                            {
                              "value": "error_msgs.append",
                              "children": [
                                {
                                  "value": "error_msgs",
                                  "children": []
                                },
                                {
                                  "value": "append",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(resp[\"message\"])",
                              "children": [
                                {
                                  "value": "resp[\"message\"]",
                                  "children": [
                                    {
                                      "value": "resp",
                                      "children": []
                                    },
                                    {
                                      "value": "\"message\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "message",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if resp.get(\"errors\"):\n        error_msgs.extend(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])",
              "children": [
                {
                  "value": "resp.get(\"errors\")",
                  "children": [
                    {
                      "value": "resp.get",
                      "children": [
                        {
                          "value": "resp",
                          "children": []
                        },
                        {
                          "value": "get",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"errors\")",
                      "children": [
                        {
                          "value": "\"errors\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "errors",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "error_msgs.extend(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])",
                  "children": [
                    {
                      "value": "error_msgs.extend(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])",
                      "children": [
                        {
                          "value": "error_msgs.extend(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])",
                          "children": [
                            {
                              "value": "error_msgs.extend",
                              "children": [
                                {
                                  "value": "error_msgs",
                                  "children": []
                                },
                                {
                                  "value": "extend",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])",
                              "children": [
                                {
                                  "value": "f\"* {err.get('message', err)}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "*",
                                      "children": []
                                    },
                                    {
                                      "value": "{err.get('message', err)}",
                                      "children": [
                                        {
                                          "value": "err.get('message', err)",
                                          "children": [
                                            {
                                              "value": "err.get",
                                              "children": [
                                                {
                                                  "value": "err",
                                                  "children": []
                                                },
                                                {
                                                  "value": "get",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "('message', err)",
                                              "children": [
                                                {
                                                  "value": "'message'",
                                                  "children": [
                                                    {
                                                      "value": "'",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "message",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "'",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "err",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "for err in resp[\"errors\"]",
                                  "children": [
                                    {
                                      "value": "err",
                                      "children": []
                                    },
                                    {
                                      "value": "resp[\"errors\"]",
                                      "children": [
                                        {
                                          "value": "resp",
                                          "children": []
                                        },
                                        {
                                          "value": "\"errors\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "errors",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if resp.get(\"error\"):\n        if isinstance(resp[\"error\"], dict):\n            error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))\n        else:\n            error_msgs.append(resp[\"error\"])",
              "children": [
                {
                  "value": "resp.get(\"error\")",
                  "children": [
                    {
                      "value": "resp.get",
                      "children": [
                        {
                          "value": "resp",
                          "children": []
                        },
                        {
                          "value": "get",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"error\")",
                      "children": [
                        {
                          "value": "\"error\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "error",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if isinstance(resp[\"error\"], dict):\n            error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))\n        else:\n            error_msgs.append(resp[\"error\"])",
                  "children": [
                    {
                      "value": "if isinstance(resp[\"error\"], dict):\n            error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))\n        else:\n            error_msgs.append(resp[\"error\"])",
                      "children": [
                        {
                          "value": "isinstance(resp[\"error\"], dict)",
                          "children": [
                            {
                              "value": "isinstance",
                              "children": []
                            },
                            {
                              "value": "(resp[\"error\"], dict)",
                              "children": [
                                {
                                  "value": "resp[\"error\"]",
                                  "children": [
                                    {
                                      "value": "resp",
                                      "children": []
                                    },
                                    {
                                      "value": "\"error\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "error",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "dict",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))",
                          "children": [
                            {
                              "value": "error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))",
                              "children": [
                                {
                                  "value": "error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))",
                                  "children": [
                                    {
                                      "value": "error_msgs.append",
                                      "children": [
                                        {
                                          "value": "error_msgs",
                                          "children": []
                                        },
                                        {
                                          "value": "append",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(resp[\"error\"].get(\"message\", resp[\"error\"]))",
                                      "children": [
                                        {
                                          "value": "resp[\"error\"].get(\"message\", resp[\"error\"])",
                                          "children": [
                                            {
                                              "value": "resp[\"error\"].get",
                                              "children": [
                                                {
                                                  "value": "resp[\"error\"]",
                                                  "children": [
                                                    {
                                                      "value": "resp",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"error\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "error",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "get",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\"message\", resp[\"error\"])",
                                              "children": [
                                                {
                                                  "value": "\"message\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "message",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "resp[\"error\"]",
                                                  "children": [
                                                    {
                                                      "value": "resp",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"error\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "error",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            error_msgs.append(resp[\"error\"])",
                          "children": [
                            {
                              "value": "error_msgs.append(resp[\"error\"])",
                              "children": [
                                {
                                  "value": "error_msgs.append(resp[\"error\"])",
                                  "children": [
                                    {
                                      "value": "error_msgs.append(resp[\"error\"])",
                                      "children": [
                                        {
                                          "value": "error_msgs.append",
                                          "children": [
                                            {
                                              "value": "error_msgs",
                                              "children": []
                                            },
                                            {
                                              "value": "append",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(resp[\"error\"])",
                                          "children": [
                                            {
                                              "value": "resp[\"error\"]",
                                              "children": [
                                                {
                                                  "value": "resp",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"error\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "error",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return \"\\n\".join(error_msgs)",
              "children": [
                {
                  "value": "\"\\n\".join(error_msgs)",
                  "children": [
                    {
                      "value": "\"\\n\".join",
                      "children": [
                        {
                          "value": "\"\\n\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "\\n",
                              "children": [
                                {
                                  "value": "\\n",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "join",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(error_msgs)",
                      "children": [
                        {
                          "value": "error_msgs",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}