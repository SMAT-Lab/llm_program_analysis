{
  "value": "from collections import defaultdict\nfrom datetime import datetime, timezone\nfrom multiprocessing import Manager\nfrom typing import Any, AsyncGenerator, Generator, Generic, TypeVar\n\nfrom prisma.enums import AgentExecutionStatus\nfrom prisma.models import (\n    AgentGraphExecution,\n    AgentNodeExecution,\n    AgentNodeExecutionInputOutput,\n)\nfrom pydantic import BaseModel\n\nfrom backend.data.block import BlockData, BlockInput, CompletedBlockOutput\nfrom backend.data.includes import EXECUTION_RESULT_INCLUDE, GRAPH_EXECUTION_INCLUDE\nfrom backend.data.queue import AsyncRedisEventBus, RedisEventBus\nfrom backend.util import json, mock\nfrom backend.util.settings import Config\n\n\nclass GraphExecutionEntry(BaseModel):\n    user_id: str\n    graph_exec_id: str\n    graph_id: str\n    start_node_execs: list[\"NodeExecutionEntry\"]\n\n\nclass NodeExecutionEntry(BaseModel):\n    user_id: str\n    graph_exec_id: str\n    graph_id: str\n    node_exec_id: str\n    node_id: str\n    data: BlockInput\n\n\nExecutionStatus = AgentExecutionStatus\n\nT = TypeVar(\"T\")\n\n\nclass ExecutionQueue(Generic[T]):\n    \"\"\"\n    Queue for managing the execution of agents.\n    This will be shared between different processes\n    \"\"\"\n\n    def __init__(self):\n        self.queue = Manager().Queue()\n\n    def add(self, execution: T) -> T:\n        self.queue.put(execution)\n        return execution\n\n    def get(self) -> T:\n        return self.queue.get()\n\n    def empty(self) -> bool:\n        return self.queue.empty()\n\n\nclass ExecutionResult(BaseModel):\n    graph_id: str\n    graph_version: int\n    graph_exec_id: str\n    node_exec_id: str\n    node_id: str\n    block_id: str\n    status: ExecutionStatus\n    input_data: BlockInput\n    output_data: CompletedBlockOutput\n    add_time: datetime\n    queue_time: datetime | None\n    start_time: datetime | None\n    end_time: datetime | None\n\n    @staticmethod\n    def from_graph(graph: AgentGraphExecution):\n        return ExecutionResult(\n            graph_id=graph.agentGraphId,\n            graph_version=graph.agentGraphVersion,\n            graph_exec_id=graph.id,\n            node_exec_id=\"\",\n            node_id=\"\",\n            block_id=\"\",\n            status=graph.executionStatus,\n            # TODO: Populate input_data & output_data from AgentNodeExecutions\n            #       Input & Output comes AgentInputBlock & AgentOutputBlock.\n            input_data={},\n            output_data={},\n            add_time=graph.createdAt,\n            queue_time=graph.createdAt,\n            start_time=graph.startedAt,\n            end_time=graph.updatedAt,\n        )\n\n    @staticmethod\n    def from_db(execution: AgentNodeExecution):\n        if execution.executionData:\n            # Execution that has been queued for execution will persist its data.\n            input_data = json.loads(execution.executionData, target_type=dict[str, Any])\n        else:\n            # For incomplete execution, executionData will not be yet available.\n            input_data: BlockInput = defaultdict()\n            for data in execution.Input or []:\n                input_data[data.name] = json.loads(data.data)\n\n        output_data: CompletedBlockOutput = defaultdict(list)\n        for data in execution.Output or []:\n            output_data[data.name].append(json.loads(data.data))\n\n        graph_execution: AgentGraphExecution | None = execution.AgentGraphExecution\n\n        return ExecutionResult(\n            graph_id=graph_execution.agentGraphId if graph_execution else \"\",\n            graph_version=graph_execution.agentGraphVersion if graph_execution else 0,\n            graph_exec_id=execution.agentGraphExecutionId,\n            block_id=execution.AgentNode.agentBlockId if execution.AgentNode else \"\",\n            node_exec_id=execution.id,\n            node_id=execution.agentNodeId,\n            status=execution.executionStatus,\n            input_data=input_data,\n            output_data=output_data,\n            add_time=execution.addedTime,\n            queue_time=execution.queuedTime,\n            start_time=execution.startedTime,\n            end_time=execution.endedTime,\n        )\n\n\n# --------------------- Model functions --------------------- #\n\n\nasync def create_graph_execution(\n    graph_id: str,\n    graph_version: int,\n    nodes_input: list[tuple[str, BlockInput]],\n    user_id: str,\n) -> tuple[str, list[ExecutionResult]]:\n    \"\"\"\n    Create a new AgentGraphExecution record.\n    Returns:\n        The id of the AgentGraphExecution and the list of ExecutionResult for each node.\n    \"\"\"\n    result = await AgentGraphExecution.prisma().create(\n        data={\n            \"agentGraphId\": graph_id,\n            \"agentGraphVersion\": graph_version,\n            \"executionStatus\": ExecutionStatus.QUEUED,\n            \"AgentNodeExecutions\": {\n                \"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]\n            },\n            \"userId\": user_id,\n        },\n        include=GRAPH_EXECUTION_INCLUDE,\n    )\n\n    return result.id, [\n        ExecutionResult.from_db(execution)\n        for execution in result.AgentNodeExecutions or []\n    ]\n\n\nasync def upsert_execution_input(\n    node_id: str,\n    graph_exec_id: str,\n    input_name: str,\n    input_data: Any,\n    node_exec_id: str | None = None,\n) -> tuple[str, BlockInput]:\n    \"\"\"\n    Insert AgentNodeExecutionInputOutput record for as one of AgentNodeExecution.Input.\n    If there is no AgentNodeExecution that has no `input_name` as input, create new one.\n\n    Args:\n        node_id: The id of the AgentNode.\n        graph_exec_id: The id of the AgentGraphExecution.\n        input_name: The name of the input data.\n        input_data: The input data to be inserted.\n        node_exec_id: [Optional] The id of the AgentNodeExecution that has no `input_name` as input. If not provided, it will find the eligible incomplete AgentNodeExecution or create a new one.\n\n    Returns:\n        * The id of the created or existing AgentNodeExecution.\n        * Dict of node input data, key is the input name, value is the input data.\n    \"\"\"\n    existing_execution = await AgentNodeExecution.prisma().find_first(\n        where={  # type: ignore\n            **({\"id\": node_exec_id} if node_exec_id else {}),\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_exec_id,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n            \"Input\": {\"every\": {\"name\": {\"not\": input_name}}},\n        },\n        order={\"addedTime\": \"asc\"},\n        include={\"Input\": True},\n    )\n    json_input_data = json.dumps(input_data)\n\n    if existing_execution:\n        await AgentNodeExecutionInputOutput.prisma().create(\n            data={\n                \"name\": input_name,\n                \"data\": json_input_data,\n                \"referencedByInputExecId\": existing_execution.id,\n            }\n        )\n        return existing_execution.id, {\n            **{\n                input_data.name: json.loads(input_data.data)\n                for input_data in existing_execution.Input or []\n            },\n            input_name: input_data,\n        }\n\n    elif not node_exec_id:\n        result = await AgentNodeExecution.prisma().create(\n            data={\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }\n        )\n        return result.id, {input_name: input_data}\n\n    else:\n        raise ValueError(\n            f\"NodeExecution {node_exec_id} not found or already has input {input_name}.\"\n        )\n\n\nasync def upsert_execution_output(\n    node_exec_id: str,\n    output_name: str,\n    output_data: Any,\n) -> None:\n    \"\"\"\n    Insert AgentNodeExecutionInputOutput record for as one of AgentNodeExecution.Output.\n    \"\"\"\n    await AgentNodeExecutionInputOutput.prisma().create(\n        data={\n            \"name\": output_name,\n            \"data\": json.dumps(output_data),\n            \"referencedByOutputExecId\": node_exec_id,\n        }\n    )\n\n\nasync def update_graph_execution_start_time(graph_exec_id: str):\n    await AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": ExecutionStatus.RUNNING,\n            \"startedAt\": datetime.now(tz=timezone.utc),\n        },\n    )\n\n\nasync def update_graph_execution_stats(\n    graph_exec_id: str,\n    stats: dict[str, Any],\n) -> ExecutionResult:\n    status = ExecutionStatus.FAILED if stats.get(\"error\") else ExecutionStatus.COMPLETED\n    res = await AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": status,\n            \"stats\": json.dumps(stats),\n        },\n    )\n    if not res:\n        raise ValueError(f\"Execution {graph_exec_id} not found.\")\n\n    return ExecutionResult.from_graph(res)\n\n\nasync def update_node_execution_stats(node_exec_id: str, stats: dict[str, Any]):\n    await AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data={\"stats\": json.dumps(stats)},\n    )\n\n\nasync def update_execution_status(\n    node_exec_id: str,\n    status: ExecutionStatus,\n    execution_data: BlockInput | None = None,\n    stats: dict[str, Any] | None = None,\n) -> ExecutionResult:\n    if status == ExecutionStatus.QUEUED and execution_data is None:\n        raise ValueError(\"Execution data must be provided when queuing an execution.\")\n\n    now = datetime.now(tz=timezone.utc)\n    data = {\n        **({\"executionStatus\": status}),\n        **({\"queuedTime\": now} if status == ExecutionStatus.QUEUED else {}),\n        **({\"startedTime\": now} if status == ExecutionStatus.RUNNING else {}),\n        **({\"endedTime\": now} if status == ExecutionStatus.FAILED else {}),\n        **({\"endedTime\": now} if status == ExecutionStatus.COMPLETED else {}),\n        **({\"executionData\": json.dumps(execution_data)} if execution_data else {}),\n        **({\"stats\": json.dumps(stats)} if stats else {}),\n    }\n\n    res = await AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data=data,  # type: ignore\n        include=EXECUTION_RESULT_INCLUDE,\n    )\n    if not res:\n        raise ValueError(f\"Execution {node_exec_id} not found.\")\n\n    return ExecutionResult.from_db(res)\n\n\nasync def get_execution_results(graph_exec_id: str) -> list[ExecutionResult]:\n    executions = await AgentNodeExecution.prisma().find_many(\n        where={\"agentGraphExecutionId\": graph_exec_id},\n        include=EXECUTION_RESULT_INCLUDE,\n        order=[\n            {\"queuedTime\": \"asc\"},\n            {\"addedTime\": \"asc\"},  # Fallback: Incomplete execs has no queuedTime.\n        ],\n    )\n    res = [ExecutionResult.from_db(execution) for execution in executions]\n    return res\n\n\nLIST_SPLIT = \"_$_\"\nDICT_SPLIT = \"_#_\"\nOBJC_SPLIT = \"_@_\"\n\n\ndef parse_execution_output(output: BlockData, name: str) -> Any | None:\n    # Allow extracting partial output data by name.\n    output_name, output_data = output\n\n    if name == output_name:\n        return output_data\n\n    if name.startswith(f\"{output_name}{LIST_SPLIT}\"):\n        index = int(name.split(LIST_SPLIT)[1])\n        if not isinstance(output_data, list) or len(output_data) <= index:\n            return None\n        return output_data[int(name.split(LIST_SPLIT)[1])]\n\n    if name.startswith(f\"{output_name}{DICT_SPLIT}\"):\n        index = name.split(DICT_SPLIT)[1]\n        if not isinstance(output_data, dict) or index not in output_data:\n            return None\n        return output_data[index]\n\n    if name.startswith(f\"{output_name}{OBJC_SPLIT}\"):\n        index = name.split(OBJC_SPLIT)[1]\n        if isinstance(output_data, object) and hasattr(output_data, index):\n            return getattr(output_data, index)\n        return None\n\n    return None\n\n\ndef merge_execution_input(data: BlockInput) -> BlockInput:\n    \"\"\"\n    Merge all dynamic input pins which described by the following pattern:\n    - <input_name>_$_<index> for list input.\n    - <input_name>_#_<index> for dict input.\n    - <input_name>_@_<index> for object input.\n    This function will construct pins with the same name into a single list/dict/object.\n    \"\"\"\n\n    # Merge all input with <input_name>_$_<index> into a single list.\n    items = list(data.items())\n\n    for key, value in items:\n        if LIST_SPLIT not in key:\n            continue\n        name, index = key.split(LIST_SPLIT)\n        if not index.isdigit():\n            raise ValueError(f\"Invalid key: {key}, #{index} index must be an integer.\")\n\n        data[name] = data.get(name, [])\n        if int(index) >= len(data[name]):\n            # Pad list with empty string on missing indices.\n            data[name].extend([\"\"] * (int(index) - len(data[name]) + 1))\n        data[name][int(index)] = value\n\n    # Merge all input with <input_name>_#_<index> into a single dict.\n    for key, value in items:\n        if DICT_SPLIT not in key:\n            continue\n        name, index = key.split(DICT_SPLIT)\n        data[name] = data.get(name, {})\n        data[name][index] = value\n\n    # Merge all input with <input_name>_@_<index> into a single object.\n    for key, value in items:\n        if OBJC_SPLIT not in key:\n            continue\n        name, index = key.split(OBJC_SPLIT)\n        if name not in data or not isinstance(data[name], object):\n            data[name] = mock.MockObject()\n        setattr(data[name], index, value)\n\n    return data\n\n\nasync def get_latest_execution(node_id: str, graph_eid: str) -> ExecutionResult | None:\n    execution = await AgentNodeExecution.prisma().find_first(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": {\"not\": ExecutionStatus.INCOMPLETE},\n            \"executionData\": {\"not\": None},  # type: ignore\n        },\n        order={\"queuedTime\": \"desc\"},\n        include=EXECUTION_RESULT_INCLUDE,\n    )\n    if not execution:\n        return None\n    return ExecutionResult.from_db(execution)\n\n\nasync def get_incomplete_executions(\n    node_id: str, graph_eid: str\n) -> list[ExecutionResult]:\n    executions = await AgentNodeExecution.prisma().find_many(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n        },\n        include=EXECUTION_RESULT_INCLUDE,\n    )\n    return [ExecutionResult.from_db(execution) for execution in executions]\n\n\n# --------------------- Event Bus --------------------- #\n\nconfig = Config()\n\n\nclass RedisExecutionEventBus(RedisEventBus[ExecutionResult]):\n    Model = ExecutionResult\n\n    @property\n    def event_bus_name(self) -> str:\n        return config.execution_event_bus_name\n\n    def publish(self, res: ExecutionResult):\n        self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")\n\n    def listen(\n        self, graph_id: str = \"*\", graph_exec_id: str = \"*\"\n    ) -> Generator[ExecutionResult, None, None]:\n        for execution_result in self.listen_events(f\"{graph_id}/{graph_exec_id}\"):\n            yield execution_result\n\n\nclass AsyncRedisExecutionEventBus(AsyncRedisEventBus[ExecutionResult]):\n    Model = ExecutionResult\n\n    @property\n    def event_bus_name(self) -> str:\n        return config.execution_event_bus_name\n\n    async def publish(self, res: ExecutionResult):\n        await self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")\n\n    async def listen(\n        self, graph_id: str = \"*\", graph_exec_id: str = \"*\"\n    ) -> AsyncGenerator[ExecutionResult, None]:\n        async for execution_result in self.listen_events(f\"{graph_id}/{graph_exec_id}\"):\n            yield execution_result",
  "children": [
    {
      "value": "from collections import defaultdict",
      "children": [
        {
          "value": "collections",
          "children": [
            {
              "value": "collections",
              "children": []
            }
          ]
        },
        {
          "value": "defaultdict",
          "children": [
            {
              "value": "defaultdict",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from datetime import datetime, timezone",
      "children": [
        {
          "value": "datetime",
          "children": [
            {
              "value": "datetime",
              "children": []
            }
          ]
        },
        {
          "value": "datetime",
          "children": [
            {
              "value": "datetime",
              "children": []
            }
          ]
        },
        {
          "value": "timezone",
          "children": [
            {
              "value": "timezone",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from multiprocessing import Manager",
      "children": [
        {
          "value": "multiprocessing",
          "children": [
            {
              "value": "multiprocessing",
              "children": []
            }
          ]
        },
        {
          "value": "Manager",
          "children": [
            {
              "value": "Manager",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Any, AsyncGenerator, Generator, Generic, TypeVar",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "AsyncGenerator",
          "children": [
            {
              "value": "AsyncGenerator",
              "children": []
            }
          ]
        },
        {
          "value": "Generator",
          "children": [
            {
              "value": "Generator",
              "children": []
            }
          ]
        },
        {
          "value": "Generic",
          "children": [
            {
              "value": "Generic",
              "children": []
            }
          ]
        },
        {
          "value": "TypeVar",
          "children": [
            {
              "value": "TypeVar",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from prisma.enums import AgentExecutionStatus",
      "children": [
        {
          "value": "prisma.enums",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "enums",
              "children": []
            }
          ]
        },
        {
          "value": "AgentExecutionStatus",
          "children": [
            {
              "value": "AgentExecutionStatus",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from prisma.models import (\n    AgentGraphExecution,\n    AgentNodeExecution,\n    AgentNodeExecutionInputOutput,\n)",
      "children": [
        {
          "value": "prisma.models",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "models",
              "children": []
            }
          ]
        },
        {
          "value": "AgentGraphExecution",
          "children": [
            {
              "value": "AgentGraphExecution",
              "children": []
            }
          ]
        },
        {
          "value": "AgentNodeExecution",
          "children": [
            {
              "value": "AgentNodeExecution",
              "children": []
            }
          ]
        },
        {
          "value": "AgentNodeExecutionInputOutput",
          "children": [
            {
              "value": "AgentNodeExecutionInputOutput",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from pydantic import BaseModel",
      "children": [
        {
          "value": "pydantic",
          "children": [
            {
              "value": "pydantic",
              "children": []
            }
          ]
        },
        {
          "value": "BaseModel",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block import BlockData, BlockInput, CompletedBlockOutput",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        },
        {
          "value": "BlockData",
          "children": [
            {
              "value": "BlockData",
              "children": []
            }
          ]
        },
        {
          "value": "BlockInput",
          "children": [
            {
              "value": "BlockInput",
              "children": []
            }
          ]
        },
        {
          "value": "CompletedBlockOutput",
          "children": [
            {
              "value": "CompletedBlockOutput",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.includes import EXECUTION_RESULT_INCLUDE, GRAPH_EXECUTION_INCLUDE",
      "children": [
        {
          "value": "backend.data.includes",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "includes",
              "children": []
            }
          ]
        },
        {
          "value": "EXECUTION_RESULT_INCLUDE",
          "children": [
            {
              "value": "EXECUTION_RESULT_INCLUDE",
              "children": []
            }
          ]
        },
        {
          "value": "GRAPH_EXECUTION_INCLUDE",
          "children": [
            {
              "value": "GRAPH_EXECUTION_INCLUDE",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.queue import AsyncRedisEventBus, RedisEventBus",
      "children": [
        {
          "value": "backend.data.queue",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "queue",
              "children": []
            }
          ]
        },
        {
          "value": "AsyncRedisEventBus",
          "children": [
            {
              "value": "AsyncRedisEventBus",
              "children": []
            }
          ]
        },
        {
          "value": "RedisEventBus",
          "children": [
            {
              "value": "RedisEventBus",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util import json, mock",
      "children": [
        {
          "value": "backend.util",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            }
          ]
        },
        {
          "value": "json",
          "children": [
            {
              "value": "json",
              "children": []
            }
          ]
        },
        {
          "value": "mock",
          "children": [
            {
              "value": "mock",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Config",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Config",
          "children": [
            {
              "value": "Config",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class GraphExecutionEntry(BaseModel):\n    user_id: str\n    graph_exec_id: str\n    graph_id: str\n    start_node_execs: list[\"NodeExecutionEntry\"]",
      "children": [
        {
          "value": "GraphExecutionEntry",
          "children": []
        },
        {
          "value": "(BaseModel)",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        },
        {
          "value": "user_id: str\n    graph_exec_id: str\n    graph_id: str\n    start_node_execs: list[\"NodeExecutionEntry\"]",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id: str",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_exec_id: str",
              "children": [
                {
                  "value": "graph_exec_id: str",
                  "children": [
                    {
                      "value": "graph_exec_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_id: str",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "start_node_execs: list[\"NodeExecutionEntry\"]",
              "children": [
                {
                  "value": "start_node_execs: list[\"NodeExecutionEntry\"]",
                  "children": [
                    {
                      "value": "start_node_execs",
                      "children": []
                    },
                    {
                      "value": "list[\"NodeExecutionEntry\"]",
                      "children": [
                        {
                          "value": "list[\"NodeExecutionEntry\"]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[\"NodeExecutionEntry\"]",
                              "children": [
                                {
                                  "value": "\"NodeExecutionEntry\"",
                                  "children": [
                                    {
                                      "value": "\"NodeExecutionEntry\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "NodeExecutionEntry",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class NodeExecutionEntry(BaseModel):\n    user_id: str\n    graph_exec_id: str\n    graph_id: str\n    node_exec_id: str\n    node_id: str\n    data: BlockInput",
      "children": [
        {
          "value": "NodeExecutionEntry",
          "children": []
        },
        {
          "value": "(BaseModel)",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        },
        {
          "value": "user_id: str\n    graph_exec_id: str\n    graph_id: str\n    node_exec_id: str\n    node_id: str\n    data: BlockInput",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id: str",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_exec_id: str",
              "children": [
                {
                  "value": "graph_exec_id: str",
                  "children": [
                    {
                      "value": "graph_exec_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_id: str",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "node_exec_id: str",
              "children": [
                {
                  "value": "node_exec_id: str",
                  "children": [
                    {
                      "value": "node_exec_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "node_id: str",
              "children": [
                {
                  "value": "node_id: str",
                  "children": [
                    {
                      "value": "node_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "data: BlockInput",
              "children": [
                {
                  "value": "data: BlockInput",
                  "children": [
                    {
                      "value": "data",
                      "children": []
                    },
                    {
                      "value": "BlockInput",
                      "children": [
                        {
                          "value": "BlockInput",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "ExecutionStatus = AgentExecutionStatus",
      "children": [
        {
          "value": "ExecutionStatus = AgentExecutionStatus",
          "children": [
            {
              "value": "ExecutionStatus",
              "children": []
            },
            {
              "value": "AgentExecutionStatus",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "T = TypeVar(\"T\")",
      "children": [
        {
          "value": "T = TypeVar(\"T\")",
          "children": [
            {
              "value": "T",
              "children": []
            },
            {
              "value": "TypeVar(\"T\")",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"T\")",
                  "children": [
                    {
                      "value": "\"T\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "T",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class ExecutionQueue(Generic[T]):\n    \"\"\"\n    Queue for managing the execution of agents.\n    This will be shared between different processes\n    \"\"\"\n\n    def __init__(self):\n        self.queue = Manager().Queue()\n\n    def add(self, execution: T) -> T:\n        self.queue.put(execution)\n        return execution\n\n    def get(self) -> T:\n        return self.queue.get()\n\n    def empty(self) -> bool:\n        return self.queue.empty()",
      "children": [
        {
          "value": "ExecutionQueue",
          "children": []
        },
        {
          "value": "(Generic[T])",
          "children": [
            {
              "value": "Generic[T]",
              "children": [
                {
                  "value": "Generic",
                  "children": []
                },
                {
                  "value": "T",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Queue for managing the execution of agents.\n    This will be shared between different processes\n    \"\"\"\n\n    def __init__(self):\n        self.queue = Manager().Queue()\n\n    def add(self, execution: T) -> T:\n        self.queue.put(execution)\n        return execution\n\n    def get(self) -> T:\n        return self.queue.get()\n\n    def empty(self) -> bool:\n        return self.queue.empty()",
          "children": [
            {
              "value": "\"\"\"\n    Queue for managing the execution of agents.\n    This will be shared between different processes\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Queue for managing the execution of agents.\n    This will be shared between different processes\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Queue for managing the execution of agents.\n    This will be shared between different processes",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        self.queue = Manager().Queue()",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.queue = Manager().Queue()",
                  "children": [
                    {
                      "value": "self.queue = Manager().Queue()",
                      "children": [
                        {
                          "value": "self.queue = Manager().Queue()",
                          "children": [
                            {
                              "value": "self.queue",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "queue",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Manager().Queue()",
                              "children": [
                                {
                                  "value": "Manager().Queue",
                                  "children": [
                                    {
                                      "value": "Manager()",
                                      "children": [
                                        {
                                          "value": "Manager",
                                          "children": []
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "Queue",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def add(self, execution: T) -> T:\n        self.queue.put(execution)\n        return execution",
              "children": [
                {
                  "value": "add",
                  "children": []
                },
                {
                  "value": "(self, execution: T)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "execution: T",
                      "children": [
                        {
                          "value": "execution",
                          "children": []
                        },
                        {
                          "value": "T",
                          "children": [
                            {
                              "value": "T",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "T",
                  "children": [
                    {
                      "value": "T",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.queue.put(execution)\n        return execution",
                  "children": [
                    {
                      "value": "self.queue.put(execution)",
                      "children": [
                        {
                          "value": "self.queue.put(execution)",
                          "children": [
                            {
                              "value": "self.queue.put",
                              "children": [
                                {
                                  "value": "self.queue",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "queue",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "put",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(execution)",
                              "children": [
                                {
                                  "value": "execution",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return execution",
                      "children": [
                        {
                          "value": "execution",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def get(self) -> T:\n        return self.queue.get()",
              "children": [
                {
                  "value": "get",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "T",
                  "children": [
                    {
                      "value": "T",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return self.queue.get()",
                  "children": [
                    {
                      "value": "return self.queue.get()",
                      "children": [
                        {
                          "value": "self.queue.get()",
                          "children": [
                            {
                              "value": "self.queue.get",
                              "children": [
                                {
                                  "value": "self.queue",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "queue",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "get",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def empty(self) -> bool:\n        return self.queue.empty()",
              "children": [
                {
                  "value": "empty",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return self.queue.empty()",
                  "children": [
                    {
                      "value": "return self.queue.empty()",
                      "children": [
                        {
                          "value": "self.queue.empty()",
                          "children": [
                            {
                              "value": "self.queue.empty",
                              "children": [
                                {
                                  "value": "self.queue",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "queue",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "empty",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class ExecutionResult(BaseModel):\n    graph_id: str\n    graph_version: int\n    graph_exec_id: str\n    node_exec_id: str\n    node_id: str\n    block_id: str\n    status: ExecutionStatus\n    input_data: BlockInput\n    output_data: CompletedBlockOutput\n    add_time: datetime\n    queue_time: datetime | None\n    start_time: datetime | None\n    end_time: datetime | None\n\n    @staticmethod\n    def from_graph(graph: AgentGraphExecution):\n        return ExecutionResult(\n            graph_id=graph.agentGraphId,\n            graph_version=graph.agentGraphVersion,\n            graph_exec_id=graph.id,\n            node_exec_id=\"\",\n            node_id=\"\",\n            block_id=\"\",\n            status=graph.executionStatus,\n            # TODO: Populate input_data & output_data from AgentNodeExecutions\n            #       Input & Output comes AgentInputBlock & AgentOutputBlock.\n            input_data={},\n            output_data={},\n            add_time=graph.createdAt,\n            queue_time=graph.createdAt,\n            start_time=graph.startedAt,\n            end_time=graph.updatedAt,\n        )\n\n    @staticmethod\n    def from_db(execution: AgentNodeExecution):\n        if execution.executionData:\n            # Execution that has been queued for execution will persist its data.\n            input_data = json.loads(execution.executionData, target_type=dict[str, Any])\n        else:\n            # For incomplete execution, executionData will not be yet available.\n            input_data: BlockInput = defaultdict()\n            for data in execution.Input or []:\n                input_data[data.name] = json.loads(data.data)\n\n        output_data: CompletedBlockOutput = defaultdict(list)\n        for data in execution.Output or []:\n            output_data[data.name].append(json.loads(data.data))\n\n        graph_execution: AgentGraphExecution | None = execution.AgentGraphExecution\n\n        return ExecutionResult(\n            graph_id=graph_execution.agentGraphId if graph_execution else \"\",\n            graph_version=graph_execution.agentGraphVersion if graph_execution else 0,\n            graph_exec_id=execution.agentGraphExecutionId,\n            block_id=execution.AgentNode.agentBlockId if execution.AgentNode else \"\",\n            node_exec_id=execution.id,\n            node_id=execution.agentNodeId,\n            status=execution.executionStatus,\n            input_data=input_data,\n            output_data=output_data,\n            add_time=execution.addedTime,\n            queue_time=execution.queuedTime,\n            start_time=execution.startedTime,\n            end_time=execution.endedTime,\n        )",
      "children": [
        {
          "value": "ExecutionResult",
          "children": []
        },
        {
          "value": "(BaseModel)",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        },
        {
          "value": "graph_id: str\n    graph_version: int\n    graph_exec_id: str\n    node_exec_id: str\n    node_id: str\n    block_id: str\n    status: ExecutionStatus\n    input_data: BlockInput\n    output_data: CompletedBlockOutput\n    add_time: datetime\n    queue_time: datetime | None\n    start_time: datetime | None\n    end_time: datetime | None\n\n    @staticmethod\n    def from_graph(graph: AgentGraphExecution):\n        return ExecutionResult(\n            graph_id=graph.agentGraphId,\n            graph_version=graph.agentGraphVersion,\n            graph_exec_id=graph.id,\n            node_exec_id=\"\",\n            node_id=\"\",\n            block_id=\"\",\n            status=graph.executionStatus,\n            # TODO: Populate input_data & output_data from AgentNodeExecutions\n            #       Input & Output comes AgentInputBlock & AgentOutputBlock.\n            input_data={},\n            output_data={},\n            add_time=graph.createdAt,\n            queue_time=graph.createdAt,\n            start_time=graph.startedAt,\n            end_time=graph.updatedAt,\n        )\n\n    @staticmethod\n    def from_db(execution: AgentNodeExecution):\n        if execution.executionData:\n            # Execution that has been queued for execution will persist its data.\n            input_data = json.loads(execution.executionData, target_type=dict[str, Any])\n        else:\n            # For incomplete execution, executionData will not be yet available.\n            input_data: BlockInput = defaultdict()\n            for data in execution.Input or []:\n                input_data[data.name] = json.loads(data.data)\n\n        output_data: CompletedBlockOutput = defaultdict(list)\n        for data in execution.Output or []:\n            output_data[data.name].append(json.loads(data.data))\n\n        graph_execution: AgentGraphExecution | None = execution.AgentGraphExecution\n\n        return ExecutionResult(\n            graph_id=graph_execution.agentGraphId if graph_execution else \"\",\n            graph_version=graph_execution.agentGraphVersion if graph_execution else 0,\n            graph_exec_id=execution.agentGraphExecutionId,\n            block_id=execution.AgentNode.agentBlockId if execution.AgentNode else \"\",\n            node_exec_id=execution.id,\n            node_id=execution.agentNodeId,\n            status=execution.executionStatus,\n            input_data=input_data,\n            output_data=output_data,\n            add_time=execution.addedTime,\n            queue_time=execution.queuedTime,\n            start_time=execution.startedTime,\n            end_time=execution.endedTime,\n        )",
          "children": [
            {
              "value": "graph_id: str",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_version: int",
              "children": [
                {
                  "value": "graph_version: int",
                  "children": [
                    {
                      "value": "graph_version",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_exec_id: str",
              "children": [
                {
                  "value": "graph_exec_id: str",
                  "children": [
                    {
                      "value": "graph_exec_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "node_exec_id: str",
              "children": [
                {
                  "value": "node_exec_id: str",
                  "children": [
                    {
                      "value": "node_exec_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "node_id: str",
              "children": [
                {
                  "value": "node_id: str",
                  "children": [
                    {
                      "value": "node_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "block_id: str",
              "children": [
                {
                  "value": "block_id: str",
                  "children": [
                    {
                      "value": "block_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "status: ExecutionStatus",
              "children": [
                {
                  "value": "status: ExecutionStatus",
                  "children": [
                    {
                      "value": "status",
                      "children": []
                    },
                    {
                      "value": "ExecutionStatus",
                      "children": [
                        {
                          "value": "ExecutionStatus",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "input_data: BlockInput",
              "children": [
                {
                  "value": "input_data: BlockInput",
                  "children": [
                    {
                      "value": "input_data",
                      "children": []
                    },
                    {
                      "value": "BlockInput",
                      "children": [
                        {
                          "value": "BlockInput",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "output_data: CompletedBlockOutput",
              "children": [
                {
                  "value": "output_data: CompletedBlockOutput",
                  "children": [
                    {
                      "value": "output_data",
                      "children": []
                    },
                    {
                      "value": "CompletedBlockOutput",
                      "children": [
                        {
                          "value": "CompletedBlockOutput",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "add_time: datetime",
              "children": [
                {
                  "value": "add_time: datetime",
                  "children": [
                    {
                      "value": "add_time",
                      "children": []
                    },
                    {
                      "value": "datetime",
                      "children": [
                        {
                          "value": "datetime",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "queue_time: datetime | None",
              "children": [
                {
                  "value": "queue_time: datetime | None",
                  "children": [
                    {
                      "value": "queue_time",
                      "children": []
                    },
                    {
                      "value": "datetime | None",
                      "children": [
                        {
                          "value": "datetime | None",
                          "children": [
                            {
                              "value": "datetime",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "start_time: datetime | None",
              "children": [
                {
                  "value": "start_time: datetime | None",
                  "children": [
                    {
                      "value": "start_time",
                      "children": []
                    },
                    {
                      "value": "datetime | None",
                      "children": [
                        {
                          "value": "datetime | None",
                          "children": [
                            {
                              "value": "datetime",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "end_time: datetime | None",
              "children": [
                {
                  "value": "end_time: datetime | None",
                  "children": [
                    {
                      "value": "end_time",
                      "children": []
                    },
                    {
                      "value": "datetime | None",
                      "children": [
                        {
                          "value": "datetime | None",
                          "children": [
                            {
                              "value": "datetime",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def from_graph(graph: AgentGraphExecution):\n        return ExecutionResult(\n            graph_id=graph.agentGraphId,\n            graph_version=graph.agentGraphVersion,\n            graph_exec_id=graph.id,\n            node_exec_id=\"\",\n            node_id=\"\",\n            block_id=\"\",\n            status=graph.executionStatus,\n            # TODO: Populate input_data & output_data from AgentNodeExecutions\n            #       Input & Output comes AgentInputBlock & AgentOutputBlock.\n            input_data={},\n            output_data={},\n            add_time=graph.createdAt,\n            queue_time=graph.createdAt,\n            start_time=graph.startedAt,\n            end_time=graph.updatedAt,\n        )",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def from_graph(graph: AgentGraphExecution):\n        return ExecutionResult(\n            graph_id=graph.agentGraphId,\n            graph_version=graph.agentGraphVersion,\n            graph_exec_id=graph.id,\n            node_exec_id=\"\",\n            node_id=\"\",\n            block_id=\"\",\n            status=graph.executionStatus,\n            # TODO: Populate input_data & output_data from AgentNodeExecutions\n            #       Input & Output comes AgentInputBlock & AgentOutputBlock.\n            input_data={},\n            output_data={},\n            add_time=graph.createdAt,\n            queue_time=graph.createdAt,\n            start_time=graph.startedAt,\n            end_time=graph.updatedAt,\n        )",
                  "children": [
                    {
                      "value": "from_graph",
                      "children": []
                    },
                    {
                      "value": "(graph: AgentGraphExecution)",
                      "children": [
                        {
                          "value": "graph: AgentGraphExecution",
                          "children": [
                            {
                              "value": "graph",
                              "children": []
                            },
                            {
                              "value": "AgentGraphExecution",
                              "children": [
                                {
                                  "value": "AgentGraphExecution",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return ExecutionResult(\n            graph_id=graph.agentGraphId,\n            graph_version=graph.agentGraphVersion,\n            graph_exec_id=graph.id,\n            node_exec_id=\"\",\n            node_id=\"\",\n            block_id=\"\",\n            status=graph.executionStatus,\n            # TODO: Populate input_data & output_data from AgentNodeExecutions\n            #       Input & Output comes AgentInputBlock & AgentOutputBlock.\n            input_data={},\n            output_data={},\n            add_time=graph.createdAt,\n            queue_time=graph.createdAt,\n            start_time=graph.startedAt,\n            end_time=graph.updatedAt,\n        )",
                      "children": [
                        {
                          "value": "return ExecutionResult(\n            graph_id=graph.agentGraphId,\n            graph_version=graph.agentGraphVersion,\n            graph_exec_id=graph.id,\n            node_exec_id=\"\",\n            node_id=\"\",\n            block_id=\"\",\n            status=graph.executionStatus,\n            # TODO: Populate input_data & output_data from AgentNodeExecutions\n            #       Input & Output comes AgentInputBlock & AgentOutputBlock.\n            input_data={},\n            output_data={},\n            add_time=graph.createdAt,\n            queue_time=graph.createdAt,\n            start_time=graph.startedAt,\n            end_time=graph.updatedAt,\n        )",
                          "children": [
                            {
                              "value": "ExecutionResult(\n            graph_id=graph.agentGraphId,\n            graph_version=graph.agentGraphVersion,\n            graph_exec_id=graph.id,\n            node_exec_id=\"\",\n            node_id=\"\",\n            block_id=\"\",\n            status=graph.executionStatus,\n            # TODO: Populate input_data & output_data from AgentNodeExecutions\n            #       Input & Output comes AgentInputBlock & AgentOutputBlock.\n            input_data={},\n            output_data={},\n            add_time=graph.createdAt,\n            queue_time=graph.createdAt,\n            start_time=graph.startedAt,\n            end_time=graph.updatedAt,\n        )",
                              "children": [
                                {
                                  "value": "ExecutionResult",
                                  "children": []
                                },
                                {
                                  "value": "(\n            graph_id=graph.agentGraphId,\n            graph_version=graph.agentGraphVersion,\n            graph_exec_id=graph.id,\n            node_exec_id=\"\",\n            node_id=\"\",\n            block_id=\"\",\n            status=graph.executionStatus,\n            # TODO: Populate input_data & output_data from AgentNodeExecutions\n            #       Input & Output comes AgentInputBlock & AgentOutputBlock.\n            input_data={},\n            output_data={},\n            add_time=graph.createdAt,\n            queue_time=graph.createdAt,\n            start_time=graph.startedAt,\n            end_time=graph.updatedAt,\n        )",
                                  "children": [
                                    {
                                      "value": "graph_id=graph.agentGraphId",
                                      "children": [
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.agentGraphId",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "agentGraphId",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "graph_version=graph.agentGraphVersion",
                                      "children": [
                                        {
                                          "value": "graph_version",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.agentGraphVersion",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "agentGraphVersion",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "graph_exec_id=graph.id",
                                      "children": [
                                        {
                                          "value": "graph_exec_id",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.id",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "node_exec_id=\"\"",
                                      "children": [
                                        {
                                          "value": "node_exec_id",
                                          "children": []
                                        },
                                        {
                                          "value": "\"\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "node_id=\"\"",
                                      "children": [
                                        {
                                          "value": "node_id",
                                          "children": []
                                        },
                                        {
                                          "value": "\"\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "block_id=\"\"",
                                      "children": [
                                        {
                                          "value": "block_id",
                                          "children": []
                                        },
                                        {
                                          "value": "\"\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "status=graph.executionStatus",
                                      "children": [
                                        {
                                          "value": "status",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.executionStatus",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "executionStatus",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# TODO: Populate input_data & output_data from AgentNodeExecutions",
                                      "children": []
                                    },
                                    {
                                      "value": "#       Input & Output comes AgentInputBlock & AgentOutputBlock.",
                                      "children": []
                                    },
                                    {
                                      "value": "input_data={}",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "{}",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "output_data={}",
                                      "children": [
                                        {
                                          "value": "output_data",
                                          "children": []
                                        },
                                        {
                                          "value": "{}",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "add_time=graph.createdAt",
                                      "children": [
                                        {
                                          "value": "add_time",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.createdAt",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "createdAt",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "queue_time=graph.createdAt",
                                      "children": [
                                        {
                                          "value": "queue_time",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.createdAt",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "createdAt",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "start_time=graph.startedAt",
                                      "children": [
                                        {
                                          "value": "start_time",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.startedAt",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "startedAt",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "end_time=graph.updatedAt",
                                      "children": [
                                        {
                                          "value": "end_time",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.updatedAt",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "updatedAt",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def from_db(execution: AgentNodeExecution):\n        if execution.executionData:\n            # Execution that has been queued for execution will persist its data.\n            input_data = json.loads(execution.executionData, target_type=dict[str, Any])\n        else:\n            # For incomplete execution, executionData will not be yet available.\n            input_data: BlockInput = defaultdict()\n            for data in execution.Input or []:\n                input_data[data.name] = json.loads(data.data)\n\n        output_data: CompletedBlockOutput = defaultdict(list)\n        for data in execution.Output or []:\n            output_data[data.name].append(json.loads(data.data))\n\n        graph_execution: AgentGraphExecution | None = execution.AgentGraphExecution\n\n        return ExecutionResult(\n            graph_id=graph_execution.agentGraphId if graph_execution else \"\",\n            graph_version=graph_execution.agentGraphVersion if graph_execution else 0,\n            graph_exec_id=execution.agentGraphExecutionId,\n            block_id=execution.AgentNode.agentBlockId if execution.AgentNode else \"\",\n            node_exec_id=execution.id,\n            node_id=execution.agentNodeId,\n            status=execution.executionStatus,\n            input_data=input_data,\n            output_data=output_data,\n            add_time=execution.addedTime,\n            queue_time=execution.queuedTime,\n            start_time=execution.startedTime,\n            end_time=execution.endedTime,\n        )",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def from_db(execution: AgentNodeExecution):\n        if execution.executionData:\n            # Execution that has been queued for execution will persist its data.\n            input_data = json.loads(execution.executionData, target_type=dict[str, Any])\n        else:\n            # For incomplete execution, executionData will not be yet available.\n            input_data: BlockInput = defaultdict()\n            for data in execution.Input or []:\n                input_data[data.name] = json.loads(data.data)\n\n        output_data: CompletedBlockOutput = defaultdict(list)\n        for data in execution.Output or []:\n            output_data[data.name].append(json.loads(data.data))\n\n        graph_execution: AgentGraphExecution | None = execution.AgentGraphExecution\n\n        return ExecutionResult(\n            graph_id=graph_execution.agentGraphId if graph_execution else \"\",\n            graph_version=graph_execution.agentGraphVersion if graph_execution else 0,\n            graph_exec_id=execution.agentGraphExecutionId,\n            block_id=execution.AgentNode.agentBlockId if execution.AgentNode else \"\",\n            node_exec_id=execution.id,\n            node_id=execution.agentNodeId,\n            status=execution.executionStatus,\n            input_data=input_data,\n            output_data=output_data,\n            add_time=execution.addedTime,\n            queue_time=execution.queuedTime,\n            start_time=execution.startedTime,\n            end_time=execution.endedTime,\n        )",
                  "children": [
                    {
                      "value": "from_db",
                      "children": []
                    },
                    {
                      "value": "(execution: AgentNodeExecution)",
                      "children": [
                        {
                          "value": "execution: AgentNodeExecution",
                          "children": [
                            {
                              "value": "execution",
                              "children": []
                            },
                            {
                              "value": "AgentNodeExecution",
                              "children": [
                                {
                                  "value": "AgentNodeExecution",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if execution.executionData:\n            # Execution that has been queued for execution will persist its data.\n            input_data = json.loads(execution.executionData, target_type=dict[str, Any])\n        else:\n            # For incomplete execution, executionData will not be yet available.\n            input_data: BlockInput = defaultdict()\n            for data in execution.Input or []:\n                input_data[data.name] = json.loads(data.data)\n\n        output_data: CompletedBlockOutput = defaultdict(list)\n        for data in execution.Output or []:\n            output_data[data.name].append(json.loads(data.data))\n\n        graph_execution: AgentGraphExecution | None = execution.AgentGraphExecution\n\n        return ExecutionResult(\n            graph_id=graph_execution.agentGraphId if graph_execution else \"\",\n            graph_version=graph_execution.agentGraphVersion if graph_execution else 0,\n            graph_exec_id=execution.agentGraphExecutionId,\n            block_id=execution.AgentNode.agentBlockId if execution.AgentNode else \"\",\n            node_exec_id=execution.id,\n            node_id=execution.agentNodeId,\n            status=execution.executionStatus,\n            input_data=input_data,\n            output_data=output_data,\n            add_time=execution.addedTime,\n            queue_time=execution.queuedTime,\n            start_time=execution.startedTime,\n            end_time=execution.endedTime,\n        )",
                      "children": [
                        {
                          "value": "if execution.executionData:\n            # Execution that has been queued for execution will persist its data.\n            input_data = json.loads(execution.executionData, target_type=dict[str, Any])\n        else:\n            # For incomplete execution, executionData will not be yet available.\n            input_data: BlockInput = defaultdict()\n            for data in execution.Input or []:\n                input_data[data.name] = json.loads(data.data)",
                          "children": [
                            {
                              "value": "execution.executionData",
                              "children": [
                                {
                                  "value": "execution",
                                  "children": []
                                },
                                {
                                  "value": "executionData",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "# Execution that has been queued for execution will persist its data.",
                              "children": []
                            },
                            {
                              "value": "input_data = json.loads(execution.executionData, target_type=dict[str, Any])",
                              "children": [
                                {
                                  "value": "input_data = json.loads(execution.executionData, target_type=dict[str, Any])",
                                  "children": [
                                    {
                                      "value": "input_data = json.loads(execution.executionData, target_type=dict[str, Any])",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "json.loads(execution.executionData, target_type=dict[str, Any])",
                                          "children": [
                                            {
                                              "value": "json.loads",
                                              "children": [
                                                {
                                                  "value": "json",
                                                  "children": []
                                                },
                                                {
                                                  "value": "loads",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(execution.executionData, target_type=dict[str, Any])",
                                              "children": [
                                                {
                                                  "value": "execution.executionData",
                                                  "children": [
                                                    {
                                                      "value": "execution",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "executionData",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "target_type=dict[str, Any]",
                                                  "children": [
                                                    {
                                                      "value": "target_type",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "dict[str, Any]",
                                                      "children": [
                                                        {
                                                          "value": "dict",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Any",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "else:\n            # For incomplete execution, executionData will not be yet available.\n            input_data: BlockInput = defaultdict()\n            for data in execution.Input or []:\n                input_data[data.name] = json.loads(data.data)",
                              "children": [
                                {
                                  "value": "# For incomplete execution, executionData will not be yet available.",
                                  "children": []
                                },
                                {
                                  "value": "input_data: BlockInput = defaultdict()\n            for data in execution.Input or []:\n                input_data[data.name] = json.loads(data.data)",
                                  "children": [
                                    {
                                      "value": "input_data: BlockInput = defaultdict()",
                                      "children": [
                                        {
                                          "value": "input_data: BlockInput = defaultdict()",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "BlockInput",
                                              "children": [
                                                {
                                                  "value": "BlockInput",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "defaultdict()",
                                              "children": [
                                                {
                                                  "value": "defaultdict",
                                                  "children": []
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for data in execution.Input or []:\n                input_data[data.name] = json.loads(data.data)",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.Input or []",
                                          "children": [
                                            {
                                              "value": "execution.Input",
                                              "children": [
                                                {
                                                  "value": "execution",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Input",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "[]",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "input_data[data.name] = json.loads(data.data)",
                                          "children": [
                                            {
                                              "value": "input_data[data.name] = json.loads(data.data)",
                                              "children": [
                                                {
                                                  "value": "input_data[data.name] = json.loads(data.data)",
                                                  "children": [
                                                    {
                                                      "value": "input_data[data.name]",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "data.name",
                                                          "children": [
                                                            {
                                                              "value": "data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "name",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "json.loads(data.data)",
                                                      "children": [
                                                        {
                                                          "value": "json.loads",
                                                          "children": [
                                                            {
                                                              "value": "json",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "loads",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(data.data)",
                                                          "children": [
                                                            {
                                                              "value": "data.data",
                                                              "children": [
                                                                {
                                                                  "value": "data",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "data",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "output_data: CompletedBlockOutput = defaultdict(list)",
                          "children": [
                            {
                              "value": "output_data: CompletedBlockOutput = defaultdict(list)",
                              "children": [
                                {
                                  "value": "output_data",
                                  "children": []
                                },
                                {
                                  "value": "CompletedBlockOutput",
                                  "children": [
                                    {
                                      "value": "CompletedBlockOutput",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "defaultdict(list)",
                                  "children": [
                                    {
                                      "value": "defaultdict",
                                      "children": []
                                    },
                                    {
                                      "value": "(list)",
                                      "children": [
                                        {
                                          "value": "list",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for data in execution.Output or []:\n            output_data[data.name].append(json.loads(data.data))",
                          "children": [
                            {
                              "value": "data",
                              "children": []
                            },
                            {
                              "value": "execution.Output or []",
                              "children": [
                                {
                                  "value": "execution.Output",
                                  "children": [
                                    {
                                      "value": "execution",
                                      "children": []
                                    },
                                    {
                                      "value": "Output",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "[]",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "output_data[data.name].append(json.loads(data.data))",
                              "children": [
                                {
                                  "value": "output_data[data.name].append(json.loads(data.data))",
                                  "children": [
                                    {
                                      "value": "output_data[data.name].append(json.loads(data.data))",
                                      "children": [
                                        {
                                          "value": "output_data[data.name].append",
                                          "children": [
                                            {
                                              "value": "output_data[data.name]",
                                              "children": [
                                                {
                                                  "value": "output_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "data.name",
                                                  "children": [
                                                    {
                                                      "value": "data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "name",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "append",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(json.loads(data.data))",
                                          "children": [
                                            {
                                              "value": "json.loads(data.data)",
                                              "children": [
                                                {
                                                  "value": "json.loads",
                                                  "children": [
                                                    {
                                                      "value": "json",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "loads",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(data.data)",
                                                  "children": [
                                                    {
                                                      "value": "data.data",
                                                      "children": [
                                                        {
                                                          "value": "data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "data",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "graph_execution: AgentGraphExecution | None = execution.AgentGraphExecution",
                          "children": [
                            {
                              "value": "graph_execution: AgentGraphExecution | None = execution.AgentGraphExecution",
                              "children": [
                                {
                                  "value": "graph_execution",
                                  "children": []
                                },
                                {
                                  "value": "AgentGraphExecution | None",
                                  "children": [
                                    {
                                      "value": "AgentGraphExecution | None",
                                      "children": [
                                        {
                                          "value": "AgentGraphExecution",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "execution.AgentGraphExecution",
                                  "children": [
                                    {
                                      "value": "execution",
                                      "children": []
                                    },
                                    {
                                      "value": "AgentGraphExecution",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return ExecutionResult(\n            graph_id=graph_execution.agentGraphId if graph_execution else \"\",\n            graph_version=graph_execution.agentGraphVersion if graph_execution else 0,\n            graph_exec_id=execution.agentGraphExecutionId,\n            block_id=execution.AgentNode.agentBlockId if execution.AgentNode else \"\",\n            node_exec_id=execution.id,\n            node_id=execution.agentNodeId,\n            status=execution.executionStatus,\n            input_data=input_data,\n            output_data=output_data,\n            add_time=execution.addedTime,\n            queue_time=execution.queuedTime,\n            start_time=execution.startedTime,\n            end_time=execution.endedTime,\n        )",
                          "children": [
                            {
                              "value": "ExecutionResult(\n            graph_id=graph_execution.agentGraphId if graph_execution else \"\",\n            graph_version=graph_execution.agentGraphVersion if graph_execution else 0,\n            graph_exec_id=execution.agentGraphExecutionId,\n            block_id=execution.AgentNode.agentBlockId if execution.AgentNode else \"\",\n            node_exec_id=execution.id,\n            node_id=execution.agentNodeId,\n            status=execution.executionStatus,\n            input_data=input_data,\n            output_data=output_data,\n            add_time=execution.addedTime,\n            queue_time=execution.queuedTime,\n            start_time=execution.startedTime,\n            end_time=execution.endedTime,\n        )",
                              "children": [
                                {
                                  "value": "ExecutionResult",
                                  "children": []
                                },
                                {
                                  "value": "(\n            graph_id=graph_execution.agentGraphId if graph_execution else \"\",\n            graph_version=graph_execution.agentGraphVersion if graph_execution else 0,\n            graph_exec_id=execution.agentGraphExecutionId,\n            block_id=execution.AgentNode.agentBlockId if execution.AgentNode else \"\",\n            node_exec_id=execution.id,\n            node_id=execution.agentNodeId,\n            status=execution.executionStatus,\n            input_data=input_data,\n            output_data=output_data,\n            add_time=execution.addedTime,\n            queue_time=execution.queuedTime,\n            start_time=execution.startedTime,\n            end_time=execution.endedTime,\n        )",
                                  "children": [
                                    {
                                      "value": "graph_id=graph_execution.agentGraphId if graph_execution else \"\"",
                                      "children": [
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_execution.agentGraphId if graph_execution else \"\"",
                                          "children": [
                                            {
                                              "value": "graph_execution.agentGraphId",
                                              "children": [
                                                {
                                                  "value": "graph_execution",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentGraphId",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_execution",
                                              "children": []
                                            },
                                            {
                                              "value": "\"\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "graph_version=graph_execution.agentGraphVersion if graph_execution else 0",
                                      "children": [
                                        {
                                          "value": "graph_version",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_execution.agentGraphVersion if graph_execution else 0",
                                          "children": [
                                            {
                                              "value": "graph_execution.agentGraphVersion",
                                              "children": [
                                                {
                                                  "value": "graph_execution",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentGraphVersion",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_execution",
                                              "children": []
                                            },
                                            {
                                              "value": "0",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "graph_exec_id=execution.agentGraphExecutionId",
                                      "children": [
                                        {
                                          "value": "graph_exec_id",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.agentGraphExecutionId",
                                          "children": [
                                            {
                                              "value": "execution",
                                              "children": []
                                            },
                                            {
                                              "value": "agentGraphExecutionId",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "block_id=execution.AgentNode.agentBlockId if execution.AgentNode else \"\"",
                                      "children": [
                                        {
                                          "value": "block_id",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.AgentNode.agentBlockId if execution.AgentNode else \"\"",
                                          "children": [
                                            {
                                              "value": "execution.AgentNode.agentBlockId",
                                              "children": [
                                                {
                                                  "value": "execution.AgentNode",
                                                  "children": [
                                                    {
                                                      "value": "execution",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "AgentNode",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "agentBlockId",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "execution.AgentNode",
                                              "children": [
                                                {
                                                  "value": "execution",
                                                  "children": []
                                                },
                                                {
                                                  "value": "AgentNode",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "node_exec_id=execution.id",
                                      "children": [
                                        {
                                          "value": "node_exec_id",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.id",
                                          "children": [
                                            {
                                              "value": "execution",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "node_id=execution.agentNodeId",
                                      "children": [
                                        {
                                          "value": "node_id",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.agentNodeId",
                                          "children": [
                                            {
                                              "value": "execution",
                                              "children": []
                                            },
                                            {
                                              "value": "agentNodeId",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "status=execution.executionStatus",
                                      "children": [
                                        {
                                          "value": "status",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.executionStatus",
                                          "children": [
                                            {
                                              "value": "execution",
                                              "children": []
                                            },
                                            {
                                              "value": "executionStatus",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "input_data=input_data",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "input_data",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "output_data=output_data",
                                      "children": [
                                        {
                                          "value": "output_data",
                                          "children": []
                                        },
                                        {
                                          "value": "output_data",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "add_time=execution.addedTime",
                                      "children": [
                                        {
                                          "value": "add_time",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.addedTime",
                                          "children": [
                                            {
                                              "value": "execution",
                                              "children": []
                                            },
                                            {
                                              "value": "addedTime",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "queue_time=execution.queuedTime",
                                      "children": [
                                        {
                                          "value": "queue_time",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.queuedTime",
                                          "children": [
                                            {
                                              "value": "execution",
                                              "children": []
                                            },
                                            {
                                              "value": "queuedTime",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "start_time=execution.startedTime",
                                      "children": [
                                        {
                                          "value": "start_time",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.startedTime",
                                          "children": [
                                            {
                                              "value": "execution",
                                              "children": []
                                            },
                                            {
                                              "value": "startedTime",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "end_time=execution.endedTime",
                                      "children": [
                                        {
                                          "value": "end_time",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.endedTime",
                                          "children": [
                                            {
                                              "value": "execution",
                                              "children": []
                                            },
                                            {
                                              "value": "endedTime",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# --------------------- Model functions --------------------- #",
      "children": []
    },
    {
      "value": "async def create_graph_execution(\n    graph_id: str,\n    graph_version: int,\n    nodes_input: list[tuple[str, BlockInput]],\n    user_id: str,\n) -> tuple[str, list[ExecutionResult]]:\n    \"\"\"\n    Create a new AgentGraphExecution record.\n    Returns:\n        The id of the AgentGraphExecution and the list of ExecutionResult for each node.\n    \"\"\"\n    result = await AgentGraphExecution.prisma().create(\n        data={\n            \"agentGraphId\": graph_id,\n            \"agentGraphVersion\": graph_version,\n            \"executionStatus\": ExecutionStatus.QUEUED,\n            \"AgentNodeExecutions\": {\n                \"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]\n            },\n            \"userId\": user_id,\n        },\n        include=GRAPH_EXECUTION_INCLUDE,\n    )\n\n    return result.id, [\n        ExecutionResult.from_db(execution)\n        for execution in result.AgentNodeExecutions or []\n    ]",
      "children": [
        {
          "value": "create_graph_execution",
          "children": []
        },
        {
          "value": "(\n    graph_id: str,\n    graph_version: int,\n    nodes_input: list[tuple[str, BlockInput]],\n    user_id: str,\n)",
          "children": [
            {
              "value": "graph_id: str",
              "children": [
                {
                  "value": "graph_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_version: int",
              "children": [
                {
                  "value": "graph_version",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "nodes_input: list[tuple[str, BlockInput]]",
              "children": [
                {
                  "value": "nodes_input",
                  "children": []
                },
                {
                  "value": "list[tuple[str, BlockInput]]",
                  "children": [
                    {
                      "value": "list[tuple[str, BlockInput]]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[tuple[str, BlockInput]]",
                          "children": [
                            {
                              "value": "tuple[str, BlockInput]",
                              "children": [
                                {
                                  "value": "tuple[str, BlockInput]",
                                  "children": [
                                    {
                                      "value": "tuple",
                                      "children": []
                                    },
                                    {
                                      "value": "[str, BlockInput]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "BlockInput",
                                          "children": [
                                            {
                                              "value": "BlockInput",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "tuple[str, list[ExecutionResult]]",
          "children": [
            {
              "value": "tuple[str, list[ExecutionResult]]",
              "children": [
                {
                  "value": "tuple",
                  "children": []
                },
                {
                  "value": "[str, list[ExecutionResult]]",
                  "children": [
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "list[ExecutionResult]",
                      "children": [
                        {
                          "value": "list[ExecutionResult]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[ExecutionResult]",
                              "children": [
                                {
                                  "value": "ExecutionResult",
                                  "children": [
                                    {
                                      "value": "ExecutionResult",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Create a new AgentGraphExecution record.\n    Returns:\n        The id of the AgentGraphExecution and the list of ExecutionResult for each node.\n    \"\"\"\n    result = await AgentGraphExecution.prisma().create(\n        data={\n            \"agentGraphId\": graph_id,\n            \"agentGraphVersion\": graph_version,\n            \"executionStatus\": ExecutionStatus.QUEUED,\n            \"AgentNodeExecutions\": {\n                \"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]\n            },\n            \"userId\": user_id,\n        },\n        include=GRAPH_EXECUTION_INCLUDE,\n    )\n\n    return result.id, [\n        ExecutionResult.from_db(execution)\n        for execution in result.AgentNodeExecutions or []\n    ]",
          "children": [
            {
              "value": "\"\"\"\n    Create a new AgentGraphExecution record.\n    Returns:\n        The id of the AgentGraphExecution and the list of ExecutionResult for each node.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Create a new AgentGraphExecution record.\n    Returns:\n        The id of the AgentGraphExecution and the list of ExecutionResult for each node.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Create a new AgentGraphExecution record.\n    Returns:\n        The id of the AgentGraphExecution and the list of ExecutionResult for each node.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "result = await AgentGraphExecution.prisma().create(\n        data={\n            \"agentGraphId\": graph_id,\n            \"agentGraphVersion\": graph_version,\n            \"executionStatus\": ExecutionStatus.QUEUED,\n            \"AgentNodeExecutions\": {\n                \"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]\n            },\n            \"userId\": user_id,\n        },\n        include=GRAPH_EXECUTION_INCLUDE,\n    )",
              "children": [
                {
                  "value": "result = await AgentGraphExecution.prisma().create(\n        data={\n            \"agentGraphId\": graph_id,\n            \"agentGraphVersion\": graph_version,\n            \"executionStatus\": ExecutionStatus.QUEUED,\n            \"AgentNodeExecutions\": {\n                \"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]\n            },\n            \"userId\": user_id,\n        },\n        include=GRAPH_EXECUTION_INCLUDE,\n    )",
                  "children": [
                    {
                      "value": "result",
                      "children": []
                    },
                    {
                      "value": "await AgentGraphExecution.prisma().create(\n        data={\n            \"agentGraphId\": graph_id,\n            \"agentGraphVersion\": graph_version,\n            \"executionStatus\": ExecutionStatus.QUEUED,\n            \"AgentNodeExecutions\": {\n                \"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]\n            },\n            \"userId\": user_id,\n        },\n        include=GRAPH_EXECUTION_INCLUDE,\n    )",
                      "children": [
                        {
                          "value": "AgentGraphExecution.prisma().create(\n        data={\n            \"agentGraphId\": graph_id,\n            \"agentGraphVersion\": graph_version,\n            \"executionStatus\": ExecutionStatus.QUEUED,\n            \"AgentNodeExecutions\": {\n                \"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]\n            },\n            \"userId\": user_id,\n        },\n        include=GRAPH_EXECUTION_INCLUDE,\n    )",
                          "children": [
                            {
                              "value": "AgentGraphExecution.prisma().create",
                              "children": [
                                {
                                  "value": "AgentGraphExecution.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentGraphExecution.prisma",
                                      "children": [
                                        {
                                          "value": "AgentGraphExecution",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "create",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        data={\n            \"agentGraphId\": graph_id,\n            \"agentGraphVersion\": graph_version,\n            \"executionStatus\": ExecutionStatus.QUEUED,\n            \"AgentNodeExecutions\": {\n                \"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]\n            },\n            \"userId\": user_id,\n        },\n        include=GRAPH_EXECUTION_INCLUDE,\n    )",
                              "children": [
                                {
                                  "value": "data={\n            \"agentGraphId\": graph_id,\n            \"agentGraphVersion\": graph_version,\n            \"executionStatus\": ExecutionStatus.QUEUED,\n            \"AgentNodeExecutions\": {\n                \"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]\n            },\n            \"userId\": user_id,\n        }",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n            \"agentGraphId\": graph_id,\n            \"agentGraphVersion\": graph_version,\n            \"executionStatus\": ExecutionStatus.QUEUED,\n            \"AgentNodeExecutions\": {\n                \"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]\n            },\n            \"userId\": user_id,\n        }",
                                      "children": [
                                        {
                                          "value": "\"agentGraphId\": graph_id",
                                          "children": [
                                            {
                                              "value": "\"agentGraphId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentGraphId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"agentGraphVersion\": graph_version",
                                          "children": [
                                            {
                                              "value": "\"agentGraphVersion\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentGraphVersion",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_version",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"executionStatus\": ExecutionStatus.QUEUED",
                                          "children": [
                                            {
                                              "value": "\"executionStatus\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "executionStatus",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ExecutionStatus.QUEUED",
                                              "children": [
                                                {
                                                  "value": "ExecutionStatus",
                                                  "children": []
                                                },
                                                {
                                                  "value": "QUEUED",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"AgentNodeExecutions\": {\n                \"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]\n            }",
                                          "children": [
                                            {
                                              "value": "\"AgentNodeExecutions\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "AgentNodeExecutions",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{\n                \"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]\n            }",
                                              "children": [
                                                {
                                                  "value": "\"create\": [  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]",
                                                  "children": [
                                                    {
                                                      "value": "\"create\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "create",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "[  # type: ignore\n                    {\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }\n                    for node_id, node_input in nodes_input\n                ]",
                                                      "children": [
                                                        {
                                                          "value": "# type: ignore",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{\n                        \"agentNodeId\": node_id,\n                        \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                        \"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        },\n                    }",
                                                          "children": [
                                                            {
                                                              "value": "\"agentNodeId\": node_id",
                                                              "children": [
                                                                {
                                                                  "value": "\"agentNodeId\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "agentNodeId",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "node_id",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"executionStatus\": ExecutionStatus.INCOMPLETE",
                                                              "children": [
                                                                {
                                                                  "value": "\"executionStatus\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "executionStatus",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "ExecutionStatus.INCOMPLETE",
                                                                  "children": [
                                                                    {
                                                                      "value": "ExecutionStatus",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "INCOMPLETE",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"Input\": {\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        }",
                                                              "children": [
                                                                {
                                                                  "value": "\"Input\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "Input",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "{\n                            \"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]\n                        }",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"create\": [\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"create\"",
                                                                          "children": [
                                                                            {
                                                                              "value": "\"",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "create",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "\"",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "[\n                                {\"name\": name, \"data\": json.dumps(data)}\n                                for name, data in node_input.items()\n                            ]",
                                                                          "children": [
                                                                            {
                                                                              "value": "{\"name\": name, \"data\": json.dumps(data)}",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\"name\": name",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "\"name\"",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "\"",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "name",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "\"",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "value": "name",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "\"data\": json.dumps(data)",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "\"data\"",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "\"",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "data",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "\"",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "value": "json.dumps(data)",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "json.dumps",
                                                                                          "children": [
                                                                                            {
                                                                                              "value": "json",
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "value": "dumps",
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "value": "(data)",
                                                                                          "children": [
                                                                                            {
                                                                                              "value": "data",
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "for name, data in node_input.items()",
                                                                              "children": [
                                                                                {
                                                                                  "value": "name, data",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "name",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "data",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "node_input.items()",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "node_input.items",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "node_input",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "items",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "value": "()",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "for node_id, node_input in nodes_input",
                                                          "children": [
                                                            {
                                                              "value": "node_id, node_input",
                                                              "children": [
                                                                {
                                                                  "value": "node_id",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "node_input",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "nodes_input",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"userId\": user_id",
                                          "children": [
                                            {
                                              "value": "\"userId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "userId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "include=GRAPH_EXECUTION_INCLUDE",
                                  "children": [
                                    {
                                      "value": "include",
                                      "children": []
                                    },
                                    {
                                      "value": "GRAPH_EXECUTION_INCLUDE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return result.id, [\n        ExecutionResult.from_db(execution)\n        for execution in result.AgentNodeExecutions or []\n    ]",
              "children": [
                {
                  "value": "result.id, [\n        ExecutionResult.from_db(execution)\n        for execution in result.AgentNodeExecutions or []\n    ]",
                  "children": [
                    {
                      "value": "result.id",
                      "children": [
                        {
                          "value": "result",
                          "children": []
                        },
                        {
                          "value": "id",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "[\n        ExecutionResult.from_db(execution)\n        for execution in result.AgentNodeExecutions or []\n    ]",
                      "children": [
                        {
                          "value": "ExecutionResult.from_db(execution)",
                          "children": [
                            {
                              "value": "ExecutionResult.from_db",
                              "children": [
                                {
                                  "value": "ExecutionResult",
                                  "children": []
                                },
                                {
                                  "value": "from_db",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(execution)",
                              "children": [
                                {
                                  "value": "execution",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for execution in result.AgentNodeExecutions or []",
                          "children": [
                            {
                              "value": "execution",
                              "children": []
                            },
                            {
                              "value": "result.AgentNodeExecutions or []",
                              "children": [
                                {
                                  "value": "result.AgentNodeExecutions",
                                  "children": [
                                    {
                                      "value": "result",
                                      "children": []
                                    },
                                    {
                                      "value": "AgentNodeExecutions",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "[]",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def upsert_execution_input(\n    node_id: str,\n    graph_exec_id: str,\n    input_name: str,\n    input_data: Any,\n    node_exec_id: str | None = None,\n) -> tuple[str, BlockInput]:\n    \"\"\"\n    Insert AgentNodeExecutionInputOutput record for as one of AgentNodeExecution.Input.\n    If there is no AgentNodeExecution that has no `input_name` as input, create new one.\n\n    Args:\n        node_id: The id of the AgentNode.\n        graph_exec_id: The id of the AgentGraphExecution.\n        input_name: The name of the input data.\n        input_data: The input data to be inserted.\n        node_exec_id: [Optional] The id of the AgentNodeExecution that has no `input_name` as input. If not provided, it will find the eligible incomplete AgentNodeExecution or create a new one.\n\n    Returns:\n        * The id of the created or existing AgentNodeExecution.\n        * Dict of node input data, key is the input name, value is the input data.\n    \"\"\"\n    existing_execution = await AgentNodeExecution.prisma().find_first(\n        where={  # type: ignore\n            **({\"id\": node_exec_id} if node_exec_id else {}),\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_exec_id,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n            \"Input\": {\"every\": {\"name\": {\"not\": input_name}}},\n        },\n        order={\"addedTime\": \"asc\"},\n        include={\"Input\": True},\n    )\n    json_input_data = json.dumps(input_data)\n\n    if existing_execution:\n        await AgentNodeExecutionInputOutput.prisma().create(\n            data={\n                \"name\": input_name,\n                \"data\": json_input_data,\n                \"referencedByInputExecId\": existing_execution.id,\n            }\n        )\n        return existing_execution.id, {\n            **{\n                input_data.name: json.loads(input_data.data)\n                for input_data in existing_execution.Input or []\n            },\n            input_name: input_data,\n        }\n\n    elif not node_exec_id:\n        result = await AgentNodeExecution.prisma().create(\n            data={\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }\n        )\n        return result.id, {input_name: input_data}\n\n    else:\n        raise ValueError(\n            f\"NodeExecution {node_exec_id} not found or already has input {input_name}.\"\n        )",
      "children": [
        {
          "value": "upsert_execution_input",
          "children": []
        },
        {
          "value": "(\n    node_id: str,\n    graph_exec_id: str,\n    input_name: str,\n    input_data: Any,\n    node_exec_id: str | None = None,\n)",
          "children": [
            {
              "value": "node_id: str",
              "children": [
                {
                  "value": "node_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_exec_id: str",
              "children": [
                {
                  "value": "graph_exec_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "input_name: str",
              "children": [
                {
                  "value": "input_name",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "input_data: Any",
              "children": [
                {
                  "value": "input_data",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "node_exec_id: str | None = None",
              "children": [
                {
                  "value": "node_exec_id",
                  "children": []
                },
                {
                  "value": "str | None",
                  "children": [
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "tuple[str, BlockInput]",
          "children": [
            {
              "value": "tuple[str, BlockInput]",
              "children": [
                {
                  "value": "tuple",
                  "children": []
                },
                {
                  "value": "[str, BlockInput]",
                  "children": [
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "BlockInput",
                      "children": [
                        {
                          "value": "BlockInput",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Insert AgentNodeExecutionInputOutput record for as one of AgentNodeExecution.Input.\n    If there is no AgentNodeExecution that has no `input_name` as input, create new one.\n\n    Args:\n        node_id: The id of the AgentNode.\n        graph_exec_id: The id of the AgentGraphExecution.\n        input_name: The name of the input data.\n        input_data: The input data to be inserted.\n        node_exec_id: [Optional] The id of the AgentNodeExecution that has no `input_name` as input. If not provided, it will find the eligible incomplete AgentNodeExecution or create a new one.\n\n    Returns:\n        * The id of the created or existing AgentNodeExecution.\n        * Dict of node input data, key is the input name, value is the input data.\n    \"\"\"\n    existing_execution = await AgentNodeExecution.prisma().find_first(\n        where={  # type: ignore\n            **({\"id\": node_exec_id} if node_exec_id else {}),\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_exec_id,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n            \"Input\": {\"every\": {\"name\": {\"not\": input_name}}},\n        },\n        order={\"addedTime\": \"asc\"},\n        include={\"Input\": True},\n    )\n    json_input_data = json.dumps(input_data)\n\n    if existing_execution:\n        await AgentNodeExecutionInputOutput.prisma().create(\n            data={\n                \"name\": input_name,\n                \"data\": json_input_data,\n                \"referencedByInputExecId\": existing_execution.id,\n            }\n        )\n        return existing_execution.id, {\n            **{\n                input_data.name: json.loads(input_data.data)\n                for input_data in existing_execution.Input or []\n            },\n            input_name: input_data,\n        }\n\n    elif not node_exec_id:\n        result = await AgentNodeExecution.prisma().create(\n            data={\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }\n        )\n        return result.id, {input_name: input_data}\n\n    else:\n        raise ValueError(\n            f\"NodeExecution {node_exec_id} not found or already has input {input_name}.\"\n        )",
          "children": [
            {
              "value": "\"\"\"\n    Insert AgentNodeExecutionInputOutput record for as one of AgentNodeExecution.Input.\n    If there is no AgentNodeExecution that has no `input_name` as input, create new one.\n\n    Args:\n        node_id: The id of the AgentNode.\n        graph_exec_id: The id of the AgentGraphExecution.\n        input_name: The name of the input data.\n        input_data: The input data to be inserted.\n        node_exec_id: [Optional] The id of the AgentNodeExecution that has no `input_name` as input. If not provided, it will find the eligible incomplete AgentNodeExecution or create a new one.\n\n    Returns:\n        * The id of the created or existing AgentNodeExecution.\n        * Dict of node input data, key is the input name, value is the input data.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Insert AgentNodeExecutionInputOutput record for as one of AgentNodeExecution.Input.\n    If there is no AgentNodeExecution that has no `input_name` as input, create new one.\n\n    Args:\n        node_id: The id of the AgentNode.\n        graph_exec_id: The id of the AgentGraphExecution.\n        input_name: The name of the input data.\n        input_data: The input data to be inserted.\n        node_exec_id: [Optional] The id of the AgentNodeExecution that has no `input_name` as input. If not provided, it will find the eligible incomplete AgentNodeExecution or create a new one.\n\n    Returns:\n        * The id of the created or existing AgentNodeExecution.\n        * Dict of node input data, key is the input name, value is the input data.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Insert AgentNodeExecutionInputOutput record for as one of AgentNodeExecution.Input.\n    If there is no AgentNodeExecution that has no `input_name` as input, create new one.\n\n    Args:\n        node_id: The id of the AgentNode.\n        graph_exec_id: The id of the AgentGraphExecution.\n        input_name: The name of the input data.\n        input_data: The input data to be inserted.\n        node_exec_id: [Optional] The id of the AgentNodeExecution that has no `input_name` as input. If not provided, it will find the eligible incomplete AgentNodeExecution or create a new one.\n\n    Returns:\n        * The id of the created or existing AgentNodeExecution.\n        * Dict of node input data, key is the input name, value is the input data.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "existing_execution = await AgentNodeExecution.prisma().find_first(\n        where={  # type: ignore\n            **({\"id\": node_exec_id} if node_exec_id else {}),\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_exec_id,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n            \"Input\": {\"every\": {\"name\": {\"not\": input_name}}},\n        },\n        order={\"addedTime\": \"asc\"},\n        include={\"Input\": True},\n    )",
              "children": [
                {
                  "value": "existing_execution = await AgentNodeExecution.prisma().find_first(\n        where={  # type: ignore\n            **({\"id\": node_exec_id} if node_exec_id else {}),\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_exec_id,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n            \"Input\": {\"every\": {\"name\": {\"not\": input_name}}},\n        },\n        order={\"addedTime\": \"asc\"},\n        include={\"Input\": True},\n    )",
                  "children": [
                    {
                      "value": "existing_execution",
                      "children": []
                    },
                    {
                      "value": "await AgentNodeExecution.prisma().find_first(\n        where={  # type: ignore\n            **({\"id\": node_exec_id} if node_exec_id else {}),\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_exec_id,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n            \"Input\": {\"every\": {\"name\": {\"not\": input_name}}},\n        },\n        order={\"addedTime\": \"asc\"},\n        include={\"Input\": True},\n    )",
                      "children": [
                        {
                          "value": "AgentNodeExecution.prisma().find_first(\n        where={  # type: ignore\n            **({\"id\": node_exec_id} if node_exec_id else {}),\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_exec_id,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n            \"Input\": {\"every\": {\"name\": {\"not\": input_name}}},\n        },\n        order={\"addedTime\": \"asc\"},\n        include={\"Input\": True},\n    )",
                          "children": [
                            {
                              "value": "AgentNodeExecution.prisma().find_first",
                              "children": [
                                {
                                  "value": "AgentNodeExecution.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentNodeExecution.prisma",
                                      "children": [
                                        {
                                          "value": "AgentNodeExecution",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_first",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={  # type: ignore\n            **({\"id\": node_exec_id} if node_exec_id else {}),\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_exec_id,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n            \"Input\": {\"every\": {\"name\": {\"not\": input_name}}},\n        },\n        order={\"addedTime\": \"asc\"},\n        include={\"Input\": True},\n    )",
                              "children": [
                                {
                                  "value": "where={  # type: ignore\n            **({\"id\": node_exec_id} if node_exec_id else {}),\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_exec_id,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n            \"Input\": {\"every\": {\"name\": {\"not\": input_name}}},\n        }",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{  # type: ignore\n            **({\"id\": node_exec_id} if node_exec_id else {}),\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_exec_id,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n            \"Input\": {\"every\": {\"name\": {\"not\": input_name}}},\n        }",
                                      "children": [
                                        {
                                          "value": "# type: ignore",
                                          "children": []
                                        },
                                        {
                                          "value": "**({\"id\": node_exec_id} if node_exec_id else {})",
                                          "children": [
                                            {
                                              "value": "({\"id\": node_exec_id} if node_exec_id else {})",
                                              "children": [
                                                {
                                                  "value": "{\"id\": node_exec_id} if node_exec_id else {}",
                                                  "children": [
                                                    {
                                                      "value": "{\"id\": node_exec_id}",
                                                      "children": [
                                                        {
                                                          "value": "\"id\": node_exec_id",
                                                          "children": [
                                                            {
                                                              "value": "\"id\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "id",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "node_exec_id",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "node_exec_id",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{}",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"agentNodeId\": node_id",
                                          "children": [
                                            {
                                              "value": "\"agentNodeId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentNodeId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "node_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"agentGraphExecutionId\": graph_exec_id",
                                          "children": [
                                            {
                                              "value": "\"agentGraphExecutionId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentGraphExecutionId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_exec_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"executionStatus\": ExecutionStatus.INCOMPLETE",
                                          "children": [
                                            {
                                              "value": "\"executionStatus\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "executionStatus",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ExecutionStatus.INCOMPLETE",
                                              "children": [
                                                {
                                                  "value": "ExecutionStatus",
                                                  "children": []
                                                },
                                                {
                                                  "value": "INCOMPLETE",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"Input\": {\"every\": {\"name\": {\"not\": input_name}}}",
                                          "children": [
                                            {
                                              "value": "\"Input\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Input",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{\"every\": {\"name\": {\"not\": input_name}}}",
                                              "children": [
                                                {
                                                  "value": "\"every\": {\"name\": {\"not\": input_name}}",
                                                  "children": [
                                                    {
                                                      "value": "\"every\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "every",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "{\"name\": {\"not\": input_name}}",
                                                      "children": [
                                                        {
                                                          "value": "\"name\": {\"not\": input_name}",
                                                          "children": [
                                                            {
                                                              "value": "\"name\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "name",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{\"not\": input_name}",
                                                              "children": [
                                                                {
                                                                  "value": "\"not\": input_name",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"not\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "not",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "input_name",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "order={\"addedTime\": \"asc\"}",
                                  "children": [
                                    {
                                      "value": "order",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"addedTime\": \"asc\"}",
                                      "children": [
                                        {
                                          "value": "\"addedTime\": \"asc\"",
                                          "children": [
                                            {
                                              "value": "\"addedTime\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "addedTime",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"asc\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "asc",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "include={\"Input\": True}",
                                  "children": [
                                    {
                                      "value": "include",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"Input\": True}",
                                      "children": [
                                        {
                                          "value": "\"Input\": True",
                                          "children": [
                                            {
                                              "value": "\"Input\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Input",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "True",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "json_input_data = json.dumps(input_data)",
              "children": [
                {
                  "value": "json_input_data = json.dumps(input_data)",
                  "children": [
                    {
                      "value": "json_input_data",
                      "children": []
                    },
                    {
                      "value": "json.dumps(input_data)",
                      "children": [
                        {
                          "value": "json.dumps",
                          "children": [
                            {
                              "value": "json",
                              "children": []
                            },
                            {
                              "value": "dumps",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(input_data)",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if existing_execution:\n        await AgentNodeExecutionInputOutput.prisma().create(\n            data={\n                \"name\": input_name,\n                \"data\": json_input_data,\n                \"referencedByInputExecId\": existing_execution.id,\n            }\n        )\n        return existing_execution.id, {\n            **{\n                input_data.name: json.loads(input_data.data)\n                for input_data in existing_execution.Input or []\n            },\n            input_name: input_data,\n        }\n\n    elif not node_exec_id:\n        result = await AgentNodeExecution.prisma().create(\n            data={\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }\n        )\n        return result.id, {input_name: input_data}\n\n    else:\n        raise ValueError(\n            f\"NodeExecution {node_exec_id} not found or already has input {input_name}.\"\n        )",
              "children": [
                {
                  "value": "existing_execution",
                  "children": []
                },
                {
                  "value": "await AgentNodeExecutionInputOutput.prisma().create(\n            data={\n                \"name\": input_name,\n                \"data\": json_input_data,\n                \"referencedByInputExecId\": existing_execution.id,\n            }\n        )\n        return existing_execution.id, {\n            **{\n                input_data.name: json.loads(input_data.data)\n                for input_data in existing_execution.Input or []\n            },\n            input_name: input_data,\n        }",
                  "children": [
                    {
                      "value": "await AgentNodeExecutionInputOutput.prisma().create(\n            data={\n                \"name\": input_name,\n                \"data\": json_input_data,\n                \"referencedByInputExecId\": existing_execution.id,\n            }\n        )",
                      "children": [
                        {
                          "value": "await AgentNodeExecutionInputOutput.prisma().create(\n            data={\n                \"name\": input_name,\n                \"data\": json_input_data,\n                \"referencedByInputExecId\": existing_execution.id,\n            }\n        )",
                          "children": [
                            {
                              "value": "AgentNodeExecutionInputOutput.prisma().create(\n            data={\n                \"name\": input_name,\n                \"data\": json_input_data,\n                \"referencedByInputExecId\": existing_execution.id,\n            }\n        )",
                              "children": [
                                {
                                  "value": "AgentNodeExecutionInputOutput.prisma().create",
                                  "children": [
                                    {
                                      "value": "AgentNodeExecutionInputOutput.prisma()",
                                      "children": [
                                        {
                                          "value": "AgentNodeExecutionInputOutput.prisma",
                                          "children": [
                                            {
                                              "value": "AgentNodeExecutionInputOutput",
                                              "children": []
                                            },
                                            {
                                              "value": "prisma",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "create",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            data={\n                \"name\": input_name,\n                \"data\": json_input_data,\n                \"referencedByInputExecId\": existing_execution.id,\n            }\n        )",
                                  "children": [
                                    {
                                      "value": "data={\n                \"name\": input_name,\n                \"data\": json_input_data,\n                \"referencedByInputExecId\": existing_execution.id,\n            }",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "{\n                \"name\": input_name,\n                \"data\": json_input_data,\n                \"referencedByInputExecId\": existing_execution.id,\n            }",
                                          "children": [
                                            {
                                              "value": "\"name\": input_name",
                                              "children": [
                                                {
                                                  "value": "\"name\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "name",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "input_name",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"data\": json_input_data",
                                              "children": [
                                                {
                                                  "value": "\"data\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "json_input_data",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"referencedByInputExecId\": existing_execution.id",
                                              "children": [
                                                {
                                                  "value": "\"referencedByInputExecId\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "referencedByInputExecId",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "existing_execution.id",
                                                  "children": [
                                                    {
                                                      "value": "existing_execution",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return existing_execution.id, {\n            **{\n                input_data.name: json.loads(input_data.data)\n                for input_data in existing_execution.Input or []\n            },\n            input_name: input_data,\n        }",
                      "children": [
                        {
                          "value": "existing_execution.id, {\n            **{\n                input_data.name: json.loads(input_data.data)\n                for input_data in existing_execution.Input or []\n            },\n            input_name: input_data,\n        }",
                          "children": [
                            {
                              "value": "existing_execution.id",
                              "children": [
                                {
                                  "value": "existing_execution",
                                  "children": []
                                },
                                {
                                  "value": "id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "{\n            **{\n                input_data.name: json.loads(input_data.data)\n                for input_data in existing_execution.Input or []\n            },\n            input_name: input_data,\n        }",
                              "children": [
                                {
                                  "value": "**{\n                input_data.name: json.loads(input_data.data)\n                for input_data in existing_execution.Input or []\n            }",
                                  "children": [
                                    {
                                      "value": "{\n                input_data.name: json.loads(input_data.data)\n                for input_data in existing_execution.Input or []\n            }",
                                      "children": [
                                        {
                                          "value": "input_data.name: json.loads(input_data.data)",
                                          "children": [
                                            {
                                              "value": "input_data.name",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "name",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "json.loads(input_data.data)",
                                              "children": [
                                                {
                                                  "value": "json.loads",
                                                  "children": [
                                                    {
                                                      "value": "json",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "loads",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(input_data.data)",
                                                  "children": [
                                                    {
                                                      "value": "input_data.data",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "data",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "for input_data in existing_execution.Input or []",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "existing_execution.Input or []",
                                              "children": [
                                                {
                                                  "value": "existing_execution.Input",
                                                  "children": [
                                                    {
                                                      "value": "existing_execution",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Input",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "[]",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_name: input_data",
                                  "children": [
                                    {
                                      "value": "input_name",
                                      "children": []
                                    },
                                    {
                                      "value": "input_data",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif not node_exec_id:\n        result = await AgentNodeExecution.prisma().create(\n            data={\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }\n        )\n        return result.id, {input_name: input_data}",
                  "children": [
                    {
                      "value": "not node_exec_id",
                      "children": [
                        {
                          "value": "node_exec_id",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "result = await AgentNodeExecution.prisma().create(\n            data={\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }\n        )\n        return result.id, {input_name: input_data}",
                      "children": [
                        {
                          "value": "result = await AgentNodeExecution.prisma().create(\n            data={\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }\n        )",
                          "children": [
                            {
                              "value": "result = await AgentNodeExecution.prisma().create(\n            data={\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }\n        )",
                              "children": [
                                {
                                  "value": "result",
                                  "children": []
                                },
                                {
                                  "value": "await AgentNodeExecution.prisma().create(\n            data={\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }\n        )",
                                  "children": [
                                    {
                                      "value": "AgentNodeExecution.prisma().create(\n            data={\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }\n        )",
                                      "children": [
                                        {
                                          "value": "AgentNodeExecution.prisma().create",
                                          "children": [
                                            {
                                              "value": "AgentNodeExecution.prisma()",
                                              "children": [
                                                {
                                                  "value": "AgentNodeExecution.prisma",
                                                  "children": [
                                                    {
                                                      "value": "AgentNodeExecution",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "prisma",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "create",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n            data={\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }\n        )",
                                          "children": [
                                            {
                                              "value": "data={\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }",
                                              "children": [
                                                {
                                                  "value": "data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{\n                \"agentNodeId\": node_id,\n                \"agentGraphExecutionId\": graph_exec_id,\n                \"executionStatus\": ExecutionStatus.INCOMPLETE,\n                \"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}},\n            }",
                                                  "children": [
                                                    {
                                                      "value": "\"agentNodeId\": node_id",
                                                      "children": [
                                                        {
                                                          "value": "\"agentNodeId\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "agentNodeId",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "node_id",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"agentGraphExecutionId\": graph_exec_id",
                                                      "children": [
                                                        {
                                                          "value": "\"agentGraphExecutionId\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "agentGraphExecutionId",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "graph_exec_id",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"executionStatus\": ExecutionStatus.INCOMPLETE",
                                                      "children": [
                                                        {
                                                          "value": "\"executionStatus\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "executionStatus",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "ExecutionStatus.INCOMPLETE",
                                                          "children": [
                                                            {
                                                              "value": "ExecutionStatus",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "INCOMPLETE",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"Input\": {\"create\": {\"name\": input_name, \"data\": json_input_data}}",
                                                      "children": [
                                                        {
                                                          "value": "\"Input\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Input",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "{\"create\": {\"name\": input_name, \"data\": json_input_data}}",
                                                          "children": [
                                                            {
                                                              "value": "\"create\": {\"name\": input_name, \"data\": json_input_data}",
                                                              "children": [
                                                                {
                                                                  "value": "\"create\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "create",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "{\"name\": input_name, \"data\": json_input_data}",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"name\": input_name",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"name\"",
                                                                          "children": [
                                                                            {
                                                                              "value": "\"",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "name",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "\"",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "input_name",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "\"data\": json_input_data",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"data\"",
                                                                          "children": [
                                                                            {
                                                                              "value": "\"",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "data",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "\"",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "json_input_data",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return result.id, {input_name: input_data}",
                          "children": [
                            {
                              "value": "result.id, {input_name: input_data}",
                              "children": [
                                {
                                  "value": "result.id",
                                  "children": [
                                    {
                                      "value": "result",
                                      "children": []
                                    },
                                    {
                                      "value": "id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "{input_name: input_data}",
                                  "children": [
                                    {
                                      "value": "input_name: input_data",
                                      "children": [
                                        {
                                          "value": "input_name",
                                          "children": []
                                        },
                                        {
                                          "value": "input_data",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        raise ValueError(\n            f\"NodeExecution {node_exec_id} not found or already has input {input_name}.\"\n        )",
                  "children": [
                    {
                      "value": "raise ValueError(\n            f\"NodeExecution {node_exec_id} not found or already has input {input_name}.\"\n        )",
                      "children": [
                        {
                          "value": "raise ValueError(\n            f\"NodeExecution {node_exec_id} not found or already has input {input_name}.\"\n        )",
                          "children": [
                            {
                              "value": "ValueError(\n            f\"NodeExecution {node_exec_id} not found or already has input {input_name}.\"\n        )",
                              "children": [
                                {
                                  "value": "ValueError",
                                  "children": []
                                },
                                {
                                  "value": "(\n            f\"NodeExecution {node_exec_id} not found or already has input {input_name}.\"\n        )",
                                  "children": [
                                    {
                                      "value": "f\"NodeExecution {node_exec_id} not found or already has input {input_name}.\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "NodeExecution",
                                          "children": []
                                        },
                                        {
                                          "value": "{node_exec_id}",
                                          "children": [
                                            {
                                              "value": "node_exec_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "not found or already has input",
                                          "children": []
                                        },
                                        {
                                          "value": "{input_name}",
                                          "children": [
                                            {
                                              "value": "input_name",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": ".",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def upsert_execution_output(\n    node_exec_id: str,\n    output_name: str,\n    output_data: Any,\n) -> None:\n    \"\"\"\n    Insert AgentNodeExecutionInputOutput record for as one of AgentNodeExecution.Output.\n    \"\"\"\n    await AgentNodeExecutionInputOutput.prisma().create(\n        data={\n            \"name\": output_name,\n            \"data\": json.dumps(output_data),\n            \"referencedByOutputExecId\": node_exec_id,\n        }\n    )",
      "children": [
        {
          "value": "upsert_execution_output",
          "children": []
        },
        {
          "value": "(\n    node_exec_id: str,\n    output_name: str,\n    output_data: Any,\n)",
          "children": [
            {
              "value": "node_exec_id: str",
              "children": [
                {
                  "value": "node_exec_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "output_name: str",
              "children": [
                {
                  "value": "output_name",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "output_data: Any",
              "children": [
                {
                  "value": "output_data",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Insert AgentNodeExecutionInputOutput record for as one of AgentNodeExecution.Output.\n    \"\"\"\n    await AgentNodeExecutionInputOutput.prisma().create(\n        data={\n            \"name\": output_name,\n            \"data\": json.dumps(output_data),\n            \"referencedByOutputExecId\": node_exec_id,\n        }\n    )",
          "children": [
            {
              "value": "\"\"\"\n    Insert AgentNodeExecutionInputOutput record for as one of AgentNodeExecution.Output.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Insert AgentNodeExecutionInputOutput record for as one of AgentNodeExecution.Output.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Insert AgentNodeExecutionInputOutput record for as one of AgentNodeExecution.Output.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "await AgentNodeExecutionInputOutput.prisma().create(\n        data={\n            \"name\": output_name,\n            \"data\": json.dumps(output_data),\n            \"referencedByOutputExecId\": node_exec_id,\n        }\n    )",
              "children": [
                {
                  "value": "await AgentNodeExecutionInputOutput.prisma().create(\n        data={\n            \"name\": output_name,\n            \"data\": json.dumps(output_data),\n            \"referencedByOutputExecId\": node_exec_id,\n        }\n    )",
                  "children": [
                    {
                      "value": "AgentNodeExecutionInputOutput.prisma().create(\n        data={\n            \"name\": output_name,\n            \"data\": json.dumps(output_data),\n            \"referencedByOutputExecId\": node_exec_id,\n        }\n    )",
                      "children": [
                        {
                          "value": "AgentNodeExecutionInputOutput.prisma().create",
                          "children": [
                            {
                              "value": "AgentNodeExecutionInputOutput.prisma()",
                              "children": [
                                {
                                  "value": "AgentNodeExecutionInputOutput.prisma",
                                  "children": [
                                    {
                                      "value": "AgentNodeExecutionInputOutput",
                                      "children": []
                                    },
                                    {
                                      "value": "prisma",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "create",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\n        data={\n            \"name\": output_name,\n            \"data\": json.dumps(output_data),\n            \"referencedByOutputExecId\": node_exec_id,\n        }\n    )",
                          "children": [
                            {
                              "value": "data={\n            \"name\": output_name,\n            \"data\": json.dumps(output_data),\n            \"referencedByOutputExecId\": node_exec_id,\n        }",
                              "children": [
                                {
                                  "value": "data",
                                  "children": []
                                },
                                {
                                  "value": "{\n            \"name\": output_name,\n            \"data\": json.dumps(output_data),\n            \"referencedByOutputExecId\": node_exec_id,\n        }",
                                  "children": [
                                    {
                                      "value": "\"name\": output_name",
                                      "children": [
                                        {
                                          "value": "\"name\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "output_name",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"data\": json.dumps(output_data)",
                                      "children": [
                                        {
                                          "value": "\"data\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "data",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "json.dumps(output_data)",
                                          "children": [
                                            {
                                              "value": "json.dumps",
                                              "children": [
                                                {
                                                  "value": "json",
                                                  "children": []
                                                },
                                                {
                                                  "value": "dumps",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(output_data)",
                                              "children": [
                                                {
                                                  "value": "output_data",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"referencedByOutputExecId\": node_exec_id",
                                      "children": [
                                        {
                                          "value": "\"referencedByOutputExecId\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "referencedByOutputExecId",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "node_exec_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def update_graph_execution_start_time(graph_exec_id: str):\n    await AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": ExecutionStatus.RUNNING,\n            \"startedAt\": datetime.now(tz=timezone.utc),\n        },\n    )",
      "children": [
        {
          "value": "update_graph_execution_start_time",
          "children": []
        },
        {
          "value": "(graph_exec_id: str)",
          "children": [
            {
              "value": "graph_exec_id: str",
              "children": [
                {
                  "value": "graph_exec_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "await AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": ExecutionStatus.RUNNING,\n            \"startedAt\": datetime.now(tz=timezone.utc),\n        },\n    )",
          "children": [
            {
              "value": "await AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": ExecutionStatus.RUNNING,\n            \"startedAt\": datetime.now(tz=timezone.utc),\n        },\n    )",
              "children": [
                {
                  "value": "await AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": ExecutionStatus.RUNNING,\n            \"startedAt\": datetime.now(tz=timezone.utc),\n        },\n    )",
                  "children": [
                    {
                      "value": "AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": ExecutionStatus.RUNNING,\n            \"startedAt\": datetime.now(tz=timezone.utc),\n        },\n    )",
                      "children": [
                        {
                          "value": "AgentGraphExecution.prisma().update",
                          "children": [
                            {
                              "value": "AgentGraphExecution.prisma()",
                              "children": [
                                {
                                  "value": "AgentGraphExecution.prisma",
                                  "children": [
                                    {
                                      "value": "AgentGraphExecution",
                                      "children": []
                                    },
                                    {
                                      "value": "prisma",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "update",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": ExecutionStatus.RUNNING,\n            \"startedAt\": datetime.now(tz=timezone.utc),\n        },\n    )",
                          "children": [
                            {
                              "value": "where={\"id\": graph_exec_id}",
                              "children": [
                                {
                                  "value": "where",
                                  "children": []
                                },
                                {
                                  "value": "{\"id\": graph_exec_id}",
                                  "children": [
                                    {
                                      "value": "\"id\": graph_exec_id",
                                      "children": [
                                        {
                                          "value": "\"id\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph_exec_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "data={\n            \"executionStatus\": ExecutionStatus.RUNNING,\n            \"startedAt\": datetime.now(tz=timezone.utc),\n        }",
                              "children": [
                                {
                                  "value": "data",
                                  "children": []
                                },
                                {
                                  "value": "{\n            \"executionStatus\": ExecutionStatus.RUNNING,\n            \"startedAt\": datetime.now(tz=timezone.utc),\n        }",
                                  "children": [
                                    {
                                      "value": "\"executionStatus\": ExecutionStatus.RUNNING",
                                      "children": [
                                        {
                                          "value": "\"executionStatus\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "executionStatus",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ExecutionStatus.RUNNING",
                                          "children": [
                                            {
                                              "value": "ExecutionStatus",
                                              "children": []
                                            },
                                            {
                                              "value": "RUNNING",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"startedAt\": datetime.now(tz=timezone.utc)",
                                      "children": [
                                        {
                                          "value": "\"startedAt\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "startedAt",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "datetime.now(tz=timezone.utc)",
                                          "children": [
                                            {
                                              "value": "datetime.now",
                                              "children": [
                                                {
                                                  "value": "datetime",
                                                  "children": []
                                                },
                                                {
                                                  "value": "now",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(tz=timezone.utc)",
                                              "children": [
                                                {
                                                  "value": "tz=timezone.utc",
                                                  "children": [
                                                    {
                                                      "value": "tz",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "timezone.utc",
                                                      "children": [
                                                        {
                                                          "value": "timezone",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "utc",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def update_graph_execution_stats(\n    graph_exec_id: str,\n    stats: dict[str, Any],\n) -> ExecutionResult:\n    status = ExecutionStatus.FAILED if stats.get(\"error\") else ExecutionStatus.COMPLETED\n    res = await AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": status,\n            \"stats\": json.dumps(stats),\n        },\n    )\n    if not res:\n        raise ValueError(f\"Execution {graph_exec_id} not found.\")\n\n    return ExecutionResult.from_graph(res)",
      "children": [
        {
          "value": "update_graph_execution_stats",
          "children": []
        },
        {
          "value": "(\n    graph_exec_id: str,\n    stats: dict[str, Any],\n)",
          "children": [
            {
              "value": "graph_exec_id: str",
              "children": [
                {
                  "value": "graph_exec_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "stats: dict[str, Any]",
              "children": [
                {
                  "value": "stats",
                  "children": []
                },
                {
                  "value": "dict[str, Any]",
                  "children": [
                    {
                      "value": "dict[str, Any]",
                      "children": [
                        {
                          "value": "dict",
                          "children": []
                        },
                        {
                          "value": "[str, Any]",
                          "children": [
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Any",
                              "children": [
                                {
                                  "value": "Any",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "ExecutionResult",
          "children": [
            {
              "value": "ExecutionResult",
              "children": []
            }
          ]
        },
        {
          "value": "status = ExecutionStatus.FAILED if stats.get(\"error\") else ExecutionStatus.COMPLETED\n    res = await AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": status,\n            \"stats\": json.dumps(stats),\n        },\n    )\n    if not res:\n        raise ValueError(f\"Execution {graph_exec_id} not found.\")\n\n    return ExecutionResult.from_graph(res)",
          "children": [
            {
              "value": "status = ExecutionStatus.FAILED if stats.get(\"error\") else ExecutionStatus.COMPLETED",
              "children": [
                {
                  "value": "status = ExecutionStatus.FAILED if stats.get(\"error\") else ExecutionStatus.COMPLETED",
                  "children": [
                    {
                      "value": "status",
                      "children": []
                    },
                    {
                      "value": "ExecutionStatus.FAILED if stats.get(\"error\") else ExecutionStatus.COMPLETED",
                      "children": [
                        {
                          "value": "ExecutionStatus.FAILED",
                          "children": [
                            {
                              "value": "ExecutionStatus",
                              "children": []
                            },
                            {
                              "value": "FAILED",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "stats.get(\"error\")",
                          "children": [
                            {
                              "value": "stats.get",
                              "children": [
                                {
                                  "value": "stats",
                                  "children": []
                                },
                                {
                                  "value": "get",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"error\")",
                              "children": [
                                {
                                  "value": "\"error\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "error",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ExecutionStatus.COMPLETED",
                          "children": [
                            {
                              "value": "ExecutionStatus",
                              "children": []
                            },
                            {
                              "value": "COMPLETED",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "res = await AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": status,\n            \"stats\": json.dumps(stats),\n        },\n    )",
              "children": [
                {
                  "value": "res = await AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": status,\n            \"stats\": json.dumps(stats),\n        },\n    )",
                  "children": [
                    {
                      "value": "res",
                      "children": []
                    },
                    {
                      "value": "await AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": status,\n            \"stats\": json.dumps(stats),\n        },\n    )",
                      "children": [
                        {
                          "value": "AgentGraphExecution.prisma().update(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": status,\n            \"stats\": json.dumps(stats),\n        },\n    )",
                          "children": [
                            {
                              "value": "AgentGraphExecution.prisma().update",
                              "children": [
                                {
                                  "value": "AgentGraphExecution.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentGraphExecution.prisma",
                                      "children": [
                                        {
                                          "value": "AgentGraphExecution",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "update",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\"id\": graph_exec_id},\n        data={\n            \"executionStatus\": status,\n            \"stats\": json.dumps(stats),\n        },\n    )",
                              "children": [
                                {
                                  "value": "where={\"id\": graph_exec_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"id\": graph_exec_id}",
                                      "children": [
                                        {
                                          "value": "\"id\": graph_exec_id",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_exec_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "data={\n            \"executionStatus\": status,\n            \"stats\": json.dumps(stats),\n        }",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n            \"executionStatus\": status,\n            \"stats\": json.dumps(stats),\n        }",
                                      "children": [
                                        {
                                          "value": "\"executionStatus\": status",
                                          "children": [
                                            {
                                              "value": "\"executionStatus\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "executionStatus",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "status",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"stats\": json.dumps(stats)",
                                          "children": [
                                            {
                                              "value": "\"stats\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "stats",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "json.dumps(stats)",
                                              "children": [
                                                {
                                                  "value": "json.dumps",
                                                  "children": [
                                                    {
                                                      "value": "json",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "dumps",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(stats)",
                                                  "children": [
                                                    {
                                                      "value": "stats",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not res:\n        raise ValueError(f\"Execution {graph_exec_id} not found.\")",
              "children": [
                {
                  "value": "not res",
                  "children": [
                    {
                      "value": "res",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(f\"Execution {graph_exec_id} not found.\")",
                  "children": [
                    {
                      "value": "raise ValueError(f\"Execution {graph_exec_id} not found.\")",
                      "children": [
                        {
                          "value": "ValueError(f\"Execution {graph_exec_id} not found.\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(f\"Execution {graph_exec_id} not found.\")",
                              "children": [
                                {
                                  "value": "f\"Execution {graph_exec_id} not found.\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Execution",
                                      "children": []
                                    },
                                    {
                                      "value": "{graph_exec_id}",
                                      "children": [
                                        {
                                          "value": "graph_exec_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "not found.",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return ExecutionResult.from_graph(res)",
              "children": [
                {
                  "value": "ExecutionResult.from_graph(res)",
                  "children": [
                    {
                      "value": "ExecutionResult.from_graph",
                      "children": [
                        {
                          "value": "ExecutionResult",
                          "children": []
                        },
                        {
                          "value": "from_graph",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(res)",
                      "children": [
                        {
                          "value": "res",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def update_node_execution_stats(node_exec_id: str, stats: dict[str, Any]):\n    await AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data={\"stats\": json.dumps(stats)},\n    )",
      "children": [
        {
          "value": "update_node_execution_stats",
          "children": []
        },
        {
          "value": "(node_exec_id: str, stats: dict[str, Any])",
          "children": [
            {
              "value": "node_exec_id: str",
              "children": [
                {
                  "value": "node_exec_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "stats: dict[str, Any]",
              "children": [
                {
                  "value": "stats",
                  "children": []
                },
                {
                  "value": "dict[str, Any]",
                  "children": [
                    {
                      "value": "dict[str, Any]",
                      "children": [
                        {
                          "value": "dict",
                          "children": []
                        },
                        {
                          "value": "[str, Any]",
                          "children": [
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Any",
                              "children": [
                                {
                                  "value": "Any",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "await AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data={\"stats\": json.dumps(stats)},\n    )",
          "children": [
            {
              "value": "await AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data={\"stats\": json.dumps(stats)},\n    )",
              "children": [
                {
                  "value": "await AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data={\"stats\": json.dumps(stats)},\n    )",
                  "children": [
                    {
                      "value": "AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data={\"stats\": json.dumps(stats)},\n    )",
                      "children": [
                        {
                          "value": "AgentNodeExecution.prisma().update",
                          "children": [
                            {
                              "value": "AgentNodeExecution.prisma()",
                              "children": [
                                {
                                  "value": "AgentNodeExecution.prisma",
                                  "children": [
                                    {
                                      "value": "AgentNodeExecution",
                                      "children": []
                                    },
                                    {
                                      "value": "prisma",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "update",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\n        where={\"id\": node_exec_id},\n        data={\"stats\": json.dumps(stats)},\n    )",
                          "children": [
                            {
                              "value": "where={\"id\": node_exec_id}",
                              "children": [
                                {
                                  "value": "where",
                                  "children": []
                                },
                                {
                                  "value": "{\"id\": node_exec_id}",
                                  "children": [
                                    {
                                      "value": "\"id\": node_exec_id",
                                      "children": [
                                        {
                                          "value": "\"id\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "node_exec_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "data={\"stats\": json.dumps(stats)}",
                              "children": [
                                {
                                  "value": "data",
                                  "children": []
                                },
                                {
                                  "value": "{\"stats\": json.dumps(stats)}",
                                  "children": [
                                    {
                                      "value": "\"stats\": json.dumps(stats)",
                                      "children": [
                                        {
                                          "value": "\"stats\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "stats",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "json.dumps(stats)",
                                          "children": [
                                            {
                                              "value": "json.dumps",
                                              "children": [
                                                {
                                                  "value": "json",
                                                  "children": []
                                                },
                                                {
                                                  "value": "dumps",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(stats)",
                                              "children": [
                                                {
                                                  "value": "stats",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def update_execution_status(\n    node_exec_id: str,\n    status: ExecutionStatus,\n    execution_data: BlockInput | None = None,\n    stats: dict[str, Any] | None = None,\n) -> ExecutionResult:\n    if status == ExecutionStatus.QUEUED and execution_data is None:\n        raise ValueError(\"Execution data must be provided when queuing an execution.\")\n\n    now = datetime.now(tz=timezone.utc)\n    data = {\n        **({\"executionStatus\": status}),\n        **({\"queuedTime\": now} if status == ExecutionStatus.QUEUED else {}),\n        **({\"startedTime\": now} if status == ExecutionStatus.RUNNING else {}),\n        **({\"endedTime\": now} if status == ExecutionStatus.FAILED else {}),\n        **({\"endedTime\": now} if status == ExecutionStatus.COMPLETED else {}),\n        **({\"executionData\": json.dumps(execution_data)} if execution_data else {}),\n        **({\"stats\": json.dumps(stats)} if stats else {}),\n    }\n\n    res = await AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data=data,  # type: ignore\n        include=EXECUTION_RESULT_INCLUDE,\n    )\n    if not res:\n        raise ValueError(f\"Execution {node_exec_id} not found.\")\n\n    return ExecutionResult.from_db(res)",
      "children": [
        {
          "value": "update_execution_status",
          "children": []
        },
        {
          "value": "(\n    node_exec_id: str,\n    status: ExecutionStatus,\n    execution_data: BlockInput | None = None,\n    stats: dict[str, Any] | None = None,\n)",
          "children": [
            {
              "value": "node_exec_id: str",
              "children": [
                {
                  "value": "node_exec_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "status: ExecutionStatus",
              "children": [
                {
                  "value": "status",
                  "children": []
                },
                {
                  "value": "ExecutionStatus",
                  "children": [
                    {
                      "value": "ExecutionStatus",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "execution_data: BlockInput | None = None",
              "children": [
                {
                  "value": "execution_data",
                  "children": []
                },
                {
                  "value": "BlockInput | None",
                  "children": [
                    {
                      "value": "BlockInput | None",
                      "children": [
                        {
                          "value": "BlockInput",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "stats: dict[str, Any] | None = None",
              "children": [
                {
                  "value": "stats",
                  "children": []
                },
                {
                  "value": "dict[str, Any] | None",
                  "children": [
                    {
                      "value": "dict[str, Any] | None",
                      "children": [
                        {
                          "value": "dict[str, Any]",
                          "children": [
                            {
                              "value": "dict[str, Any]",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                },
                                {
                                  "value": "[str, Any]",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "Any",
                                      "children": [
                                        {
                                          "value": "Any",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": [
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "ExecutionResult",
          "children": [
            {
              "value": "ExecutionResult",
              "children": []
            }
          ]
        },
        {
          "value": "if status == ExecutionStatus.QUEUED and execution_data is None:\n        raise ValueError(\"Execution data must be provided when queuing an execution.\")\n\n    now = datetime.now(tz=timezone.utc)\n    data = {\n        **({\"executionStatus\": status}),\n        **({\"queuedTime\": now} if status == ExecutionStatus.QUEUED else {}),\n        **({\"startedTime\": now} if status == ExecutionStatus.RUNNING else {}),\n        **({\"endedTime\": now} if status == ExecutionStatus.FAILED else {}),\n        **({\"endedTime\": now} if status == ExecutionStatus.COMPLETED else {}),\n        **({\"executionData\": json.dumps(execution_data)} if execution_data else {}),\n        **({\"stats\": json.dumps(stats)} if stats else {}),\n    }\n\n    res = await AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data=data,  # type: ignore\n        include=EXECUTION_RESULT_INCLUDE,\n    )\n    if not res:\n        raise ValueError(f\"Execution {node_exec_id} not found.\")\n\n    return ExecutionResult.from_db(res)",
          "children": [
            {
              "value": "if status == ExecutionStatus.QUEUED and execution_data is None:\n        raise ValueError(\"Execution data must be provided when queuing an execution.\")",
              "children": [
                {
                  "value": "status == ExecutionStatus.QUEUED and execution_data is None",
                  "children": [
                    {
                      "value": "status == ExecutionStatus.QUEUED",
                      "children": [
                        {
                          "value": "status",
                          "children": []
                        },
                        {
                          "value": "ExecutionStatus.QUEUED",
                          "children": [
                            {
                              "value": "ExecutionStatus",
                              "children": []
                            },
                            {
                              "value": "QUEUED",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "execution_data is None",
                      "children": [
                        {
                          "value": "execution_data",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"Execution data must be provided when queuing an execution.\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"Execution data must be provided when queuing an execution.\")",
                      "children": [
                        {
                          "value": "ValueError(\"Execution data must be provided when queuing an execution.\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"Execution data must be provided when queuing an execution.\")",
                              "children": [
                                {
                                  "value": "\"Execution data must be provided when queuing an execution.\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Execution data must be provided when queuing an execution.",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "now = datetime.now(tz=timezone.utc)",
              "children": [
                {
                  "value": "now = datetime.now(tz=timezone.utc)",
                  "children": [
                    {
                      "value": "now",
                      "children": []
                    },
                    {
                      "value": "datetime.now(tz=timezone.utc)",
                      "children": [
                        {
                          "value": "datetime.now",
                          "children": [
                            {
                              "value": "datetime",
                              "children": []
                            },
                            {
                              "value": "now",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(tz=timezone.utc)",
                          "children": [
                            {
                              "value": "tz=timezone.utc",
                              "children": [
                                {
                                  "value": "tz",
                                  "children": []
                                },
                                {
                                  "value": "timezone.utc",
                                  "children": [
                                    {
                                      "value": "timezone",
                                      "children": []
                                    },
                                    {
                                      "value": "utc",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "data = {\n        **({\"executionStatus\": status}),\n        **({\"queuedTime\": now} if status == ExecutionStatus.QUEUED else {}),\n        **({\"startedTime\": now} if status == ExecutionStatus.RUNNING else {}),\n        **({\"endedTime\": now} if status == ExecutionStatus.FAILED else {}),\n        **({\"endedTime\": now} if status == ExecutionStatus.COMPLETED else {}),\n        **({\"executionData\": json.dumps(execution_data)} if execution_data else {}),\n        **({\"stats\": json.dumps(stats)} if stats else {}),\n    }",
              "children": [
                {
                  "value": "data = {\n        **({\"executionStatus\": status}),\n        **({\"queuedTime\": now} if status == ExecutionStatus.QUEUED else {}),\n        **({\"startedTime\": now} if status == ExecutionStatus.RUNNING else {}),\n        **({\"endedTime\": now} if status == ExecutionStatus.FAILED else {}),\n        **({\"endedTime\": now} if status == ExecutionStatus.COMPLETED else {}),\n        **({\"executionData\": json.dumps(execution_data)} if execution_data else {}),\n        **({\"stats\": json.dumps(stats)} if stats else {}),\n    }",
                  "children": [
                    {
                      "value": "data",
                      "children": []
                    },
                    {
                      "value": "{\n        **({\"executionStatus\": status}),\n        **({\"queuedTime\": now} if status == ExecutionStatus.QUEUED else {}),\n        **({\"startedTime\": now} if status == ExecutionStatus.RUNNING else {}),\n        **({\"endedTime\": now} if status == ExecutionStatus.FAILED else {}),\n        **({\"endedTime\": now} if status == ExecutionStatus.COMPLETED else {}),\n        **({\"executionData\": json.dumps(execution_data)} if execution_data else {}),\n        **({\"stats\": json.dumps(stats)} if stats else {}),\n    }",
                      "children": [
                        {
                          "value": "**({\"executionStatus\": status})",
                          "children": [
                            {
                              "value": "({\"executionStatus\": status})",
                              "children": [
                                {
                                  "value": "{\"executionStatus\": status}",
                                  "children": [
                                    {
                                      "value": "\"executionStatus\": status",
                                      "children": [
                                        {
                                          "value": "\"executionStatus\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "executionStatus",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "status",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "**({\"queuedTime\": now} if status == ExecutionStatus.QUEUED else {})",
                          "children": [
                            {
                              "value": "({\"queuedTime\": now} if status == ExecutionStatus.QUEUED else {})",
                              "children": [
                                {
                                  "value": "{\"queuedTime\": now} if status == ExecutionStatus.QUEUED else {}",
                                  "children": [
                                    {
                                      "value": "{\"queuedTime\": now}",
                                      "children": [
                                        {
                                          "value": "\"queuedTime\": now",
                                          "children": [
                                            {
                                              "value": "\"queuedTime\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "queuedTime",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "now",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "status == ExecutionStatus.QUEUED",
                                      "children": [
                                        {
                                          "value": "status",
                                          "children": []
                                        },
                                        {
                                          "value": "ExecutionStatus.QUEUED",
                                          "children": [
                                            {
                                              "value": "ExecutionStatus",
                                              "children": []
                                            },
                                            {
                                              "value": "QUEUED",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "{}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "**({\"startedTime\": now} if status == ExecutionStatus.RUNNING else {})",
                          "children": [
                            {
                              "value": "({\"startedTime\": now} if status == ExecutionStatus.RUNNING else {})",
                              "children": [
                                {
                                  "value": "{\"startedTime\": now} if status == ExecutionStatus.RUNNING else {}",
                                  "children": [
                                    {
                                      "value": "{\"startedTime\": now}",
                                      "children": [
                                        {
                                          "value": "\"startedTime\": now",
                                          "children": [
                                            {
                                              "value": "\"startedTime\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "startedTime",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "now",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "status == ExecutionStatus.RUNNING",
                                      "children": [
                                        {
                                          "value": "status",
                                          "children": []
                                        },
                                        {
                                          "value": "ExecutionStatus.RUNNING",
                                          "children": [
                                            {
                                              "value": "ExecutionStatus",
                                              "children": []
                                            },
                                            {
                                              "value": "RUNNING",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "{}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "**({\"endedTime\": now} if status == ExecutionStatus.FAILED else {})",
                          "children": [
                            {
                              "value": "({\"endedTime\": now} if status == ExecutionStatus.FAILED else {})",
                              "children": [
                                {
                                  "value": "{\"endedTime\": now} if status == ExecutionStatus.FAILED else {}",
                                  "children": [
                                    {
                                      "value": "{\"endedTime\": now}",
                                      "children": [
                                        {
                                          "value": "\"endedTime\": now",
                                          "children": [
                                            {
                                              "value": "\"endedTime\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "endedTime",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "now",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "status == ExecutionStatus.FAILED",
                                      "children": [
                                        {
                                          "value": "status",
                                          "children": []
                                        },
                                        {
                                          "value": "ExecutionStatus.FAILED",
                                          "children": [
                                            {
                                              "value": "ExecutionStatus",
                                              "children": []
                                            },
                                            {
                                              "value": "FAILED",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "{}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "**({\"endedTime\": now} if status == ExecutionStatus.COMPLETED else {})",
                          "children": [
                            {
                              "value": "({\"endedTime\": now} if status == ExecutionStatus.COMPLETED else {})",
                              "children": [
                                {
                                  "value": "{\"endedTime\": now} if status == ExecutionStatus.COMPLETED else {}",
                                  "children": [
                                    {
                                      "value": "{\"endedTime\": now}",
                                      "children": [
                                        {
                                          "value": "\"endedTime\": now",
                                          "children": [
                                            {
                                              "value": "\"endedTime\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "endedTime",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "now",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "status == ExecutionStatus.COMPLETED",
                                      "children": [
                                        {
                                          "value": "status",
                                          "children": []
                                        },
                                        {
                                          "value": "ExecutionStatus.COMPLETED",
                                          "children": [
                                            {
                                              "value": "ExecutionStatus",
                                              "children": []
                                            },
                                            {
                                              "value": "COMPLETED",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "{}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "**({\"executionData\": json.dumps(execution_data)} if execution_data else {})",
                          "children": [
                            {
                              "value": "({\"executionData\": json.dumps(execution_data)} if execution_data else {})",
                              "children": [
                                {
                                  "value": "{\"executionData\": json.dumps(execution_data)} if execution_data else {}",
                                  "children": [
                                    {
                                      "value": "{\"executionData\": json.dumps(execution_data)}",
                                      "children": [
                                        {
                                          "value": "\"executionData\": json.dumps(execution_data)",
                                          "children": [
                                            {
                                              "value": "\"executionData\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "executionData",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "json.dumps(execution_data)",
                                              "children": [
                                                {
                                                  "value": "json.dumps",
                                                  "children": [
                                                    {
                                                      "value": "json",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "dumps",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(execution_data)",
                                                  "children": [
                                                    {
                                                      "value": "execution_data",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "execution_data",
                                      "children": []
                                    },
                                    {
                                      "value": "{}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "**({\"stats\": json.dumps(stats)} if stats else {})",
                          "children": [
                            {
                              "value": "({\"stats\": json.dumps(stats)} if stats else {})",
                              "children": [
                                {
                                  "value": "{\"stats\": json.dumps(stats)} if stats else {}",
                                  "children": [
                                    {
                                      "value": "{\"stats\": json.dumps(stats)}",
                                      "children": [
                                        {
                                          "value": "\"stats\": json.dumps(stats)",
                                          "children": [
                                            {
                                              "value": "\"stats\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "stats",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "json.dumps(stats)",
                                              "children": [
                                                {
                                                  "value": "json.dumps",
                                                  "children": [
                                                    {
                                                      "value": "json",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "dumps",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(stats)",
                                                  "children": [
                                                    {
                                                      "value": "stats",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "stats",
                                      "children": []
                                    },
                                    {
                                      "value": "{}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "res = await AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data=data,  # type: ignore\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
              "children": [
                {
                  "value": "res = await AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data=data,  # type: ignore\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
                  "children": [
                    {
                      "value": "res",
                      "children": []
                    },
                    {
                      "value": "await AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data=data,  # type: ignore\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
                      "children": [
                        {
                          "value": "AgentNodeExecution.prisma().update(\n        where={\"id\": node_exec_id},\n        data=data,  # type: ignore\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
                          "children": [
                            {
                              "value": "AgentNodeExecution.prisma().update",
                              "children": [
                                {
                                  "value": "AgentNodeExecution.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentNodeExecution.prisma",
                                      "children": [
                                        {
                                          "value": "AgentNodeExecution",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "update",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\"id\": node_exec_id},\n        data=data,  # type: ignore\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
                              "children": [
                                {
                                  "value": "where={\"id\": node_exec_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"id\": node_exec_id}",
                                      "children": [
                                        {
                                          "value": "\"id\": node_exec_id",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "node_exec_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "data=data",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "data",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "# type: ignore",
                                  "children": []
                                },
                                {
                                  "value": "include=EXECUTION_RESULT_INCLUDE",
                                  "children": [
                                    {
                                      "value": "include",
                                      "children": []
                                    },
                                    {
                                      "value": "EXECUTION_RESULT_INCLUDE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not res:\n        raise ValueError(f\"Execution {node_exec_id} not found.\")",
              "children": [
                {
                  "value": "not res",
                  "children": [
                    {
                      "value": "res",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(f\"Execution {node_exec_id} not found.\")",
                  "children": [
                    {
                      "value": "raise ValueError(f\"Execution {node_exec_id} not found.\")",
                      "children": [
                        {
                          "value": "ValueError(f\"Execution {node_exec_id} not found.\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(f\"Execution {node_exec_id} not found.\")",
                              "children": [
                                {
                                  "value": "f\"Execution {node_exec_id} not found.\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Execution",
                                      "children": []
                                    },
                                    {
                                      "value": "{node_exec_id}",
                                      "children": [
                                        {
                                          "value": "node_exec_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "not found.",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return ExecutionResult.from_db(res)",
              "children": [
                {
                  "value": "ExecutionResult.from_db(res)",
                  "children": [
                    {
                      "value": "ExecutionResult.from_db",
                      "children": [
                        {
                          "value": "ExecutionResult",
                          "children": []
                        },
                        {
                          "value": "from_db",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(res)",
                      "children": [
                        {
                          "value": "res",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_execution_results(graph_exec_id: str) -> list[ExecutionResult]:\n    executions = await AgentNodeExecution.prisma().find_many(\n        where={\"agentGraphExecutionId\": graph_exec_id},\n        include=EXECUTION_RESULT_INCLUDE,\n        order=[\n            {\"queuedTime\": \"asc\"},\n            {\"addedTime\": \"asc\"},  # Fallback: Incomplete execs has no queuedTime.\n        ],\n    )\n    res = [ExecutionResult.from_db(execution) for execution in executions]\n    return res",
      "children": [
        {
          "value": "get_execution_results",
          "children": []
        },
        {
          "value": "(graph_exec_id: str)",
          "children": [
            {
              "value": "graph_exec_id: str",
              "children": [
                {
                  "value": "graph_exec_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "list[ExecutionResult]",
          "children": [
            {
              "value": "list[ExecutionResult]",
              "children": [
                {
                  "value": "list",
                  "children": []
                },
                {
                  "value": "[ExecutionResult]",
                  "children": [
                    {
                      "value": "ExecutionResult",
                      "children": [
                        {
                          "value": "ExecutionResult",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "executions = await AgentNodeExecution.prisma().find_many(\n        where={\"agentGraphExecutionId\": graph_exec_id},\n        include=EXECUTION_RESULT_INCLUDE,\n        order=[\n            {\"queuedTime\": \"asc\"},\n            {\"addedTime\": \"asc\"},  # Fallback: Incomplete execs has no queuedTime.\n        ],\n    )\n    res = [ExecutionResult.from_db(execution) for execution in executions]\n    return res",
          "children": [
            {
              "value": "executions = await AgentNodeExecution.prisma().find_many(\n        where={\"agentGraphExecutionId\": graph_exec_id},\n        include=EXECUTION_RESULT_INCLUDE,\n        order=[\n            {\"queuedTime\": \"asc\"},\n            {\"addedTime\": \"asc\"},  # Fallback: Incomplete execs has no queuedTime.\n        ],\n    )",
              "children": [
                {
                  "value": "executions = await AgentNodeExecution.prisma().find_many(\n        where={\"agentGraphExecutionId\": graph_exec_id},\n        include=EXECUTION_RESULT_INCLUDE,\n        order=[\n            {\"queuedTime\": \"asc\"},\n            {\"addedTime\": \"asc\"},  # Fallback: Incomplete execs has no queuedTime.\n        ],\n    )",
                  "children": [
                    {
                      "value": "executions",
                      "children": []
                    },
                    {
                      "value": "await AgentNodeExecution.prisma().find_many(\n        where={\"agentGraphExecutionId\": graph_exec_id},\n        include=EXECUTION_RESULT_INCLUDE,\n        order=[\n            {\"queuedTime\": \"asc\"},\n            {\"addedTime\": \"asc\"},  # Fallback: Incomplete execs has no queuedTime.\n        ],\n    )",
                      "children": [
                        {
                          "value": "AgentNodeExecution.prisma().find_many(\n        where={\"agentGraphExecutionId\": graph_exec_id},\n        include=EXECUTION_RESULT_INCLUDE,\n        order=[\n            {\"queuedTime\": \"asc\"},\n            {\"addedTime\": \"asc\"},  # Fallback: Incomplete execs has no queuedTime.\n        ],\n    )",
                          "children": [
                            {
                              "value": "AgentNodeExecution.prisma().find_many",
                              "children": [
                                {
                                  "value": "AgentNodeExecution.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentNodeExecution.prisma",
                                      "children": [
                                        {
                                          "value": "AgentNodeExecution",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_many",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\"agentGraphExecutionId\": graph_exec_id},\n        include=EXECUTION_RESULT_INCLUDE,\n        order=[\n            {\"queuedTime\": \"asc\"},\n            {\"addedTime\": \"asc\"},  # Fallback: Incomplete execs has no queuedTime.\n        ],\n    )",
                              "children": [
                                {
                                  "value": "where={\"agentGraphExecutionId\": graph_exec_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"agentGraphExecutionId\": graph_exec_id}",
                                      "children": [
                                        {
                                          "value": "\"agentGraphExecutionId\": graph_exec_id",
                                          "children": [
                                            {
                                              "value": "\"agentGraphExecutionId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentGraphExecutionId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_exec_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "include=EXECUTION_RESULT_INCLUDE",
                                  "children": [
                                    {
                                      "value": "include",
                                      "children": []
                                    },
                                    {
                                      "value": "EXECUTION_RESULT_INCLUDE",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "order=[\n            {\"queuedTime\": \"asc\"},\n            {\"addedTime\": \"asc\"},  # Fallback: Incomplete execs has no queuedTime.\n        ]",
                                  "children": [
                                    {
                                      "value": "order",
                                      "children": []
                                    },
                                    {
                                      "value": "[\n            {\"queuedTime\": \"asc\"},\n            {\"addedTime\": \"asc\"},  # Fallback: Incomplete execs has no queuedTime.\n        ]",
                                      "children": [
                                        {
                                          "value": "{\"queuedTime\": \"asc\"}",
                                          "children": [
                                            {
                                              "value": "\"queuedTime\": \"asc\"",
                                              "children": [
                                                {
                                                  "value": "\"queuedTime\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "queuedTime",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"asc\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "asc",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "{\"addedTime\": \"asc\"}",
                                          "children": [
                                            {
                                              "value": "\"addedTime\": \"asc\"",
                                              "children": [
                                                {
                                                  "value": "\"addedTime\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "addedTime",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"asc\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "asc",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "# Fallback: Incomplete execs has no queuedTime.",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "res = [ExecutionResult.from_db(execution) for execution in executions]",
              "children": [
                {
                  "value": "res = [ExecutionResult.from_db(execution) for execution in executions]",
                  "children": [
                    {
                      "value": "res",
                      "children": []
                    },
                    {
                      "value": "[ExecutionResult.from_db(execution) for execution in executions]",
                      "children": [
                        {
                          "value": "ExecutionResult.from_db(execution)",
                          "children": [
                            {
                              "value": "ExecutionResult.from_db",
                              "children": [
                                {
                                  "value": "ExecutionResult",
                                  "children": []
                                },
                                {
                                  "value": "from_db",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(execution)",
                              "children": [
                                {
                                  "value": "execution",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for execution in executions",
                          "children": [
                            {
                              "value": "execution",
                              "children": []
                            },
                            {
                              "value": "executions",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return res",
              "children": [
                {
                  "value": "res",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "LIST_SPLIT = \"_$_\"",
      "children": [
        {
          "value": "LIST_SPLIT = \"_$_\"",
          "children": [
            {
              "value": "LIST_SPLIT",
              "children": []
            },
            {
              "value": "\"_$_\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "_$_",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "DICT_SPLIT = \"_#_\"",
      "children": [
        {
          "value": "DICT_SPLIT = \"_#_\"",
          "children": [
            {
              "value": "DICT_SPLIT",
              "children": []
            },
            {
              "value": "\"_#_\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "_#_",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "OBJC_SPLIT = \"_@_\"",
      "children": [
        {
          "value": "OBJC_SPLIT = \"_@_\"",
          "children": [
            {
              "value": "OBJC_SPLIT",
              "children": []
            },
            {
              "value": "\"_@_\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "_@_",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def parse_execution_output(output: BlockData, name: str) -> Any | None:\n    # Allow extracting partial output data by name.\n    output_name, output_data = output\n\n    if name == output_name:\n        return output_data\n\n    if name.startswith(f\"{output_name}{LIST_SPLIT}\"):\n        index = int(name.split(LIST_SPLIT)[1])\n        if not isinstance(output_data, list) or len(output_data) <= index:\n            return None\n        return output_data[int(name.split(LIST_SPLIT)[1])]\n\n    if name.startswith(f\"{output_name}{DICT_SPLIT}\"):\n        index = name.split(DICT_SPLIT)[1]\n        if not isinstance(output_data, dict) or index not in output_data:\n            return None\n        return output_data[index]\n\n    if name.startswith(f\"{output_name}{OBJC_SPLIT}\"):\n        index = name.split(OBJC_SPLIT)[1]\n        if isinstance(output_data, object) and hasattr(output_data, index):\n            return getattr(output_data, index)\n        return None\n\n    return None",
      "children": [
        {
          "value": "parse_execution_output",
          "children": []
        },
        {
          "value": "(output: BlockData, name: str)",
          "children": [
            {
              "value": "output: BlockData",
              "children": [
                {
                  "value": "output",
                  "children": []
                },
                {
                  "value": "BlockData",
                  "children": [
                    {
                      "value": "BlockData",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "name: str",
              "children": [
                {
                  "value": "name",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Any | None",
          "children": [
            {
              "value": "Any | None",
              "children": [
                {
                  "value": "Any",
                  "children": []
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "# Allow extracting partial output data by name.",
          "children": []
        },
        {
          "value": "output_name, output_data = output\n\n    if name == output_name:\n        return output_data\n\n    if name.startswith(f\"{output_name}{LIST_SPLIT}\"):\n        index = int(name.split(LIST_SPLIT)[1])\n        if not isinstance(output_data, list) or len(output_data) <= index:\n            return None\n        return output_data[int(name.split(LIST_SPLIT)[1])]\n\n    if name.startswith(f\"{output_name}{DICT_SPLIT}\"):\n        index = name.split(DICT_SPLIT)[1]\n        if not isinstance(output_data, dict) or index not in output_data:\n            return None\n        return output_data[index]\n\n    if name.startswith(f\"{output_name}{OBJC_SPLIT}\"):\n        index = name.split(OBJC_SPLIT)[1]\n        if isinstance(output_data, object) and hasattr(output_data, index):\n            return getattr(output_data, index)\n        return None\n\n    return None",
          "children": [
            {
              "value": "output_name, output_data = output",
              "children": [
                {
                  "value": "output_name, output_data = output",
                  "children": [
                    {
                      "value": "output_name, output_data",
                      "children": [
                        {
                          "value": "output_name",
                          "children": []
                        },
                        {
                          "value": "output_data",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "output",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if name == output_name:\n        return output_data",
              "children": [
                {
                  "value": "name == output_name",
                  "children": [
                    {
                      "value": "name",
                      "children": []
                    },
                    {
                      "value": "output_name",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return output_data",
                  "children": [
                    {
                      "value": "return output_data",
                      "children": [
                        {
                          "value": "output_data",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if name.startswith(f\"{output_name}{LIST_SPLIT}\"):\n        index = int(name.split(LIST_SPLIT)[1])\n        if not isinstance(output_data, list) or len(output_data) <= index:\n            return None\n        return output_data[int(name.split(LIST_SPLIT)[1])]",
              "children": [
                {
                  "value": "name.startswith(f\"{output_name}{LIST_SPLIT}\")",
                  "children": [
                    {
                      "value": "name.startswith",
                      "children": [
                        {
                          "value": "name",
                          "children": []
                        },
                        {
                          "value": "startswith",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(f\"{output_name}{LIST_SPLIT}\")",
                      "children": [
                        {
                          "value": "f\"{output_name}{LIST_SPLIT}\"",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "{output_name}",
                              "children": [
                                {
                                  "value": "output_name",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "{LIST_SPLIT}",
                              "children": [
                                {
                                  "value": "LIST_SPLIT",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "index = int(name.split(LIST_SPLIT)[1])\n        if not isinstance(output_data, list) or len(output_data) <= index:\n            return None\n        return output_data[int(name.split(LIST_SPLIT)[1])]",
                  "children": [
                    {
                      "value": "index = int(name.split(LIST_SPLIT)[1])",
                      "children": [
                        {
                          "value": "index = int(name.split(LIST_SPLIT)[1])",
                          "children": [
                            {
                              "value": "index",
                              "children": []
                            },
                            {
                              "value": "int(name.split(LIST_SPLIT)[1])",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                },
                                {
                                  "value": "(name.split(LIST_SPLIT)[1])",
                                  "children": [
                                    {
                                      "value": "name.split(LIST_SPLIT)[1]",
                                      "children": [
                                        {
                                          "value": "name.split(LIST_SPLIT)",
                                          "children": [
                                            {
                                              "value": "name.split",
                                              "children": [
                                                {
                                                  "value": "name",
                                                  "children": []
                                                },
                                                {
                                                  "value": "split",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(LIST_SPLIT)",
                                              "children": [
                                                {
                                                  "value": "LIST_SPLIT",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not isinstance(output_data, list) or len(output_data) <= index:\n            return None",
                      "children": [
                        {
                          "value": "not isinstance(output_data, list) or len(output_data) <= index",
                          "children": [
                            {
                              "value": "not isinstance(output_data, list)",
                              "children": [
                                {
                                  "value": "isinstance(output_data, list)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(output_data, list)",
                                      "children": [
                                        {
                                          "value": "output_data",
                                          "children": []
                                        },
                                        {
                                          "value": "list",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "len(output_data) <= index",
                              "children": [
                                {
                                  "value": "len(output_data)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(output_data)",
                                      "children": [
                                        {
                                          "value": "output_data",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "index",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return None",
                          "children": [
                            {
                              "value": "return None",
                              "children": [
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return output_data[int(name.split(LIST_SPLIT)[1])]",
                      "children": [
                        {
                          "value": "output_data[int(name.split(LIST_SPLIT)[1])]",
                          "children": [
                            {
                              "value": "output_data",
                              "children": []
                            },
                            {
                              "value": "int(name.split(LIST_SPLIT)[1])",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                },
                                {
                                  "value": "(name.split(LIST_SPLIT)[1])",
                                  "children": [
                                    {
                                      "value": "name.split(LIST_SPLIT)[1]",
                                      "children": [
                                        {
                                          "value": "name.split(LIST_SPLIT)",
                                          "children": [
                                            {
                                              "value": "name.split",
                                              "children": [
                                                {
                                                  "value": "name",
                                                  "children": []
                                                },
                                                {
                                                  "value": "split",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(LIST_SPLIT)",
                                              "children": [
                                                {
                                                  "value": "LIST_SPLIT",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if name.startswith(f\"{output_name}{DICT_SPLIT}\"):\n        index = name.split(DICT_SPLIT)[1]\n        if not isinstance(output_data, dict) or index not in output_data:\n            return None\n        return output_data[index]",
              "children": [
                {
                  "value": "name.startswith(f\"{output_name}{DICT_SPLIT}\")",
                  "children": [
                    {
                      "value": "name.startswith",
                      "children": [
                        {
                          "value": "name",
                          "children": []
                        },
                        {
                          "value": "startswith",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(f\"{output_name}{DICT_SPLIT}\")",
                      "children": [
                        {
                          "value": "f\"{output_name}{DICT_SPLIT}\"",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "{output_name}",
                              "children": [
                                {
                                  "value": "output_name",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "{DICT_SPLIT}",
                              "children": [
                                {
                                  "value": "DICT_SPLIT",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "index = name.split(DICT_SPLIT)[1]\n        if not isinstance(output_data, dict) or index not in output_data:\n            return None\n        return output_data[index]",
                  "children": [
                    {
                      "value": "index = name.split(DICT_SPLIT)[1]",
                      "children": [
                        {
                          "value": "index = name.split(DICT_SPLIT)[1]",
                          "children": [
                            {
                              "value": "index",
                              "children": []
                            },
                            {
                              "value": "name.split(DICT_SPLIT)[1]",
                              "children": [
                                {
                                  "value": "name.split(DICT_SPLIT)",
                                  "children": [
                                    {
                                      "value": "name.split",
                                      "children": [
                                        {
                                          "value": "name",
                                          "children": []
                                        },
                                        {
                                          "value": "split",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(DICT_SPLIT)",
                                      "children": [
                                        {
                                          "value": "DICT_SPLIT",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not isinstance(output_data, dict) or index not in output_data:\n            return None",
                      "children": [
                        {
                          "value": "not isinstance(output_data, dict) or index not in output_data",
                          "children": [
                            {
                              "value": "not isinstance(output_data, dict)",
                              "children": [
                                {
                                  "value": "isinstance(output_data, dict)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(output_data, dict)",
                                      "children": [
                                        {
                                          "value": "output_data",
                                          "children": []
                                        },
                                        {
                                          "value": "dict",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "index not in output_data",
                              "children": [
                                {
                                  "value": "index",
                                  "children": []
                                },
                                {
                                  "value": "output_data",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return None",
                          "children": [
                            {
                              "value": "return None",
                              "children": [
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return output_data[index]",
                      "children": [
                        {
                          "value": "output_data[index]",
                          "children": [
                            {
                              "value": "output_data",
                              "children": []
                            },
                            {
                              "value": "index",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if name.startswith(f\"{output_name}{OBJC_SPLIT}\"):\n        index = name.split(OBJC_SPLIT)[1]\n        if isinstance(output_data, object) and hasattr(output_data, index):\n            return getattr(output_data, index)\n        return None",
              "children": [
                {
                  "value": "name.startswith(f\"{output_name}{OBJC_SPLIT}\")",
                  "children": [
                    {
                      "value": "name.startswith",
                      "children": [
                        {
                          "value": "name",
                          "children": []
                        },
                        {
                          "value": "startswith",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(f\"{output_name}{OBJC_SPLIT}\")",
                      "children": [
                        {
                          "value": "f\"{output_name}{OBJC_SPLIT}\"",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "{output_name}",
                              "children": [
                                {
                                  "value": "output_name",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "{OBJC_SPLIT}",
                              "children": [
                                {
                                  "value": "OBJC_SPLIT",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "index = name.split(OBJC_SPLIT)[1]\n        if isinstance(output_data, object) and hasattr(output_data, index):\n            return getattr(output_data, index)\n        return None",
                  "children": [
                    {
                      "value": "index = name.split(OBJC_SPLIT)[1]",
                      "children": [
                        {
                          "value": "index = name.split(OBJC_SPLIT)[1]",
                          "children": [
                            {
                              "value": "index",
                              "children": []
                            },
                            {
                              "value": "name.split(OBJC_SPLIT)[1]",
                              "children": [
                                {
                                  "value": "name.split(OBJC_SPLIT)",
                                  "children": [
                                    {
                                      "value": "name.split",
                                      "children": [
                                        {
                                          "value": "name",
                                          "children": []
                                        },
                                        {
                                          "value": "split",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(OBJC_SPLIT)",
                                      "children": [
                                        {
                                          "value": "OBJC_SPLIT",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if isinstance(output_data, object) and hasattr(output_data, index):\n            return getattr(output_data, index)",
                      "children": [
                        {
                          "value": "isinstance(output_data, object) and hasattr(output_data, index)",
                          "children": [
                            {
                              "value": "isinstance(output_data, object)",
                              "children": [
                                {
                                  "value": "isinstance",
                                  "children": []
                                },
                                {
                                  "value": "(output_data, object)",
                                  "children": [
                                    {
                                      "value": "output_data",
                                      "children": []
                                    },
                                    {
                                      "value": "object",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "hasattr(output_data, index)",
                              "children": [
                                {
                                  "value": "hasattr",
                                  "children": []
                                },
                                {
                                  "value": "(output_data, index)",
                                  "children": [
                                    {
                                      "value": "output_data",
                                      "children": []
                                    },
                                    {
                                      "value": "index",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return getattr(output_data, index)",
                          "children": [
                            {
                              "value": "return getattr(output_data, index)",
                              "children": [
                                {
                                  "value": "getattr(output_data, index)",
                                  "children": [
                                    {
                                      "value": "getattr",
                                      "children": []
                                    },
                                    {
                                      "value": "(output_data, index)",
                                      "children": [
                                        {
                                          "value": "output_data",
                                          "children": []
                                        },
                                        {
                                          "value": "index",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return None",
                      "children": [
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return None",
              "children": [
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def merge_execution_input(data: BlockInput) -> BlockInput:\n    \"\"\"\n    Merge all dynamic input pins which described by the following pattern:\n    - <input_name>_$_<index> for list input.\n    - <input_name>_#_<index> for dict input.\n    - <input_name>_@_<index> for object input.\n    This function will construct pins with the same name into a single list/dict/object.\n    \"\"\"\n\n    # Merge all input with <input_name>_$_<index> into a single list.\n    items = list(data.items())\n\n    for key, value in items:\n        if LIST_SPLIT not in key:\n            continue\n        name, index = key.split(LIST_SPLIT)\n        if not index.isdigit():\n            raise ValueError(f\"Invalid key: {key}, #{index} index must be an integer.\")\n\n        data[name] = data.get(name, [])\n        if int(index) >= len(data[name]):\n            # Pad list with empty string on missing indices.\n            data[name].extend([\"\"] * (int(index) - len(data[name]) + 1))\n        data[name][int(index)] = value\n\n    # Merge all input with <input_name>_#_<index> into a single dict.\n    for key, value in items:\n        if DICT_SPLIT not in key:\n            continue\n        name, index = key.split(DICT_SPLIT)\n        data[name] = data.get(name, {})\n        data[name][index] = value\n\n    # Merge all input with <input_name>_@_<index> into a single object.\n    for key, value in items:\n        if OBJC_SPLIT not in key:\n            continue\n        name, index = key.split(OBJC_SPLIT)\n        if name not in data or not isinstance(data[name], object):\n            data[name] = mock.MockObject()\n        setattr(data[name], index, value)\n\n    return data",
      "children": [
        {
          "value": "merge_execution_input",
          "children": []
        },
        {
          "value": "(data: BlockInput)",
          "children": [
            {
              "value": "data: BlockInput",
              "children": [
                {
                  "value": "data",
                  "children": []
                },
                {
                  "value": "BlockInput",
                  "children": [
                    {
                      "value": "BlockInput",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "BlockInput",
          "children": [
            {
              "value": "BlockInput",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Merge all dynamic input pins which described by the following pattern:\n    - <input_name>_$_<index> for list input.\n    - <input_name>_#_<index> for dict input.\n    - <input_name>_@_<index> for object input.\n    This function will construct pins with the same name into a single list/dict/object.\n    \"\"\"\n\n    # Merge all input with <input_name>_$_<index> into a single list.\n    items = list(data.items())\n\n    for key, value in items:\n        if LIST_SPLIT not in key:\n            continue\n        name, index = key.split(LIST_SPLIT)\n        if not index.isdigit():\n            raise ValueError(f\"Invalid key: {key}, #{index} index must be an integer.\")\n\n        data[name] = data.get(name, [])\n        if int(index) >= len(data[name]):\n            # Pad list with empty string on missing indices.\n            data[name].extend([\"\"] * (int(index) - len(data[name]) + 1))\n        data[name][int(index)] = value\n\n    # Merge all input with <input_name>_#_<index> into a single dict.\n    for key, value in items:\n        if DICT_SPLIT not in key:\n            continue\n        name, index = key.split(DICT_SPLIT)\n        data[name] = data.get(name, {})\n        data[name][index] = value\n\n    # Merge all input with <input_name>_@_<index> into a single object.\n    for key, value in items:\n        if OBJC_SPLIT not in key:\n            continue\n        name, index = key.split(OBJC_SPLIT)\n        if name not in data or not isinstance(data[name], object):\n            data[name] = mock.MockObject()\n        setattr(data[name], index, value)\n\n    return data",
          "children": [
            {
              "value": "\"\"\"\n    Merge all dynamic input pins which described by the following pattern:\n    - <input_name>_$_<index> for list input.\n    - <input_name>_#_<index> for dict input.\n    - <input_name>_@_<index> for object input.\n    This function will construct pins with the same name into a single list/dict/object.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Merge all dynamic input pins which described by the following pattern:\n    - <input_name>_$_<index> for list input.\n    - <input_name>_#_<index> for dict input.\n    - <input_name>_@_<index> for object input.\n    This function will construct pins with the same name into a single list/dict/object.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Merge all dynamic input pins which described by the following pattern:\n    - <input_name>_$_<index> for list input.\n    - <input_name>_#_<index> for dict input.\n    - <input_name>_@_<index> for object input.\n    This function will construct pins with the same name into a single list/dict/object.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Merge all input with <input_name>_$_<index> into a single list.",
              "children": []
            },
            {
              "value": "items = list(data.items())",
              "children": [
                {
                  "value": "items = list(data.items())",
                  "children": [
                    {
                      "value": "items",
                      "children": []
                    },
                    {
                      "value": "list(data.items())",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "(data.items())",
                          "children": [
                            {
                              "value": "data.items()",
                              "children": [
                                {
                                  "value": "data.items",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "items",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for key, value in items:\n        if LIST_SPLIT not in key:\n            continue\n        name, index = key.split(LIST_SPLIT)\n        if not index.isdigit():\n            raise ValueError(f\"Invalid key: {key}, #{index} index must be an integer.\")\n\n        data[name] = data.get(name, [])\n        if int(index) >= len(data[name]):\n            # Pad list with empty string on missing indices.\n            data[name].extend([\"\"] * (int(index) - len(data[name]) + 1))\n        data[name][int(index)] = value",
              "children": [
                {
                  "value": "key, value",
                  "children": [
                    {
                      "value": "key",
                      "children": []
                    },
                    {
                      "value": "value",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "items",
                  "children": []
                },
                {
                  "value": "if LIST_SPLIT not in key:\n            continue\n        name, index = key.split(LIST_SPLIT)\n        if not index.isdigit():\n            raise ValueError(f\"Invalid key: {key}, #{index} index must be an integer.\")\n\n        data[name] = data.get(name, [])\n        if int(index) >= len(data[name]):\n            # Pad list with empty string on missing indices.\n            data[name].extend([\"\"] * (int(index) - len(data[name]) + 1))\n        data[name][int(index)] = value",
                  "children": [
                    {
                      "value": "if LIST_SPLIT not in key:\n            continue",
                      "children": [
                        {
                          "value": "LIST_SPLIT not in key",
                          "children": [
                            {
                              "value": "LIST_SPLIT",
                              "children": []
                            },
                            {
                              "value": "key",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "continue",
                          "children": [
                            {
                              "value": "continue",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "name, index = key.split(LIST_SPLIT)",
                      "children": [
                        {
                          "value": "name, index = key.split(LIST_SPLIT)",
                          "children": [
                            {
                              "value": "name, index",
                              "children": [
                                {
                                  "value": "name",
                                  "children": []
                                },
                                {
                                  "value": "index",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "key.split(LIST_SPLIT)",
                              "children": [
                                {
                                  "value": "key.split",
                                  "children": [
                                    {
                                      "value": "key",
                                      "children": []
                                    },
                                    {
                                      "value": "split",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(LIST_SPLIT)",
                                  "children": [
                                    {
                                      "value": "LIST_SPLIT",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not index.isdigit():\n            raise ValueError(f\"Invalid key: {key}, #{index} index must be an integer.\")",
                      "children": [
                        {
                          "value": "not index.isdigit()",
                          "children": [
                            {
                              "value": "index.isdigit()",
                              "children": [
                                {
                                  "value": "index.isdigit",
                                  "children": [
                                    {
                                      "value": "index",
                                      "children": []
                                    },
                                    {
                                      "value": "isdigit",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(f\"Invalid key: {key}, #{index} index must be an integer.\")",
                          "children": [
                            {
                              "value": "raise ValueError(f\"Invalid key: {key}, #{index} index must be an integer.\")",
                              "children": [
                                {
                                  "value": "ValueError(f\"Invalid key: {key}, #{index} index must be an integer.\")",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(f\"Invalid key: {key}, #{index} index must be an integer.\")",
                                      "children": [
                                        {
                                          "value": "f\"Invalid key: {key}, #{index} index must be an integer.\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Invalid key:",
                                              "children": []
                                            },
                                            {
                                              "value": "{key}",
                                              "children": [
                                                {
                                                  "value": "key",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": ", #",
                                              "children": []
                                            },
                                            {
                                              "value": "{index}",
                                              "children": [
                                                {
                                                  "value": "index",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "index must be an integer.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "data[name] = data.get(name, [])",
                      "children": [
                        {
                          "value": "data[name] = data.get(name, [])",
                          "children": [
                            {
                              "value": "data[name]",
                              "children": [
                                {
                                  "value": "data",
                                  "children": []
                                },
                                {
                                  "value": "name",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "data.get(name, [])",
                              "children": [
                                {
                                  "value": "data.get",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(name, [])",
                                  "children": [
                                    {
                                      "value": "name",
                                      "children": []
                                    },
                                    {
                                      "value": "[]",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if int(index) >= len(data[name]):\n            # Pad list with empty string on missing indices.\n            data[name].extend([\"\"] * (int(index) - len(data[name]) + 1))",
                      "children": [
                        {
                          "value": "int(index) >= len(data[name])",
                          "children": [
                            {
                              "value": "int(index)",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                },
                                {
                                  "value": "(index)",
                                  "children": [
                                    {
                                      "value": "index",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "len(data[name])",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(data[name])",
                                  "children": [
                                    {
                                      "value": "data[name]",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "name",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# Pad list with empty string on missing indices.",
                          "children": []
                        },
                        {
                          "value": "data[name].extend([\"\"] * (int(index) - len(data[name]) + 1))",
                          "children": [
                            {
                              "value": "data[name].extend([\"\"] * (int(index) - len(data[name]) + 1))",
                              "children": [
                                {
                                  "value": "data[name].extend([\"\"] * (int(index) - len(data[name]) + 1))",
                                  "children": [
                                    {
                                      "value": "data[name].extend",
                                      "children": [
                                        {
                                          "value": "data[name]",
                                          "children": [
                                            {
                                              "value": "data",
                                              "children": []
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "extend",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "([\"\"] * (int(index) - len(data[name]) + 1))",
                                      "children": [
                                        {
                                          "value": "[\"\"] * (int(index) - len(data[name]) + 1)",
                                          "children": [
                                            {
                                              "value": "[\"\"]",
                                              "children": [
                                                {
                                                  "value": "\"\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(int(index) - len(data[name]) + 1)",
                                              "children": [
                                                {
                                                  "value": "int(index) - len(data[name]) + 1",
                                                  "children": [
                                                    {
                                                      "value": "int(index) - len(data[name])",
                                                      "children": [
                                                        {
                                                          "value": "int(index)",
                                                          "children": [
                                                            {
                                                              "value": "int",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(index)",
                                                              "children": [
                                                                {
                                                                  "value": "index",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "len(data[name])",
                                                          "children": [
                                                            {
                                                              "value": "len",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(data[name])",
                                                              "children": [
                                                                {
                                                                  "value": "data[name]",
                                                                  "children": [
                                                                    {
                                                                      "value": "data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "name",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "data[name][int(index)] = value",
                      "children": [
                        {
                          "value": "data[name][int(index)] = value",
                          "children": [
                            {
                              "value": "data[name][int(index)]",
                              "children": [
                                {
                                  "value": "data[name]",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "name",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "int(index)",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    },
                                    {
                                      "value": "(index)",
                                      "children": [
                                        {
                                          "value": "index",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "value",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Merge all input with <input_name>_#_<index> into a single dict.",
              "children": []
            },
            {
              "value": "for key, value in items:\n        if DICT_SPLIT not in key:\n            continue\n        name, index = key.split(DICT_SPLIT)\n        data[name] = data.get(name, {})\n        data[name][index] = value",
              "children": [
                {
                  "value": "key, value",
                  "children": [
                    {
                      "value": "key",
                      "children": []
                    },
                    {
                      "value": "value",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "items",
                  "children": []
                },
                {
                  "value": "if DICT_SPLIT not in key:\n            continue\n        name, index = key.split(DICT_SPLIT)\n        data[name] = data.get(name, {})\n        data[name][index] = value",
                  "children": [
                    {
                      "value": "if DICT_SPLIT not in key:\n            continue",
                      "children": [
                        {
                          "value": "DICT_SPLIT not in key",
                          "children": [
                            {
                              "value": "DICT_SPLIT",
                              "children": []
                            },
                            {
                              "value": "key",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "continue",
                          "children": [
                            {
                              "value": "continue",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "name, index = key.split(DICT_SPLIT)",
                      "children": [
                        {
                          "value": "name, index = key.split(DICT_SPLIT)",
                          "children": [
                            {
                              "value": "name, index",
                              "children": [
                                {
                                  "value": "name",
                                  "children": []
                                },
                                {
                                  "value": "index",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "key.split(DICT_SPLIT)",
                              "children": [
                                {
                                  "value": "key.split",
                                  "children": [
                                    {
                                      "value": "key",
                                      "children": []
                                    },
                                    {
                                      "value": "split",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(DICT_SPLIT)",
                                  "children": [
                                    {
                                      "value": "DICT_SPLIT",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "data[name] = data.get(name, {})",
                      "children": [
                        {
                          "value": "data[name] = data.get(name, {})",
                          "children": [
                            {
                              "value": "data[name]",
                              "children": [
                                {
                                  "value": "data",
                                  "children": []
                                },
                                {
                                  "value": "name",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "data.get(name, {})",
                              "children": [
                                {
                                  "value": "data.get",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(name, {})",
                                  "children": [
                                    {
                                      "value": "name",
                                      "children": []
                                    },
                                    {
                                      "value": "{}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "data[name][index] = value",
                      "children": [
                        {
                          "value": "data[name][index] = value",
                          "children": [
                            {
                              "value": "data[name][index]",
                              "children": [
                                {
                                  "value": "data[name]",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "name",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "index",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "value",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Merge all input with <input_name>_@_<index> into a single object.",
              "children": []
            },
            {
              "value": "for key, value in items:\n        if OBJC_SPLIT not in key:\n            continue\n        name, index = key.split(OBJC_SPLIT)\n        if name not in data or not isinstance(data[name], object):\n            data[name] = mock.MockObject()\n        setattr(data[name], index, value)",
              "children": [
                {
                  "value": "key, value",
                  "children": [
                    {
                      "value": "key",
                      "children": []
                    },
                    {
                      "value": "value",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "items",
                  "children": []
                },
                {
                  "value": "if OBJC_SPLIT not in key:\n            continue\n        name, index = key.split(OBJC_SPLIT)\n        if name not in data or not isinstance(data[name], object):\n            data[name] = mock.MockObject()\n        setattr(data[name], index, value)",
                  "children": [
                    {
                      "value": "if OBJC_SPLIT not in key:\n            continue",
                      "children": [
                        {
                          "value": "OBJC_SPLIT not in key",
                          "children": [
                            {
                              "value": "OBJC_SPLIT",
                              "children": []
                            },
                            {
                              "value": "key",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "continue",
                          "children": [
                            {
                              "value": "continue",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "name, index = key.split(OBJC_SPLIT)",
                      "children": [
                        {
                          "value": "name, index = key.split(OBJC_SPLIT)",
                          "children": [
                            {
                              "value": "name, index",
                              "children": [
                                {
                                  "value": "name",
                                  "children": []
                                },
                                {
                                  "value": "index",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "key.split(OBJC_SPLIT)",
                              "children": [
                                {
                                  "value": "key.split",
                                  "children": [
                                    {
                                      "value": "key",
                                      "children": []
                                    },
                                    {
                                      "value": "split",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(OBJC_SPLIT)",
                                  "children": [
                                    {
                                      "value": "OBJC_SPLIT",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if name not in data or not isinstance(data[name], object):\n            data[name] = mock.MockObject()",
                      "children": [
                        {
                          "value": "name not in data or not isinstance(data[name], object)",
                          "children": [
                            {
                              "value": "name not in data",
                              "children": [
                                {
                                  "value": "name",
                                  "children": []
                                },
                                {
                                  "value": "data",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "not isinstance(data[name], object)",
                              "children": [
                                {
                                  "value": "isinstance(data[name], object)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(data[name], object)",
                                      "children": [
                                        {
                                          "value": "data[name]",
                                          "children": [
                                            {
                                              "value": "data",
                                              "children": []
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "object",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "data[name] = mock.MockObject()",
                          "children": [
                            {
                              "value": "data[name] = mock.MockObject()",
                              "children": [
                                {
                                  "value": "data[name] = mock.MockObject()",
                                  "children": [
                                    {
                                      "value": "data[name]",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "name",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "mock.MockObject()",
                                      "children": [
                                        {
                                          "value": "mock.MockObject",
                                          "children": [
                                            {
                                              "value": "mock",
                                              "children": []
                                            },
                                            {
                                              "value": "MockObject",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "setattr(data[name], index, value)",
                      "children": [
                        {
                          "value": "setattr(data[name], index, value)",
                          "children": [
                            {
                              "value": "setattr",
                              "children": []
                            },
                            {
                              "value": "(data[name], index, value)",
                              "children": [
                                {
                                  "value": "data[name]",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "name",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "index",
                                  "children": []
                                },
                                {
                                  "value": "value",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return data",
              "children": [
                {
                  "value": "data",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_latest_execution(node_id: str, graph_eid: str) -> ExecutionResult | None:\n    execution = await AgentNodeExecution.prisma().find_first(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": {\"not\": ExecutionStatus.INCOMPLETE},\n            \"executionData\": {\"not\": None},  # type: ignore\n        },\n        order={\"queuedTime\": \"desc\"},\n        include=EXECUTION_RESULT_INCLUDE,\n    )\n    if not execution:\n        return None\n    return ExecutionResult.from_db(execution)",
      "children": [
        {
          "value": "get_latest_execution",
          "children": []
        },
        {
          "value": "(node_id: str, graph_eid: str)",
          "children": [
            {
              "value": "node_id: str",
              "children": [
                {
                  "value": "node_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_eid: str",
              "children": [
                {
                  "value": "graph_eid",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "ExecutionResult | None",
          "children": [
            {
              "value": "ExecutionResult | None",
              "children": [
                {
                  "value": "ExecutionResult",
                  "children": []
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "execution = await AgentNodeExecution.prisma().find_first(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": {\"not\": ExecutionStatus.INCOMPLETE},\n            \"executionData\": {\"not\": None},  # type: ignore\n        },\n        order={\"queuedTime\": \"desc\"},\n        include=EXECUTION_RESULT_INCLUDE,\n    )\n    if not execution:\n        return None\n    return ExecutionResult.from_db(execution)",
          "children": [
            {
              "value": "execution = await AgentNodeExecution.prisma().find_first(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": {\"not\": ExecutionStatus.INCOMPLETE},\n            \"executionData\": {\"not\": None},  # type: ignore\n        },\n        order={\"queuedTime\": \"desc\"},\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
              "children": [
                {
                  "value": "execution = await AgentNodeExecution.prisma().find_first(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": {\"not\": ExecutionStatus.INCOMPLETE},\n            \"executionData\": {\"not\": None},  # type: ignore\n        },\n        order={\"queuedTime\": \"desc\"},\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
                  "children": [
                    {
                      "value": "execution",
                      "children": []
                    },
                    {
                      "value": "await AgentNodeExecution.prisma().find_first(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": {\"not\": ExecutionStatus.INCOMPLETE},\n            \"executionData\": {\"not\": None},  # type: ignore\n        },\n        order={\"queuedTime\": \"desc\"},\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
                      "children": [
                        {
                          "value": "AgentNodeExecution.prisma().find_first(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": {\"not\": ExecutionStatus.INCOMPLETE},\n            \"executionData\": {\"not\": None},  # type: ignore\n        },\n        order={\"queuedTime\": \"desc\"},\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
                          "children": [
                            {
                              "value": "AgentNodeExecution.prisma().find_first",
                              "children": [
                                {
                                  "value": "AgentNodeExecution.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentNodeExecution.prisma",
                                      "children": [
                                        {
                                          "value": "AgentNodeExecution",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_first",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": {\"not\": ExecutionStatus.INCOMPLETE},\n            \"executionData\": {\"not\": None},  # type: ignore\n        },\n        order={\"queuedTime\": \"desc\"},\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
                              "children": [
                                {
                                  "value": "where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": {\"not\": ExecutionStatus.INCOMPLETE},\n            \"executionData\": {\"not\": None},  # type: ignore\n        }",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": {\"not\": ExecutionStatus.INCOMPLETE},\n            \"executionData\": {\"not\": None},  # type: ignore\n        }",
                                      "children": [
                                        {
                                          "value": "\"agentNodeId\": node_id",
                                          "children": [
                                            {
                                              "value": "\"agentNodeId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentNodeId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "node_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"agentGraphExecutionId\": graph_eid",
                                          "children": [
                                            {
                                              "value": "\"agentGraphExecutionId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentGraphExecutionId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_eid",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"executionStatus\": {\"not\": ExecutionStatus.INCOMPLETE}",
                                          "children": [
                                            {
                                              "value": "\"executionStatus\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "executionStatus",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{\"not\": ExecutionStatus.INCOMPLETE}",
                                              "children": [
                                                {
                                                  "value": "\"not\": ExecutionStatus.INCOMPLETE",
                                                  "children": [
                                                    {
                                                      "value": "\"not\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "not",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "ExecutionStatus.INCOMPLETE",
                                                      "children": [
                                                        {
                                                          "value": "ExecutionStatus",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "INCOMPLETE",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"executionData\": {\"not\": None}",
                                          "children": [
                                            {
                                              "value": "\"executionData\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "executionData",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{\"not\": None}",
                                              "children": [
                                                {
                                                  "value": "\"not\": None",
                                                  "children": [
                                                    {
                                                      "value": "\"not\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "not",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "None",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "# type: ignore",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "order={\"queuedTime\": \"desc\"}",
                                  "children": [
                                    {
                                      "value": "order",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"queuedTime\": \"desc\"}",
                                      "children": [
                                        {
                                          "value": "\"queuedTime\": \"desc\"",
                                          "children": [
                                            {
                                              "value": "\"queuedTime\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "queuedTime",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"desc\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "desc",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "include=EXECUTION_RESULT_INCLUDE",
                                  "children": [
                                    {
                                      "value": "include",
                                      "children": []
                                    },
                                    {
                                      "value": "EXECUTION_RESULT_INCLUDE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not execution:\n        return None",
              "children": [
                {
                  "value": "not execution",
                  "children": [
                    {
                      "value": "execution",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return None",
                  "children": [
                    {
                      "value": "return None",
                      "children": [
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return ExecutionResult.from_db(execution)",
              "children": [
                {
                  "value": "ExecutionResult.from_db(execution)",
                  "children": [
                    {
                      "value": "ExecutionResult.from_db",
                      "children": [
                        {
                          "value": "ExecutionResult",
                          "children": []
                        },
                        {
                          "value": "from_db",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(execution)",
                      "children": [
                        {
                          "value": "execution",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_incomplete_executions(\n    node_id: str, graph_eid: str\n) -> list[ExecutionResult]:\n    executions = await AgentNodeExecution.prisma().find_many(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n        },\n        include=EXECUTION_RESULT_INCLUDE,\n    )\n    return [ExecutionResult.from_db(execution) for execution in executions]",
      "children": [
        {
          "value": "get_incomplete_executions",
          "children": []
        },
        {
          "value": "(\n    node_id: str, graph_eid: str\n)",
          "children": [
            {
              "value": "node_id: str",
              "children": [
                {
                  "value": "node_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_eid: str",
              "children": [
                {
                  "value": "graph_eid",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "list[ExecutionResult]",
          "children": [
            {
              "value": "list[ExecutionResult]",
              "children": [
                {
                  "value": "list",
                  "children": []
                },
                {
                  "value": "[ExecutionResult]",
                  "children": [
                    {
                      "value": "ExecutionResult",
                      "children": [
                        {
                          "value": "ExecutionResult",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "executions = await AgentNodeExecution.prisma().find_many(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n        },\n        include=EXECUTION_RESULT_INCLUDE,\n    )\n    return [ExecutionResult.from_db(execution) for execution in executions]",
          "children": [
            {
              "value": "executions = await AgentNodeExecution.prisma().find_many(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n        },\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
              "children": [
                {
                  "value": "executions = await AgentNodeExecution.prisma().find_many(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n        },\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
                  "children": [
                    {
                      "value": "executions",
                      "children": []
                    },
                    {
                      "value": "await AgentNodeExecution.prisma().find_many(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n        },\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
                      "children": [
                        {
                          "value": "AgentNodeExecution.prisma().find_many(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n        },\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
                          "children": [
                            {
                              "value": "AgentNodeExecution.prisma().find_many",
                              "children": [
                                {
                                  "value": "AgentNodeExecution.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentNodeExecution.prisma",
                                      "children": [
                                        {
                                          "value": "AgentNodeExecution",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_many",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n        },\n        include=EXECUTION_RESULT_INCLUDE,\n    )",
                              "children": [
                                {
                                  "value": "where={\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n        }",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n            \"agentNodeId\": node_id,\n            \"agentGraphExecutionId\": graph_eid,\n            \"executionStatus\": ExecutionStatus.INCOMPLETE,\n        }",
                                      "children": [
                                        {
                                          "value": "\"agentNodeId\": node_id",
                                          "children": [
                                            {
                                              "value": "\"agentNodeId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentNodeId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "node_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"agentGraphExecutionId\": graph_eid",
                                          "children": [
                                            {
                                              "value": "\"agentGraphExecutionId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentGraphExecutionId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_eid",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"executionStatus\": ExecutionStatus.INCOMPLETE",
                                          "children": [
                                            {
                                              "value": "\"executionStatus\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "executionStatus",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ExecutionStatus.INCOMPLETE",
                                              "children": [
                                                {
                                                  "value": "ExecutionStatus",
                                                  "children": []
                                                },
                                                {
                                                  "value": "INCOMPLETE",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "include=EXECUTION_RESULT_INCLUDE",
                                  "children": [
                                    {
                                      "value": "include",
                                      "children": []
                                    },
                                    {
                                      "value": "EXECUTION_RESULT_INCLUDE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return [ExecutionResult.from_db(execution) for execution in executions]",
              "children": [
                {
                  "value": "[ExecutionResult.from_db(execution) for execution in executions]",
                  "children": [
                    {
                      "value": "ExecutionResult.from_db(execution)",
                      "children": [
                        {
                          "value": "ExecutionResult.from_db",
                          "children": [
                            {
                              "value": "ExecutionResult",
                              "children": []
                            },
                            {
                              "value": "from_db",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(execution)",
                          "children": [
                            {
                              "value": "execution",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for execution in executions",
                      "children": [
                        {
                          "value": "execution",
                          "children": []
                        },
                        {
                          "value": "executions",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# --------------------- Event Bus --------------------- #",
      "children": []
    },
    {
      "value": "config = Config()",
      "children": [
        {
          "value": "config = Config()",
          "children": [
            {
              "value": "config",
              "children": []
            },
            {
              "value": "Config()",
              "children": [
                {
                  "value": "Config",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class RedisExecutionEventBus(RedisEventBus[ExecutionResult]):\n    Model = ExecutionResult\n\n    @property\n    def event_bus_name(self) -> str:\n        return config.execution_event_bus_name\n\n    def publish(self, res: ExecutionResult):\n        self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")\n\n    def listen(\n        self, graph_id: str = \"*\", graph_exec_id: str = \"*\"\n    ) -> Generator[ExecutionResult, None, None]:\n        for execution_result in self.listen_events(f\"{graph_id}/{graph_exec_id}\"):\n            yield execution_result",
      "children": [
        {
          "value": "RedisExecutionEventBus",
          "children": []
        },
        {
          "value": "(RedisEventBus[ExecutionResult])",
          "children": [
            {
              "value": "RedisEventBus[ExecutionResult]",
              "children": [
                {
                  "value": "RedisEventBus",
                  "children": []
                },
                {
                  "value": "ExecutionResult",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "Model = ExecutionResult\n\n    @property\n    def event_bus_name(self) -> str:\n        return config.execution_event_bus_name\n\n    def publish(self, res: ExecutionResult):\n        self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")\n\n    def listen(\n        self, graph_id: str = \"*\", graph_exec_id: str = \"*\"\n    ) -> Generator[ExecutionResult, None, None]:\n        for execution_result in self.listen_events(f\"{graph_id}/{graph_exec_id}\"):\n            yield execution_result",
          "children": [
            {
              "value": "Model = ExecutionResult",
              "children": [
                {
                  "value": "Model = ExecutionResult",
                  "children": [
                    {
                      "value": "Model",
                      "children": []
                    },
                    {
                      "value": "ExecutionResult",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "@property\n    def event_bus_name(self) -> str:\n        return config.execution_event_bus_name",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def event_bus_name(self) -> str:\n        return config.execution_event_bus_name",
                  "children": [
                    {
                      "value": "event_bus_name",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return config.execution_event_bus_name",
                      "children": [
                        {
                          "value": "return config.execution_event_bus_name",
                          "children": [
                            {
                              "value": "config.execution_event_bus_name",
                              "children": [
                                {
                                  "value": "config",
                                  "children": []
                                },
                                {
                                  "value": "execution_event_bus_name",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def publish(self, res: ExecutionResult):\n        self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")",
              "children": [
                {
                  "value": "publish",
                  "children": []
                },
                {
                  "value": "(self, res: ExecutionResult)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "res: ExecutionResult",
                      "children": [
                        {
                          "value": "res",
                          "children": []
                        },
                        {
                          "value": "ExecutionResult",
                          "children": [
                            {
                              "value": "ExecutionResult",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")",
                  "children": [
                    {
                      "value": "self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")",
                      "children": [
                        {
                          "value": "self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")",
                          "children": [
                            {
                              "value": "self.publish_event",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "publish_event",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(res, f\"{res.graph_id}/{res.graph_exec_id}\")",
                              "children": [
                                {
                                  "value": "res",
                                  "children": []
                                },
                                {
                                  "value": "f\"{res.graph_id}/{res.graph_exec_id}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "{res.graph_id}",
                                      "children": [
                                        {
                                          "value": "res.graph_id",
                                          "children": [
                                            {
                                              "value": "res",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "/",
                                      "children": []
                                    },
                                    {
                                      "value": "{res.graph_exec_id}",
                                      "children": [
                                        {
                                          "value": "res.graph_exec_id",
                                          "children": [
                                            {
                                              "value": "res",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_exec_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def listen(\n        self, graph_id: str = \"*\", graph_exec_id: str = \"*\"\n    ) -> Generator[ExecutionResult, None, None]:\n        for execution_result in self.listen_events(f\"{graph_id}/{graph_exec_id}\"):\n            yield execution_result",
              "children": [
                {
                  "value": "listen",
                  "children": []
                },
                {
                  "value": "(\n        self, graph_id: str = \"*\", graph_exec_id: str = \"*\"\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "graph_id: str = \"*\"",
                      "children": [
                        {
                          "value": "graph_id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "\"*\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "*",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "graph_exec_id: str = \"*\"",
                      "children": [
                        {
                          "value": "graph_exec_id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "\"*\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "*",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "Generator[ExecutionResult, None, None]",
                  "children": [
                    {
                      "value": "Generator[ExecutionResult, None, None]",
                      "children": [
                        {
                          "value": "Generator",
                          "children": []
                        },
                        {
                          "value": "[ExecutionResult, None, None]",
                          "children": [
                            {
                              "value": "ExecutionResult",
                              "children": [
                                {
                                  "value": "ExecutionResult",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": [
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": [
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "for execution_result in self.listen_events(f\"{graph_id}/{graph_exec_id}\"):\n            yield execution_result",
                  "children": [
                    {
                      "value": "for execution_result in self.listen_events(f\"{graph_id}/{graph_exec_id}\"):\n            yield execution_result",
                      "children": [
                        {
                          "value": "execution_result",
                          "children": []
                        },
                        {
                          "value": "self.listen_events(f\"{graph_id}/{graph_exec_id}\")",
                          "children": [
                            {
                              "value": "self.listen_events",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "listen_events",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"{graph_id}/{graph_exec_id}\")",
                              "children": [
                                {
                                  "value": "f\"{graph_id}/{graph_exec_id}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "{graph_id}",
                                      "children": [
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "/",
                                      "children": []
                                    },
                                    {
                                      "value": "{graph_exec_id}",
                                      "children": [
                                        {
                                          "value": "graph_exec_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "yield execution_result",
                          "children": [
                            {
                              "value": "yield execution_result",
                              "children": [
                                {
                                  "value": "yield execution_result",
                                  "children": [
                                    {
                                      "value": "execution_result",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class AsyncRedisExecutionEventBus(AsyncRedisEventBus[ExecutionResult]):\n    Model = ExecutionResult\n\n    @property\n    def event_bus_name(self) -> str:\n        return config.execution_event_bus_name\n\n    async def publish(self, res: ExecutionResult):\n        await self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")\n\n    async def listen(\n        self, graph_id: str = \"*\", graph_exec_id: str = \"*\"\n    ) -> AsyncGenerator[ExecutionResult, None]:\n        async for execution_result in self.listen_events(f\"{graph_id}/{graph_exec_id}\"):\n            yield execution_result",
      "children": [
        {
          "value": "AsyncRedisExecutionEventBus",
          "children": []
        },
        {
          "value": "(AsyncRedisEventBus[ExecutionResult])",
          "children": [
            {
              "value": "AsyncRedisEventBus[ExecutionResult]",
              "children": [
                {
                  "value": "AsyncRedisEventBus",
                  "children": []
                },
                {
                  "value": "ExecutionResult",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "Model = ExecutionResult\n\n    @property\n    def event_bus_name(self) -> str:\n        return config.execution_event_bus_name\n\n    async def publish(self, res: ExecutionResult):\n        await self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")\n\n    async def listen(\n        self, graph_id: str = \"*\", graph_exec_id: str = \"*\"\n    ) -> AsyncGenerator[ExecutionResult, None]:\n        async for execution_result in self.listen_events(f\"{graph_id}/{graph_exec_id}\"):\n            yield execution_result",
          "children": [
            {
              "value": "Model = ExecutionResult",
              "children": [
                {
                  "value": "Model = ExecutionResult",
                  "children": [
                    {
                      "value": "Model",
                      "children": []
                    },
                    {
                      "value": "ExecutionResult",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "@property\n    def event_bus_name(self) -> str:\n        return config.execution_event_bus_name",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def event_bus_name(self) -> str:\n        return config.execution_event_bus_name",
                  "children": [
                    {
                      "value": "event_bus_name",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return config.execution_event_bus_name",
                      "children": [
                        {
                          "value": "return config.execution_event_bus_name",
                          "children": [
                            {
                              "value": "config.execution_event_bus_name",
                              "children": [
                                {
                                  "value": "config",
                                  "children": []
                                },
                                {
                                  "value": "execution_event_bus_name",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def publish(self, res: ExecutionResult):\n        await self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")",
              "children": [
                {
                  "value": "publish",
                  "children": []
                },
                {
                  "value": "(self, res: ExecutionResult)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "res: ExecutionResult",
                      "children": [
                        {
                          "value": "res",
                          "children": []
                        },
                        {
                          "value": "ExecutionResult",
                          "children": [
                            {
                              "value": "ExecutionResult",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")",
                  "children": [
                    {
                      "value": "await self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")",
                      "children": [
                        {
                          "value": "await self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")",
                          "children": [
                            {
                              "value": "self.publish_event(res, f\"{res.graph_id}/{res.graph_exec_id}\")",
                              "children": [
                                {
                                  "value": "self.publish_event",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "publish_event",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(res, f\"{res.graph_id}/{res.graph_exec_id}\")",
                                  "children": [
                                    {
                                      "value": "res",
                                      "children": []
                                    },
                                    {
                                      "value": "f\"{res.graph_id}/{res.graph_exec_id}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "{res.graph_id}",
                                          "children": [
                                            {
                                              "value": "res.graph_id",
                                              "children": [
                                                {
                                                  "value": "res",
                                                  "children": []
                                                },
                                                {
                                                  "value": "graph_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "/",
                                          "children": []
                                        },
                                        {
                                          "value": "{res.graph_exec_id}",
                                          "children": [
                                            {
                                              "value": "res.graph_exec_id",
                                              "children": [
                                                {
                                                  "value": "res",
                                                  "children": []
                                                },
                                                {
                                                  "value": "graph_exec_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def listen(\n        self, graph_id: str = \"*\", graph_exec_id: str = \"*\"\n    ) -> AsyncGenerator[ExecutionResult, None]:\n        async for execution_result in self.listen_events(f\"{graph_id}/{graph_exec_id}\"):\n            yield execution_result",
              "children": [
                {
                  "value": "listen",
                  "children": []
                },
                {
                  "value": "(\n        self, graph_id: str = \"*\", graph_exec_id: str = \"*\"\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "graph_id: str = \"*\"",
                      "children": [
                        {
                          "value": "graph_id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "\"*\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "*",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "graph_exec_id: str = \"*\"",
                      "children": [
                        {
                          "value": "graph_exec_id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "\"*\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "*",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "AsyncGenerator[ExecutionResult, None]",
                  "children": [
                    {
                      "value": "AsyncGenerator[ExecutionResult, None]",
                      "children": [
                        {
                          "value": "AsyncGenerator",
                          "children": []
                        },
                        {
                          "value": "[ExecutionResult, None]",
                          "children": [
                            {
                              "value": "ExecutionResult",
                              "children": [
                                {
                                  "value": "ExecutionResult",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": [
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "async for execution_result in self.listen_events(f\"{graph_id}/{graph_exec_id}\"):\n            yield execution_result",
                  "children": [
                    {
                      "value": "async for execution_result in self.listen_events(f\"{graph_id}/{graph_exec_id}\"):\n            yield execution_result",
                      "children": [
                        {
                          "value": "execution_result",
                          "children": []
                        },
                        {
                          "value": "self.listen_events(f\"{graph_id}/{graph_exec_id}\")",
                          "children": [
                            {
                              "value": "self.listen_events",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "listen_events",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"{graph_id}/{graph_exec_id}\")",
                              "children": [
                                {
                                  "value": "f\"{graph_id}/{graph_exec_id}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "{graph_id}",
                                      "children": [
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "/",
                                      "children": []
                                    },
                                    {
                                      "value": "{graph_exec_id}",
                                      "children": [
                                        {
                                          "value": "graph_exec_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "yield execution_result",
                          "children": [
                            {
                              "value": "yield execution_result",
                              "children": [
                                {
                                  "value": "yield execution_result",
                                  "children": [
                                    {
                                      "value": "execution_result",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}