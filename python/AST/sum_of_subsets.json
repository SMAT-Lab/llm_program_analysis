{
  "value": "\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"\n\nfrom __future__ import annotations\n\n\ndef generate_sum_of_subsets_soln(nums: list[int], max_sum: int) -> list[list[int]]:\n    result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n    return result\n\n\ndef create_state_space_tree(\n    nums: list[int],\n    max_sum: int,\n    num_index: int,\n    path: list[int],\n    result: list[list[int]],\n    remaining_nums_sum: int,\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"\n    if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\n        return\n    if sum(path) == max_sum:\n        result.append(path)\n        return\n    for index in range(num_index, len(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )\n\n\n\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n\n\"\"\"\nnums = [3, 34, 4, 12, 5, 2]\nmax_sum = 9\nresult = generate_sum_of_subsets_soln(nums, max_sum)\nprint(*result)",
  "children": [
    {
      "value": "\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"",
      "children": [
        {
          "value": "\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"",
          "children": [
            {
              "value": "\"\"\"",
              "children": []
            },
            {
              "value": "The sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.",
              "children": []
            },
            {
              "value": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from __future__ import annotations",
      "children": [
        {
          "value": "annotations",
          "children": [
            {
              "value": "annotations",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def generate_sum_of_subsets_soln(nums: list[int], max_sum: int) -> list[list[int]]:\n    result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n    return result",
      "children": [
        {
          "value": "generate_sum_of_subsets_soln",
          "children": []
        },
        {
          "value": "(nums: list[int], max_sum: int)",
          "children": [
            {
              "value": "nums: list[int]",
              "children": [
                {
                  "value": "nums",
                  "children": []
                },
                {
                  "value": "list[int]",
                  "children": [
                    {
                      "value": "list[int]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[int]",
                          "children": [
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "max_sum: int",
              "children": [
                {
                  "value": "max_sum",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "list[list[int]]",
          "children": [
            {
              "value": "list[list[int]]",
              "children": [
                {
                  "value": "list",
                  "children": []
                },
                {
                  "value": "[list[int]]",
                  "children": [
                    {
                      "value": "list[int]",
                      "children": [
                        {
                          "value": "list[int]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[int]",
                              "children": [
                                {
                                  "value": "int",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n    return result",
          "children": [
            {
              "value": "result: list[list[int]] = []",
              "children": [
                {
                  "value": "result: list[list[int]] = []",
                  "children": [
                    {
                      "value": "result",
                      "children": []
                    },
                    {
                      "value": "list[list[int]]",
                      "children": [
                        {
                          "value": "list[list[int]]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[list[int]]",
                              "children": [
                                {
                                  "value": "list[int]",
                                  "children": [
                                    {
                                      "value": "list[int]",
                                      "children": [
                                        {
                                          "value": "list",
                                          "children": []
                                        },
                                        {
                                          "value": "[int]",
                                          "children": [
                                            {
                                              "value": "int",
                                              "children": [
                                                {
                                                  "value": "int",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "path: list[int] = []",
              "children": [
                {
                  "value": "path: list[int] = []",
                  "children": [
                    {
                      "value": "path",
                      "children": []
                    },
                    {
                      "value": "list[int]",
                      "children": [
                        {
                          "value": "list[int]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[int]",
                              "children": [
                                {
                                  "value": "int",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "num_index = 0",
              "children": [
                {
                  "value": "num_index = 0",
                  "children": [
                    {
                      "value": "num_index",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "remaining_nums_sum = sum(nums)",
              "children": [
                {
                  "value": "remaining_nums_sum = sum(nums)",
                  "children": [
                    {
                      "value": "remaining_nums_sum",
                      "children": []
                    },
                    {
                      "value": "sum(nums)",
                      "children": [
                        {
                          "value": "sum",
                          "children": []
                        },
                        {
                          "value": "(nums)",
                          "children": [
                            {
                              "value": "nums",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)",
              "children": [
                {
                  "value": "create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)",
                  "children": [
                    {
                      "value": "create_state_space_tree",
                      "children": []
                    },
                    {
                      "value": "(nums, max_sum, num_index, path, result, remaining_nums_sum)",
                      "children": [
                        {
                          "value": "nums",
                          "children": []
                        },
                        {
                          "value": "max_sum",
                          "children": []
                        },
                        {
                          "value": "num_index",
                          "children": []
                        },
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "result",
                          "children": []
                        },
                        {
                          "value": "remaining_nums_sum",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return result",
              "children": [
                {
                  "value": "result",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def create_state_space_tree(\n    nums: list[int],\n    max_sum: int,\n    num_index: int,\n    path: list[int],\n    result: list[list[int]],\n    remaining_nums_sum: int,\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"\n    if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\n        return\n    if sum(path) == max_sum:\n        result.append(path)\n        return\n    for index in range(num_index, len(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
      "children": [
        {
          "value": "create_state_space_tree",
          "children": []
        },
        {
          "value": "(\n    nums: list[int],\n    max_sum: int,\n    num_index: int,\n    path: list[int],\n    result: list[list[int]],\n    remaining_nums_sum: int,\n)",
          "children": [
            {
              "value": "nums: list[int]",
              "children": [
                {
                  "value": "nums",
                  "children": []
                },
                {
                  "value": "list[int]",
                  "children": [
                    {
                      "value": "list[int]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[int]",
                          "children": [
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "max_sum: int",
              "children": [
                {
                  "value": "max_sum",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "num_index: int",
              "children": [
                {
                  "value": "num_index",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "path: list[int]",
              "children": [
                {
                  "value": "path",
                  "children": []
                },
                {
                  "value": "list[int]",
                  "children": [
                    {
                      "value": "list[int]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[int]",
                          "children": [
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "result: list[list[int]]",
              "children": [
                {
                  "value": "result",
                  "children": []
                },
                {
                  "value": "list[list[int]]",
                  "children": [
                    {
                      "value": "list[list[int]]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[list[int]]",
                          "children": [
                            {
                              "value": "list[int]",
                              "children": [
                                {
                                  "value": "list[int]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[int]",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": [
                                            {
                                              "value": "int",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "remaining_nums_sum: int",
              "children": [
                {
                  "value": "remaining_nums_sum",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"\n    if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\n        return\n    if sum(path) == max_sum:\n        result.append(path)\n        return\n    for index in range(num_index, len(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
          "children": [
            {
              "value": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\n        return",
              "children": [
                {
                  "value": "sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum",
                  "children": [
                    {
                      "value": "sum(path) > max_sum",
                      "children": [
                        {
                          "value": "sum(path)",
                          "children": [
                            {
                              "value": "sum",
                              "children": []
                            },
                            {
                              "value": "(path)",
                              "children": [
                                {
                                  "value": "path",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "max_sum",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(remaining_nums_sum + sum(path)) < max_sum",
                      "children": [
                        {
                          "value": "(remaining_nums_sum + sum(path))",
                          "children": [
                            {
                              "value": "remaining_nums_sum + sum(path)",
                              "children": [
                                {
                                  "value": "remaining_nums_sum",
                                  "children": []
                                },
                                {
                                  "value": "sum(path)",
                                  "children": [
                                    {
                                      "value": "sum",
                                      "children": []
                                    },
                                    {
                                      "value": "(path)",
                                      "children": [
                                        {
                                          "value": "path",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "max_sum",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return",
                  "children": [
                    {
                      "value": "return",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if sum(path) == max_sum:\n        result.append(path)\n        return",
              "children": [
                {
                  "value": "sum(path) == max_sum",
                  "children": [
                    {
                      "value": "sum(path)",
                      "children": [
                        {
                          "value": "sum",
                          "children": []
                        },
                        {
                          "value": "(path)",
                          "children": [
                            {
                              "value": "path",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "max_sum",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "result.append(path)\n        return",
                  "children": [
                    {
                      "value": "result.append(path)",
                      "children": [
                        {
                          "value": "result.append(path)",
                          "children": [
                            {
                              "value": "result.append",
                              "children": [
                                {
                                  "value": "result",
                                  "children": []
                                },
                                {
                                  "value": "append",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(path)",
                              "children": [
                                {
                                  "value": "path",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "for index in range(num_index, len(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
              "children": [
                {
                  "value": "index",
                  "children": []
                },
                {
                  "value": "range(num_index, len(nums))",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(num_index, len(nums))",
                      "children": [
                        {
                          "value": "num_index",
                          "children": []
                        },
                        {
                          "value": "len(nums)",
                          "children": [
                            {
                              "value": "len",
                              "children": []
                            },
                            {
                              "value": "(nums)",
                              "children": [
                                {
                                  "value": "nums",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
                  "children": [
                    {
                      "value": "create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
                      "children": [
                        {
                          "value": "create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
                          "children": [
                            {
                              "value": "create_state_space_tree",
                              "children": []
                            },
                            {
                              "value": "(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
                              "children": [
                                {
                                  "value": "nums",
                                  "children": []
                                },
                                {
                                  "value": "max_sum",
                                  "children": []
                                },
                                {
                                  "value": "index + 1",
                                  "children": [
                                    {
                                      "value": "index",
                                      "children": []
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "[*path, nums[index]]",
                                  "children": [
                                    {
                                      "value": "*path",
                                      "children": [
                                        {
                                          "value": "path",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "nums[index]",
                                      "children": [
                                        {
                                          "value": "nums",
                                          "children": []
                                        },
                                        {
                                          "value": "index",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "result",
                                  "children": []
                                },
                                {
                                  "value": "remaining_nums_sum - nums[index]",
                                  "children": [
                                    {
                                      "value": "remaining_nums_sum",
                                      "children": []
                                    },
                                    {
                                      "value": "nums[index]",
                                      "children": [
                                        {
                                          "value": "nums",
                                          "children": []
                                        },
                                        {
                                          "value": "index",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n\n\"\"\"",
      "children": [
        {
          "value": "\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n\n\"\"\"",
          "children": [
            {
              "value": "\"\"\"",
              "children": []
            },
            {
              "value": "remove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())",
              "children": []
            },
            {
              "value": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "nums = [3, 34, 4, 12, 5, 2]",
      "children": [
        {
          "value": "nums = [3, 34, 4, 12, 5, 2]",
          "children": [
            {
              "value": "nums",
              "children": []
            },
            {
              "value": "[3, 34, 4, 12, 5, 2]",
              "children": [
                {
                  "value": "3",
                  "children": []
                },
                {
                  "value": "34",
                  "children": []
                },
                {
                  "value": "4",
                  "children": []
                },
                {
                  "value": "12",
                  "children": []
                },
                {
                  "value": "5",
                  "children": []
                },
                {
                  "value": "2",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "max_sum = 9",
      "children": [
        {
          "value": "max_sum = 9",
          "children": [
            {
              "value": "max_sum",
              "children": []
            },
            {
              "value": "9",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "result = generate_sum_of_subsets_soln(nums, max_sum)",
      "children": [
        {
          "value": "result = generate_sum_of_subsets_soln(nums, max_sum)",
          "children": [
            {
              "value": "result",
              "children": []
            },
            {
              "value": "generate_sum_of_subsets_soln(nums, max_sum)",
              "children": [
                {
                  "value": "generate_sum_of_subsets_soln",
                  "children": []
                },
                {
                  "value": "(nums, max_sum)",
                  "children": [
                    {
                      "value": "nums",
                      "children": []
                    },
                    {
                      "value": "max_sum",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "print(*result)",
      "children": [
        {
          "value": "print(*result)",
          "children": [
            {
              "value": "print",
              "children": []
            },
            {
              "value": "(*result)",
              "children": [
                {
                  "value": "*result",
                  "children": [
                    {
                      "value": "result",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}