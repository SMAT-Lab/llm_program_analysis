{
  "value": "import operator\nfrom enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\nclass Operation(Enum):\n    ADD = \"Add\"\n    SUBTRACT = \"Subtract\"\n    MULTIPLY = \"Multiply\"\n    DIVIDE = \"Divide\"\n    POWER = \"Power\"\n\n\nclass CalculatorBlock(Block):\n    class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )\n\n    class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n\n        op_func = operations[operation]\n\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors\n\n\nclass CountItemsBlock(Block):\n    class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )\n\n    class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error",
  "children": [
    {
      "value": "import operator",
      "children": [
        {
          "value": "operator",
          "children": [
            {
              "value": "operator",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from enum import Enum",
      "children": [
        {
          "value": "enum",
          "children": [
            {
              "value": "enum",
              "children": []
            }
          ]
        },
        {
          "value": "Enum",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Any",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        },
        {
          "value": "Block",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "BlockCategory",
          "children": [
            {
              "value": "BlockCategory",
              "children": []
            }
          ]
        },
        {
          "value": "BlockOutput",
          "children": [
            {
              "value": "BlockOutput",
              "children": []
            }
          ]
        },
        {
          "value": "BlockSchema",
          "children": [
            {
              "value": "BlockSchema",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import SchemaField",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "SchemaField",
          "children": [
            {
              "value": "SchemaField",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class Operation(Enum):\n    ADD = \"Add\"\n    SUBTRACT = \"Subtract\"\n    MULTIPLY = \"Multiply\"\n    DIVIDE = \"Divide\"\n    POWER = \"Power\"",
      "children": [
        {
          "value": "Operation",
          "children": []
        },
        {
          "value": "(Enum)",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        },
        {
          "value": "ADD = \"Add\"\n    SUBTRACT = \"Subtract\"\n    MULTIPLY = \"Multiply\"\n    DIVIDE = \"Divide\"\n    POWER = \"Power\"",
          "children": [
            {
              "value": "ADD = \"Add\"",
              "children": [
                {
                  "value": "ADD = \"Add\"",
                  "children": [
                    {
                      "value": "ADD",
                      "children": []
                    },
                    {
                      "value": "\"Add\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Add",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "SUBTRACT = \"Subtract\"",
              "children": [
                {
                  "value": "SUBTRACT = \"Subtract\"",
                  "children": [
                    {
                      "value": "SUBTRACT",
                      "children": []
                    },
                    {
                      "value": "\"Subtract\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Subtract",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "MULTIPLY = \"Multiply\"",
              "children": [
                {
                  "value": "MULTIPLY = \"Multiply\"",
                  "children": [
                    {
                      "value": "MULTIPLY",
                      "children": []
                    },
                    {
                      "value": "\"Multiply\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Multiply",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "DIVIDE = \"Divide\"",
              "children": [
                {
                  "value": "DIVIDE = \"Divide\"",
                  "children": [
                    {
                      "value": "DIVIDE",
                      "children": []
                    },
                    {
                      "value": "\"Divide\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Divide",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "POWER = \"Power\"",
              "children": [
                {
                  "value": "POWER = \"Power\"",
                  "children": [
                    {
                      "value": "POWER",
                      "children": []
                    },
                    {
                      "value": "\"Power\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Power",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class CalculatorBlock(Block):\n    class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )\n\n    class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n\n        op_func = operations[operation]\n\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
      "children": [
        {
          "value": "CalculatorBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )\n\n    class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n\n        op_func = operations[operation]\n\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )",
                  "children": [
                    {
                      "value": "operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )",
                      "children": [
                        {
                          "value": "operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )",
                          "children": [
                            {
                              "value": "operation",
                              "children": []
                            },
                            {
                              "value": "Operation",
                              "children": [
                                {
                                  "value": "Operation",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Choose the math operation you want to perform\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Choose the math operation you want to perform\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Choose the math operation you want to perform",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "placeholder=\"Select an operation\"",
                                      "children": [
                                        {
                                          "value": "placeholder",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Select an operation\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Select an operation",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )",
                      "children": [
                        {
                          "value": "a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )",
                          "children": [
                            {
                              "value": "a",
                              "children": []
                            },
                            {
                              "value": "float",
                              "children": [
                                {
                                  "value": "float",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Enter the first number (A)\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Enter the first number (A)\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Enter the first number (A)",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "placeholder=\"For example: 10\"",
                                      "children": [
                                        {
                                          "value": "placeholder",
                                          "children": []
                                        },
                                        {
                                          "value": "\"For example: 10\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "For example: 10",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )",
                      "children": [
                        {
                          "value": "b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )",
                          "children": [
                            {
                              "value": "b",
                              "children": []
                            },
                            {
                              "value": "float",
                              "children": [
                                {
                                  "value": "float",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Enter the second number (B)\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Enter the second number (B)\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Enter the second number (B)",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "placeholder=\"For example: 5\"",
                                      "children": [
                                        {
                                          "value": "placeholder",
                                          "children": []
                                        },
                                        {
                                          "value": "\"For example: 5\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "For example: 5",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )",
                      "children": [
                        {
                          "value": "round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )",
                          "children": [
                            {
                              "value": "round_result",
                              "children": []
                            },
                            {
                              "value": "bool",
                              "children": [
                                {
                                  "value": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Do you want to round the result to a whole number?\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Do you want to round the result to a whole number?\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Do you want to round the result to a whole number?",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=False",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "False",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "result: float = SchemaField(description=\"The result of your calculation\")",
                  "children": [
                    {
                      "value": "result: float = SchemaField(description=\"The result of your calculation\")",
                      "children": [
                        {
                          "value": "result: float = SchemaField(description=\"The result of your calculation\")",
                          "children": [
                            {
                              "value": "result",
                              "children": []
                            },
                            {
                              "value": "float",
                              "children": [
                                {
                                  "value": "float",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"The result of your calculation\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"The result of your calculation\")",
                                  "children": [
                                    {
                                      "value": "description=\"The result of your calculation\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The result of your calculation\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The result of your calculation",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
                              "children": [
                                {
                                  "value": "id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "b1ab9b19-67a6-406d-abf5-2dba76d00c79",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=CalculatorBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "CalculatorBlock.Input",
                                      "children": [
                                        {
                                          "value": "CalculatorBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema=CalculatorBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "CalculatorBlock.Output",
                                      "children": [
                                        {
                                          "value": "CalculatorBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "description=\"Performs a mathematical operation on two numbers.\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Performs a mathematical operation on two numbers.\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Performs a mathematical operation on two numbers.",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.LOGIC}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.LOGIC}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.LOGIC",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "LOGIC",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            }",
                                  "children": [
                                    {
                                      "value": "test_input",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            }",
                                      "children": [
                                        {
                                          "value": "\"operation\": Operation.ADD.value",
                                          "children": [
                                            {
                                              "value": "\"operation\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "operation",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "Operation.ADD.value",
                                              "children": [
                                                {
                                                  "value": "Operation.ADD",
                                                  "children": [
                                                    {
                                                      "value": "Operation",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ADD",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "value",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"a\": 10.0",
                                          "children": [
                                            {
                                              "value": "\"a\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "a",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "10.0",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"b\": 5.0",
                                          "children": [
                                            {
                                              "value": "\"b\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "b",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "5.0",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"round_result\": False",
                                          "children": [
                                            {
                                              "value": "\"round_result\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "round_result",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "False",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_output=[\n                (\"result\", 15.0),\n            ]",
                                  "children": [
                                    {
                                      "value": "test_output",
                                      "children": []
                                    },
                                    {
                                      "value": "[\n                (\"result\", 15.0),\n            ]",
                                      "children": [
                                        {
                                          "value": "(\"result\", 15.0)",
                                          "children": [
                                            {
                                              "value": "\"result\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "result",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "15.0",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n\n        op_func = operations[operation]\n\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(self, input_data: Input, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n\n        op_func = operations[operation]\n\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
                  "children": [
                    {
                      "value": "operation = input_data.operation",
                      "children": [
                        {
                          "value": "operation = input_data.operation",
                          "children": [
                            {
                              "value": "operation",
                              "children": []
                            },
                            {
                              "value": "input_data.operation",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "operation",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "a = input_data.a",
                      "children": [
                        {
                          "value": "a = input_data.a",
                          "children": [
                            {
                              "value": "a",
                              "children": []
                            },
                            {
                              "value": "input_data.a",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "a",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "b = input_data.b",
                      "children": [
                        {
                          "value": "b = input_data.b",
                          "children": [
                            {
                              "value": "b",
                              "children": []
                            },
                            {
                              "value": "input_data.b",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "b",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }",
                      "children": [
                        {
                          "value": "operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }",
                          "children": [
                            {
                              "value": "operations",
                              "children": []
                            },
                            {
                              "value": "{\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }",
                              "children": [
                                {
                                  "value": "Operation.ADD: operator.add",
                                  "children": [
                                    {
                                      "value": "Operation.ADD",
                                      "children": [
                                        {
                                          "value": "Operation",
                                          "children": []
                                        },
                                        {
                                          "value": "ADD",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "operator.add",
                                      "children": [
                                        {
                                          "value": "operator",
                                          "children": []
                                        },
                                        {
                                          "value": "add",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "Operation.SUBTRACT: operator.sub",
                                  "children": [
                                    {
                                      "value": "Operation.SUBTRACT",
                                      "children": [
                                        {
                                          "value": "Operation",
                                          "children": []
                                        },
                                        {
                                          "value": "SUBTRACT",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "operator.sub",
                                      "children": [
                                        {
                                          "value": "operator",
                                          "children": []
                                        },
                                        {
                                          "value": "sub",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "Operation.MULTIPLY: operator.mul",
                                  "children": [
                                    {
                                      "value": "Operation.MULTIPLY",
                                      "children": [
                                        {
                                          "value": "Operation",
                                          "children": []
                                        },
                                        {
                                          "value": "MULTIPLY",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "operator.mul",
                                      "children": [
                                        {
                                          "value": "operator",
                                          "children": []
                                        },
                                        {
                                          "value": "mul",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "Operation.DIVIDE: operator.truediv",
                                  "children": [
                                    {
                                      "value": "Operation.DIVIDE",
                                      "children": [
                                        {
                                          "value": "Operation",
                                          "children": []
                                        },
                                        {
                                          "value": "DIVIDE",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "operator.truediv",
                                      "children": [
                                        {
                                          "value": "operator",
                                          "children": []
                                        },
                                        {
                                          "value": "truediv",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "Operation.POWER: operator.pow",
                                  "children": [
                                    {
                                      "value": "Operation.POWER",
                                      "children": [
                                        {
                                          "value": "Operation",
                                          "children": []
                                        },
                                        {
                                          "value": "POWER",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "operator.pow",
                                      "children": [
                                        {
                                          "value": "operator",
                                          "children": []
                                        },
                                        {
                                          "value": "pow",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "op_func = operations[operation]",
                      "children": [
                        {
                          "value": "op_func = operations[operation]",
                          "children": [
                            {
                              "value": "op_func",
                              "children": []
                            },
                            {
                              "value": "operations[operation]",
                              "children": [
                                {
                                  "value": "operations",
                                  "children": []
                                },
                                {
                                  "value": "operation",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result\n\n        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
                      "children": [
                        {
                          "value": "if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n\n            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n            yield \"result\", result",
                          "children": [
                            {
                              "value": "if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")",
                              "children": [
                                {
                                  "value": "operation == Operation.DIVIDE and b == 0",
                                  "children": [
                                    {
                                      "value": "operation == Operation.DIVIDE",
                                      "children": [
                                        {
                                          "value": "operation",
                                          "children": []
                                        },
                                        {
                                          "value": "Operation.DIVIDE",
                                          "children": [
                                            {
                                              "value": "Operation",
                                              "children": []
                                            },
                                            {
                                              "value": "DIVIDE",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "b == 0",
                                      "children": [
                                        {
                                          "value": "b",
                                          "children": []
                                        },
                                        {
                                          "value": "0",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise ZeroDivisionError(\"Cannot divide by zero\")",
                                  "children": [
                                    {
                                      "value": "raise ZeroDivisionError(\"Cannot divide by zero\")",
                                      "children": [
                                        {
                                          "value": "ZeroDivisionError(\"Cannot divide by zero\")",
                                          "children": [
                                            {
                                              "value": "ZeroDivisionError",
                                              "children": []
                                            },
                                            {
                                              "value": "(\"Cannot divide by zero\")",
                                              "children": [
                                                {
                                                  "value": "\"Cannot divide by zero\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Cannot divide by zero",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "result = op_func(a, b)",
                              "children": [
                                {
                                  "value": "result = op_func(a, b)",
                                  "children": [
                                    {
                                      "value": "result",
                                      "children": []
                                    },
                                    {
                                      "value": "op_func(a, b)",
                                      "children": [
                                        {
                                          "value": "op_func",
                                          "children": []
                                        },
                                        {
                                          "value": "(a, b)",
                                          "children": [
                                            {
                                              "value": "a",
                                              "children": []
                                            },
                                            {
                                              "value": "b",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if input_data.round_result:\n                result = round(result)",
                              "children": [
                                {
                                  "value": "input_data.round_result",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "round_result",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "result = round(result)",
                                  "children": [
                                    {
                                      "value": "result = round(result)",
                                      "children": [
                                        {
                                          "value": "result = round(result)",
                                          "children": [
                                            {
                                              "value": "result",
                                              "children": []
                                            },
                                            {
                                              "value": "round(result)",
                                              "children": [
                                                {
                                                  "value": "round",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(result)",
                                                  "children": [
                                                    {
                                                      "value": "result",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "yield \"result\", result",
                              "children": [
                                {
                                  "value": "yield \"result\", result",
                                  "children": [
                                    {
                                      "value": "\"result\", result",
                                      "children": [
                                        {
                                          "value": "\"result\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "result",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "result",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero",
                          "children": [
                            {
                              "value": "ZeroDivisionError",
                              "children": []
                            },
                            {
                              "value": "yield \"result\", float(\"inf\")  # Return infinity for division by zero",
                              "children": [
                                {
                                  "value": "yield \"result\", float(\"inf\")",
                                  "children": [
                                    {
                                      "value": "yield \"result\", float(\"inf\")",
                                      "children": [
                                        {
                                          "value": "\"result\", float(\"inf\")",
                                          "children": [
                                            {
                                              "value": "\"result\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "result",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "float(\"inf\")",
                                              "children": [
                                                {
                                                  "value": "float",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\"inf\")",
                                                  "children": [
                                                    {
                                                      "value": "\"inf\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "inf",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Return infinity for division by zero",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
                          "children": [
                            {
                              "value": "Exception",
                              "children": []
                            },
                            {
                              "value": "yield \"result\", float(\"nan\")  # Return NaN for other errors",
                              "children": [
                                {
                                  "value": "yield \"result\", float(\"nan\")",
                                  "children": [
                                    {
                                      "value": "yield \"result\", float(\"nan\")",
                                      "children": [
                                        {
                                          "value": "\"result\", float(\"nan\")",
                                          "children": [
                                            {
                                              "value": "\"result\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "result",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "float(\"nan\")",
                                              "children": [
                                                {
                                                  "value": "float",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\"nan\")",
                                                  "children": [
                                                    {
                                                      "value": "\"nan\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "nan",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Return NaN for other errors",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class CountItemsBlock(Block):\n    class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )\n\n    class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error",
      "children": [
        {
          "value": "CountItemsBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )\n\n    class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )",
                  "children": [
                    {
                      "value": "collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )",
                      "children": [
                        {
                          "value": "collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )",
                          "children": [
                            {
                              "value": "collection",
                              "children": []
                            },
                            {
                              "value": "Any",
                              "children": [
                                {
                                  "value": "Any",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\"",
                                      "children": [
                                        {
                                          "value": "placeholder",
                                          "children": []
                                        },
                                        {
                                          "value": "\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "count: int = SchemaField(description=\"The number of items in the collection\")",
                  "children": [
                    {
                      "value": "count: int = SchemaField(description=\"The number of items in the collection\")",
                      "children": [
                        {
                          "value": "count: int = SchemaField(description=\"The number of items in the collection\")",
                          "children": [
                            {
                              "value": "count",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"The number of items in the collection\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"The number of items in the collection\")",
                                  "children": [
                                    {
                                      "value": "description=\"The number of items in the collection\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The number of items in the collection\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The number of items in the collection",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )",
                              "children": [
                                {
                                  "value": "id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "3c9c2f42-b0c3-435f-ba35-05f7a25c772a",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=CountItemsBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "CountItemsBlock.Input",
                                      "children": [
                                        {
                                          "value": "CountItemsBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema=CountItemsBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "CountItemsBlock.Output",
                                      "children": [
                                        {
                                          "value": "CountItemsBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "description=\"Counts the number of items in a collection.\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Counts the number of items in a collection.\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Counts the number of items in a collection.",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.LOGIC}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.LOGIC}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.LOGIC",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "LOGIC",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_input={\"collection\": [1, 2, 3, 4, 5]}",
                                  "children": [
                                    {
                                      "value": "test_input",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"collection\": [1, 2, 3, 4, 5]}",
                                      "children": [
                                        {
                                          "value": "\"collection\": [1, 2, 3, 4, 5]",
                                          "children": [
                                            {
                                              "value": "\"collection\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "collection",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "[1, 2, 3, 4, 5]",
                                              "children": [
                                                {
                                                  "value": "1",
                                                  "children": []
                                                },
                                                {
                                                  "value": "2",
                                                  "children": []
                                                },
                                                {
                                                  "value": "3",
                                                  "children": []
                                                },
                                                {
                                                  "value": "4",
                                                  "children": []
                                                },
                                                {
                                                  "value": "5",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_output=[\n                (\"count\", 5),\n            ]",
                                  "children": [
                                    {
                                      "value": "test_output",
                                      "children": []
                                    },
                                    {
                                      "value": "[\n                (\"count\", 5),\n            ]",
                                      "children": [
                                        {
                                          "value": "(\"count\", 5)",
                                          "children": [
                                            {
                                              "value": "\"count\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "count",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "5",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(self, input_data: Input, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "collection = input_data.collection\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error",
                  "children": [
                    {
                      "value": "collection = input_data.collection",
                      "children": [
                        {
                          "value": "collection = input_data.collection",
                          "children": [
                            {
                              "value": "collection",
                              "children": []
                            },
                            {
                              "value": "input_data.collection",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "collection",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count\n\n        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error",
                      "children": [
                        {
                          "value": "if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n            yield \"count\", count",
                          "children": [
                            {
                              "value": "if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")",
                              "children": [
                                {
                                  "value": "isinstance(collection, (str, list, tuple, set, dict))",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(collection, (str, list, tuple, set, dict))",
                                      "children": [
                                        {
                                          "value": "collection",
                                          "children": []
                                        },
                                        {
                                          "value": "(str, list, tuple, set, dict)",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            },
                                            {
                                              "value": "list",
                                              "children": []
                                            },
                                            {
                                              "value": "tuple",
                                              "children": []
                                            },
                                            {
                                              "value": "set",
                                              "children": []
                                            },
                                            {
                                              "value": "dict",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "count = len(collection)",
                                  "children": [
                                    {
                                      "value": "count = len(collection)",
                                      "children": [
                                        {
                                          "value": "count = len(collection)",
                                          "children": [
                                            {
                                              "value": "count",
                                              "children": []
                                            },
                                            {
                                              "value": "len(collection)",
                                              "children": [
                                                {
                                                  "value": "len",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(collection)",
                                                  "children": [
                                                    {
                                                      "value": "collection",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)",
                                  "children": [
                                    {
                                      "value": "hasattr(collection, \"__iter__\")",
                                      "children": [
                                        {
                                          "value": "hasattr",
                                          "children": []
                                        },
                                        {
                                          "value": "(collection, \"__iter__\")",
                                          "children": [
                                            {
                                              "value": "collection",
                                              "children": []
                                            },
                                            {
                                              "value": "\"__iter__\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "__iter__",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "count = sum(1 for _ in collection)",
                                      "children": [
                                        {
                                          "value": "count = sum(1 for _ in collection)",
                                          "children": [
                                            {
                                              "value": "count = sum(1 for _ in collection)",
                                              "children": [
                                                {
                                                  "value": "count",
                                                  "children": []
                                                },
                                                {
                                                  "value": "sum(1 for _ in collection)",
                                                  "children": [
                                                    {
                                                      "value": "sum",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(1 for _ in collection)",
                                                      "children": [
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "for _ in collection",
                                                          "children": [
                                                            {
                                                              "value": "_",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "collection",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "else:\n                raise ValueError(\"Input is not a countable collection\")",
                                  "children": [
                                    {
                                      "value": "raise ValueError(\"Input is not a countable collection\")",
                                      "children": [
                                        {
                                          "value": "raise ValueError(\"Input is not a countable collection\")",
                                          "children": [
                                            {
                                              "value": "ValueError(\"Input is not a countable collection\")",
                                              "children": [
                                                {
                                                  "value": "ValueError",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\"Input is not a countable collection\")",
                                                  "children": [
                                                    {
                                                      "value": "\"Input is not a countable collection\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Input is not a countable collection",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "yield \"count\", count",
                              "children": [
                                {
                                  "value": "yield \"count\", count",
                                  "children": [
                                    {
                                      "value": "\"count\", count",
                                      "children": [
                                        {
                                          "value": "\"count\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "count",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "count",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error",
                          "children": [
                            {
                              "value": "Exception",
                              "children": []
                            },
                            {
                              "value": "yield \"count\", -1  # Return -1 to indicate an error",
                              "children": [
                                {
                                  "value": "yield \"count\", -1",
                                  "children": [
                                    {
                                      "value": "yield \"count\", -1",
                                      "children": [
                                        {
                                          "value": "\"count\", -1",
                                          "children": [
                                            {
                                              "value": "\"count\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "count",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "-1",
                                              "children": [
                                                {
                                                  "value": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Return -1 to indicate an error",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}