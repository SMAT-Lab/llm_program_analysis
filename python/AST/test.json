{
  "value": "import logging\nimport time\nfrom typing import Sequence\n\nfrom backend.data import db\nfrom backend.data.block import Block, initialize_blocks\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.data.user import create_default_user\nfrom backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler\nfrom backend.server.rest_api import AgentServer\nfrom backend.server.utils import get_user_id\n\nlog = logging.getLogger(__name__)\n\n\nclass SpinTestServer:\n    def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()\n\n    @staticmethod\n    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n\n    async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n\n    def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )\n\n\nasync def wait_execution(\n    user_id: str,\n    graph_id: str,\n    graph_exec_id: str,\n    timeout: int = 20,\n) -> Sequence[ExecutionResult]:\n    async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED\n\n    # Wait for the executions to complete\n    for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n        time.sleep(1)\n\n    assert False, \"Execution did not complete in time.\"\n\n\ndef execute_block_test(block: Block):\n    prefix = f\"[Test-{block.name}]\"\n\n    if not block.test_input or not block.test_output:\n        log.info(f\"{prefix} No test data provided\")\n        return\n    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n\n    output_index = 0\n    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")\n    prefix = \" \" * 4 + prefix\n\n    for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")\n\n    extra_exec_kwargs = {}\n\n    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n\n    for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"\u2705\" if is_matching else \"\u274c\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n\n    if output_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
  "children": [
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import time",
      "children": [
        {
          "value": "time",
          "children": [
            {
              "value": "time",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Sequence",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Sequence",
          "children": [
            {
              "value": "Sequence",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data import db",
      "children": [
        {
          "value": "backend.data",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            }
          ]
        },
        {
          "value": "db",
          "children": [
            {
              "value": "db",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block import Block, initialize_blocks",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        },
        {
          "value": "Block",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "initialize_blocks",
          "children": [
            {
              "value": "initialize_blocks",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.execution import ExecutionResult, ExecutionStatus",
      "children": [
        {
          "value": "backend.data.execution",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "execution",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionResult",
          "children": [
            {
              "value": "ExecutionResult",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionStatus",
          "children": [
            {
              "value": "ExecutionStatus",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import CREDENTIALS_FIELD_NAME",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "CREDENTIALS_FIELD_NAME",
          "children": [
            {
              "value": "CREDENTIALS_FIELD_NAME",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.user import create_default_user",
      "children": [
        {
          "value": "backend.data.user",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "user",
              "children": []
            }
          ]
        },
        {
          "value": "create_default_user",
          "children": [
            {
              "value": "create_default_user",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler",
      "children": [
        {
          "value": "backend.executor",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "executor",
              "children": []
            }
          ]
        },
        {
          "value": "DatabaseManager",
          "children": [
            {
              "value": "DatabaseManager",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionManager",
          "children": [
            {
              "value": "ExecutionManager",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionScheduler",
          "children": [
            {
              "value": "ExecutionScheduler",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.server.rest_api import AgentServer",
      "children": [
        {
          "value": "backend.server.rest_api",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "server",
              "children": []
            },
            {
              "value": "rest_api",
              "children": []
            }
          ]
        },
        {
          "value": "AgentServer",
          "children": [
            {
              "value": "AgentServer",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.server.utils import get_user_id",
      "children": [
        {
          "value": "backend.server.utils",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "server",
              "children": []
            },
            {
              "value": "utils",
              "children": []
            }
          ]
        },
        {
          "value": "get_user_id",
          "children": [
            {
              "value": "get_user_id",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "log = logging.getLogger(__name__)",
      "children": [
        {
          "value": "log = logging.getLogger(__name__)",
          "children": [
            {
              "value": "log",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class SpinTestServer:\n    def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()\n\n    @staticmethod\n    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n\n    async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n\n    def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
      "children": [
        {
          "value": "SpinTestServer",
          "children": []
        },
        {
          "value": "def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()\n\n    @staticmethod\n    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n\n    async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n\n    def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
          "children": [
            {
              "value": "def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()",
                  "children": [
                    {
                      "value": "self.db_api = DatabaseManager()",
                      "children": [
                        {
                          "value": "self.db_api = DatabaseManager()",
                          "children": [
                            {
                              "value": "self.db_api",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "db_api",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "DatabaseManager()",
                              "children": [
                                {
                                  "value": "DatabaseManager",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.exec_manager = ExecutionManager()",
                      "children": [
                        {
                          "value": "self.exec_manager = ExecutionManager()",
                          "children": [
                            {
                              "value": "self.exec_manager",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "exec_manager",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "ExecutionManager()",
                              "children": [
                                {
                                  "value": "ExecutionManager",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.agent_server = AgentServer()",
                      "children": [
                        {
                          "value": "self.agent_server = AgentServer()",
                          "children": [
                            {
                              "value": "self.agent_server",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "agent_server",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "AgentServer()",
                              "children": [
                                {
                                  "value": "AgentServer",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.scheduler = ExecutionScheduler()",
                      "children": [
                        {
                          "value": "self.scheduler = ExecutionScheduler()",
                          "children": [
                            {
                              "value": "self.scheduler",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "scheduler",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "ExecutionScheduler()",
                              "children": [
                                {
                                  "value": "ExecutionScheduler",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
                  "children": [
                    {
                      "value": "test_get_user_id",
                      "children": []
                    },
                    {
                      "value": "()",
                      "children": []
                    },
                    {
                      "value": "return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
                      "children": [
                        {
                          "value": "return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
                          "children": [
                            {
                              "value": "\"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "3e53486c-cf57-477e-ba2a-cb02dc828e1a",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n\n        return self",
              "children": [
                {
                  "value": "__aenter__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n\n        return self",
                  "children": [
                    {
                      "value": "self.setup_dependency_overrides()",
                      "children": [
                        {
                          "value": "self.setup_dependency_overrides()",
                          "children": [
                            {
                              "value": "self.setup_dependency_overrides",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "setup_dependency_overrides",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.db_api.__enter__()",
                      "children": [
                        {
                          "value": "self.db_api.__enter__()",
                          "children": [
                            {
                              "value": "self.db_api.__enter__",
                              "children": [
                                {
                                  "value": "self.db_api",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "db_api",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__enter__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.agent_server.__enter__()",
                      "children": [
                        {
                          "value": "self.agent_server.__enter__()",
                          "children": [
                            {
                              "value": "self.agent_server.__enter__",
                              "children": [
                                {
                                  "value": "self.agent_server",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "agent_server",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__enter__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.exec_manager.__enter__()",
                      "children": [
                        {
                          "value": "self.exec_manager.__enter__()",
                          "children": [
                            {
                              "value": "self.exec_manager.__enter__",
                              "children": [
                                {
                                  "value": "self.exec_manager",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "exec_manager",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__enter__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.scheduler.__enter__()",
                      "children": [
                        {
                          "value": "self.scheduler.__enter__()",
                          "children": [
                            {
                              "value": "self.scheduler.__enter__",
                              "children": [
                                {
                                  "value": "self.scheduler",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "scheduler",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__enter__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "await db.connect()",
                      "children": [
                        {
                          "value": "await db.connect()",
                          "children": [
                            {
                              "value": "db.connect()",
                              "children": [
                                {
                                  "value": "db.connect",
                                  "children": [
                                    {
                                      "value": "db",
                                      "children": []
                                    },
                                    {
                                      "value": "connect",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "await initialize_blocks()",
                      "children": [
                        {
                          "value": "await initialize_blocks()",
                          "children": [
                            {
                              "value": "initialize_blocks()",
                              "children": [
                                {
                                  "value": "initialize_blocks",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "await create_default_user()",
                      "children": [
                        {
                          "value": "await create_default_user()",
                          "children": [
                            {
                              "value": "create_default_user()",
                              "children": [
                                {
                                  "value": "create_default_user",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return self",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)",
              "children": [
                {
                  "value": "__aexit__",
                  "children": []
                },
                {
                  "value": "(self, exc_type, exc_val, exc_tb)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "exc_type",
                      "children": []
                    },
                    {
                      "value": "exc_val",
                      "children": []
                    },
                    {
                      "value": "exc_tb",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)",
                  "children": [
                    {
                      "value": "await db.disconnect()",
                      "children": [
                        {
                          "value": "await db.disconnect()",
                          "children": [
                            {
                              "value": "db.disconnect()",
                              "children": [
                                {
                                  "value": "db.disconnect",
                                  "children": [
                                    {
                                      "value": "db",
                                      "children": []
                                    },
                                    {
                                      "value": "disconnect",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.scheduler.__exit__(exc_type, exc_val, exc_tb)",
                      "children": [
                        {
                          "value": "self.scheduler.__exit__(exc_type, exc_val, exc_tb)",
                          "children": [
                            {
                              "value": "self.scheduler.__exit__",
                              "children": [
                                {
                                  "value": "self.scheduler",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "scheduler",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__exit__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(exc_type, exc_val, exc_tb)",
                              "children": [
                                {
                                  "value": "exc_type",
                                  "children": []
                                },
                                {
                                  "value": "exc_val",
                                  "children": []
                                },
                                {
                                  "value": "exc_tb",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.exec_manager.__exit__(exc_type, exc_val, exc_tb)",
                      "children": [
                        {
                          "value": "self.exec_manager.__exit__(exc_type, exc_val, exc_tb)",
                          "children": [
                            {
                              "value": "self.exec_manager.__exit__",
                              "children": [
                                {
                                  "value": "self.exec_manager",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "exec_manager",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__exit__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(exc_type, exc_val, exc_tb)",
                              "children": [
                                {
                                  "value": "exc_type",
                                  "children": []
                                },
                                {
                                  "value": "exc_val",
                                  "children": []
                                },
                                {
                                  "value": "exc_tb",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.agent_server.__exit__(exc_type, exc_val, exc_tb)",
                      "children": [
                        {
                          "value": "self.agent_server.__exit__(exc_type, exc_val, exc_tb)",
                          "children": [
                            {
                              "value": "self.agent_server.__exit__",
                              "children": [
                                {
                                  "value": "self.agent_server",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "agent_server",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__exit__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(exc_type, exc_val, exc_tb)",
                              "children": [
                                {
                                  "value": "exc_type",
                                  "children": []
                                },
                                {
                                  "value": "exc_val",
                                  "children": []
                                },
                                {
                                  "value": "exc_tb",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.db_api.__exit__(exc_type, exc_val, exc_tb)",
                      "children": [
                        {
                          "value": "self.db_api.__exit__(exc_type, exc_val, exc_tb)",
                          "children": [
                            {
                              "value": "self.db_api.__exit__",
                              "children": [
                                {
                                  "value": "self.db_api",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "db_api",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__exit__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(exc_type, exc_val, exc_tb)",
                              "children": [
                                {
                                  "value": "exc_type",
                                  "children": []
                                },
                                {
                                  "value": "exc_val",
                                  "children": []
                                },
                                {
                                  "value": "exc_tb",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
              "children": [
                {
                  "value": "setup_dependency_overrides",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# Override get_user_id for testing",
                  "children": []
                },
                {
                  "value": "self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
                  "children": [
                    {
                      "value": "self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
                      "children": [
                        {
                          "value": "self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )",
                          "children": [
                            {
                              "value": "self.agent_server.set_test_dependency_overrides",
                              "children": [
                                {
                                  "value": "self.agent_server",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "agent_server",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "set_test_dependency_overrides",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            {get_user_id: self.test_get_user_id}\n        )",
                              "children": [
                                {
                                  "value": "{get_user_id: self.test_get_user_id}",
                                  "children": [
                                    {
                                      "value": "get_user_id: self.test_get_user_id",
                                      "children": [
                                        {
                                          "value": "get_user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "self.test_get_user_id",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "test_get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def wait_execution(\n    user_id: str,\n    graph_id: str,\n    graph_exec_id: str,\n    timeout: int = 20,\n) -> Sequence[ExecutionResult]:\n    async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED\n\n    # Wait for the executions to complete\n    for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n        time.sleep(1)\n\n    assert False, \"Execution did not complete in time.\"",
      "children": [
        {
          "value": "wait_execution",
          "children": []
        },
        {
          "value": "(\n    user_id: str,\n    graph_id: str,\n    graph_exec_id: str,\n    timeout: int = 20,\n)",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_id: str",
              "children": [
                {
                  "value": "graph_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_exec_id: str",
              "children": [
                {
                  "value": "graph_exec_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "timeout: int = 20",
              "children": [
                {
                  "value": "timeout",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "20",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "Sequence[ExecutionResult]",
          "children": [
            {
              "value": "Sequence[ExecutionResult]",
              "children": [
                {
                  "value": "Sequence",
                  "children": []
                },
                {
                  "value": "[ExecutionResult]",
                  "children": [
                    {
                      "value": "ExecutionResult",
                      "children": [
                        {
                          "value": "ExecutionResult",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED\n\n    # Wait for the executions to complete\n    for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n        time.sleep(1)\n\n    assert False, \"Execution did not complete in time.\"",
          "children": [
            {
              "value": "async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED",
              "children": [
                {
                  "value": "is_execution_completed",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                },
                {
                  "value": "status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED",
                  "children": [
                    {
                      "value": "status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)",
                      "children": [
                        {
                          "value": "status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)",
                          "children": [
                            {
                              "value": "status",
                              "children": []
                            },
                            {
                              "value": "await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)",
                              "children": [
                                {
                                  "value": "AgentServer().test_get_graph_run_status(graph_exec_id, user_id)",
                                  "children": [
                                    {
                                      "value": "AgentServer().test_get_graph_run_status",
                                      "children": [
                                        {
                                          "value": "AgentServer()",
                                          "children": [
                                            {
                                              "value": "AgentServer",
                                              "children": []
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "test_get_graph_run_status",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(graph_exec_id, user_id)",
                                      "children": [
                                        {
                                          "value": "graph_exec_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "log.info(f\"Execution status: {status}\")",
                      "children": [
                        {
                          "value": "log.info(f\"Execution status: {status}\")",
                          "children": [
                            {
                              "value": "log.info",
                              "children": [
                                {
                                  "value": "log",
                                  "children": []
                                },
                                {
                                  "value": "info",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"Execution status: {status}\")",
                              "children": [
                                {
                                  "value": "f\"Execution status: {status}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Execution status:",
                                      "children": []
                                    },
                                    {
                                      "value": "{status}",
                                      "children": [
                                        {
                                          "value": "status",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")",
                      "children": [
                        {
                          "value": "status == ExecutionStatus.FAILED",
                          "children": [
                            {
                              "value": "status",
                              "children": []
                            },
                            {
                              "value": "ExecutionStatus.FAILED",
                              "children": [
                                {
                                  "value": "ExecutionStatus",
                                  "children": []
                                },
                                {
                                  "value": "FAILED",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")",
                          "children": [
                            {
                              "value": "log.info(\"Execution failed\")",
                              "children": [
                                {
                                  "value": "log.info(\"Execution failed\")",
                                  "children": [
                                    {
                                      "value": "log.info",
                                      "children": [
                                        {
                                          "value": "log",
                                          "children": []
                                        },
                                        {
                                          "value": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"Execution failed\")",
                                      "children": [
                                        {
                                          "value": "\"Execution failed\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Execution failed",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise Exception(\"Execution failed\")",
                              "children": [
                                {
                                  "value": "Exception(\"Execution failed\")",
                                  "children": [
                                    {
                                      "value": "Exception",
                                      "children": []
                                    },
                                    {
                                      "value": "(\"Execution failed\")",
                                      "children": [
                                        {
                                          "value": "\"Execution failed\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Execution failed",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return status == ExecutionStatus.COMPLETED",
                      "children": [
                        {
                          "value": "status == ExecutionStatus.COMPLETED",
                          "children": [
                            {
                              "value": "status",
                              "children": []
                            },
                            {
                              "value": "ExecutionStatus.COMPLETED",
                              "children": [
                                {
                                  "value": "ExecutionStatus",
                                  "children": []
                                },
                                {
                                  "value": "COMPLETED",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Wait for the executions to complete",
              "children": []
            },
            {
              "value": "for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n        time.sleep(1)",
              "children": [
                {
                  "value": "i",
                  "children": []
                },
                {
                  "value": "range(timeout)",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(timeout)",
                      "children": [
                        {
                          "value": "timeout",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n        time.sleep(1)",
                  "children": [
                    {
                      "value": "if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )",
                      "children": [
                        {
                          "value": "await is_execution_completed()",
                          "children": [
                            {
                              "value": "is_execution_completed()",
                              "children": [
                                {
                                  "value": "is_execution_completed",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )",
                          "children": [
                            {
                              "value": "return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )",
                              "children": [
                                {
                                  "value": "await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )",
                                  "children": [
                                    {
                                      "value": "AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )",
                                      "children": [
                                        {
                                          "value": "AgentServer().test_get_graph_run_node_execution_results",
                                          "children": [
                                            {
                                              "value": "AgentServer()",
                                              "children": [
                                                {
                                                  "value": "AgentServer",
                                                  "children": []
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "test_get_graph_run_node_execution_results",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                graph_id, graph_exec_id, user_id\n            )",
                                          "children": [
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_exec_id",
                                              "children": []
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "time.sleep(1)",
                      "children": [
                        {
                          "value": "time.sleep(1)",
                          "children": [
                            {
                              "value": "time.sleep",
                              "children": [
                                {
                                  "value": "time",
                                  "children": []
                                },
                                {
                                  "value": "sleep",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(1)",
                              "children": [
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "assert False, \"Execution did not complete in time.\"",
              "children": [
                {
                  "value": "False",
                  "children": []
                },
                {
                  "value": "\"Execution did not complete in time.\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "Execution did not complete in time.",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def execute_block_test(block: Block):\n    prefix = f\"[Test-{block.name}]\"\n\n    if not block.test_input or not block.test_output:\n        log.info(f\"{prefix} No test data provided\")\n        return\n    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n\n    output_index = 0\n    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")\n    prefix = \" \" * 4 + prefix\n\n    for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")\n\n    extra_exec_kwargs = {}\n\n    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n\n    for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"\u2705\" if is_matching else \"\u274c\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n\n    if output_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
      "children": [
        {
          "value": "execute_block_test",
          "children": []
        },
        {
          "value": "(block: Block)",
          "children": [
            {
              "value": "block: Block",
              "children": [
                {
                  "value": "block",
                  "children": []
                },
                {
                  "value": "Block",
                  "children": [
                    {
                      "value": "Block",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "prefix = f\"[Test-{block.name}]\"\n\n    if not block.test_input or not block.test_output:\n        log.info(f\"{prefix} No test data provided\")\n        return\n    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n\n    output_index = 0\n    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")\n    prefix = \" \" * 4 + prefix\n\n    for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")\n\n    extra_exec_kwargs = {}\n\n    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n\n    for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"\u2705\" if is_matching else \"\u274c\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n\n    if output_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
          "children": [
            {
              "value": "prefix = f\"[Test-{block.name}]\"",
              "children": [
                {
                  "value": "prefix = f\"[Test-{block.name}]\"",
                  "children": [
                    {
                      "value": "prefix",
                      "children": []
                    },
                    {
                      "value": "f\"[Test-{block.name}]\"",
                      "children": [
                        {
                          "value": "f\"",
                          "children": []
                        },
                        {
                          "value": "[Test-",
                          "children": []
                        },
                        {
                          "value": "{block.name}",
                          "children": [
                            {
                              "value": "block.name",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "name",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "]",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not block.test_input or not block.test_output:\n        log.info(f\"{prefix} No test data provided\")\n        return",
              "children": [
                {
                  "value": "not block.test_input or not block.test_output",
                  "children": [
                    {
                      "value": "not block.test_input",
                      "children": [
                        {
                          "value": "block.test_input",
                          "children": [
                            {
                              "value": "block",
                              "children": []
                            },
                            {
                              "value": "test_input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "not block.test_output",
                      "children": [
                        {
                          "value": "block.test_output",
                          "children": [
                            {
                              "value": "block",
                              "children": []
                            },
                            {
                              "value": "test_output",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "log.info(f\"{prefix} No test data provided\")\n        return",
                  "children": [
                    {
                      "value": "log.info(f\"{prefix} No test data provided\")",
                      "children": [
                        {
                          "value": "log.info(f\"{prefix} No test data provided\")",
                          "children": [
                            {
                              "value": "log.info",
                              "children": [
                                {
                                  "value": "log",
                                  "children": []
                                },
                                {
                                  "value": "info",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"{prefix} No test data provided\")",
                              "children": [
                                {
                                  "value": "f\"{prefix} No test data provided\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "{prefix}",
                                      "children": [
                                        {
                                          "value": "prefix",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "No test data provided",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]",
              "children": [
                {
                  "value": "not isinstance(block.test_input, list)",
                  "children": [
                    {
                      "value": "isinstance(block.test_input, list)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(block.test_input, list)",
                          "children": [
                            {
                              "value": "block.test_input",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "test_input",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "list",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "block.test_input = [block.test_input]",
                  "children": [
                    {
                      "value": "block.test_input = [block.test_input]",
                      "children": [
                        {
                          "value": "block.test_input = [block.test_input]",
                          "children": [
                            {
                              "value": "block.test_input",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "test_input",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "[block.test_input]",
                              "children": [
                                {
                                  "value": "block.test_input",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "test_input",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]",
              "children": [
                {
                  "value": "not isinstance(block.test_output, list)",
                  "children": [
                    {
                      "value": "isinstance(block.test_output, list)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(block.test_output, list)",
                          "children": [
                            {
                              "value": "block.test_output",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "test_output",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "list",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "block.test_output = [block.test_output]",
                  "children": [
                    {
                      "value": "block.test_output = [block.test_output]",
                      "children": [
                        {
                          "value": "block.test_output = [block.test_output]",
                          "children": [
                            {
                              "value": "block.test_output",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "test_output",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "[block.test_output]",
                              "children": [
                                {
                                  "value": "block.test_output",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "test_output",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "output_index = 0",
              "children": [
                {
                  "value": "output_index = 0",
                  "children": [
                    {
                      "value": "output_index",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")",
              "children": [
                {
                  "value": "log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")",
                  "children": [
                    {
                      "value": "log.info",
                      "children": [
                        {
                          "value": "log",
                          "children": []
                        },
                        {
                          "value": "info",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(f\"{prefix} Executing {len(block.test_input)} tests...\")",
                      "children": [
                        {
                          "value": "f\"{prefix} Executing {len(block.test_input)} tests...\"",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "{prefix}",
                              "children": [
                                {
                                  "value": "prefix",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Executing",
                              "children": []
                            },
                            {
                              "value": "{len(block.test_input)}",
                              "children": [
                                {
                                  "value": "len(block.test_input)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(block.test_input)",
                                      "children": [
                                        {
                                          "value": "block.test_input",
                                          "children": [
                                            {
                                              "value": "block",
                                              "children": []
                                            },
                                            {
                                              "value": "test_input",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "tests...",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "prefix = \" \" * 4 + prefix",
              "children": [
                {
                  "value": "prefix = \" \" * 4 + prefix",
                  "children": [
                    {
                      "value": "prefix",
                      "children": []
                    },
                    {
                      "value": "\" \" * 4 + prefix",
                      "children": [
                        {
                          "value": "\" \" * 4",
                          "children": [
                            {
                              "value": "\" \"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "4",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "prefix",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")",
              "children": [
                {
                  "value": "mock_name, mock_obj",
                  "children": [
                    {
                      "value": "mock_name",
                      "children": []
                    },
                    {
                      "value": "mock_obj",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(block.test_mock or {}).items()",
                  "children": [
                    {
                      "value": "(block.test_mock or {}).items",
                      "children": [
                        {
                          "value": "(block.test_mock or {})",
                          "children": [
                            {
                              "value": "block.test_mock or {}",
                              "children": [
                                {
                                  "value": "block.test_mock",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "test_mock",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "{}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "items",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")",
                  "children": [
                    {
                      "value": "log.info(f\"{prefix} mocking {mock_name}...\")",
                      "children": [
                        {
                          "value": "log.info(f\"{prefix} mocking {mock_name}...\")",
                          "children": [
                            {
                              "value": "log.info",
                              "children": [
                                {
                                  "value": "log",
                                  "children": []
                                },
                                {
                                  "value": "info",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"{prefix} mocking {mock_name}...\")",
                              "children": [
                                {
                                  "value": "f\"{prefix} mocking {mock_name}...\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "{prefix}",
                                      "children": [
                                        {
                                          "value": "prefix",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "mocking",
                                      "children": []
                                    },
                                    {
                                      "value": "{mock_name}",
                                      "children": [
                                        {
                                          "value": "mock_name",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "...",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")",
                      "children": [
                        {
                          "value": "hasattr(block, mock_name)",
                          "children": [
                            {
                              "value": "hasattr",
                              "children": []
                            },
                            {
                              "value": "(block, mock_name)",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "mock_name",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "setattr(block, mock_name, mock_obj)",
                          "children": [
                            {
                              "value": "setattr(block, mock_name, mock_obj)",
                              "children": [
                                {
                                  "value": "setattr(block, mock_name, mock_obj)",
                                  "children": [
                                    {
                                      "value": "setattr",
                                      "children": []
                                    },
                                    {
                                      "value": "(block, mock_name, mock_obj)",
                                      "children": [
                                        {
                                          "value": "block",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_name",
                                          "children": []
                                        },
                                        {
                                          "value": "mock_obj",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")",
                          "children": [
                            {
                              "value": "log.info(f\"{prefix} mock {mock_name} not found in block\")",
                              "children": [
                                {
                                  "value": "log.info(f\"{prefix} mock {mock_name} not found in block\")",
                                  "children": [
                                    {
                                      "value": "log.info(f\"{prefix} mock {mock_name} not found in block\")",
                                      "children": [
                                        {
                                          "value": "log.info",
                                          "children": [
                                            {
                                              "value": "log",
                                              "children": []
                                            },
                                            {
                                              "value": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(f\"{prefix} mock {mock_name} not found in block\")",
                                          "children": [
                                            {
                                              "value": "f\"{prefix} mock {mock_name} not found in block\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{prefix}",
                                                  "children": [
                                                    {
                                                      "value": "prefix",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "mock",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{mock_name}",
                                                  "children": [
                                                    {
                                                      "value": "mock_name",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "not found in block",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "extra_exec_kwargs = {}",
              "children": [
                {
                  "value": "extra_exec_kwargs = {}",
                  "children": [
                    {
                      "value": "extra_exec_kwargs",
                      "children": []
                    },
                    {
                      "value": "{}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials",
              "children": [
                {
                  "value": "CREDENTIALS_FIELD_NAME in block.input_schema.model_fields",
                  "children": [
                    {
                      "value": "CREDENTIALS_FIELD_NAME",
                      "children": []
                    },
                    {
                      "value": "block.input_schema.model_fields",
                      "children": [
                        {
                          "value": "block.input_schema",
                          "children": [
                            {
                              "value": "block",
                              "children": []
                            },
                            {
                              "value": "input_schema",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "model_fields",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials",
                  "children": [
                    {
                      "value": "if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )",
                      "children": [
                        {
                          "value": "not block.test_credentials",
                          "children": [
                            {
                              "value": "block.test_credentials",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "test_credentials",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )",
                          "children": [
                            {
                              "value": "raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )",
                              "children": [
                                {
                                  "value": "ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )",
                                      "children": [
                                        {
                                          "value": "f\"{prefix} requires credentials but has no test_credentials\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "{prefix}",
                                              "children": [
                                                {
                                                  "value": "prefix",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "requires credentials but has no test_credentials",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials",
                      "children": [
                        {
                          "value": "extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials",
                          "children": [
                            {
                              "value": "extra_exec_kwargs[CREDENTIALS_FIELD_NAME]",
                              "children": [
                                {
                                  "value": "extra_exec_kwargs",
                                  "children": []
                                },
                                {
                                  "value": "CREDENTIALS_FIELD_NAME",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "block.test_credentials",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "test_credentials",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"\u2705\" if is_matching else \"\u274c\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1",
              "children": [
                {
                  "value": "input_data",
                  "children": []
                },
                {
                  "value": "block.test_input",
                  "children": [
                    {
                      "value": "block",
                      "children": []
                    },
                    {
                      "value": "test_input",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"\u2705\" if is_matching else \"\u274c\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1",
                  "children": [
                    {
                      "value": "log.info(f\"{prefix} in: {input_data}\")",
                      "children": [
                        {
                          "value": "log.info(f\"{prefix} in: {input_data}\")",
                          "children": [
                            {
                              "value": "log.info",
                              "children": [
                                {
                                  "value": "log",
                                  "children": []
                                },
                                {
                                  "value": "info",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"{prefix} in: {input_data}\")",
                              "children": [
                                {
                                  "value": "f\"{prefix} in: {input_data}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "{prefix}",
                                      "children": [
                                        {
                                          "value": "prefix",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "in:",
                                      "children": []
                                    },
                                    {
                                      "value": "{input_data}",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"\u2705\" if is_matching else \"\u274c\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1",
                      "children": [
                        {
                          "value": "output_name, output_data",
                          "children": [
                            {
                              "value": "output_name",
                              "children": []
                            },
                            {
                              "value": "output_data",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "block.execute(input_data, **extra_exec_kwargs)",
                          "children": [
                            {
                              "value": "block.execute",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "execute",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(input_data, **extra_exec_kwargs)",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "**extra_exec_kwargs",
                                  "children": [
                                    {
                                      "value": "extra_exec_kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"\u2705\" if is_matching else \"\u274c\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1",
                          "children": [
                            {
                              "value": "if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")",
                              "children": [
                                {
                                  "value": "output_index >= len(block.test_output)",
                                  "children": [
                                    {
                                      "value": "output_index",
                                      "children": []
                                    },
                                    {
                                      "value": "len(block.test_output)",
                                      "children": [
                                        {
                                          "value": "len",
                                          "children": []
                                        },
                                        {
                                          "value": "(block.test_output)",
                                          "children": [
                                            {
                                              "value": "block.test_output",
                                              "children": [
                                                {
                                                  "value": "block",
                                                  "children": []
                                                },
                                                {
                                                  "value": "test_output",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise ValueError(f\"{prefix} produced output more than expected\")",
                                  "children": [
                                    {
                                      "value": "raise ValueError(f\"{prefix} produced output more than expected\")",
                                      "children": [
                                        {
                                          "value": "ValueError(f\"{prefix} produced output more than expected\")",
                                          "children": [
                                            {
                                              "value": "ValueError",
                                              "children": []
                                            },
                                            {
                                              "value": "(f\"{prefix} produced output more than expected\")",
                                              "children": [
                                                {
                                                  "value": "f\"{prefix} produced output more than expected\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{prefix}",
                                                      "children": [
                                                        {
                                                          "value": "prefix",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "produced output more than expected",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ex_output_name, ex_output_data = block.test_output[output_index]",
                              "children": [
                                {
                                  "value": "ex_output_name, ex_output_data = block.test_output[output_index]",
                                  "children": [
                                    {
                                      "value": "ex_output_name, ex_output_data",
                                      "children": [
                                        {
                                          "value": "ex_output_name",
                                          "children": []
                                        },
                                        {
                                          "value": "ex_output_data",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "block.test_output[output_index]",
                                      "children": [
                                        {
                                          "value": "block.test_output",
                                          "children": [
                                            {
                                              "value": "block",
                                              "children": []
                                            },
                                            {
                                              "value": "test_output",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "output_index",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"\u2705\" if is_matching else \"\u274c\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                              "children": [
                                {
                                  "value": "compare",
                                  "children": []
                                },
                                {
                                  "value": "(data, expected_data)",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "expected_data",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"\u2705\" if is_matching else \"\u274c\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                  "children": [
                                    {
                                      "value": "if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False",
                                      "children": [
                                        {
                                          "value": "data == expected_data",
                                          "children": [
                                            {
                                              "value": "data",
                                              "children": []
                                            },
                                            {
                                              "value": "expected_data",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "is_matching = True",
                                          "children": [
                                            {
                                              "value": "is_matching = True",
                                              "children": [
                                                {
                                                  "value": "is_matching = True",
                                                  "children": [
                                                    {
                                                      "value": "is_matching",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "True",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)",
                                          "children": [
                                            {
                                              "value": "isinstance(expected_data, type)",
                                              "children": [
                                                {
                                                  "value": "isinstance",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(expected_data, type)",
                                                  "children": [
                                                    {
                                                      "value": "expected_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "type",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "is_matching = isinstance(data, expected_data)",
                                              "children": [
                                                {
                                                  "value": "is_matching = isinstance(data, expected_data)",
                                                  "children": [
                                                    {
                                                      "value": "is_matching = isinstance(data, expected_data)",
                                                      "children": [
                                                        {
                                                          "value": "is_matching",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "isinstance(data, expected_data)",
                                                          "children": [
                                                            {
                                                              "value": "isinstance",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(data, expected_data)",
                                                              "children": [
                                                                {
                                                                  "value": "data",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "expected_data",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "elif callable(expected_data):\n                    is_matching = expected_data(data)",
                                          "children": [
                                            {
                                              "value": "callable(expected_data)",
                                              "children": [
                                                {
                                                  "value": "callable",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(expected_data)",
                                                  "children": [
                                                    {
                                                      "value": "expected_data",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "is_matching = expected_data(data)",
                                              "children": [
                                                {
                                                  "value": "is_matching = expected_data(data)",
                                                  "children": [
                                                    {
                                                      "value": "is_matching = expected_data(data)",
                                                      "children": [
                                                        {
                                                          "value": "is_matching",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "expected_data(data)",
                                                          "children": [
                                                            {
                                                              "value": "expected_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(data)",
                                                              "children": [
                                                                {
                                                                  "value": "data",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "else:\n                    is_matching = False",
                                          "children": [
                                            {
                                              "value": "is_matching = False",
                                              "children": [
                                                {
                                                  "value": "is_matching = False",
                                                  "children": [
                                                    {
                                                      "value": "is_matching = False",
                                                      "children": [
                                                        {
                                                          "value": "is_matching",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "False",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "mark = \"\u2705\" if is_matching else \"\u274c\"",
                                      "children": [
                                        {
                                          "value": "mark = \"\u2705\" if is_matching else \"\u274c\"",
                                          "children": [
                                            {
                                              "value": "mark",
                                              "children": []
                                            },
                                            {
                                              "value": "\"\u2705\" if is_matching else \"\u274c\"",
                                              "children": [
                                                {
                                                  "value": "\"\u2705\" i",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\u2705\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "i",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "_matching e",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")",
                                      "children": [
                                        {
                                          "value": "info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")",
                                          "children": [
                                            {
                                              "value": "info(f\"{",
                                              "children": [
                                                {
                                                  "value": "inf",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(f\"{",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "prefix} {mark} comparing `{data}` vs `{expected_data}`\")",
                                              "children": [
                                                {
                                                  "value": "refix} {mark} comparing `{data}` vs `{expected_data}`\")",
                                                  "children": [
                                                    {
                                                      "value": "re",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "fix} {ma",
                                                      "children": [
                                                        {
                                                          "value": "ix} {m",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "r",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "k} com",
                                                      "children": [
                                                        {
                                                          "value": "} co",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "paring `{dat",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "a}` vs",
                                                      "children": [
                                                        {
                                                          "value": "}` v",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "`{exp",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ected_data}`\")",
                                                      "children": [
                                                        {
                                                          "value": "cted_data}`\")",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ot is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                      "children": [
                                        {
                                          "value": "is_matching:",
                                          "children": [
                                            {
                                              "value": "atching:",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "e ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                          "children": [
                                            {
                                              "value": "e ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "eError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "eError(",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "refix}: wrong output {data} vs {expected_data}\"",
                                                          "children": [
                                                            {
                                                              "value": "re",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "fix}: wr",
                                                              "children": [
                                                                {
                                                                  "value": "ix}: w",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "ong output {dat",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "a} vs",
                                                              "children": [
                                                                {
                                                                  "value": "} vs",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{exp",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "ected_data}\"",
                                                              "children": [
                                                                {
                                                                  "value": "cted_data}\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "are(output_data, ex_output_data)",
                              "children": [
                                {
                                  "value": "are(output_data, ex_output_data)",
                                  "children": [
                                    {
                                      "value": "are(out",
                                      "children": []
                                    },
                                    {
                                      "value": "put_data, ex_output_data)",
                                      "children": [
                                        {
                                          "value": "ut_data, ex",
                                          "children": []
                                        },
                                        {
                                          "value": "utput_data)",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "are(output_name, ex_output_name)",
                              "children": [
                                {
                                  "value": "are(output_name, ex_output_name)",
                                  "children": [
                                    {
                                      "value": "are(out",
                                      "children": []
                                    },
                                    {
                                      "value": "put_name, ex_output_name)",
                                      "children": [
                                        {
                                          "value": "ut_name, ex",
                                          "children": []
                                        },
                                        {
                                          "value": "utput_name)",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ut_index += 1",
                              "children": [
                                {
                                  "value": "ut_index += 1",
                                  "children": [
                                    {
                                      "value": "ut_index +=",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "utput_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
              "children": [
                {
                  "value": "ut_index < len(block.test_output):",
                  "children": [
                    {
                      "value": "ut_index < l",
                      "children": []
                    },
                    {
                      "value": "block.test_output):",
                      "children": [
                        {
                          "value": "blo",
                          "children": []
                        },
                        {
                          "value": "ck.test_output):",
                          "children": [
                            {
                              "value": "k.test_output):",
                              "children": [
                                {
                                  "value": "k.tes",
                                  "children": []
                                },
                                {
                                  "value": "_output):",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "e ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
                  "children": [
                    {
                      "value": "e ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
                      "children": [
                        {
                          "value": "eError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
                          "children": [
                            {
                              "value": "eError(",
                              "children": []
                            },
                            {
                              "value": "f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
                              "children": [
                                {
                                  "value": "refix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"",
                                  "children": [
                                    {
                                      "value": "re",
                                      "children": []
                                    },
                                    {
                                      "value": "fix} pro",
                                      "children": [
                                        {
                                          "value": "ix} pr",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "duced output less than expected. output_index={out",
                                      "children": []
                                    },
                                    {
                                      "value": "put_index}, le",
                                      "children": [
                                        {
                                          "value": "ut_index}, l",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "n(block.test_output)={len",
                                      "children": []
                                    },
                                    {
                                      "value": "(block.test_output)}\"",
                                      "children": [
                                        {
                                          "value": "block.test_output)}\"",
                                          "children": [
                                            {
                                              "value": "blo",
                                              "children": []
                                            },
                                            {
                                              "value": "ck.test_output)}\"",
                                              "children": [
                                                {
                                                  "value": "k.test_output)}\"",
                                                  "children": [
                                                    {
                                                      "value": "k.tes",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "_output)}\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}