{
  "value": "import logging\nfrom contextlib import contextmanager\nfrom datetime import datetime\nfrom typing import TYPE_CHECKING\n\nfrom autogpt_libs.utils.synchronize import RedisKeyedMutex\nfrom redis.lock import Lock as RedisLock\n\nfrom backend.data import redis\nfrom backend.data.model import Credentials\nfrom backend.integrations.credentials_store import IntegrationCredentialsStore\nfrom backend.integrations.oauth import HANDLERS_BY_NAME\nfrom backend.util.exceptions import MissingConfigError\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\n    from backend.integrations.oauth import BaseOAuthHandler\n\nlogger = logging.getLogger(__name__)\nsettings = Settings()\n\n\nclass IntegrationCredentialsManager:\n    \"\"\"\n    Handles the lifecycle of integration credentials.\n    - Automatically refreshes requested credentials if needed.\n    - Uses locking mechanisms to ensure system-wide consistency and\n      prevent invalidation of in-use tokens.\n\n    ### \u26a0\ufe0f Gotcha\n    With `acquire(..)`, credentials can only be in use in one place at a time (e.g. one\n    block execution).\n\n    ### Locking mechanism\n    - Because *getting* credentials can result in a refresh (= *invalidation* +\n      *replacement*) of the stored credentials, *getting* is an operation that\n      potentially requires read/write access.\n    - Checking whether a token has to be refreshed is subject to an additional `refresh`\n      scoped lock to prevent unnecessary sequential refreshes when multiple executions\n      try to access the same credentials simultaneously.\n    - We MUST lock credentials while in use to prevent them from being invalidated while\n      they are in use, e.g. because they are being refreshed by a different part\n      of the system.\n    - The `!time_sensitive` lock in `acquire(..)` is part of a two-tier locking\n      mechanism in which *updating* gets priority over *getting* credentials.\n      This is to prevent a long queue of waiting *get* requests from blocking essential\n      credential refreshes or user-initiated updates.\n\n    It is possible to implement a reader/writer locking system where either multiple\n    readers or a single writer can have simultaneous access, but this would add a lot of\n    complexity to the mechanism. I don't expect the current (\"simple\") mechanism to\n    cause so much latency that it's worth implementing.\n    \"\"\"\n\n    def __init__(self):\n        redis_conn = redis.get_redis()\n        self._locks = RedisKeyedMutex(redis_conn)\n        self.store = IntegrationCredentialsStore()\n\n    def create(self, user_id: str, credentials: Credentials) -> None:\n        return self.store.add_creds(user_id, credentials)\n\n    def exists(self, user_id: str, credentials_id: str) -> bool:\n        return self.store.get_creds_by_id(user_id, credentials_id) is not None\n\n    def get(\n        self, user_id: str, credentials_id: str, lock: bool = True\n    ) -> Credentials | None:\n        credentials = self.store.get_creds_by_id(user_id, credentials_id)\n        if not credentials:\n            return None\n\n        # Refresh OAuth credentials if needed\n        if credentials.type == \"oauth2\" and credentials.access_token_expires_at:\n            logger.debug(\n                f\"Credentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"\n            )\n\n            with self._locked(user_id, credentials_id, \"refresh\"):\n                oauth_handler = _get_provider_oauth_handler(credentials.provider)\n                if oauth_handler.needs_refresh(credentials):\n                    logger.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )\n                    _lock = None\n                    if lock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)\n\n                    fresh_credentials = oauth_handler.refresh_tokens(credentials)\n                    self.store.update_creds(user_id, fresh_credentials)\n                    if _lock and _lock.locked():\n                        _lock.release()\n\n                    credentials = fresh_credentials\n        else:\n            logger.debug(f\"Credentials #{credentials.id} never expire\")\n\n        return credentials\n\n    def acquire(\n        self, user_id: str, credentials_id: str\n    ) -> tuple[Credentials, RedisLock]:\n        \"\"\"\n        \u26a0\ufe0f WARNING: this locks credentials system-wide and blocks both acquiring\n        and updating them elsewhere until the lock is released.\n        See the class docstring for more info.\n        \"\"\"\n        # Use a low-priority (!time_sensitive) locking queue on top of the general lock\n        # to allow priority access for refreshing/updating the tokens.\n        with self._locked(user_id, credentials_id, \"!time_sensitive\"):\n            lock = self._acquire_lock(user_id, credentials_id)\n        credentials = self.get(user_id, credentials_id, lock=False)\n        if not credentials:\n            raise ValueError(\n                f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )\n        return credentials, lock\n\n    def update(self, user_id: str, updated: Credentials) -> None:\n        with self._locked(user_id, updated.id):\n            self.store.update_creds(user_id, updated)\n\n    def delete(self, user_id: str, credentials_id: str) -> None:\n        with self._locked(user_id, credentials_id):\n            self.store.delete_creds_by_id(user_id, credentials_id)\n\n    # -- Locking utilities -- #\n\n    def _acquire_lock(self, user_id: str, credentials_id: str, *args: str) -> RedisLock:\n        key = (\n            f\"user:{user_id}\",\n            f\"credentials:{credentials_id}\",\n            *args,\n        )\n        return self._locks.acquire(key)\n\n    @contextmanager\n    def _locked(self, user_id: str, credentials_id: str, *args: str):\n        lock = self._acquire_lock(user_id, credentials_id, *args)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self._locks.release_all_locks()\n        self.store.locks.release_all_locks()\n\n\ndef _get_provider_oauth_handler(provider_name: str) -> \"BaseOAuthHandler\":\n    if provider_name not in HANDLERS_BY_NAME:\n        raise KeyError(f\"Unknown provider '{provider_name}'\")\n\n    client_id = getattr(settings.secrets, f\"{provider_name}_client_id\")\n    client_secret = getattr(settings.secrets, f\"{provider_name}_client_secret\")\n    if not (client_id and client_secret):\n        raise MissingConfigError(\n            f\"Integration with provider '{provider_name}' is not configured\",\n        )\n\n    handler_class = HANDLERS_BY_NAME[provider_name]\n    frontend_base_url = (\n        settings.config.frontend_base_url or settings.config.platform_base_url\n    )\n    return handler_class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
  "children": [
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from contextlib import contextmanager",
      "children": [
        {
          "value": "contextlib",
          "children": [
            {
              "value": "contextlib",
              "children": []
            }
          ]
        },
        {
          "value": "contextmanager",
          "children": [
            {
              "value": "contextmanager",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from datetime import datetime",
      "children": [
        {
          "value": "datetime",
          "children": [
            {
              "value": "datetime",
              "children": []
            }
          ]
        },
        {
          "value": "datetime",
          "children": [
            {
              "value": "datetime",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import TYPE_CHECKING",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "TYPE_CHECKING",
          "children": [
            {
              "value": "TYPE_CHECKING",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from autogpt_libs.utils.synchronize import RedisKeyedMutex",
      "children": [
        {
          "value": "autogpt_libs.utils.synchronize",
          "children": [
            {
              "value": "autogpt_libs",
              "children": []
            },
            {
              "value": "utils",
              "children": []
            },
            {
              "value": "synchronize",
              "children": []
            }
          ]
        },
        {
          "value": "RedisKeyedMutex",
          "children": [
            {
              "value": "RedisKeyedMutex",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from redis.lock import Lock as RedisLock",
      "children": [
        {
          "value": "redis.lock",
          "children": [
            {
              "value": "redis",
              "children": []
            },
            {
              "value": "lock",
              "children": []
            }
          ]
        },
        {
          "value": "Lock as RedisLock",
          "children": [
            {
              "value": "Lock",
              "children": [
                {
                  "value": "Lock",
                  "children": []
                }
              ]
            },
            {
              "value": "RedisLock",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data import redis",
      "children": [
        {
          "value": "backend.data",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            }
          ]
        },
        {
          "value": "redis",
          "children": [
            {
              "value": "redis",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import Credentials",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "Credentials",
          "children": [
            {
              "value": "Credentials",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.credentials_store import IntegrationCredentialsStore",
      "children": [
        {
          "value": "backend.integrations.credentials_store",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "credentials_store",
              "children": []
            }
          ]
        },
        {
          "value": "IntegrationCredentialsStore",
          "children": [
            {
              "value": "IntegrationCredentialsStore",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.oauth import HANDLERS_BY_NAME",
      "children": [
        {
          "value": "backend.integrations.oauth",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "oauth",
              "children": []
            }
          ]
        },
        {
          "value": "HANDLERS_BY_NAME",
          "children": [
            {
              "value": "HANDLERS_BY_NAME",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.exceptions import MissingConfigError",
      "children": [
        {
          "value": "backend.util.exceptions",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "exceptions",
              "children": []
            }
          ]
        },
        {
          "value": "MissingConfigError",
          "children": [
            {
              "value": "MissingConfigError",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Settings",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Settings",
          "children": [
            {
              "value": "Settings",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "if TYPE_CHECKING:\n    from backend.integrations.oauth import BaseOAuthHandler",
      "children": [
        {
          "value": "TYPE_CHECKING",
          "children": []
        },
        {
          "value": "from backend.integrations.oauth import BaseOAuthHandler",
          "children": [
            {
              "value": "from backend.integrations.oauth import BaseOAuthHandler",
              "children": [
                {
                  "value": "backend.integrations.oauth",
                  "children": [
                    {
                      "value": "backend",
                      "children": []
                    },
                    {
                      "value": "integrations",
                      "children": []
                    },
                    {
                      "value": "oauth",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "BaseOAuthHandler",
                  "children": [
                    {
                      "value": "BaseOAuthHandler",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "settings = Settings()",
      "children": [
        {
          "value": "settings = Settings()",
          "children": [
            {
              "value": "settings",
              "children": []
            },
            {
              "value": "Settings()",
              "children": [
                {
                  "value": "Settings",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class IntegrationCredentialsManager:\n    \"\"\"\n    Handles the lifecycle of integration credentials.\n    - Automatically refreshes requested credentials if needed.\n    - Uses locking mechanisms to ensure system-wide consistency and\n      prevent invalidation of in-use tokens.\n\n    ### \u26a0\ufe0f Gotcha\n    With `acquire(..)`, credentials can only be in use in one place at a time (e.g. one\n    block execution).\n\n    ### Locking mechanism\n    - Because *getting* credentials can result in a refresh (= *invalidation* +\n      *replacement*) of the stored credentials, *getting* is an operation that\n      potentially requires read/write access.\n    - Checking whether a token has to be refreshed is subject to an additional `refresh`\n      scoped lock to prevent unnecessary sequential refreshes when multiple executions\n      try to access the same credentials simultaneously.\n    - We MUST lock credentials while in use to prevent them from being invalidated while\n      they are in use, e.g. because they are being refreshed by a different part\n      of the system.\n    - The `!time_sensitive` lock in `acquire(..)` is part of a two-tier locking\n      mechanism in which *updating* gets priority over *getting* credentials.\n      This is to prevent a long queue of waiting *get* requests from blocking essential\n      credential refreshes or user-initiated updates.\n\n    It is possible to implement a reader/writer locking system where either multiple\n    readers or a single writer can have simultaneous access, but this would add a lot of\n    complexity to the mechanism. I don't expect the current (\"simple\") mechanism to\n    cause so much latency that it's worth implementing.\n    \"\"\"\n\n    def __init__(self):\n        redis_conn = redis.get_redis()\n        self._locks = RedisKeyedMutex(redis_conn)\n        self.store = IntegrationCredentialsStore()\n\n    def create(self, user_id: str, credentials: Credentials) -> None:\n        return self.store.add_creds(user_id, credentials)\n\n    def exists(self, user_id: str, credentials_id: str) -> bool:\n        return self.store.get_creds_by_id(user_id, credentials_id) is not None\n\n    def get(\n        self, user_id: str, credentials_id: str, lock: bool = True\n    ) -> Credentials | None:\n        credentials = self.store.get_creds_by_id(user_id, credentials_id)\n        if not credentials:\n            return None\n\n        # Refresh OAuth credentials if needed\n        if credentials.type == \"oauth2\" and credentials.access_token_expires_at:\n            logger.debug(\n                f\"Credentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"\n            )\n\n            with self._locked(user_id, credentials_id, \"refresh\"):\n                oauth_handler = _get_provider_oauth_handler(credentials.provider)\n                if oauth_handler.needs_refresh(credentials):\n                    logger.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )\n                    _lock = None\n                    if lock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)\n\n                    fresh_credentials = oauth_handler.refresh_tokens(credentials)\n                    self.store.update_creds(user_id, fresh_credentials)\n                    if _lock and _lock.locked():\n                        _lock.release()\n\n                    credentials = fresh_credentials\n        else:\n            logger.debug(f\"Credentials #{credentials.id} never expire\")\n\n        return credentials\n\n    def acquire(\n        self, user_id: str, credentials_id: str\n    ) -> tuple[Credentials, RedisLock]:\n        \"\"\"\n        \u26a0\ufe0f WARNING: this locks credentials system-wide and blocks both acquiring\n        and updating them elsewhere until the lock is released.\n        See the class docstring for more info.\n        \"\"\"\n        # Use a low-priority (!time_sensitive) locking queue on top of the general lock\n        # to allow priority access for refreshing/updating the tokens.\n        with self._locked(user_id, credentials_id, \"!time_sensitive\"):\n            lock = self._acquire_lock(user_id, credentials_id)\n        credentials = self.get(user_id, credentials_id, lock=False)\n        if not credentials:\n            raise ValueError(\n                f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )\n        return credentials, lock\n\n    def update(self, user_id: str, updated: Credentials) -> None:\n        with self._locked(user_id, updated.id):\n            self.store.update_creds(user_id, updated)\n\n    def delete(self, user_id: str, credentials_id: str) -> None:\n        with self._locked(user_id, credentials_id):\n            self.store.delete_creds_by_id(user_id, credentials_id)\n\n    # -- Locking utilities -- #\n\n    def _acquire_lock(self, user_id: str, credentials_id: str, *args: str) -> RedisLock:\n        key = (\n            f\"user:{user_id}\",\n            f\"credentials:{credentials_id}\",\n            *args,\n        )\n        return self._locks.acquire(key)\n\n    @contextmanager\n    def _locked(self, user_id: str, credentials_id: str, *args: str):\n        lock = self._acquire_lock(user_id, credentials_id, *args)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self._locks.release_all_locks()\n        self.store.locks.release_all_locks()\n\n\ndef _",
      "children": [
        {
          "value": "IntegrationCredentialsManager",
          "children": []
        },
        {
          "value": "\"\"\"\n    Handles the lifecycle of integration credentials.\n    - Automatically refreshes requested credentials if needed.\n    - Uses locking mechanisms to ensure system-wide consistency and\n      prevent invalidation of in-use tokens.\n\n    ### \u26a0\ufe0f Gotcha\n    With `acquire(..)`, credentials can only be in use in one place at a time (e.g. one\n    block execution).\n\n    ### Locking mechanism\n    - Because *getting* credentials can result in a refresh (= *invalidation* +\n      *replacement*) of the stored credentials, *getting* is an operation that\n      potentially requires read/write access.\n    - Checking whether a token has to be refreshed is subject to an additional `refresh`\n      scoped lock to prevent unnecessary sequential refreshes when multiple executions\n      try to access the same credentials simultaneously.\n    - We MUST lock credentials while in use to prevent them from being invalidated while\n      they are in use, e.g. because they are being refreshed by a different part\n      of the system.\n    - The `!time_sensitive` lock in `acquire(..)` is part of a two-tier locking\n      mechanism in which *updating* gets priority over *getting* credentials.\n      This is to prevent a long queue of waiting *get* requests from blocking essential\n      credential refreshes or user-initiated updates.\n\n    It is possible to implement a reader/writer locking system where either multiple\n    readers or a single writer can have simultaneous access, but this would add a lot of\n    complexity to the mechanism. I don't expect the current (\"simple\") mechanism to\n    cause so much latency that it's worth implementing.\n    \"\"\"\n\n    def __init__(self):\n        redis_conn = redis.get_redis()\n        self._locks = RedisKeyedMutex(redis_conn)\n        self.store = IntegrationCredentialsStore()\n\n    def create(self, user_id: str, credentials: Credentials) -> None:\n        return self.store.add_creds(user_id, credentials)\n\n    def exists(self, user_id: str, credentials_id: str) -> bool:\n        return self.store.get_creds_by_id(user_id, credentials_id) is not None\n\n    def get(\n        self, user_id: str, credentials_id: str, lock: bool = True\n    ) -> Credentials | None:\n        credentials = self.store.get_creds_by_id(user_id, credentials_id)\n        if not credentials:\n            return None\n\n        # Refresh OAuth credentials if needed\n        if credentials.type == \"oauth2\" and credentials.access_token_expires_at:\n            logger.debug(\n                f\"Credentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"\n            )\n\n            with self._locked(user_id, credentials_id, \"refresh\"):\n                oauth_handler = _get_provider_oauth_handler(credentials.provider)\n                if oauth_handler.needs_refresh(credentials):\n                    logger.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )\n                    _lock = None\n                    if lock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)\n\n                    fresh_credentials = oauth_handler.refresh_tokens(credentials)\n                    self.store.update_creds(user_id, fresh_credentials)\n                    if _lock and _lock.locked():\n                        _lock.release()\n\n                    credentials = fresh_credentials\n        else:\n            logger.debug(f\"Credentials #{credentials.id} never expire\")\n\n        return credentials\n\n    def acquire(\n        self, user_id: str, credentials_id: str\n    ) -> tuple[Credentials, RedisLock]:\n        \"\"\"\n        \u26a0\ufe0f WARNING: this locks credentials system-wide and blocks both acquiring\n        and updating them elsewhere until the lock is released.\n        See the class docstring for more info.\n        \"\"\"\n        # Use a low-priority (!time_sensitive) locking queue on top of the general lock\n        # to allow priority access for refreshing/updating the tokens.\n        with self._locked(user_id, credentials_id, \"!time_sensitive\"):\n            lock = self._acquire_lock(user_id, credentials_id)\n        credentials = self.get(user_id, credentials_id, lock=False)\n        if not credentials:\n            raise ValueError(\n                f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )\n        return credentials, lock\n\n    def update(self, user_id: str, updated: Credentials) -> None:\n        with self._locked(user_id, updated.id):\n            self.store.update_creds(user_id, updated)\n\n    def delete(self, user_id: str, credentials_id: str) -> None:\n        with self._locked(user_id, credentials_id):\n            self.store.delete_creds_by_id(user_id, credentials_id)\n\n    # -- Locking utilities -- #\n\n    def _acquire_lock(self, user_id: str, credentials_id: str, *args: str) -> RedisLock:\n        key = (\n            f\"user:{user_id}\",\n            f\"credentials:{credentials_id}\",\n            *args,\n        )\n        return self._locks.acquire(key)\n\n    @contextmanager\n    def _locked(self, user_id: str, credentials_id: str, *args: str):\n        lock = self._acquire_lock(user_id, credentials_id, *args)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self._locks.release_all_locks()\n        self.store.locks.release_all_locks()\n\n\ndef _",
          "children": [
            {
              "value": "\"\"\"\n    Handles the lifecycle of integration credentials.\n    - Automatically refreshes requested credentials if needed.\n    - Uses locking mechanisms to ensure system-wide consistency and\n      prevent invalidation of in-use tokens.\n\n    ### \u26a0\ufe0f Gotcha\n    With `acquire(..)`, credentials can only be in use in one place at a time (e.g. one\n    block execution).\n\n    ### Locking mechanism\n    - Because *getting* credentials can result in a refresh (= *invalidation* +\n      *replacement*) of the stored credentials, *getting* is an operation that\n      potentially requires read/write access.\n    - Checking whether a token has to be refreshed is subject to an additional `refresh`\n      scoped lock to prevent unnecessary sequential refreshes when multiple executions\n      try to access the same credentials simultaneously.\n    - We MUST lock credentials while in use to prevent them from being invalidated while\n      they are in use, e.g. because they are being refreshed by a different part\n      of the system.\n    - The `!time_sensitive` lock in `acquire(..)` is part of a two-tier locking\n      mechanism in which *updating* gets priority over *getting* credentials.\n      This is to prevent a long queue of waiting *get* requests from blocking essential\n      credential refreshes or user-initiated updates.\n\n    It is possible to implement a reader/writer locking system where either multiple\n    readers or a single writer can have simultaneous access, but this would add a lot of\n    complexity to the mechanism. I don't expect the current (\"simple\") mechanism to\n    cause so much latency that it's worth implementing.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Handles the lifecycle of integration credentials.\n    - Automatically refreshes requested credentials if needed.\n    - Uses locking mechanisms to ensure system-wide consistency and\n      prevent invalidation of in-use tokens.\n\n    ### \u26a0\ufe0f Gotcha\n    With `acquire(..)`, credentials can only be in use in one place at a time (e.g. one\n    block execution).\n\n    ### Locking mechanism\n    - Because *getting* credentials can result in a refresh (= *invalidation* +\n      *replacement*) of the stored credentials, *getting* is an operation that\n      potentially requires read/write access.\n    - Checking whether a token has to be refreshed is subject to an additional `refresh`\n      scoped lock to prevent unnecessary sequential refreshes when multiple executions\n      try to access the same credentials simultaneously.\n    - We MUST lock credentials while in use to prevent them from being invalidated while\n      they are in use, e.g. because they are being refreshed by a different part\n      of the system.\n    - The `!time_sensitive` lock in `acquire(..)` is part of a two-tier locking\n      mechanism in which *updating* gets priority over *getting* credentials.\n      This is to prevent a long queue of waiting *get* requests from blocking essential\n      credential refreshes or user-initiated updates.\n\n    It is possible to implement a reader/writer locking system where either multiple\n    readers or a single writer can have simultaneous access, but this would add a lot of\n    complexity to the mechanism. I don't expect the current (\"simple\") mechanism to\n    cause so much latency that it's worth implementing.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Handles the lifecycle of integration credentials.\n    - Automatically refreshes requested credentials if needed.\n    - Uses locking mechanisms to ensure system-wide consistency and\n      prevent invalidation of in-use tokens.\n\n    ### \u26a0\ufe0f Gotcha\n    With `acquire(..)`, credentials can only be in use in one place at a time (e.g. one\n    block execution).\n\n    ### Locking mechanism\n    - Because *getting* credentials can result in a refresh (= *invalidation* +\n      *replacement*) of the stored credentials, *getting* is an operation that\n      potentially requires read/write access.\n    - Checking whether a token has to be refreshed is subject to an additional `refresh`\n      scoped lock to prevent unnecessary sequential refreshes when multiple executions\n      try to access the same credentials simultaneously.\n    - We MUST lock credentials while in use to prevent them from being invalidated while\n      they are in use, e.g. because they are being refreshed by a different part\n      of the system.\n    - The `!time_sensitive` lock in `acquire(..)` is part of a two-tier locking\n      mechanism in which *updating* gets priority over *getting* credentials.\n      This is to prevent a long queue of waiting *get* requests from blocking essential\n      credential refreshes or user-initiated updates.\n\n    It is possible to implement a reader/writer locking system where either multiple\n    readers or a single writer can have simultaneous access, but this would add a lot of\n    complexity to the mechanism. I don't expect the current (\"simple\") mechanism to\n    cause so much latency that it's worth implementing.\n    \"\"\"",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "__init__(self):\n        redis_conn = redis.get_redis()\n        self._locks = RedisKeyedMutex(redis_conn)\n        self.store = IntegrationCredentialsStore()",
              "children": [
                {
                  "value": "it__(sel",
                  "children": []
                },
                {
                  "value": "f):",
                  "children": [
                    {
                      "value": "):",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "s_conn = redis.get_redis()\n        self._locks = RedisKeyedMutex(redis_conn)\n        self.store = IntegrationCredentialsStore()",
                  "children": [
                    {
                      "value": "s_conn = redis.get_redis()",
                      "children": [
                        {
                          "value": "s_conn = redis.get_redis()",
                          "children": [
                            {
                              "value": "s_conn = r",
                              "children": []
                            },
                            {
                              "value": "s.get_redis()",
                              "children": [
                                {
                                  "value": "s.get_redis()",
                                  "children": [
                                    {
                                      "value": "s.get",
                                      "children": []
                                    },
                                    {
                                      "value": "redis()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "._locks = RedisKeyedMutex(redis_conn)",
                      "children": [
                        {
                          "value": "._locks = RedisKeyedMutex(redis_conn)",
                          "children": [
                            {
                              "value": "._locks = R",
                              "children": [
                                {
                                  "value": "._lo",
                                  "children": []
                                },
                                {
                                  "value": "ks = R",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "sKeyedMutex(redis_conn)",
                              "children": [
                                {
                                  "value": "sKeyedMutex(red",
                                  "children": []
                                },
                                {
                                  "value": "is_conn)",
                                  "children": [
                                    {
                                      "value": "s_conn)",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": ".store = IntegrationCredentialsStore()",
                      "children": [
                        {
                          "value": ".store = IntegrationCredentialsStore()",
                          "children": [
                            {
                              "value": ".store = I",
                              "children": [
                                {
                                  "value": ".sto",
                                  "children": []
                                },
                                {
                                  "value": "e = I",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "grationCredentialsStore()",
                              "children": [
                                {
                                  "value": "grationCredentialsStore()",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "create(self, user_id: str, credentials: Credentials) -> None:\n        return self.store.add_creds(user_id, credentials)",
              "children": [
                {
                  "value": "te(sel",
                  "children": []
                },
                {
                  "value": "f, user_id: str, credentials: Credentials) ->",
                  "children": [
                    {
                      "value": ", us",
                      "children": []
                    },
                    {
                      "value": "_id: str, cr",
                      "children": [
                        {
                          "value": "_id: st",
                          "children": []
                        },
                        {
                          "value": "cr",
                          "children": [
                            {
                              "value": "cr",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "entials: Credentials) ->",
                      "children": [
                        {
                          "value": "entials: Cr",
                          "children": []
                        },
                        {
                          "value": "entials) ->",
                          "children": [
                            {
                              "value": "entials) ->",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": ":",
                  "children": [
                    {
                      "value": ":",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "rn self.store.add_creds(user_id, credentials)",
                  "children": [
                    {
                      "value": "rn self.store.add_creds(user_id, credentials)",
                      "children": [
                        {
                          "value": ".store.add_creds(user_id, credentials)",
                          "children": [
                            {
                              "value": ".store.add_creds(use",
                              "children": [
                                {
                                  "value": ".store.add",
                                  "children": [
                                    {
                                      "value": ".sto",
                                      "children": []
                                    },
                                    {
                                      "value": "e.add",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "creds(use",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "r_id, credentials)",
                              "children": [
                                {
                                  "value": "_id, cr",
                                  "children": []
                                },
                                {
                                  "value": "entials)",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "exists(self, user_id: str, credentials_id: str) -> bool:\n        return self.store.get_creds_by_id(user_id, credentials_id) is not None",
              "children": [
                {
                  "value": "ts(sel",
                  "children": []
                },
                {
                  "value": "f, user_id: str, credentials_id: str) ->",
                  "children": [
                    {
                      "value": ", us",
                      "children": []
                    },
                    {
                      "value": "_id: str, cr",
                      "children": [
                        {
                          "value": "_id: st",
                          "children": []
                        },
                        {
                          "value": "cr",
                          "children": [
                            {
                              "value": "cr",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "entials_id: str) ->",
                      "children": [
                        {
                          "value": "entials_id: st",
                          "children": []
                        },
                        {
                          "value": "->",
                          "children": [
                            {
                              "value": "->",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": ":",
                  "children": [
                    {
                      "value": ":",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "rn self.store.get_creds_by_id(user_id, credentials_id) is not None",
                  "children": [
                    {
                      "value": "rn self.store.get_creds_by_id(user_id, credentials_id) is not None",
                      "children": [
                        {
                          "value": ".store.get_creds_by_id(user_id, credentials_id) is not None",
                          "children": [
                            {
                              "value": ".store.get_creds_by_id(user_id, credentials_id) is",
                              "children": [
                                {
                                  "value": ".store.get_creds_by_id(use",
                                  "children": [
                                    {
                                      "value": ".store.get",
                                      "children": [
                                        {
                                          "value": ".sto",
                                          "children": []
                                        },
                                        {
                                          "value": "e.get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "creds_by_id(use",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "r_id, credentials_id) is",
                                  "children": [
                                    {
                                      "value": "_id, cr",
                                      "children": []
                                    },
                                    {
                                      "value": "entials_id) is",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "get(\n        self, user_id: str, credentials_id: str, lock: bool = True\n    ) -> Credentials | None:\n        credentials = self.store.get_creds_by_id(user_id, credentials_id)\n        if not credentials:\n            return None\n\n        # Refresh OAuth credentials if needed\n        if credentials.type == \"oauth2\" and credentials.access_token_expires_at:\n            logger.debug(\n                f\"Credentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"\n            )\n\n            with self._locked(user_id, credentials_id, \"refresh\"):\n                oauth_handler = _get_provider_oauth_handler(credentials.provider)\n                if oauth_handler.needs_refresh(credentials):\n                    logger.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )\n                    _lock = None\n                    if lock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)\n\n                    fresh_credentials = oauth_handler.refresh_tokens(credentials)\n                    self.store.update_creds(user_id, fresh_credentials)\n                    if _lock and _lock.locked():\n                        _lock.release()\n\n                    credentials = fresh_credentials\n        else:\n            logger.debug(f\"Credentials #{credentials.id} never expire\")\n\n        return credentials",
              "children": [
                {
                  "value": "",
                  "children": []
                },
                {
                  "value": "self, user_id: str, credentials_id: str, lock: bool = True\n    ) ->",
                  "children": [
                    {
                      "value": ", us",
                      "children": []
                    },
                    {
                      "value": "_id: str, cr",
                      "children": [
                        {
                          "value": "_id: st",
                          "children": []
                        },
                        {
                          "value": "cr",
                          "children": [
                            {
                              "value": "cr",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "entials_id: str, lo",
                      "children": [
                        {
                          "value": "entials_id: st",
                          "children": []
                        },
                        {
                          "value": "lo",
                          "children": [
                            {
                              "value": "lo",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": ": bool = True",
                      "children": [
                        {
                          "value": ": bo",
                          "children": []
                        },
                        {
                          "value": "= T",
                          "children": [
                            {
                              "value": "= T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "entials | None:",
                  "children": [
                    {
                      "value": "entials | None:",
                      "children": [
                        {
                          "value": "entials | N",
                          "children": []
                        },
                        {
                          "value": ":",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "entials = self.store.get_creds_by_id(user_id, credentials_id)\n        if not credentials:\n            return None\n\n        # Refresh OAuth credentials if needed\n        if credentials.type == \"oauth2\" and credentials.access_token_expires_at:\n            logger.debug(\n                f\"Credentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"\n            )\n\n            with self._locked(user_id, credentials_id, \"refresh\"):\n                oauth_handler = _get_provider_oauth_handler(credentials.provider)\n                if oauth_handler.needs_refresh(credentials):\n                    logger.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )\n                    _lock = None\n                    if lock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)\n\n                    fresh_credentials = oauth_handler.refresh_tokens(credentials)\n                    self.store.update_creds(user_id, fresh_credentials)\n                    if _lock and _lock.locked():\n                        _lock.release()\n\n                    credentials = fresh_credentials\n        else:\n            logger.debug(f\"Credentials #{credentials.id} never expire\")\n\n        return credentials",
                  "children": [
                    {
                      "value": "entials = self.store.get_creds_by_id(user_id, credentials_id)",
                      "children": [
                        {
                          "value": "entials = self.store.get_creds_by_id(user_id, credentials_id)",
                          "children": [
                            {
                              "value": "entials = s",
                              "children": []
                            },
                            {
                              "value": ".store.get_creds_by_id(user_id, credentials_id)",
                              "children": [
                                {
                                  "value": ".store.get_creds_by_id(use",
                                  "children": [
                                    {
                                      "value": ".store.get",
                                      "children": [
                                        {
                                          "value": ".sto",
                                          "children": []
                                        },
                                        {
                                          "value": "e.get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "creds_by_id(use",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "r_id, credentials_id)",
                                  "children": [
                                    {
                                      "value": "_id, cr",
                                      "children": []
                                    },
                                    {
                                      "value": "entials_id)",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ot credentials:\n            return None",
                      "children": [
                        {
                          "value": "credentials:",
                          "children": [
                            {
                              "value": "entials:",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "rn None",
                          "children": [
                            {
                              "value": "rn None",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "fresh OAuth credentials if needed",
                      "children": []
                    },
                    {
                      "value": "redentials.type == \"oauth2\" and credentials.access_token_expires_at:\n            logger.debug(\n                f\"Credentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"\n            )\n\n            with self._locked(user_id, credentials_id, \"refresh\"):\n                oauth_handler = _get_provider_oauth_handler(credentials.provider)\n                if oauth_handler.needs_refresh(credentials):\n                    logger.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )\n                    _lock = None\n                    if lock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)\n\n                    fresh_credentials = oauth_handler.refresh_tokens(credentials)\n                    self.store.update_creds(user_id, fresh_credentials)\n                    if _lock and _lock.locked():\n                        _lock.release()\n\n                    credentials = fresh_credentials\n        else:\n            logger.debug(f\"Credentials #{credentials.id} never expire\")",
                      "children": [
                        {
                          "value": "entials.type == \"oauth2\" and credentials.access_token_expires_at:",
                          "children": [
                            {
                              "value": "entials.type == \"oauth2\" and",
                              "children": [
                                {
                                  "value": "entials.type ==",
                                  "children": [
                                    {
                                      "value": "entials.typ",
                                      "children": []
                                    },
                                    {
                                      "value": "==",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "th2\" and",
                                  "children": [
                                    {
                                      "value": "t",
                                      "children": []
                                    },
                                    {
                                      "value": "h2\" an",
                                      "children": []
                                    },
                                    {
                                      "value": "d",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "entials.access_token_expires_at:",
                              "children": [
                                {
                                  "value": "entials.acc",
                                  "children": []
                                },
                                {
                                  "value": "ss_token_expires_at:",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "er.debug(\n                f\"Credentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"\n            )\n\n            with self._locked(user_id, credentials_id, \"refresh\"):\n                oauth_handler = _get_provider_oauth_handler(credentials.provider)\n                if oauth_handler.needs_refresh(credentials):\n                    logger.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )\n                    _lock = None\n                    if lock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)\n\n                    fresh_credentials = oauth_handler.refresh_tokens(credentials)\n                    self.store.update_creds(user_id, fresh_credentials)\n                    if _lock and _lock.locked():\n                        _lock.release()\n\n                    credentials = fresh_credentials",
                          "children": [
                            {
                              "value": "er.debug(\n                f\"Credentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"\n            )",
                              "children": [
                                {
                                  "value": "er.debug(\n                f\"Credentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"\n            )",
                                  "children": [
                                    {
                                      "value": "er.debug(",
                                      "children": [
                                        {
                                          "value": "er.deb",
                                          "children": []
                                        },
                                        {
                                          "value": "g(",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "f\"Credentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"\n            )",
                                      "children": [
                                        {
                                          "value": "edentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"",
                                          "children": [
                                            {
                                              "value": "edentials #{credentials.id} expire at \"",
                                              "children": [
                                                {
                                                  "value": "ed",
                                                  "children": []
                                                },
                                                {
                                                  "value": "entials #{cre",
                                                  "children": []
                                                },
                                                {
                                                  "value": "dentials.id} exp",
                                                  "children": [
                                                    {
                                                      "value": "entials.id} ex",
                                                      "children": [
                                                        {
                                                          "value": "entials.id}",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ex",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "ire at \"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "atetime.fromtimestamp(credentials.access_token_expires_at)}; \"",
                                              "children": [
                                                {
                                                  "value": "at",
                                                  "children": []
                                                },
                                                {
                                                  "value": "etime.fromtimestamp(credentials.access_token_expires_at)}; \"",
                                                  "children": [
                                                    {
                                                      "value": "time.fromtimestamp(credentials.access_token_expires_at)}; \"",
                                                      "children": [
                                                        {
                                                          "value": "time.fromtimestamp(cre",
                                                          "children": [
                                                            {
                                                              "value": "time.fro",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "timestamp(cre",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "dentials.access_token_expires_at)}; \"",
                                                          "children": [
                                                            {
                                                              "value": "entials.access_token_expires_at)};",
                                                              "children": [
                                                                {
                                                                  "value": "entials.acc",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "ss_token_expires_at)};",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "rrent time is {datetime.now()}\"",
                                              "children": [
                                                {
                                                  "value": "rr",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ent time is {dat",
                                                  "children": []
                                                },
                                                {
                                                  "value": "etime.now()}\"",
                                                  "children": [
                                                    {
                                                      "value": "time.now()}\"",
                                                      "children": [
                                                        {
                                                          "value": "time.now()}\"",
                                                          "children": [
                                                            {
                                                              "value": "time.now",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": ")}\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "self._locked(user_id, credentials_id, \"refresh\"):\n                oauth_handler = _get_provider_oauth_handler(credentials.provider)\n                if oauth_handler.needs_refresh(credentials):\n                    logger.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )\n                    _lock = None\n                    if lock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)\n\n                    fresh_credentials = oauth_handler.refresh_tokens(credentials)\n                    self.store.update_creds(user_id, fresh_credentials)\n                    if _lock and _lock.locked():\n                        _lock.release()\n\n                    credentials = fresh_credentials",
                              "children": [
                                {
                                  "value": "._locked(user_id, credentials_id, \"refresh\"):",
                                  "children": [
                                    {
                                      "value": "._locked(user_id, credentials_id, \"refresh\"):",
                                      "children": [
                                        {
                                          "value": "._locked(user_id, credentials_id, \"refresh\"):",
                                          "children": [
                                            {
                                              "value": "._locked(use",
                                              "children": [
                                                {
                                                  "value": "._lo",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ked(use",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "r_id, credentials_id, \"refresh\"):",
                                              "children": [
                                                {
                                                  "value": "_id, cr",
                                                  "children": []
                                                },
                                                {
                                                  "value": "entials_id, \"r",
                                                  "children": []
                                                },
                                                {
                                                  "value": "resh\"):",
                                                  "children": [
                                                    {
                                                      "value": "r",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "esh\"):",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "h_handler = _get_provider_oauth_handler(credentials.provider)\n                if oauth_handler.needs_refresh(credentials):\n                    logger.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )\n                    _lock = None\n                    if lock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)\n\n                    fresh_credentials = oauth_handler.refresh_tokens(credentials)\n                    self.store.update_creds(user_id, fresh_credentials)\n                    if _lock and _lock.locked():\n                        _lock.release()\n\n                    credentials = fresh_credentials",
                                  "children": [
                                    {
                                      "value": "h_handler = _get_provider_oauth_handler(credentials.provider)",
                                      "children": [
                                        {
                                          "value": "h_handler = _get_provider_oauth_handler(credentials.provider)",
                                          "children": [
                                            {
                                              "value": "h_handler = _",
                                              "children": []
                                            },
                                            {
                                              "value": "_provider_oauth_handler(credentials.provider)",
                                              "children": [
                                                {
                                                  "value": "_provider_oauth_handler(cre",
                                                  "children": []
                                                },
                                                {
                                                  "value": "dentials.provider)",
                                                  "children": [
                                                    {
                                                      "value": "entials.provider)",
                                                      "children": [
                                                        {
                                                          "value": "entials.pro",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ider)",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "auth_handler.needs_refresh(credentials):\n                    logger.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )\n                    _lock = None\n                    if lock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)\n\n                    fresh_credentials = oauth_handler.refresh_tokens(credentials)\n                    self.store.update_creds(user_id, fresh_credentials)\n                    if _lock and _lock.locked():\n                        _lock.release()\n\n                    credentials = fresh_credentials",
                                      "children": [
                                        {
                                          "value": "h_handler.needs_refresh(credentials):",
                                          "children": [
                                            {
                                              "value": "h_handler.needs_refresh(cre",
                                              "children": [
                                                {
                                                  "value": "h_handler.nee",
                                                  "children": []
                                                },
                                                {
                                                  "value": "s_refresh(cre",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "dentials):",
                                              "children": [
                                                {
                                                  "value": "entials):",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "er.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )\n                    _lock = None\n                    if lock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)\n\n                    fresh_credentials = oauth_handler.refresh_tokens(credentials)\n                    self.store.update_creds(user_id, fresh_credentials)\n                    if _lock and _lock.locked():\n                        _lock.release()\n\n                    credentials = fresh_credentials",
                                          "children": [
                                            {
                                              "value": "er.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "er.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "er.debug(",
                                                      "children": [
                                                        {
                                                          "value": "er.deb",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "g(",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "freshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"",
                                                          "children": [
                                                            {
                                                              "value": "freshing '{credentials.provider}' \"",
                                                              "children": [
                                                                {
                                                                  "value": "fr",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "eshing '{cre",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "dentials.provider}' \"",
                                                                  "children": [
                                                                    {
                                                                      "value": "entials.provider}' \"",
                                                                      "children": [
                                                                        {
                                                                          "value": "entials.pro",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "ider}' \"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "edentials #{credentials.id}\"",
                                                              "children": [
                                                                {
                                                                  "value": "ed",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "entials #{cre",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "dentials.id}\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "entials.id}\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "entials.id}",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "k = None",
                                              "children": [
                                                {
                                                  "value": "k = None",
                                                  "children": [
                                                    {
                                                      "value": "k = N",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ock:\n                        # Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)",
                                              "children": [
                                                {
                                                  "value": ":",
                                                  "children": []
                                                },
                                                {
                                                  "value": "it until the credentials are no longer in use anywhere",
                                                  "children": []
                                                },
                                                {
                                                  "value": "k = self._acquire_lock(user_id, credentials_id)",
                                                  "children": [
                                                    {
                                                      "value": "k = self._acquire_lock(user_id, credentials_id)",
                                                      "children": [
                                                        {
                                                          "value": "k = self._acquire_lock(user_id, credentials_id)",
                                                          "children": [
                                                            {
                                                              "value": "k = s",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "._acquire_lock(user_id, credentials_id)",
                                                              "children": [
                                                                {
                                                                  "value": "._acquire_lock(use",
                                                                  "children": [
                                                                    {
                                                                      "value": "._ac",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "uire_lock(use",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "r_id, credentials_id)",
                                                                  "children": [
                                                                    {
                                                                      "value": "_id, cr",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "entials_id)",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "h_credentials = oauth_handler.refresh_tokens(credentials)",
                                              "children": [
                                                {
                                                  "value": "h_credentials = oauth_handler.refresh_tokens(credentials)",
                                                  "children": [
                                                    {
                                                      "value": "h_credentials = o",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "h_handler.refresh_tokens(credentials)",
                                                      "children": [
                                                        {
                                                          "value": "h_handler.refresh_tokens(cre",
                                                          "children": [
                                                            {
                                                              "value": "h_handler.ref",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "esh_tokens(cre",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "dentials)",
                                                          "children": [
                                                            {
                                                              "value": "entials)",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": ".store.update_creds(user_id, fresh_credentials)",
                                              "children": [
                                                {
                                                  "value": ".store.update_creds(user_id, fresh_credentials)",
                                                  "children": [
                                                    {
                                                      "value": ".store.update_creds(use",
                                                      "children": [
                                                        {
                                                          "value": ".store.upd",
                                                          "children": [
                                                            {
                                                              "value": ".sto",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "e.upd",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "te_creds(use",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "r_id, fresh_credentials)",
                                                      "children": [
                                                        {
                                                          "value": "_id, fr",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "h_credentials)",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "lock and _lock.locked():\n                        _lock.release()",
                                              "children": [
                                                {
                                                  "value": "k and _lock.locked():",
                                                  "children": [
                                                    {
                                                      "value": "k and",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "k.locked():",
                                                      "children": [
                                                        {
                                                          "value": "k.locked():",
                                                          "children": [
                                                            {
                                                              "value": "k.loc",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "ed():",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "k.release()",
                                                  "children": [
                                                    {
                                                      "value": "k.release()",
                                                      "children": [
                                                        {
                                                          "value": "k.release()",
                                                          "children": [
                                                            {
                                                              "value": "k.release()",
                                                              "children": [
                                                                {
                                                                  "value": "k.rel",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "ase()",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "entials = fresh_credentials",
                                              "children": [
                                                {
                                                  "value": "entials = fresh_credentials",
                                                  "children": [
                                                    {
                                                      "value": "entials = f",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "h_credentials",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": ":\n            logger.debug(f\"Credentials #{credentials.id} never expire\")",
                          "children": [
                            {
                              "value": "er.debug(f\"Credentials #{credentials.id} never expire\")",
                              "children": [
                                {
                                  "value": "er.debug(f\"Credentials #{credentials.id} never expire\")",
                                  "children": [
                                    {
                                      "value": "er.debug(f\"Credentials #{credentials.id} never expire\")",
                                      "children": [
                                        {
                                          "value": "er.debug(f\"C",
                                          "children": [
                                            {
                                              "value": "er.deb",
                                              "children": []
                                            },
                                            {
                                              "value": "g(f\"C",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "redentials #{credentials.id} never expire\")",
                                          "children": [
                                            {
                                              "value": "edentials #{credentials.id} never expire\")",
                                              "children": [
                                                {
                                                  "value": "ed",
                                                  "children": []
                                                },
                                                {
                                                  "value": "entials #{cre",
                                                  "children": []
                                                },
                                                {
                                                  "value": "dentials.id} nev",
                                                  "children": [
                                                    {
                                                      "value": "entials.id} ne",
                                                      "children": [
                                                        {
                                                          "value": "entials.id}",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ne",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "er expire\")",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "rn credentials",
                      "children": [
                        {
                          "value": "entials",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "acquire(\n        self, user_id: str, credentials_id: str\n    ) -> tuple[Credentials, RedisLock]:\n        \"\"\"\n        \u26a0\ufe0f WARNING: this locks credentials system-wide and blocks both acquiring\n        and updating them elsewhere until the lock is released.\n        See the class docstring for more info.\n        \"\"\"\n        # Use a low-priority (!time_sensitive) locking queue on top of the general lock\n        # to allow priority access for refreshing/updating the tokens.\n        with self._locked(user_id, credentials_id, \"!time_sensitive\"):\n            lock = self._acquire_lock(user_id, credentials_id)\n        credentials = self.get(user_id, credentials_id, lock=False)\n        if not credentials:\n            raise ValueError(\n                f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )\n        return credentials, lock\n\n    de",
              "children": [
                {
                  "value": "ire(",
                  "children": []
                },
                {
                  "value": "self, user_id: str, credentials_id: str\n    ) ->",
                  "children": [
                    {
                      "value": ", us",
                      "children": []
                    },
                    {
                      "value": "_id: str, cr",
                      "children": [
                        {
                          "value": "_id: st",
                          "children": []
                        },
                        {
                          "value": "cr",
                          "children": [
                            {
                              "value": "cr",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "entials_id: str",
                      "children": [
                        {
                          "value": "entials_id: st",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": [
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "e[Credentials, RedisLock]:",
                  "children": [
                    {
                      "value": "e[Credentials, RedisLock]:",
                      "children": [
                        {
                          "value": "e[Cre",
                          "children": []
                        },
                        {
                          "value": "dentials, RedisLock]:",
                          "children": [
                            {
                              "value": "entials, Re",
                              "children": [
                                {
                                  "value": "entials, Re",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "sLock]:",
                              "children": [
                                {
                                  "value": "sLock]:",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\u26a0\ufe0f WARNING: this locks credentials system-wide and blocks both acquiring\n        and updating them elsewhere until the lock is released.\n        See the class docstring for more info.\n        \"\"\"\n        # Use a low-priority (!time_sensitive) locking queue on top of the general lock\n        # to allow priority access for refreshing/updating the tokens.\n        with self._locked(user_id, credentials_id, \"!time_sensitive\"):\n            lock = self._acquire_lock(user_id, credentials_id)\n        credentials = self.get(user_id, credentials_id, lock=False)\n        if not credentials:\n            raise ValueError(\n                f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )\n        return credentials, lock\n\n    de",
                  "children": [
                    {
                      "value": "\u26a0\ufe0f WARNING: this locks credentials system-wide and blocks both acquiring\n        and updating them elsewhere until the lock is released.\n        See the class docstring for more info.\n        \"\"\"",
                      "children": [
                        {
                          "value": "\u26a0\ufe0f WARNING: this locks credentials system-wide and blocks both acquiring\n        and updating them elsewhere until the lock is released.\n        See the class docstring for more info.\n        \"\"\"",
                          "children": [
                            {
                              "value": "",
                              "children": []
                            },
                            {
                              "value": "\u26a0\ufe0f WARNING: this locks credentials system-wide and blocks both acquiring\n        and updating them elsewhere until the lock is released.\n        See the class docstring for more info.\n        \"\"\"",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "low-priority (!time_sensitive) locking queue on top of the general lock",
                      "children": []
                    },
                    {
                      "value": "ow priority access for refreshing/updating the tokens.",
                      "children": []
                    },
                    {
                      "value": "f._locked(user_id, credentials_id, \"!time_sensitive\"):\n            lock = self._acquire_lock(user_id, credentials_id)",
                      "children": [
                        {
                          "value": "cked(user_id, credentials_id, \"!time_sensitive\"):",
                          "children": [
                            {
                              "value": "cked(user_id, credentials_id, \"!time_sensitive\"):",
                              "children": [
                                {
                                  "value": "cked(user_id, credentials_id, \"!time_sensitive\"):",
                                  "children": [
                                    {
                                      "value": "cked(user_id",
                                      "children": [
                                        {
                                          "value": "cked",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ", credentials_id, \"!time_sensitive\"):",
                                      "children": [
                                        {
                                          "value": "creden",
                                          "children": []
                                        },
                                        {
                                          "value": "als_id, \"!time",
                                          "children": []
                                        },
                                        {
                                          "value": "ensitive\"):",
                                          "children": [
                                            {
                                              "value": "e",
                                              "children": []
                                            },
                                            {
                                              "value": "nsitive\"):",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elf._acquire_lock(user_id, credentials_id)",
                          "children": [
                            {
                              "value": "elf._acquire_lock(user_id, credentials_id)",
                              "children": [
                                {
                                  "value": "elf._acquire_lock(user_id, credentials_id)",
                                  "children": [
                                    {
                                      "value": "elf.",
                                      "children": []
                                    },
                                    {
                                      "value": "quire_lock(user_id, credentials_id)",
                                      "children": [
                                        {
                                          "value": "quire_lock(user_id",
                                          "children": [
                                            {
                                              "value": "quir",
                                              "children": []
                                            },
                                            {
                                              "value": "_lock(user_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": ", credentials_id)",
                                          "children": [
                                            {
                                              "value": "creden",
                                              "children": []
                                            },
                                            {
                                              "value": "als_id)",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "als = self.get(user_id, credentials_id, lock=False)",
                      "children": [
                        {
                          "value": "als = self.get(user_id, credentials_id, lock=False)",
                          "children": [
                            {
                              "value": "als = self.",
                              "children": []
                            },
                            {
                              "value": "(user_id, credentials_id, lock=False)",
                              "children": [
                                {
                                  "value": "(user_id",
                                  "children": [
                                    {
                                      "value": "(use",
                                      "children": []
                                    },
                                    {
                                      "value": "_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": ", credentials_id, lock=False)",
                                  "children": [
                                    {
                                      "value": "creden",
                                      "children": []
                                    },
                                    {
                                      "value": "als_id, lock=F",
                                      "children": []
                                    },
                                    {
                                      "value": "se)",
                                      "children": [
                                        {
                                          "value": "se)",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "redentials:\n            raise ValueError(\n                f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )",
                      "children": [
                        {
                          "value": "entials:",
                          "children": [
                            {
                              "value": "als:",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "lueError(\n                f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )",
                          "children": [
                            {
                              "value": "lueError(\n                f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )",
                              "children": [
                                {
                                  "value": "or(\n                f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )",
                                  "children": [
                                    {
                                      "value": "or(",
                                      "children": []
                                    },
                                    {
                                      "value": "f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )",
                                      "children": [
                                        {
                                          "value": "tials #{credentials_id} for user #{user_id} not found\"",
                                          "children": [
                                            {
                                              "value": "ti",
                                              "children": []
                                            },
                                            {
                                              "value": "als #{credent",
                                              "children": []
                                            },
                                            {
                                              "value": "ials_id} for use",
                                              "children": [
                                                {
                                                  "value": "als_id} for us",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "r #{user_id",
                                              "children": []
                                            },
                                            {
                                              "value": "} not fou",
                                              "children": [
                                                {
                                                  "value": "not fo",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "nd\"",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "redentials, lock\n\n    de",
                      "children": [
                        {
                          "value": "als, lock\n\n    de",
                          "children": [
                            {
                              "value": "als, lock",
                              "children": []
                            },
                            {
                              "value": "de",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "te(self, user_id: str, updated: Credentials) -> None:\n        with self._locked(user_id, updated.id):\n            self.store.update_creds(user_id, updated)\n\n    de",
              "children": [
                {
                  "value": "elf, u",
                  "children": []
                },
                {
                  "value": "ser_id: str, updated: Credentials) -> None",
                  "children": [
                    {
                      "value": "er_i",
                      "children": []
                    },
                    {
                      "value": "str, update",
                      "children": [
                        {
                          "value": "str, u",
                          "children": []
                        },
                        {
                          "value": "ate",
                          "children": [
                            {
                              "value": "ate",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "Credentials) -> Non",
                      "children": [
                        {
                          "value": "Creden",
                          "children": []
                        },
                        {
                          "value": "als) -> Non",
                          "children": [
                            {
                              "value": "als) -> Non",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "f._locked(user_id, updated.id):\n            self.store.update_creds(user_id, updated)\n\n    de",
                  "children": [
                    {
                      "value": "f._locked(user_id, updated.id):\n            self.store.update_creds(user_id, updated)\n\n    de",
                      "children": [
                        {
                          "value": "cked(user_id, updated.id):",
                          "children": [
                            {
                              "value": "cked(user_id, updated.id):",
                              "children": [
                                {
                                  "value": "cked(user_id, updated.id):",
                                  "children": [
                                    {
                                      "value": "cked(user_id",
                                      "children": [
                                        {
                                          "value": "cked",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ", updated.id):",
                                      "children": [
                                        {
                                          "value": "update",
                                          "children": []
                                        },
                                        {
                                          "value": "id):",
                                          "children": [
                                            {
                                              "value": "id):",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "re.update_creds(user_id, updated)\n\n    de",
                          "children": [
                            {
                              "value": "re.update_creds(user_id, updated)\n\n    de",
                              "children": [
                                {
                                  "value": "re.update_creds(user_id, updated)\n\n    de",
                                  "children": [
                                    {
                                      "value": "re.update_creds(user_id",
                                      "children": [
                                        {
                                          "value": "re.update_",
                                          "children": [
                                            {
                                              "value": "re.u",
                                              "children": []
                                            },
                                            {
                                              "value": "date_",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "reds(user_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ", updated)\n\n    de",
                                      "children": [
                                        {
                                          "value": "update",
                                          "children": []
                                        },
                                        {
                                          "value": "d",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "te(self, user_id: str, credentials_id: str) -> None:\n        with self._locked(user_id, credentials_id):\n            self.store.delete_creds_by_id(user_id, credentials_id)\n\n    #",
              "children": [
                {
                  "value": "elf, u",
                  "children": []
                },
                {
                  "value": "ser_id: str, credentials_id: str) -> None",
                  "children": [
                    {
                      "value": "er_i",
                      "children": []
                    },
                    {
                      "value": "str, creden",
                      "children": [
                        {
                          "value": "str, c",
                          "children": []
                        },
                        {
                          "value": "den",
                          "children": [
                            {
                              "value": "den",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "als_id: str) -> Non",
                      "children": [
                        {
                          "value": "als_id: str) -",
                          "children": []
                        },
                        {
                          "value": "Non",
                          "children": [
                            {
                              "value": "Non",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "f._locked(user_id, credentials_id):\n            self.store.delete_creds_by_id(user_id, credentials_id)\n\n    #",
                  "children": [
                    {
                      "value": "f._locked(user_id, credentials_id):\n            self.store.delete_creds_by_id(user_id, credentials_id)\n\n    #",
                      "children": [
                        {
                          "value": "cked(user_id, credentials_id):",
                          "children": [
                            {
                              "value": "cked(user_id, credentials_id):",
                              "children": [
                                {
                                  "value": "cked(user_id, credentials_id):",
                                  "children": [
                                    {
                                      "value": "cked(user_id",
                                      "children": [
                                        {
                                          "value": "cked",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ", credentials_id):",
                                      "children": [
                                        {
                                          "value": "creden",
                                          "children": []
                                        },
                                        {
                                          "value": "als_id):",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "re.delete_creds_by_id(user_id, credentials_id)\n\n    #",
                          "children": [
                            {
                              "value": "re.delete_creds_by_id(user_id, credentials_id)\n\n    #",
                              "children": [
                                {
                                  "value": "re.delete_creds_by_id(user_id, credentials_id)\n\n    #",
                                  "children": [
                                    {
                                      "value": "re.delete_creds_by_id(user_id",
                                      "children": [
                                        {
                                          "value": "re.delete_",
                                          "children": [
                                            {
                                              "value": "re.d",
                                              "children": []
                                            },
                                            {
                                              "value": "lete_",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "reds_by_id(user_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ", credentials_id)\n\n    #",
                                      "children": [
                                        {
                                          "value": "creden",
                                          "children": []
                                        },
                                        {
                                          "value": "als_id)\n\n    #",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "king utilities -- #\n\n    de",
              "children": []
            },
            {
              "value": "uire_lock(self, user_id: str, credentials_id: str, *args: str) -> RedisLock:\n        key = (\n            f\"user:{user_id}\",\n            f\"credentials:{credentials_id}\",\n            *args,\n        )\n        return self._locks.acquire(key)\n\n    @c",
              "children": [
                {
                  "value": "_lock(self, u",
                  "children": []
                },
                {
                  "value": "ser_id: str, credentials_id: str, *args: str) -> Redi",
                  "children": [
                    {
                      "value": "er_i",
                      "children": []
                    },
                    {
                      "value": "str, creden",
                      "children": [
                        {
                          "value": "str, c",
                          "children": []
                        },
                        {
                          "value": "den",
                          "children": [
                            {
                              "value": "den",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "als_id: str, *args:",
                      "children": [
                        {
                          "value": "als_id: str, *",
                          "children": []
                        },
                        {
                          "value": "gs:",
                          "children": [
                            {
                              "value": "gs:",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tr) -> Red",
                      "children": [
                        {
                          "value": "tr) -",
                          "children": [
                            {
                              "value": "r) -",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "Red",
                          "children": [
                            {
                              "value": "Red",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "k:",
                  "children": [
                    {
                      "value": "k:",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "f\"user:{user_id}\",\n            f\"credentials:{credentials_id}\",\n            *args,\n        )\n        return self._locks.acquire(key)\n\n    @c",
                  "children": [
                    {
                      "value": "f\"user:{user_id}\",\n            f\"credentials:{credentials_id}\",\n            *args,\n        )",
                      "children": [
                        {
                          "value": "f\"user:{user_id}\",\n            f\"credentials:{credentials_id}\",\n            *args,\n        )",
                          "children": [
                            {
                              "value": "",
                              "children": []
                            },
                            {
                              "value": "f\"user:{user_id}\",\n            f\"credentials:{credentials_id}\",\n            *args,\n        )",
                              "children": [
                                {
                                  "value": "user_id}\",",
                                  "children": [
                                    {
                                      "value": "us",
                                      "children": []
                                    },
                                    {
                                      "value": "er_id",
                                      "children": []
                                    },
                                    {
                                      "value": "}\",",
                                      "children": [
                                        {
                                          "value": "\",",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "tials:{credentials_id}\",",
                                  "children": [
                                    {
                                      "value": "ti",
                                      "children": []
                                    },
                                    {
                                      "value": "als:{credent",
                                      "children": []
                                    },
                                    {
                                      "value": "ials_id}\",",
                                      "children": [
                                        {
                                          "value": "als_id}\",",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "elf._locks.acquire(key)\n\n    @c",
                      "children": [
                        {
                          "value": "cks.acquire(key)\n\n    @c",
                          "children": [
                            {
                              "value": "cks.acquire(key)",
                              "children": [
                                {
                                  "value": "cks.acquire",
                                  "children": [
                                    {
                                      "value": "cks.",
                                      "children": []
                                    },
                                    {
                                      "value": "cquire",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "key)",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "@c",
                              "children": [
                                {
                                  "value": "@",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "manager\n    def _locked(self, user_id: str, credentials_id: str, *args: str):\n        lock = self._acquire_lock(user_id, credentials_id, *args)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    de",
              "children": [
                {
                  "value": "manager\n    def",
                  "children": [
                    {
                      "value": "anager\n    def",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "ked(self, user_id: str, credentials_id: str, *args: str):\n        lock = self._acquire_lock(user_id, credentials_id, *args)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    de",
                  "children": [
                    {
                      "value": "self, u",
                      "children": []
                    },
                    {
                      "value": "ser_id: str, credentials_id: str, *args: str):",
                      "children": [
                        {
                          "value": "er_i",
                          "children": []
                        },
                        {
                          "value": "str, creden",
                          "children": [
                            {
                              "value": "str, c",
                              "children": []
                            },
                            {
                              "value": "den",
                              "children": [
                                {
                                  "value": "den",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "als_id: str, *args:",
                          "children": [
                            {
                              "value": "als_id: str, *",
                              "children": []
                            },
                            {
                              "value": "gs:",
                              "children": [
                                {
                                  "value": "gs:",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "tr):",
                          "children": [
                            {
                              "value": "tr):",
                              "children": [
                                {
                                  "value": "r):",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "elf._acquire_lock(user_id, credentials_id, *args)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    de",
                      "children": [
                        {
                          "value": "elf._acquire_lock(user_id, credentials_id, *args)",
                          "children": [
                            {
                              "value": "elf._acquire_lock(user_id, credentials_id, *args)",
                              "children": [
                                {
                                  "value": "elf.",
                                  "children": []
                                },
                                {
                                  "value": "quire_lock(user_id, credentials_id, *args)",
                                  "children": [
                                    {
                                      "value": "quire_lock(user_id",
                                      "children": [
                                        {
                                          "value": "quir",
                                          "children": []
                                        },
                                        {
                                          "value": "_lock(user_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ", credentials_id, *args)",
                                      "children": [
                                        {
                                          "value": "creden",
                                          "children": []
                                        },
                                        {
                                          "value": "als_id, *args)",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    de",
                          "children": [
                            {
                              "value": "",
                              "children": [
                                {
                                  "value": "",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if lock.locked():\n                lock.release()\n\n    de",
                              "children": [
                                {
                                  "value": "locked():\n                lock.release()\n\n    de",
                                  "children": [
                                    {
                                      "value": "locked():\n                lock.release()\n\n    de",
                                      "children": [
                                        {
                                          "value": "ked():",
                                          "children": [
                                            {
                                              "value": "ked():",
                                              "children": [
                                                {
                                                  "value": "ked(",
                                                  "children": []
                                                },
                                                {
                                                  "value": ":",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ease()\n\n    de",
                                          "children": [
                                            {
                                              "value": "ease()\n\n    de",
                                              "children": [
                                                {
                                                  "value": "ease()\n\n    de",
                                                  "children": [
                                                    {
                                                      "value": "ease()",
                                                      "children": [
                                                        {
                                                          "value": "ease",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "de",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ase_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self._locks.release_all_locks()\n        self.store.locks.release_all_locks()\n\n\ndef _",
              "children": [
                {
                  "value": "all_locks(self):",
                  "children": []
                },
                {
                  "value": "",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "this on process termination to ensure all locks are released\"\"\"\n        self._locks.release_all_locks()\n        self.store.locks.release_all_locks()\n\n\ndef _",
                  "children": [
                    {
                      "value": "this on process termination to ensure all locks are released\"\"\"",
                      "children": [
                        {
                          "value": "this on process termination to ensure all locks are released\"\"\"",
                          "children": [
                            {
                              "value": "thi",
                              "children": []
                            },
                            {
                              "value": "s on process termination to ensure all locks are released\"\"\"",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "cks.release_all_locks()",
                      "children": [
                        {
                          "value": "cks.release_all_locks()",
                          "children": [
                            {
                              "value": "cks.release_all_locks()",
                              "children": [
                                {
                                  "value": "cks.release",
                                  "children": [
                                    {
                                      "value": "cks.",
                                      "children": []
                                    },
                                    {
                                      "value": "elease",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "all_locks()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "re.locks.release_all_locks()\n\n\ndef _",
                      "children": [
                        {
                          "value": "re.locks.release_all_locks()\n\n\ndef _",
                          "children": [
                            {
                              "value": "re.locks.release_all_locks()\n\n\ndef",
                              "children": [
                                {
                                  "value": "re.locks.release",
                                  "children": [
                                    {
                                      "value": "re.locks.r",
                                      "children": [
                                        {
                                          "value": "re.l",
                                          "children": []
                                        },
                                        {
                                          "value": "cks.r",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "lease",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "all_locks()\n\n\ndef",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "_",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "_provider_oauth_handler(provider_name: str) -> \"BaseOAuthHandler\":\n    if provider_name not in HANDLERS_BY_NAME:\n        raise KeyError(f\"Unknown provider '{provider_name}'\")\n\n    client_id = getattr(settings.secrets, f\"{provider_name}_client_id\")\n    client_secret = getattr(settings.secrets, f\"{provider_name}_client_secret\")\n    if not (client_id and client_secret):\n        raise MissingConfigError(\n            f\"Integration with provider '{provider_name}' is not configured\",\n        )\n\n    handler_class = HANDLERS_BY_NAME[provider_name]\n    frontend_base_url = (\n        settings.config.frontend_base_url or settings.config.platform_base_url\n    )\n    return handler_class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
      "children": [
        {
          "value": "vider_oauth_handler(provide",
          "children": []
        },
        {
          "value": "r_name: str) -> \"Bas",
          "children": [
            {
              "value": "_name: str) -> \"Ba",
              "children": [
                {
                  "value": "_name: str) -",
                  "children": []
                },
                {
                  "value": "\"Ba",
                  "children": [
                    {
                      "value": "\"Ba",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "thHandler\":\n    if",
          "children": [
            {
              "value": "thHandler\":\n    if",
              "children": [
                {
                  "value": "t",
                  "children": []
                },
                {
                  "value": "hHandler\":\n    i",
                  "children": []
                },
                {
                  "value": "f",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "der_name not in HANDLERS_BY_NAME:\n        raise KeyError(f\"Unknown provider '{provider_name}'\")\n\n    client_id = getattr(settings.secrets, f\"{provider_name}_client_id\")\n    client_secret = getattr(settings.secrets, f\"{provider_name}_client_secret\")\n    if not (client_id and client_secret):\n        raise MissingConfigError(\n            f\"Integration with provider '{provider_name}' is not configured\",\n        )\n\n    handler_class = HANDLERS_BY_NAME[provider_name]\n    frontend_base_url = (\n        settings.config.frontend_base_url or settings.config.platform_base_url\n    )\n    return handler_class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
          "children": [
            {
              "value": "der_name not in HANDLERS_BY_NAME:\n        raise KeyError(f\"Unknown provider '{provider_name}'\")\n\n    cl",
              "children": [
                {
                  "value": "_name not in HANDLERS_BY_NAME:",
                  "children": [
                    {
                      "value": "_name not in",
                      "children": []
                    },
                    {
                      "value": "_BY_NAME:",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "yError(f\"Unknown provider '{provider_name}'\")\n\n    cl",
                  "children": [
                    {
                      "value": "yError(f\"Unknown provider '{provider_name}'\")\n\n    cl",
                      "children": [
                        {
                          "value": "(f\"Unknown provider '{provider_name}'\")\n\n    cl",
                          "children": [
                            {
                              "value": "(f\"Unkno",
                              "children": []
                            },
                            {
                              "value": "wn provider '{provider_name}'\")\n\n    cl",
                              "children": [
                                {
                                  "value": "n provider '{provider_name}'\")\n\n    c",
                                  "children": [
                                    {
                                      "value": "n",
                                      "children": []
                                    },
                                    {
                                      "value": "provider '{provide",
                                      "children": []
                                    },
                                    {
                                      "value": "r_name}'\")",
                                      "children": [
                                        {
                                          "value": "_name}'\")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "c",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "d = getattr(settings.secrets, f\"{provider_name}_client_id\")\n    cli",
              "children": [
                {
                  "value": "d = getattr(settings.secrets, f\"{provider_name}_client_id\")\n    cli",
                  "children": [
                    {
                      "value": "d = getat",
                      "children": []
                    },
                    {
                      "value": "settings.secrets, f\"{provider_name}_client_id\")\n    cli",
                      "children": [
                        {
                          "value": "setting",
                          "children": []
                        },
                        {
                          "value": "s.secrets, f\"{provider_name}_client_id\")\n    cli",
                          "children": [
                            {
                              "value": ".secrets, f\"{pro",
                              "children": [
                                {
                                  "value": ".secrets",
                                  "children": []
                                },
                                {
                                  "value": "f\"{pro",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "der_name}_client_id\")\n    cl",
                              "children": [
                                {
                                  "value": "de",
                                  "children": []
                                },
                                {
                                  "value": "r_name}_client_",
                                  "children": [
                                    {
                                      "value": "_name}_client",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "id\")\n    c",
                                  "children": []
                                },
                                {
                                  "value": "l",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ecret = getattr(settings.secrets, f\"{provider_name}_client_secret\")\n    if",
              "children": [
                {
                  "value": "ecret = getattr(settings.secrets, f\"{provider_name}_client_secret\")\n    if",
                  "children": [
                    {
                      "value": "ecret = getat",
                      "children": []
                    },
                    {
                      "value": "settings.secrets, f\"{provider_name}_client_secret\")\n    if",
                      "children": [
                        {
                          "value": "setting",
                          "children": []
                        },
                        {
                          "value": "s.secrets, f\"{provider_name}_client_secret\")\n    if",
                          "children": [
                            {
                              "value": ".secrets, f\"{pro",
                              "children": [
                                {
                                  "value": ".secrets",
                                  "children": []
                                },
                                {
                                  "value": "f\"{pro",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "der_name}_client_secret\")\n    if",
                              "children": [
                                {
                                  "value": "de",
                                  "children": []
                                },
                                {
                                  "value": "r_name}_client_",
                                  "children": [
                                    {
                                      "value": "_name}_client",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "secret\")\n    i",
                                  "children": []
                                },
                                {
                                  "value": "f",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "client_id and client_secret):\n        raise MissingConfigError(\n            f\"Integration with provider '{provider_name}' is not configured\",\n        )\n\n    ha",
              "children": [
                {
                  "value": "ent_id and client_secret):",
                  "children": [
                    {
                      "value": "id and client_secret):",
                      "children": [
                        {
                          "value": "d and client_secret):",
                          "children": [
                            {
                              "value": "d and cli",
                              "children": []
                            },
                            {
                              "value": "ecret):",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ssingConfigError(\n            f\"Integration with provider '{provider_name}' is not configured\",\n        )\n\n    ha",
                  "children": [
                    {
                      "value": "ssingConfigError(\n            f\"Integration with provider '{provider_name}' is not configured\",\n        )\n\n    ha",
                      "children": [
                        {
                          "value": "onfigError(\n            f\"Integration with provider '{provider_name}' is not configured\",\n        )\n\n    ha",
                          "children": [
                            {
                              "value": "onfigError(",
                              "children": []
                            },
                            {
                              "value": "f\"Integration with provider '{provider_name}' is not configured\",\n        )\n\n    ha",
                              "children": [
                                {
                                  "value": "ation with provider '{provider_name}' is not configured\",",
                                  "children": [
                                    {
                                      "value": "at",
                                      "children": []
                                    },
                                    {
                                      "value": "ion with provider '{provide",
                                      "children": []
                                    },
                                    {
                                      "value": "r_name}' is not",
                                      "children": [
                                        {
                                          "value": "_name}' is no",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "configured\",",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class = HANDLERS_BY_NAME[provider_name]\n    fro",
              "children": [
                {
                  "value": "class = HANDLERS_BY_NAME[provider_name]\n    fro",
                  "children": [
                    {
                      "value": "class = HANDL",
                      "children": []
                    },
                    {
                      "value": "_BY_NAME[provider_name]\n    fro",
                      "children": [
                        {
                          "value": "_BY_NAME[provide",
                          "children": []
                        },
                        {
                          "value": "_name]\n    fr",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "_base_url = (\n        settings.config.frontend_base_url or settings.config.platform_base_url\n    )\n    ret",
              "children": [
                {
                  "value": "_base_url = (\n        settings.config.frontend_base_url or settings.config.platform_base_url\n    )\n    ret",
                  "children": [
                    {
                      "value": "_base_url = (",
                      "children": []
                    },
                    {
                      "value": "settings.config.frontend_base_url or settings.config.platform_base_url\n    )\n    ret",
                      "children": [
                        {
                          "value": ".config.frontend_base_url or settings.config.platform_base_url\n    )",
                          "children": [
                            {
                              "value": ".config.frontend_base_url or sett",
                              "children": [
                                {
                                  "value": ".config.fronten",
                                  "children": [
                                    {
                                      "value": ".config.",
                                      "children": []
                                    },
                                    {
                                      "value": "ronten",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "_base_url or sett",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": ".config.platform_base_url\n    )",
                              "children": [
                                {
                                  "value": ".config.platfor",
                                  "children": [
                                    {
                                      "value": ".config.",
                                      "children": []
                                    },
                                    {
                                      "value": "latfor",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "_base_url\n    )",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "andler_class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
              "children": [
                {
                  "value": "class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
                  "children": [
                    {
                      "value": "class(",
                      "children": []
                    },
                    {
                      "value": "client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
                      "children": [
                        {
                          "value": "d=client_id,",
                          "children": [
                            {
                              "value": "d=client_",
                              "children": []
                            },
                            {
                              "value": "d,",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ecret=client_secret,",
                          "children": [
                            {
                              "value": "ecret=client_",
                              "children": []
                            },
                            {
                              "value": "ecret,",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
                          "children": [
                            {
                              "value": "_uri=f\"{fron",
                              "children": []
                            },
                            {
                              "value": "end_base_url}/auth/integrations/oauth_callback\",\n    )",
                              "children": [
                                {
                                  "value": "en",
                                  "children": []
                                },
                                {
                                  "value": "d_base_url}/auth/in",
                                  "children": [
                                    {
                                      "value": "_base_url}/auth/i",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "tegrations/oauth_callback\",\n    )",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}