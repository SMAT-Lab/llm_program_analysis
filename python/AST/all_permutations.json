{
  "value": "\"\"\"\nIn this problem, we want to determine all possible permutations\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(n! * n),\nwhere n denotes the length of the given sequence.\n\"\"\"\n\nfrom __future__ import annotations\n\n\ndef generate_all_permutations(sequence: list[int | str]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])\n\n\ndef create_state_space_tree(\n    sequence: list[int | str],\n    current_sequence: list[int | str],\n    index: int,\n    index_used: list[int],\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly len(sequence) - index children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which permutations are generated.\n    :param current_sequence: The current permutation being built.\n    :param index: The current index in the sequence.\n    :param index_used: list to track which elements are used in permutation.\n\n    Example 1:\n    >>> sequence = [1, 2, 3]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1, 2, 3]\n    [1, 3, 2]\n    [2, 1, 3]\n    [2, 3, 1]\n    [3, 1, 2]\n    [3, 2, 1]\n\n    Example 2:\n    >>> sequence = [\"A\", \"B\", \"C\"]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    ['A', 'B', 'C']\n    ['A', 'C', 'B']\n    ['B', 'A', 'C']\n    ['B', 'C', 'A']\n    ['C', 'A', 'B']\n    ['C', 'B', 'A']\n\n    Example 3:\n    >>> sequence = [1]\n    >>> current_sequence = []\n    >>> index_used = [False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1]\n    \"\"\"\n\n    if index == len(sequence):\n        print(current_sequence)\n        return\n\n    for i in range(len(sequence)):\n        if not index_used[i]:\n            current_sequence.append(sequence[i])\n            index_used[i] = True\n            create_state_space_tree(sequence, current_sequence, index + 1, index_used)\n            current_sequence.pop()\n            index_used[i] = False\n\n\n\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nsequence = list(map(int, input().split()))\n\"\"\"\n\nsequence: list[int | str] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)\n\nsequence_2: list[int | str] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)",
  "children": [
    {
      "value": "\"\"\"\nIn this problem, we want to determine all possible permutations\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(n! * n),\nwhere n denotes the length of the given sequence.\n\"\"\"",
      "children": [
        {
          "value": "\"\"\"\nIn this problem, we want to determine all possible permutations\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(n! * n),\nwhere n denotes the length of the given sequence.\n\"\"\"",
          "children": [
            {
              "value": "\"\"\"",
              "children": []
            },
            {
              "value": "In this problem, we want to determine all possible permutations\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(n! * n),\nwhere n denotes the length of the given sequence.",
              "children": []
            },
            {
              "value": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from __future__ import annotations",
      "children": [
        {
          "value": "annotations",
          "children": [
            {
              "value": "annotations",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def generate_all_permutations(sequence: list[int | str]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])",
      "children": [
        {
          "value": "generate_all_permutations",
          "children": []
        },
        {
          "value": "(sequence: list[int | str])",
          "children": [
            {
              "value": "sequence: list[int | str]",
              "children": [
                {
                  "value": "sequence",
                  "children": []
                },
                {
                  "value": "list[int | str]",
                  "children": [
                    {
                      "value": "list[int | str]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[int | str]",
                          "children": [
                            {
                              "value": "int | str",
                              "children": [
                                {
                                  "value": "int | str",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    },
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])",
          "children": [
            {
              "value": "create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])",
              "children": [
                {
                  "value": "create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])",
                  "children": [
                    {
                      "value": "create_state_space_tree",
                      "children": []
                    },
                    {
                      "value": "(sequence, [], 0, [0 for i in range(len(sequence))])",
                      "children": [
                        {
                          "value": "sequence",
                          "children": []
                        },
                        {
                          "value": "[]",
                          "children": []
                        },
                        {
                          "value": "0",
                          "children": []
                        },
                        {
                          "value": "[0 for i in range(len(sequence))]",
                          "children": [
                            {
                              "value": "0",
                              "children": []
                            },
                            {
                              "value": "for i in range(len(sequence))",
                              "children": [
                                {
                                  "value": "i",
                                  "children": []
                                },
                                {
                                  "value": "range(len(sequence))",
                                  "children": [
                                    {
                                      "value": "range",
                                      "children": []
                                    },
                                    {
                                      "value": "(len(sequence))",
                                      "children": [
                                        {
                                          "value": "len(sequence)",
                                          "children": [
                                            {
                                              "value": "len",
                                              "children": []
                                            },
                                            {
                                              "value": "(sequence)",
                                              "children": [
                                                {
                                                  "value": "sequence",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def create_state_space_tree(\n    sequence: list[int | str],\n    current_sequence: list[int | str],\n    index: int,\n    index_used: list[int],\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly len(sequence) - index children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which permutations are generated.\n    :param current_sequence: The current permutation being built.\n    :param index: The current index in the sequence.\n    :param index_used: list to track which elements are used in permutation.\n\n    Example 1:\n    >>> sequence = [1, 2, 3]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1, 2, 3]\n    [1, 3, 2]\n    [2, 1, 3]\n    [2, 3, 1]\n    [3, 1, 2]\n    [3, 2, 1]\n\n    Example 2:\n    >>> sequence = [\"A\", \"B\", \"C\"]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    ['A', 'B', 'C']\n    ['A', 'C', 'B']\n    ['B', 'A', 'C']\n    ['B', 'C', 'A']\n    ['C', 'A', 'B']\n    ['C', 'B', 'A']\n\n    Example 3:\n    >>> sequence = [1]\n    >>> current_sequence = []\n    >>> index_used = [False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1]\n    \"\"\"\n\n    if index == len(sequence):\n        print(current_sequence)\n        return\n\n    for i in range(len(sequence)):\n        if not index_used[i]:\n            current_sequence.append(sequence[i])\n            index_used[i] = True\n            create_state_space_tree(sequence, current_sequence, index + 1, index_used)\n            current_sequence.pop()\n            index_used[i] = False",
      "children": [
        {
          "value": "create_state_space_tree",
          "children": []
        },
        {
          "value": "(\n    sequence: list[int | str],\n    current_sequence: list[int | str],\n    index: int,\n    index_used: list[int],\n)",
          "children": [
            {
              "value": "sequence: list[int | str]",
              "children": [
                {
                  "value": "sequence",
                  "children": []
                },
                {
                  "value": "list[int | str]",
                  "children": [
                    {
                      "value": "list[int | str]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[int | str]",
                          "children": [
                            {
                              "value": "int | str",
                              "children": [
                                {
                                  "value": "int | str",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    },
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "current_sequence: list[int | str]",
              "children": [
                {
                  "value": "current_sequence",
                  "children": []
                },
                {
                  "value": "list[int | str]",
                  "children": [
                    {
                      "value": "list[int | str]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[int | str]",
                          "children": [
                            {
                              "value": "int | str",
                              "children": [
                                {
                                  "value": "int | str",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    },
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "index: int",
              "children": [
                {
                  "value": "index",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "index_used: list[int]",
              "children": [
                {
                  "value": "index_used",
                  "children": []
                },
                {
                  "value": "list[int]",
                  "children": [
                    {
                      "value": "list[int]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[int]",
                          "children": [
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly len(sequence) - index children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which permutations are generated.\n    :param current_sequence: The current permutation being built.\n    :param index: The current index in the sequence.\n    :param index_used: list to track which elements are used in permutation.\n\n    Example 1:\n    >>> sequence = [1, 2, 3]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1, 2, 3]\n    [1, 3, 2]\n    [2, 1, 3]\n    [2, 3, 1]\n    [3, 1, 2]\n    [3, 2, 1]\n\n    Example 2:\n    >>> sequence = [\"A\", \"B\", \"C\"]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    ['A', 'B', 'C']\n    ['A', 'C', 'B']\n    ['B', 'A', 'C']\n    ['B', 'C', 'A']\n    ['C', 'A', 'B']\n    ['C', 'B', 'A']\n\n    Example 3:\n    >>> sequence = [1]\n    >>> current_sequence = []\n    >>> index_used = [False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1]\n    \"\"\"\n\n    if index == len(sequence):\n        print(current_sequence)\n        return\n\n    for i in range(len(sequence)):\n        if not index_used[i]:\n            current_sequence.append(sequence[i])\n            index_used[i] = True\n            create_state_space_tree(sequence, current_sequence, index + 1, index_used)\n            current_sequence.pop()\n            index_used[i] = False",
          "children": [
            {
              "value": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly len(sequence) - index children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which permutations are generated.\n    :param current_sequence: The current permutation being built.\n    :param index: The current index in the sequence.\n    :param index_used: list to track which elements are used in permutation.\n\n    Example 1:\n    >>> sequence = [1, 2, 3]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1, 2, 3]\n    [1, 3, 2]\n    [2, 1, 3]\n    [2, 3, 1]\n    [3, 1, 2]\n    [3, 2, 1]\n\n    Example 2:\n    >>> sequence = [\"A\", \"B\", \"C\"]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    ['A', 'B', 'C']\n    ['A', 'C', 'B']\n    ['B', 'A', 'C']\n    ['B', 'C', 'A']\n    ['C', 'A', 'B']\n    ['C', 'B', 'A']\n\n    Example 3:\n    >>> sequence = [1]\n    >>> current_sequence = []\n    >>> index_used = [False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1]\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly len(sequence) - index children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which permutations are generated.\n    :param current_sequence: The current permutation being built.\n    :param index: The current index in the sequence.\n    :param index_used: list to track which elements are used in permutation.\n\n    Example 1:\n    >>> sequence = [1, 2, 3]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1, 2, 3]\n    [1, 3, 2]\n    [2, 1, 3]\n    [2, 3, 1]\n    [3, 1, 2]\n    [3, 2, 1]\n\n    Example 2:\n    >>> sequence = [\"A\", \"B\", \"C\"]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    ['A', 'B', 'C']\n    ['A', 'C', 'B']\n    ['B', 'A', 'C']\n    ['B', 'C', 'A']\n    ['C', 'A', 'B']\n    ['C', 'B', 'A']\n\n    Example 3:\n    >>> sequence = [1]\n    >>> current_sequence = []\n    >>> index_used = [False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1]\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly len(sequence) - index children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which permutations are generated.\n    :param current_sequence: The current permutation being built.\n    :param index: The current index in the sequence.\n    :param index_used: list to track which elements are used in permutation.\n\n    Example 1:\n    >>> sequence = [1, 2, 3]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1, 2, 3]\n    [1, 3, 2]\n    [2, 1, 3]\n    [2, 3, 1]\n    [3, 1, 2]\n    [3, 2, 1]\n\n    Example 2:\n    >>> sequence = [\"A\", \"B\", \"C\"]\n    >>> current_sequence = []\n    >>> index_used = [False, False, False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    ['A', 'B', 'C']\n    ['A', 'C', 'B']\n    ['B', 'A', 'C']\n    ['B', 'C', 'A']\n    ['C', 'A', 'B']\n    ['C', 'B', 'A']\n\n    Example 3:\n    >>> sequence = [1]\n    >>> current_sequence = []\n    >>> index_used = [False]\n    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)\n    [1]",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if index == len(sequence):\n        print(current_sequence)\n        return",
              "children": [
                {
                  "value": "index == len(sequence)",
                  "children": [
                    {
                      "value": "index",
                      "children": []
                    },
                    {
                      "value": "len(sequence)",
                      "children": [
                        {
                          "value": "len",
                          "children": []
                        },
                        {
                          "value": "(sequence)",
                          "children": [
                            {
                              "value": "sequence",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "print(current_sequence)\n        return",
                  "children": [
                    {
                      "value": "print(current_sequence)",
                      "children": [
                        {
                          "value": "print(current_sequence)",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "(current_sequence)",
                              "children": [
                                {
                                  "value": "current_sequence",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "for i in range(len(sequence)):\n        if not index_used[i]:\n            current_sequence.append(sequence[i])\n            index_used[i] = True\n            create_state_space_tree(sequence, current_sequence, index + 1, index_used)\n            current_sequence.pop()\n            index_used[i] = False",
              "children": [
                {
                  "value": "i",
                  "children": []
                },
                {
                  "value": "range(len(sequence))",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(len(sequence))",
                      "children": [
                        {
                          "value": "len(sequence)",
                          "children": [
                            {
                              "value": "len",
                              "children": []
                            },
                            {
                              "value": "(sequence)",
                              "children": [
                                {
                                  "value": "sequence",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not index_used[i]:\n            current_sequence.append(sequence[i])\n            index_used[i] = True\n            create_state_space_tree(sequence, current_sequence, index + 1, index_used)\n            current_sequence.pop()\n            index_used[i] = False",
                  "children": [
                    {
                      "value": "if not index_used[i]:\n            current_sequence.append(sequence[i])\n            index_used[i] = True\n            create_state_space_tree(sequence, current_sequence, index + 1, index_used)\n            current_sequence.pop()\n            index_used[i] = False",
                      "children": [
                        {
                          "value": "not index_used[i]",
                          "children": [
                            {
                              "value": "index_used[i]",
                              "children": [
                                {
                                  "value": "index_used",
                                  "children": []
                                },
                                {
                                  "value": "i",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "current_sequence.append(sequence[i])\n            index_used[i] = True\n            create_state_space_tree(sequence, current_sequence, index + 1, index_used)\n            current_sequence.pop()\n            index_used[i] = False",
                          "children": [
                            {
                              "value": "current_sequence.append(sequence[i])",
                              "children": [
                                {
                                  "value": "current_sequence.append(sequence[i])",
                                  "children": [
                                    {
                                      "value": "current_sequence.append",
                                      "children": [
                                        {
                                          "value": "current_sequence",
                                          "children": []
                                        },
                                        {
                                          "value": "append",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(sequence[i])",
                                      "children": [
                                        {
                                          "value": "sequence[i]",
                                          "children": [
                                            {
                                              "value": "sequence",
                                              "children": []
                                            },
                                            {
                                              "value": "i",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "index_used[i] = True",
                              "children": [
                                {
                                  "value": "index_used[i] = True",
                                  "children": [
                                    {
                                      "value": "index_used[i]",
                                      "children": [
                                        {
                                          "value": "index_used",
                                          "children": []
                                        },
                                        {
                                          "value": "i",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "True",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "create_state_space_tree(sequence, current_sequence, index + 1, index_used)",
                              "children": [
                                {
                                  "value": "create_state_space_tree(sequence, current_sequence, index + 1, index_used)",
                                  "children": [
                                    {
                                      "value": "create_state_space_tree",
                                      "children": []
                                    },
                                    {
                                      "value": "(sequence, current_sequence, index + 1, index_used)",
                                      "children": [
                                        {
                                          "value": "sequence",
                                          "children": []
                                        },
                                        {
                                          "value": "current_sequence",
                                          "children": []
                                        },
                                        {
                                          "value": "index + 1",
                                          "children": [
                                            {
                                              "value": "index",
                                              "children": []
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "index_used",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "current_sequence.pop()",
                              "children": [
                                {
                                  "value": "current_sequence.pop()",
                                  "children": [
                                    {
                                      "value": "current_sequence.pop",
                                      "children": [
                                        {
                                          "value": "current_sequence",
                                          "children": []
                                        },
                                        {
                                          "value": "pop",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "index_used[i] = False",
                              "children": [
                                {
                                  "value": "index_used[i] = False",
                                  "children": [
                                    {
                                      "value": "index_used[i]",
                                      "children": [
                                        {
                                          "value": "index_used",
                                          "children": []
                                        },
                                        {
                                          "value": "i",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "False",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nsequence = list(map(int, input().split()))\n\"\"\"",
      "children": [
        {
          "value": "\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nsequence = list(map(int, input().split()))\n\"\"\"",
          "children": [
            {
              "value": "\"\"\"",
              "children": []
            },
            {
              "value": "remove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nsequence = list(map(int, input().split()))",
              "children": []
            },
            {
              "value": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "sequence: list[int | str] = [3, 1, 2, 4]",
      "children": [
        {
          "value": "sequence: list[int | str] = [3, 1, 2, 4]",
          "children": [
            {
              "value": "sequence",
              "children": []
            },
            {
              "value": "list[int | str]",
              "children": [
                {
                  "value": "list[int | str]",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    },
                    {
                      "value": "[int | str]",
                      "children": [
                        {
                          "value": "int | str",
                          "children": [
                            {
                              "value": "int | str",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "[3, 1, 2, 4]",
              "children": [
                {
                  "value": "3",
                  "children": []
                },
                {
                  "value": "1",
                  "children": []
                },
                {
                  "value": "2",
                  "children": []
                },
                {
                  "value": "4",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "generate_all_permutations(sequence)",
      "children": [
        {
          "value": "generate_all_permutations(sequence)",
          "children": [
            {
              "value": "generate_all_permutations",
              "children": []
            },
            {
              "value": "(sequence)",
              "children": [
                {
                  "value": "sequence",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "sequence_2: list[int | str] = [\"A\", \"B\", \"C\"]",
      "children": [
        {
          "value": "sequence_2: list[int | str] = [\"A\", \"B\", \"C\"]",
          "children": [
            {
              "value": "sequence_2",
              "children": []
            },
            {
              "value": "list[int | str]",
              "children": [
                {
                  "value": "list[int | str]",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    },
                    {
                      "value": "[int | str]",
                      "children": [
                        {
                          "value": "int | str",
                          "children": [
                            {
                              "value": "int | str",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "[\"A\", \"B\", \"C\"]",
              "children": [
                {
                  "value": "\"A\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "A",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"B\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "B",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"C\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "C",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "generate_all_permutations(sequence_2)",
      "children": [
        {
          "value": "generate_all_permutations(sequence_2)",
          "children": [
            {
              "value": "generate_all_permutations",
              "children": []
            },
            {
              "value": "(sequence_2)",
              "children": [
                {
                  "value": "sequence_2",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}