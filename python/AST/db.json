{
  "value": "import datetime\nimport typing\n\nimport fuzzywuzzy.fuzz\nimport prisma.enums\nimport prisma.errors\nimport prisma.models\nimport prisma.types\nimport pydantic\n\nimport market.model\nimport market.utils.extension_types\n\n\nclass AgentQueryError(Exception):\n    \"\"\"Custom exception for agent query errors\"\"\"\n\n    pass\n\n\nclass TopAgentsDBResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    analytics: list[prisma.models.AnalyticsTracker]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n\n\nclass FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    featured_agents: list[prisma.models.FeaturedAgent]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n\n\nasync def delete_agent(agent_id: str) -> prisma.models.Agents | None:\n    \"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"\n    try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def create_agent_entry(\n    name: str,\n    description: str,\n    author: str,\n    keywords: typing.List[str],\n    categories: typing.List[str],\n    graph: prisma.Json,\n    submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING,\n):\n    \"\"\"\n    Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def update_agent_entry(\n    agent_id: str,\n    version: int,\n    submission_state: prisma.enums.SubmissionStatus,\n    comments: str | None = None,\n) -> prisma.models.Agents | None:\n    \"\"\"\n    Update an existing agent entry in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int): The version of the agent.\n        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent.\n    \"\"\"\n\n    try:\n        agent = await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )\n\n        return agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agents(\n    page: int = 1,\n    page_size: int = 10,\n    name: str | None = None,\n    keyword: str | None = None,\n    category: str | None = None,\n    description: str | None = None,\n    description_threshold: int = 60,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n    sort_by: str = \"createdAt\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n):\n    \"\"\"\n    Retrieve a list of agents from the database based on the provided filters and pagination parameters.\n\n    Args:\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n        name (str, optional): Filter agents by name. Defaults to None.\n        keyword (str, optional): Filter agents by keyword. Defaults to None.\n        category (str, optional): Filter agents by category. Defaults to None.\n        description (str, optional): Filter agents by description. Defaults to None.\n        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60.\n        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\".\n        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\".\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Define the base query\n        query = {}\n\n        # Add optional filters\n        if name:\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}\n        if keyword:\n            query[\"keywords\"] = {\"has\": keyword}\n        if category:\n            query[\"categories\"] = {\"has\": category}\n\n        query[\"submissionStatus\"] = submission_status\n\n        # Define sorting\n        order = {sort_by: sort_order}\n\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Apply fuzzy search on description if provided\n        if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(agents)\n\n        return {\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total_count + page_size - 1) // page_size,\n        }\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_details(agent_id: str, version: int | None = None):\n    \"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"\n    try:\n        query = {\"id\": agent_id}\n        if version is not None:\n            query[\"version\"] = version  # type: ignore\n\n        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\n        if not agent:\n            raise AgentQueryError(\"Agent not found\")\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def search_db(\n    query: str,\n    page: int = 1,\n    page_size: int = 10,\n    categories: typing.List[str] | None = None,\n    description_threshold: int = 60,\n    sort_by: str = \"rank\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n    \"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"\n    try:\n        offset = (page - 1) * page_size\n\n        category_filter = \"1=1\"\n        if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"\n\n        # Construct the ORDER BY clause based on the sort_by parameter\n        if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\n        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\n\n        sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\n\n        results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )\n\n        class CountResponse(pydantic.BaseModel):\n            count: int\n\n        count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\n\n        total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )\n        total_count = total_count.count if total_count else 0\n\n        return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_top_agents_by_downloads(\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[prisma.models.AnalyticsTracker]:\n    \"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def set_agent_featured(\n    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]\n) -> prisma.models.FeaturedAgent:\n    \"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})\n        if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )\n        return featured\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\n    category: str = \"featured\",\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> FeaturedAgentResponse:\n    \"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(featured_agents)\n\n        return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def remove_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\n\n        if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        # remove the category from the list\n        featured_agent.featuredCategories.remove(category)\n\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def add_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_featured(agent_id: str) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_not_featured_agents(\n    page: int = 1, page_size: int = 10\n) -> typing.List[prisma.models.Agents]:\n    \"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"\n    try:\n        agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )\n        return agents\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_all_categories() -> market.model.CategoriesResponse:\n    \"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"\n    try:\n        agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])\n\n\nasync def create_agent_installed_event(\n    event_data: market.model.AgentInstalledFromMarketplaceEventData,\n):\n    try:\n        await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
  "children": [
    {
      "value": "import datetime",
      "children": [
        {
          "value": "datetime",
          "children": [
            {
              "value": "datetime",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import typing",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import fuzzywuzzy.fuzz",
      "children": [
        {
          "value": "fuzzywuzzy.fuzz",
          "children": [
            {
              "value": "fuzzywuzzy",
              "children": []
            },
            {
              "value": "fuzz",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import prisma.enums",
      "children": [
        {
          "value": "prisma.enums",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "enums",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import prisma.errors",
      "children": [
        {
          "value": "prisma.errors",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "errors",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import prisma.models",
      "children": [
        {
          "value": "prisma.models",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "models",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import prisma.types",
      "children": [
        {
          "value": "prisma.types",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "types",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import pydantic",
      "children": [
        {
          "value": "pydantic",
          "children": [
            {
              "value": "pydantic",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import market.model",
      "children": [
        {
          "value": "market.model",
          "children": [
            {
              "value": "market",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import market.utils.extension_types",
      "children": [
        {
          "value": "market.utils.extension_types",
          "children": [
            {
              "value": "market",
              "children": []
            },
            {
              "value": "utils",
              "children": []
            },
            {
              "value": "extension_types",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class AgentQueryError(Exception):\n    \"\"\"Custom exception for agent query errors\"\"\"\n\n    pass",
      "children": [
        {
          "value": "AgentQueryError",
          "children": []
        },
        {
          "value": "(Exception)",
          "children": [
            {
              "value": "Exception",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"Custom exception for agent query errors\"\"\"\n\n    pass",
          "children": [
            {
              "value": "\"\"\"Custom exception for agent query errors\"\"\"",
              "children": [
                {
                  "value": "\"\"\"Custom exception for agent query errors\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Custom exception for agent query errors",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "pass",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class TopAgentsDBResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    analytics: list[prisma.models.AnalyticsTracker]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
      "children": [
        {
          "value": "TopAgentsDBResponse",
          "children": []
        },
        {
          "value": "(pydantic.BaseModel)",
          "children": [
            {
              "value": "pydantic.BaseModel",
              "children": [
                {
                  "value": "pydantic",
                  "children": []
                },
                {
                  "value": "BaseModel",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    analytics: list[prisma.models.AnalyticsTracker]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
          "children": [
            {
              "value": "\"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "analytics: list[prisma.models.AnalyticsTracker]",
              "children": [
                {
                  "value": "analytics: list[prisma.models.AnalyticsTracker]",
                  "children": [
                    {
                      "value": "analytics",
                      "children": []
                    },
                    {
                      "value": "list[prisma.models.AnalyticsTracker]",
                      "children": [
                        {
                          "value": "list[prisma.models.AnalyticsTracker]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[prisma.models.AnalyticsTracker]",
                              "children": [
                                {
                                  "value": "prisma.models.AnalyticsTracker",
                                  "children": [
                                    {
                                      "value": "prisma.models.AnalyticsTracker",
                                      "children": [
                                        {
                                          "value": "prisma.models",
                                          "children": [
                                            {
                                              "value": "prisma",
                                              "children": []
                                            },
                                            {
                                              "value": "models",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "AnalyticsTracker",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "total_count: int",
              "children": [
                {
                  "value": "total_count: int",
                  "children": [
                    {
                      "value": "total_count",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "page: int",
              "children": [
                {
                  "value": "page: int",
                  "children": [
                    {
                      "value": "page",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "page_size: int",
              "children": [
                {
                  "value": "page_size: int",
                  "children": [
                    {
                      "value": "page_size",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "total_pages: int",
              "children": [
                {
                  "value": "total_pages: int",
                  "children": [
                    {
                      "value": "total_pages",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    featured_agents: list[prisma.models.FeaturedAgent]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
      "children": [
        {
          "value": "FeaturedAgentResponse",
          "children": []
        },
        {
          "value": "(pydantic.BaseModel)",
          "children": [
            {
              "value": "pydantic.BaseModel",
              "children": [
                {
                  "value": "pydantic",
                  "children": []
                },
                {
                  "value": "BaseModel",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    featured_agents: list[prisma.models.FeaturedAgent]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
          "children": [
            {
              "value": "\"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "featured_agents: list[prisma.models.FeaturedAgent]",
              "children": [
                {
                  "value": "featured_agents: list[prisma.models.FeaturedAgent]",
                  "children": [
                    {
                      "value": "featured_agents",
                      "children": []
                    },
                    {
                      "value": "list[prisma.models.FeaturedAgent]",
                      "children": [
                        {
                          "value": "list[prisma.models.FeaturedAgent]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[prisma.models.FeaturedAgent]",
                              "children": [
                                {
                                  "value": "prisma.models.FeaturedAgent",
                                  "children": [
                                    {
                                      "value": "prisma.models.FeaturedAgent",
                                      "children": [
                                        {
                                          "value": "prisma.models",
                                          "children": [
                                            {
                                              "value": "prisma",
                                              "children": []
                                            },
                                            {
                                              "value": "models",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "FeaturedAgent",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "total_count: int",
              "children": [
                {
                  "value": "total_count: int",
                  "children": [
                    {
                      "value": "total_count",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "page: int",
              "children": [
                {
                  "value": "page: int",
                  "children": [
                    {
                      "value": "page",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "page_size: int",
              "children": [
                {
                  "value": "page_size: int",
                  "children": [
                    {
                      "value": "page_size",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "total_pages: int",
              "children": [
                {
                  "value": "total_pages: int",
                  "children": [
                    {
                      "value": "total_pages",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def delete_agent(agent_id: str) -> prisma.models.Agents | None:\n    \"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"\n    try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
      "children": [
        {
          "value": "delete_agent",
          "children": []
        },
        {
          "value": "(agent_id: str)",
          "children": [
            {
              "value": "agent_id: str",
              "children": [
                {
                  "value": "agent_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "prisma.models.Agents | None",
          "children": [
            {
              "value": "prisma.models.Agents | None",
              "children": [
                {
                  "value": "prisma.models.Agents",
                  "children": [
                    {
                      "value": "prisma.models",
                      "children": [
                        {
                          "value": "prisma",
                          "children": []
                        },
                        {
                          "value": "models",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "Agents",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"\n    try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "children": [
                {
                  "value": "deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent",
                  "children": [
                    {
                      "value": "deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )",
                      "children": [
                        {
                          "value": "deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )",
                          "children": [
                            {
                              "value": "deleted_agent",
                              "children": []
                            },
                            {
                              "value": "await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )",
                              "children": [
                                {
                                  "value": "prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.models.Agents.prisma().delete",
                                      "children": [
                                        {
                                          "value": "prisma.models.Agents.prisma()",
                                          "children": [
                                            {
                                              "value": "prisma.models.Agents.prisma",
                                              "children": [
                                                {
                                                  "value": "prisma.models.Agents",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models",
                                                      "children": [
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "models",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "Agents",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "delete",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            where={\"id\": agent_id}\n        )",
                                      "children": [
                                        {
                                          "value": "where={\"id\": agent_id}",
                                          "children": [
                                            {
                                              "value": "where",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"id\": agent_id}",
                                              "children": [
                                                {
                                                  "value": "\"id\": agent_id",
                                                  "children": [
                                                    {
                                                      "value": "\"id\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "agent_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return deleted_agent",
                      "children": [
                        {
                          "value": "deleted_agent",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "prisma.errors.PrismaError as e",
                      "children": [
                        {
                          "value": "prisma.errors.PrismaError",
                          "children": [
                            {
                              "value": "prisma.errors",
                              "children": [
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "errors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PrismaError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Database query failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Database query failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def create_agent_entry(\n    name: str,\n    description: str,\n    author: str,\n    keywords: typing.List[str],\n    categories: typing.List[str],\n    graph: prisma.Json,\n    submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING,\n):\n    \"\"\"\n    Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
      "children": [
        {
          "value": "create_agent_entry",
          "children": []
        },
        {
          "value": "(\n    name: str,\n    description: str,\n    author: str,\n    keywords: typing.List[str],\n    categories: typing.List[str],\n    graph: prisma.Json,\n    submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING,\n)",
          "children": [
            {
              "value": "name: str",
              "children": [
                {
                  "value": "name",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "description: str",
              "children": [
                {
                  "value": "description",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "author: str",
              "children": [
                {
                  "value": "author",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "keywords: typing.List[str]",
              "children": [
                {
                  "value": "keywords",
                  "children": []
                },
                {
                  "value": "typing.List[str]",
                  "children": [
                    {
                      "value": "typing.List[str]",
                      "children": [
                        {
                          "value": "typing.List",
                          "children": [
                            {
                              "value": "typing",
                              "children": []
                            },
                            {
                              "value": "List",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "categories: typing.List[str]",
              "children": [
                {
                  "value": "categories",
                  "children": []
                },
                {
                  "value": "typing.List[str]",
                  "children": [
                    {
                      "value": "typing.List[str]",
                      "children": [
                        {
                          "value": "typing.List",
                          "children": [
                            {
                              "value": "typing",
                              "children": []
                            },
                            {
                              "value": "List",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph: prisma.Json",
              "children": [
                {
                  "value": "graph",
                  "children": []
                },
                {
                  "value": "prisma.Json",
                  "children": [
                    {
                      "value": "prisma.Json",
                      "children": [
                        {
                          "value": "prisma",
                          "children": []
                        },
                        {
                          "value": "Json",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING",
              "children": [
                {
                  "value": "submission_state",
                  "children": []
                },
                {
                  "value": "prisma.enums.SubmissionStatus",
                  "children": [
                    {
                      "value": "prisma.enums.SubmissionStatus",
                      "children": [
                        {
                          "value": "prisma.enums",
                          "children": [
                            {
                              "value": "prisma",
                              "children": []
                            },
                            {
                              "value": "enums",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "SubmissionStatus",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "prisma.enums.SubmissionStatus.PENDING",
                  "children": [
                    {
                      "value": "prisma.enums.SubmissionStatus",
                      "children": [
                        {
                          "value": "prisma.enums",
                          "children": [
                            {
                              "value": "prisma",
                              "children": []
                            },
                            {
                              "value": "enums",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "SubmissionStatus",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "PENDING",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"\n    Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "children": [
                {
                  "value": "agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n\n        return agent",
                  "children": [
                    {
                      "value": "agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )",
                      "children": [
                        {
                          "value": "agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )",
                          "children": [
                            {
                              "value": "agent",
                              "children": []
                            },
                            {
                              "value": "await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )",
                              "children": [
                                {
                                  "value": "prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.models.Agents.prisma().create",
                                      "children": [
                                        {
                                          "value": "prisma.models.Agents.prisma()",
                                          "children": [
                                            {
                                              "value": "prisma.models.Agents.prisma",
                                              "children": [
                                                {
                                                  "value": "prisma.models.Agents",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models",
                                                      "children": [
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "models",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "Agents",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "create",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )",
                                      "children": [
                                        {
                                          "value": "data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }",
                                          "children": [
                                            {
                                              "value": "data",
                                              "children": []
                                            },
                                            {
                                              "value": "{\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }",
                                              "children": [
                                                {
                                                  "value": "\"name\": name",
                                                  "children": [
                                                    {
                                                      "value": "\"name\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "name",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "name",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"description\": description",
                                                  "children": [
                                                    {
                                                      "value": "\"description\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "description",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "description",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"author\": author",
                                                  "children": [
                                                    {
                                                      "value": "\"author\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "author",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "author",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"keywords\": keywords",
                                                  "children": [
                                                    {
                                                      "value": "\"keywords\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "keywords",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "keywords",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"categories\": categories",
                                                  "children": [
                                                    {
                                                      "value": "\"categories\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "categories",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "categories",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"graph\": graph",
                                                  "children": [
                                                    {
                                                      "value": "\"graph\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "graph",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "graph",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}}",
                                                  "children": [
                                                    {
                                                      "value": "\"AnalyticsTracker\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "AnalyticsTracker",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "{\"create\": {\"downloads\": 0, \"views\": 0}}",
                                                      "children": [
                                                        {
                                                          "value": "\"create\": {\"downloads\": 0, \"views\": 0}",
                                                          "children": [
                                                            {
                                                              "value": "\"create\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "create",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{\"downloads\": 0, \"views\": 0}",
                                                              "children": [
                                                                {
                                                                  "value": "\"downloads\": 0",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"downloads\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "downloads",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "0",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"views\": 0",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"views\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "views",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "0",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"submissionStatus\": submission_state",
                                                  "children": [
                                                    {
                                                      "value": "\"submissionStatus\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "submissionStatus",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "submission_state",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return agent",
                      "children": [
                        {
                          "value": "agent",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "prisma.errors.PrismaError as e",
                      "children": [
                        {
                          "value": "prisma.errors.PrismaError",
                          "children": [
                            {
                              "value": "prisma.errors",
                              "children": [
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "errors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PrismaError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Database query failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Database query failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def update_agent_entry(\n    agent_id: str,\n    version: int,\n    submission_state: prisma.enums.SubmissionStatus,\n    comments: str | None = None,\n) -> prisma.models.Agents | None:\n    \"\"\"\n    Update an existing agent entry in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int): The version of the agent.\n        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent.\n    \"\"\"\n\n    try:\n        agent = await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )\n\n        return agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
      "children": [
        {
          "value": "update_agent_entry",
          "children": []
        },
        {
          "value": "(\n    agent_id: str,\n    version: int,\n    submission_state: prisma.enums.SubmissionStatus,\n    comments: str | None = None,\n)",
          "children": [
            {
              "value": "agent_id: str",
              "children": [
                {
                  "value": "agent_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "version: int",
              "children": [
                {
                  "value": "version",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "submission_state: prisma.enums.SubmissionStatus",
              "children": [
                {
                  "value": "submission_state",
                  "children": []
                },
                {
                  "value": "prisma.enums.SubmissionStatus",
                  "children": [
                    {
                      "value": "prisma.enums.SubmissionStatus",
                      "children": [
                        {
                          "value": "prisma.enums",
                          "children": [
                            {
                              "value": "prisma",
                              "children": []
                            },
                            {
                              "value": "enums",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "SubmissionStatus",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "comments: str | None = None",
              "children": [
                {
                  "value": "comments",
                  "children": []
                },
                {
                  "value": "str | None",
                  "children": [
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "prisma.models.Agents | None",
          "children": [
            {
              "value": "prisma.models.Agents | None",
              "children": [
                {
                  "value": "prisma.models.Agents",
                  "children": [
                    {
                      "value": "prisma.models",
                      "children": [
                        {
                          "value": "prisma",
                          "children": []
                        },
                        {
                          "value": "models",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "Agents",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Update an existing agent entry in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int): The version of the agent.\n        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent.\n    \"\"\"\n\n    try:\n        agent = await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )\n\n        return agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"\n    Update an existing agent entry in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int): The version of the agent.\n        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Update an existing agent entry in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int): The version of the agent.\n        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Update an existing agent entry in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int): The version of the agent.\n        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        agent = await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )\n\n        return agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "children": [
                {
                  "value": "agent = await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )\n\n        return agent",
                  "children": [
                    {
                      "value": "agent = await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )",
                      "children": [
                        {
                          "value": "agent = await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )",
                          "children": [
                            {
                              "value": "agent",
                              "children": []
                            },
                            {
                              "value": "await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )",
                              "children": [
                                {
                                  "value": "prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.models.Agents.prisma().update",
                                      "children": [
                                        {
                                          "value": "prisma.models.Agents.prisma()",
                                          "children": [
                                            {
                                              "value": "prisma.models.Agents.prisma",
                                              "children": [
                                                {
                                                  "value": "prisma.models.Agents",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models",
                                                      "children": [
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "models",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "Agents",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "update",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )",
                                      "children": [
                                        {
                                          "value": "where={\"id\": agent_id}",
                                          "children": [
                                            {
                                              "value": "where",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"id\": agent_id}",
                                              "children": [
                                                {
                                                  "value": "\"id\": agent_id",
                                                  "children": [
                                                    {
                                                      "value": "\"id\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "agent_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            }",
                                          "children": [
                                            {
                                              "value": "data",
                                              "children": []
                                            },
                                            {
                                              "value": "{\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            }",
                                              "children": [
                                                {
                                                  "value": "\"version\": version",
                                                  "children": [
                                                    {
                                                      "value": "\"version\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "version",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "version",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"submissionStatus\": submission_state",
                                                  "children": [
                                                    {
                                                      "value": "\"submissionStatus\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "submissionStatus",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "submission_state",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc)",
                                                  "children": [
                                                    {
                                                      "value": "\"submissionReviewDate\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "submissionReviewDate",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "datetime.datetime.now(datetime.timezone.utc)",
                                                      "children": [
                                                        {
                                                          "value": "datetime.datetime.now",
                                                          "children": [
                                                            {
                                                              "value": "datetime.datetime",
                                                              "children": [
                                                                {
                                                                  "value": "datetime",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "datetime",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "now",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(datetime.timezone.utc)",
                                                          "children": [
                                                            {
                                                              "value": "datetime.timezone.utc",
                                                              "children": [
                                                                {
                                                                  "value": "datetime.timezone",
                                                                  "children": [
                                                                    {
                                                                      "value": "datetime",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "timezone",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "utc",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"submissionReviewComments\": comments",
                                                  "children": [
                                                    {
                                                      "value": "\"submissionReviewComments\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "submissionReviewComments",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "comments",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return agent",
                      "children": [
                        {
                          "value": "agent",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "prisma.errors.PrismaError as e",
                      "children": [
                        {
                          "value": "prisma.errors.PrismaError",
                          "children": [
                            {
                              "value": "prisma.errors",
                              "children": [
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "errors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PrismaError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Agent Update Failed Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Agent Update Failed Database query failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Agent Update Failed Database query failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_agents(\n    page: int = 1,\n    page_size: int = 10,\n    name: str | None = None,\n    keyword: str | None = None,\n    category: str | None = None,\n    description: str | None = None,\n    description_threshold: int = 60,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n    sort_by: str = \"createdAt\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n):\n    \"\"\"\n    Retrieve a list of agents from the database based on the provided filters and pagination parameters.\n\n    Args:\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n        name (str, optional): Filter agents by name. Defaults to None.\n        keyword (str, optional): Filter agents by keyword. Defaults to None.\n        category (str, optional): Filter agents by category. Defaults to None.\n        description (str, optional): Filter agents by description. Defaults to None.\n        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60.\n        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\".\n        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\".\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Define the base query\n        query = {}\n\n        # Add optional filters\n        if name:\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}\n        if keyword:\n            query[\"keywords\"] = {\"has\": keyword}\n        if category:\n            query[\"categories\"] = {\"has\": category}\n\n        query[\"submissionStatus\"] = submission_status\n\n        # Define sorting\n        order = {sort_by: sort_order}\n\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Apply fuzzy search on description if provided\n        if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(agents)\n\n        return {\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total_count + page_size - 1) // page_size,\n        }\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
      "children": [
        {
          "value": "get_agents",
          "children": []
        },
        {
          "value": "(\n    page: int = 1,\n    page_size: int = 10,\n    name: str | None = None,\n    keyword: str | None = None,\n    category: str | None = None,\n    description: str | None = None,\n    description_threshold: int = 60,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n    sort_by: str = \"createdAt\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n)",
          "children": [
            {
              "value": "page: int = 1",
              "children": [
                {
                  "value": "page",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "1",
                  "children": []
                }
              ]
            },
            {
              "value": "page_size: int = 10",
              "children": [
                {
                  "value": "page_size",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "10",
                  "children": []
                }
              ]
            },
            {
              "value": "name: str | None = None",
              "children": [
                {
                  "value": "name",
                  "children": []
                },
                {
                  "value": "str | None",
                  "children": [
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "keyword: str | None = None",
              "children": [
                {
                  "value": "keyword",
                  "children": []
                },
                {
                  "value": "str | None",
                  "children": [
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "category: str | None = None",
              "children": [
                {
                  "value": "category",
                  "children": []
                },
                {
                  "value": "str | None",
                  "children": [
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "description: str | None = None",
              "children": [
                {
                  "value": "description",
                  "children": []
                },
                {
                  "value": "str | None",
                  "children": [
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "description_threshold: int = 60",
              "children": [
                {
                  "value": "description_threshold",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "60",
                  "children": []
                }
              ]
            },
            {
              "value": "submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED",
              "children": [
                {
                  "value": "submission_status",
                  "children": []
                },
                {
                  "value": "prisma.enums.SubmissionStatus",
                  "children": [
                    {
                      "value": "prisma.enums.SubmissionStatus",
                      "children": [
                        {
                          "value": "prisma.enums",
                          "children": [
                            {
                              "value": "prisma",
                              "children": []
                            },
                            {
                              "value": "enums",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "SubmissionStatus",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "prisma.enums.SubmissionStatus.APPROVED",
                  "children": [
                    {
                      "value": "prisma.enums.SubmissionStatus",
                      "children": [
                        {
                          "value": "prisma.enums",
                          "children": [
                            {
                              "value": "prisma",
                              "children": []
                            },
                            {
                              "value": "enums",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "SubmissionStatus",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "APPROVED",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "sort_by: str = \"createdAt\"",
              "children": [
                {
                  "value": "sort_by",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"createdAt\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "createdAt",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\"",
              "children": [
                {
                  "value": "sort_order",
                  "children": []
                },
                {
                  "value": "typing.Literal[\"desc\"] | typing.Literal[\"asc\"]",
                  "children": [
                    {
                      "value": "typing.Literal[\"desc\"] | typing.Literal[\"asc\"]",
                      "children": [
                        {
                          "value": "typing.Literal[\"desc\"]",
                          "children": [
                            {
                              "value": "typing.Literal",
                              "children": [
                                {
                                  "value": "typing",
                                  "children": []
                                },
                                {
                                  "value": "Literal",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"desc\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "desc",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "typing.Literal[\"asc\"]",
                          "children": [
                            {
                              "value": "typing.Literal",
                              "children": [
                                {
                                  "value": "typing",
                                  "children": []
                                },
                                {
                                  "value": "Literal",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"asc\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "asc",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"desc\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "desc",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Retrieve a list of agents from the database based on the provided filters and pagination parameters.\n\n    Args:\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n        name (str, optional): Filter agents by name. Defaults to None.\n        keyword (str, optional): Filter agents by keyword. Defaults to None.\n        category (str, optional): Filter agents by category. Defaults to None.\n        description (str, optional): Filter agents by description. Defaults to None.\n        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60.\n        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\".\n        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\".\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Define the base query\n        query = {}\n\n        # Add optional filters\n        if name:\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}\n        if keyword:\n            query[\"keywords\"] = {\"has\": keyword}\n        if category:\n            query[\"categories\"] = {\"has\": category}\n\n        query[\"submissionStatus\"] = submission_status\n\n        # Define sorting\n        order = {sort_by: sort_order}\n\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Apply fuzzy search on description if provided\n        if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(agents)\n\n        return {\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total_count + page_size - 1) // page_size,\n        }\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"\n    Retrieve a list of agents from the database based on the provided filters and pagination parameters.\n\n    Args:\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n        name (str, optional): Filter agents by name. Defaults to None.\n        keyword (str, optional): Filter agents by keyword. Defaults to None.\n        category (str, optional): Filter agents by category. Defaults to None.\n        description (str, optional): Filter agents by description. Defaults to None.\n        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60.\n        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\".\n        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\".\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Retrieve a list of agents from the database based on the provided filters and pagination parameters.\n\n    Args:\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n        name (str, optional): Filter agents by name. Defaults to None.\n        keyword (str, optional): Filter agents by keyword. Defaults to None.\n        category (str, optional): Filter agents by category. Defaults to None.\n        description (str, optional): Filter agents by description. Defaults to None.\n        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60.\n        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\".\n        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\".\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Retrieve a list of agents from the database based on the provided filters and pagination parameters.\n\n    Args:\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n        name (str, optional): Filter agents by name. Defaults to None.\n        keyword (str, optional): Filter agents by keyword. Defaults to None.\n        category (str, optional): Filter agents by category. Defaults to None.\n        description (str, optional): Filter agents by description. Defaults to None.\n        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60.\n        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\".\n        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\".\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        # Define the base query\n        query = {}\n\n        # Add optional filters\n        if name:\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}\n        if keyword:\n            query[\"keywords\"] = {\"has\": keyword}\n        if category:\n            query[\"categories\"] = {\"has\": category}\n\n        query[\"submissionStatus\"] = submission_status\n\n        # Define sorting\n        order = {sort_by: sort_order}\n\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Apply fuzzy search on description if provided\n        if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(agents)\n\n        return {\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total_count + page_size - 1) // page_size,\n        }\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "children": [
                {
                  "value": "# Define the base query",
                  "children": []
                },
                {
                  "value": "query = {}\n\n        # Add optional filters\n        if name:\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}\n        if keyword:\n            query[\"keywords\"] = {\"has\": keyword}\n        if category:\n            query[\"categories\"] = {\"has\": category}\n\n        query[\"submissionStatus\"] = submission_status\n\n        # Define sorting\n        order = {sort_by: sort_order}\n\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Apply fuzzy search on description if provided\n        if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(agents)\n\n        return {\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total_count + page_size - 1) // page_size,\n        }",
                  "children": [
                    {
                      "value": "query = {}",
                      "children": [
                        {
                          "value": "query = {}",
                          "children": [
                            {
                              "value": "query",
                              "children": []
                            },
                            {
                              "value": "{}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Add optional filters",
                      "children": []
                    },
                    {
                      "value": "if name:\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}",
                      "children": [
                        {
                          "value": "name",
                          "children": []
                        },
                        {
                          "value": "query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}",
                          "children": [
                            {
                              "value": "query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}",
                              "children": [
                                {
                                  "value": "query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}",
                                  "children": [
                                    {
                                      "value": "query[\"name\"]",
                                      "children": [
                                        {
                                          "value": "query",
                                          "children": []
                                        },
                                        {
                                          "value": "\"name\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "{\"contains\": name, \"mode\": \"insensitive\"}",
                                      "children": [
                                        {
                                          "value": "\"contains\": name",
                                          "children": [
                                            {
                                              "value": "\"contains\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "contains",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"mode\": \"insensitive\"",
                                          "children": [
                                            {
                                              "value": "\"mode\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "mode",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"insensitive\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "insensitive",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if keyword:\n            query[\"keywords\"] = {\"has\": keyword}",
                      "children": [
                        {
                          "value": "keyword",
                          "children": []
                        },
                        {
                          "value": "query[\"keywords\"] = {\"has\": keyword}",
                          "children": [
                            {
                              "value": "query[\"keywords\"] = {\"has\": keyword}",
                              "children": [
                                {
                                  "value": "query[\"keywords\"] = {\"has\": keyword}",
                                  "children": [
                                    {
                                      "value": "query[\"keywords\"]",
                                      "children": [
                                        {
                                          "value": "query",
                                          "children": []
                                        },
                                        {
                                          "value": "\"keywords\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "keywords",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "{\"has\": keyword}",
                                      "children": [
                                        {
                                          "value": "\"has\": keyword",
                                          "children": [
                                            {
                                              "value": "\"has\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "has",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "keyword",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if category:\n            query[\"categories\"] = {\"has\": category}",
                      "children": [
                        {
                          "value": "category",
                          "children": []
                        },
                        {
                          "value": "query[\"categories\"] = {\"has\": category}",
                          "children": [
                            {
                              "value": "query[\"categories\"] = {\"has\": category}",
                              "children": [
                                {
                                  "value": "query[\"categories\"] = {\"has\": category}",
                                  "children": [
                                    {
                                      "value": "query[\"categories\"]",
                                      "children": [
                                        {
                                          "value": "query",
                                          "children": []
                                        },
                                        {
                                          "value": "\"categories\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "categories",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "{\"has\": category}",
                                      "children": [
                                        {
                                          "value": "\"has\": category",
                                          "children": [
                                            {
                                              "value": "\"has\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "has",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "category",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "query[\"submissionStatus\"] = submission_status",
                      "children": [
                        {
                          "value": "query[\"submissionStatus\"] = submission_status",
                          "children": [
                            {
                              "value": "query[\"submissionStatus\"]",
                              "children": [
                                {
                                  "value": "query",
                                  "children": []
                                },
                                {
                                  "value": "\"submissionStatus\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "submissionStatus",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "submission_status",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Define sorting",
                      "children": []
                    },
                    {
                      "value": "order = {sort_by: sort_order}",
                      "children": [
                        {
                          "value": "order = {sort_by: sort_order}",
                          "children": [
                            {
                              "value": "order",
                              "children": []
                            },
                            {
                              "value": "{sort_by: sort_order}",
                              "children": [
                                {
                                  "value": "sort_by: sort_order",
                                  "children": [
                                    {
                                      "value": "sort_by",
                                      "children": []
                                    },
                                    {
                                      "value": "sort_order",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Calculate pagination",
                      "children": []
                    },
                    {
                      "value": "skip = (page - 1) * page_size",
                      "children": [
                        {
                          "value": "skip = (page - 1) * page_size",
                          "children": [
                            {
                              "value": "skip",
                              "children": []
                            },
                            {
                              "value": "(page - 1) * page_size",
                              "children": [
                                {
                                  "value": "(page - 1)",
                                  "children": [
                                    {
                                      "value": "page - 1",
                                      "children": [
                                        {
                                          "value": "page",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "page_size",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Execute the query",
                      "children": []
                    },
                    {
                      "value": "try:\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )",
                          "children": [
                            {
                              "value": "agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )",
                              "children": [
                                {
                                  "value": "agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )",
                                  "children": [
                                    {
                                      "value": "agents",
                                      "children": []
                                    },
                                    {
                                      "value": "await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )",
                                      "children": [
                                        {
                                          "value": "prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )",
                                          "children": [
                                            {
                                              "value": "prisma.models.Agents.prisma().find_many",
                                              "children": [
                                                {
                                                  "value": "prisma.models.Agents.prisma()",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models.Agents.prisma",
                                                      "children": [
                                                        {
                                                          "value": "prisma.models.Agents",
                                                          "children": [
                                                            {
                                                              "value": "prisma.models",
                                                              "children": [
                                                                {
                                                                  "value": "prisma",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "models",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "Agents",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "find_many",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )",
                                              "children": [
                                                {
                                                  "value": "where=query",
                                                  "children": [
                                                    {
                                                      "value": "where",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "query",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "# type: ignore",
                                                  "children": []
                                                },
                                                {
                                                  "value": "order=order",
                                                  "children": [
                                                    {
                                                      "value": "order",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "order",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "# type: ignore",
                                                  "children": []
                                                },
                                                {
                                                  "value": "skip=skip",
                                                  "children": [
                                                    {
                                                      "value": "skip",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "skip",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "take=page_size",
                                                  "children": [
                                                    {
                                                      "value": "take",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "page_size",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "prisma.errors.PrismaError as e",
                              "children": [
                                {
                                  "value": "prisma.errors.PrismaError",
                                  "children": [
                                    {
                                      "value": "prisma.errors",
                                      "children": [
                                        {
                                          "value": "prisma",
                                          "children": []
                                        },
                                        {
                                          "value": "errors",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "PrismaError",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "AgentQueryError",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"Database query failed: {str(e)}\")",
                                          "children": [
                                            {
                                              "value": "f\"Database query failed: {str(e)}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Database query failed:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{str(e)}",
                                                  "children": [
                                                    {
                                                      "value": "str(e)",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(e)",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Apply fuzzy search on description if provided",
                      "children": []
                    },
                    {
                      "value": "if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                      "children": [
                        {
                          "value": "description",
                          "children": []
                        },
                        {
                          "value": "try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                          "children": [
                            {
                              "value": "try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                              "children": [
                                {
                                  "value": "filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents",
                                  "children": [
                                    {
                                      "value": "filtered_agents = []",
                                      "children": [
                                        {
                                          "value": "filtered_agents = []",
                                          "children": [
                                            {
                                              "value": "filtered_agents",
                                              "children": []
                                            },
                                            {
                                              "value": "[]",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)",
                                      "children": [
                                        {
                                          "value": "agent",
                                          "children": []
                                        },
                                        {
                                          "value": "agents",
                                          "children": []
                                        },
                                        {
                                          "value": "if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)",
                                          "children": [
                                            {
                                              "value": "if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)",
                                              "children": [
                                                {
                                                  "value": "(\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold",
                                                      "children": [
                                                        {
                                                          "value": "agent.description",
                                                          "children": [
                                                            {
                                                              "value": "agent",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "description",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold",
                                                          "children": [
                                                            {
                                                              "value": "fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )",
                                                              "children": [
                                                                {
                                                                  "value": "fuzzywuzzy.fuzz.partial_ratio",
                                                                  "children": [
                                                                    {
                                                                      "value": "fuzzywuzzy.fuzz",
                                                                      "children": [
                                                                        {
                                                                          "value": "fuzzywuzzy",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "fuzz",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "partial_ratio",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "(\n                            description.lower(), agent.description.lower()\n                        )",
                                                                  "children": [
                                                                    {
                                                                      "value": "description.lower()",
                                                                      "children": [
                                                                        {
                                                                          "value": "description.lower",
                                                                          "children": [
                                                                            {
                                                                              "value": "description",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "lower",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "()",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "agent.description.lower()",
                                                                      "children": [
                                                                        {
                                                                          "value": "agent.description.lower",
                                                                          "children": [
                                                                            {
                                                                              "value": "agent.description",
                                                                              "children": [
                                                                                {
                                                                                  "value": "agent",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "description",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "lower",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "()",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "description_threshold",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "filtered_agents.append(agent)",
                                                  "children": [
                                                    {
                                                      "value": "filtered_agents.append(agent)",
                                                      "children": [
                                                        {
                                                          "value": "filtered_agents.append(agent)",
                                                          "children": [
                                                            {
                                                              "value": "filtered_agents.append",
                                                              "children": [
                                                                {
                                                                  "value": "filtered_agents",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "append",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(agent)",
                                                              "children": [
                                                                {
                                                                  "value": "agent",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "agents = filtered_agents",
                                      "children": [
                                        {
                                          "value": "agents = filtered_agents",
                                          "children": [
                                            {
                                              "value": "agents",
                                              "children": []
                                            },
                                            {
                                              "value": "filtered_agents",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "AttributeError as e",
                                      "children": [
                                        {
                                          "value": "AttributeError",
                                          "children": []
                                        },
                                        {
                                          "value": "e",
                                          "children": [
                                            {
                                              "value": "e",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                                          "children": [
                                            {
                                              "value": "AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                                              "children": [
                                                {
                                                  "value": "AgentQueryError",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(f\"Error during fuzzy search: {str(e)}\")",
                                                  "children": [
                                                    {
                                                      "value": "f\"Error during fuzzy search: {str(e)}\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Error during fuzzy search:",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{str(e)}",
                                                          "children": [
                                                            {
                                                              "value": "str(e)",
                                                              "children": [
                                                                {
                                                                  "value": "str",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(e)",
                                                                  "children": [
                                                                    {
                                                                      "value": "e",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Get total count for pagination info",
                      "children": []
                    },
                    {
                      "value": "total_count = len(agents)",
                      "children": [
                        {
                          "value": "total_count = len(agents)",
                          "children": [
                            {
                              "value": "total_count",
                              "children": []
                            },
                            {
                              "value": "len(agents)",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(agents)",
                                  "children": [
                                    {
                                      "value": "agents",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return {\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total_count + page_size - 1) // page_size,\n        }",
                      "children": [
                        {
                          "value": "{\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total_count + page_size - 1) // page_size,\n        }",
                          "children": [
                            {
                              "value": "\"agents\": agents",
                              "children": [
                                {
                                  "value": "\"agents\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "agents",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "agents",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"total_count\": total_count",
                              "children": [
                                {
                                  "value": "\"total_count\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "total_count",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "total_count",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"page\": page",
                              "children": [
                                {
                                  "value": "\"page\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "page",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "page",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"page_size\": page_size",
                              "children": [
                                {
                                  "value": "\"page_size\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "page_size",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "page_size",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"total_pages\": (total_count + page_size - 1) // page_size",
                              "children": [
                                {
                                  "value": "\"total_pages\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "total_pages",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(total_count + page_size - 1) // page_size",
                                  "children": [
                                    {
                                      "value": "(total_count + page_size - 1)",
                                      "children": [
                                        {
                                          "value": "total_count + page_size - 1",
                                          "children": [
                                            {
                                              "value": "total_count + page_size",
                                              "children": [
                                                {
                                                  "value": "total_count",
                                                  "children": []
                                                },
                                                {
                                                  "value": "page_size",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "page_size",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e",
                  "children": [
                    {
                      "value": "AgentQueryError as e",
                      "children": [
                        {
                          "value": "AgentQueryError",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Log the error or handle it as needed",
                      "children": []
                    },
                    {
                      "value": "raise e",
                      "children": [
                        {
                          "value": "raise e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")",
                  "children": [
                    {
                      "value": "ValueError as e",
                      "children": [
                        {
                          "value": "ValueError",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Invalid input parameter: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Invalid input parameter: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Invalid input parameter: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Invalid input parameter:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Catch any other unexpected exceptions",
                      "children": []
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_agent_details(agent_id: str, version: int | None = None):\n    \"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"\n    try:\n        query = {\"id\": agent_id}\n        if version is not None:\n            query[\"version\"] = version  # type: ignore\n\n        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\n        if not agent:\n            raise AgentQueryError(\"Agent not found\")\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
      "children": [
        {
          "value": "get_agent_details",
          "children": []
        },
        {
          "value": "(agent_id: str, version: int | None = None)",
          "children": [
            {
              "value": "agent_id: str",
              "children": [
                {
                  "value": "agent_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "version: int | None = None",
              "children": [
                {
                  "value": "version",
                  "children": []
                },
                {
                  "value": "int | None",
                  "children": [
                    {
                      "value": "int | None",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"\n    try:\n        query = {\"id\": agent_id}\n        if version is not None:\n            query[\"version\"] = version  # type: ignore\n\n        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\n        if not agent:\n            raise AgentQueryError(\"Agent not found\")\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        query = {\"id\": agent_id}\n        if version is not None:\n            query[\"version\"] = version  # type: ignore\n\n        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\n        if not agent:\n            raise AgentQueryError(\"Agent not found\")\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "children": [
                {
                  "value": "query = {\"id\": agent_id}\n        if version is not None:\n            query[\"version\"] = version  # type: ignore\n\n        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\n        if not agent:\n            raise AgentQueryError(\"Agent not found\")\n\n        return agent",
                  "children": [
                    {
                      "value": "query = {\"id\": agent_id}",
                      "children": [
                        {
                          "value": "query = {\"id\": agent_id}",
                          "children": [
                            {
                              "value": "query",
                              "children": []
                            },
                            {
                              "value": "{\"id\": agent_id}",
                              "children": [
                                {
                                  "value": "\"id\": agent_id",
                                  "children": [
                                    {
                                      "value": "\"id\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "id",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "agent_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if version is not None:\n            query[\"version\"] = version  # type: ignore",
                      "children": [
                        {
                          "value": "version is not None",
                          "children": [
                            {
                              "value": "version",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "query[\"version\"] = version  # type: ignore",
                          "children": [
                            {
                              "value": "query[\"version\"] = version",
                              "children": [
                                {
                                  "value": "query[\"version\"] = version",
                                  "children": [
                                    {
                                      "value": "query[\"version\"]",
                                      "children": [
                                        {
                                          "value": "query",
                                          "children": []
                                        },
                                        {
                                          "value": "\"version\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "version",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "version",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# type: ignore",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "agent = await prisma.models.Agents.prisma().find_first(where=query)",
                      "children": [
                        {
                          "value": "agent = await prisma.models.Agents.prisma().find_first(where=query)",
                          "children": [
                            {
                              "value": "agent",
                              "children": []
                            },
                            {
                              "value": "await prisma.models.Agents.prisma().find_first(where=query)",
                              "children": [
                                {
                                  "value": "prisma.models.Agents.prisma().find_first(where=query)",
                                  "children": [
                                    {
                                      "value": "prisma.models.Agents.prisma().find_first",
                                      "children": [
                                        {
                                          "value": "prisma.models.Agents.prisma()",
                                          "children": [
                                            {
                                              "value": "prisma.models.Agents.prisma",
                                              "children": [
                                                {
                                                  "value": "prisma.models.Agents",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models",
                                                      "children": [
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "models",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "Agents",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "find_first",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(where=query)",
                                      "children": [
                                        {
                                          "value": "where=query",
                                          "children": [
                                            {
                                              "value": "where",
                                              "children": []
                                            },
                                            {
                                              "value": "query",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# type: ignore",
                      "children": []
                    },
                    {
                      "value": "if not agent:\n            raise AgentQueryError(\"Agent not found\")",
                      "children": [
                        {
                          "value": "not agent",
                          "children": [
                            {
                              "value": "agent",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "raise AgentQueryError(\"Agent not found\")",
                          "children": [
                            {
                              "value": "raise AgentQueryError(\"Agent not found\")",
                              "children": [
                                {
                                  "value": "AgentQueryError(\"Agent not found\")",
                                  "children": [
                                    {
                                      "value": "AgentQueryError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\"Agent not found\")",
                                      "children": [
                                        {
                                          "value": "\"Agent not found\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Agent not found",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return agent",
                      "children": [
                        {
                          "value": "agent",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "prisma.errors.PrismaError as e",
                      "children": [
                        {
                          "value": "prisma.errors.PrismaError",
                          "children": [
                            {
                              "value": "prisma.errors",
                              "children": [
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "errors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PrismaError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Database query failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Database query failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def search_db(\n    query: str,\n    page: int = 1,\n    page_size: int = 10,\n    categories: typing.List[str] | None = None,\n    description_threshold: int = 60,\n    sort_by: str = \"rank\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n    \"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"\n    try:\n        offset = (page - 1) * page_size\n\n        category_filter = \"1=1\"\n        if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"\n\n        # Construct the ORDER BY clause based on the sort_by parameter\n        if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\n        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\n\n        sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\n\n        results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )\n\n        class CountResponse(pydantic.BaseModel):\n            count: int\n\n        count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\n\n        total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )\n        total_count = total_count.count if total_count else 0\n\n        return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
      "children": [
        {
          "value": "search_db",
          "children": []
        },
        {
          "value": "(\n    query: str,\n    page: int = 1,\n    page_size: int = 10,\n    categories: typing.List[str] | None = None,\n    description_threshold: int = 60,\n    sort_by: str = \"rank\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n)",
          "children": [
            {
              "value": "query: str",
              "children": [
                {
                  "value": "query",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "page: int = 1",
              "children": [
                {
                  "value": "page",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "1",
                  "children": []
                }
              ]
            },
            {
              "value": "page_size: int = 10",
              "children": [
                {
                  "value": "page_size",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "10",
                  "children": []
                }
              ]
            },
            {
              "value": "categories: typing.List[str] | None = None",
              "children": [
                {
                  "value": "categories",
                  "children": []
                },
                {
                  "value": "typing.List[str] | None",
                  "children": [
                    {
                      "value": "typing.List[str] | None",
                      "children": [
                        {
                          "value": "typing.List[str]",
                          "children": [
                            {
                              "value": "typing.List",
                              "children": [
                                {
                                  "value": "typing",
                                  "children": []
                                },
                                {
                                  "value": "List",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "description_threshold: int = 60",
              "children": [
                {
                  "value": "description_threshold",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "60",
                  "children": []
                }
              ]
            },
            {
              "value": "sort_by: str = \"rank\"",
              "children": [
                {
                  "value": "sort_by",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"rank\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "rank",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\"",
              "children": [
                {
                  "value": "sort_order",
                  "children": []
                },
                {
                  "value": "typing.Literal[\"desc\"] | typing.Literal[\"asc\"]",
                  "children": [
                    {
                      "value": "typing.Literal[\"desc\"] | typing.Literal[\"asc\"]",
                      "children": [
                        {
                          "value": "typing.Literal[\"desc\"]",
                          "children": [
                            {
                              "value": "typing.Literal",
                              "children": [
                                {
                                  "value": "typing",
                                  "children": []
                                },
                                {
                                  "value": "Literal",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"desc\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "desc",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "typing.Literal[\"asc\"]",
                          "children": [
                            {
                              "value": "typing.Literal",
                              "children": [
                                {
                                  "value": "typing",
                                  "children": []
                                },
                                {
                                  "value": "Literal",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"asc\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "asc",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"desc\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "desc",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED",
              "children": [
                {
                  "value": "submission_status",
                  "children": []
                },
                {
                  "value": "prisma.enums.SubmissionStatus",
                  "children": [
                    {
                      "value": "prisma.enums.SubmissionStatus",
                      "children": [
                        {
                          "value": "prisma.enums",
                          "children": [
                            {
                              "value": "prisma",
                              "children": []
                            },
                            {
                              "value": "enums",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "SubmissionStatus",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "prisma.enums.SubmissionStatus.APPROVED",
                  "children": [
                    {
                      "value": "prisma.enums.SubmissionStatus",
                      "children": [
                        {
                          "value": "prisma.enums",
                          "children": [
                            {
                              "value": "prisma",
                              "children": []
                            },
                            {
                              "value": "enums",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "SubmissionStatus",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "APPROVED",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "market.model.ListResponse[market.utils.extension_types.AgentsWithRank]",
          "children": [
            {
              "value": "market.model.ListResponse[market.utils.extension_types.AgentsWithRank]",
              "children": [
                {
                  "value": "market.model.ListResponse",
                  "children": [
                    {
                      "value": "market.model",
                      "children": [
                        {
                          "value": "market",
                          "children": []
                        },
                        {
                          "value": "model",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ListResponse",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "market.utils.extension_types.AgentsWithRank",
                  "children": [
                    {
                      "value": "market.utils.extension_types",
                      "children": [
                        {
                          "value": "market.utils",
                          "children": [
                            {
                              "value": "market",
                              "children": []
                            },
                            {
                              "value": "utils",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "extension_types",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "AgentsWithRank",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"\n    try:\n        offset = (page - 1) * page_size\n\n        category_filter = \"1=1\"\n        if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"\n\n        # Construct the ORDER BY clause based on the sort_by parameter\n        if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\n        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\n\n        sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\n\n        results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )\n\n        class CountResponse(pydantic.BaseModel):\n            count: int\n\n        count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\n\n        total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )\n        total_count = total_count.count if total_count else 0\n\n        return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        offset = (page - 1) * page_size\n\n        category_filter = \"1=1\"\n        if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"\n\n        # Construct the ORDER BY clause based on the sort_by parameter\n        if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\n        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\n\n        sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\n\n        results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )\n\n        class CountResponse(pydantic.BaseModel):\n            count: int\n\n        count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\n\n        total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )\n        total_count = total_count.count if total_count else 0\n\n        return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "children": [
                {
                  "value": "offset = (page - 1) * page_size\n\n        category_filter = \"1=1\"\n        if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"\n\n        # Construct the ORDER BY clause based on the sort_by parameter\n        if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\n        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\n\n        sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\n\n        results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )\n\n        class CountResponse(pydantic.BaseModel):\n            count: int\n\n        count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\n\n        total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )\n        total_count = total_count.count if total_count else 0\n\n        return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                  "children": [
                    {
                      "value": "offset = (page - 1) * page_size",
                      "children": [
                        {
                          "value": "offset = (page - 1) * page_size",
                          "children": [
                            {
                              "value": "offset",
                              "children": []
                            },
                            {
                              "value": "(page - 1) * page_size",
                              "children": [
                                {
                                  "value": "(page - 1)",
                                  "children": [
                                    {
                                      "value": "page - 1",
                                      "children": [
                                        {
                                          "value": "page",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "page_size",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "category_filter = \"1=1\"",
                      "children": [
                        {
                          "value": "category_filter = \"1=1\"",
                          "children": [
                            {
                              "value": "category_filter",
                              "children": []
                            },
                            {
                              "value": "\"1=1\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "1=1",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"",
                      "children": [
                        {
                          "value": "categories",
                          "children": []
                        },
                        {
                          "value": "category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"",
                          "children": [
                            {
                              "value": "category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]",
                              "children": [
                                {
                                  "value": "category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]",
                                  "children": [
                                    {
                                      "value": "category_conditions",
                                      "children": []
                                    },
                                    {
                                      "value": "[f\"'{cat}' = ANY(categories)\" for cat in categories]",
                                      "children": [
                                        {
                                          "value": "f\"'{cat}' = ANY(categories)\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "'",
                                              "children": []
                                            },
                                            {
                                              "value": "{cat}",
                                              "children": [
                                                {
                                                  "value": "cat",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "' = ANY(categories)",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "for cat in categories",
                                          "children": [
                                            {
                                              "value": "cat",
                                              "children": []
                                            },
                                            {
                                              "value": "categories",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"",
                              "children": [
                                {
                                  "value": "category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"",
                                  "children": [
                                    {
                                      "value": "category_filter",
                                      "children": []
                                    },
                                    {
                                      "value": "\"AND (\" + \" OR \".join(category_conditions) + \")\"",
                                      "children": [
                                        {
                                          "value": "\"AND (\" + \" OR \".join(category_conditions)",
                                          "children": [
                                            {
                                              "value": "\"AND (\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "AND (",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\" OR \".join(category_conditions)",
                                              "children": [
                                                {
                                                  "value": "\" OR \".join",
                                                  "children": [
                                                    {
                                                      "value": "\" OR \"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "OR",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "join",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(category_conditions)",
                                                  "children": [
                                                    {
                                                      "value": "category_conditions",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\")\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": ")",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Construct the ORDER BY clause based on the sort_by parameter",
                      "children": []
                    },
                    {
                      "value": "if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'",
                      "children": [
                        {
                          "value": "sort_by in [\"createdAt\", \"updatedAt\"]",
                          "children": [
                            {
                              "value": "sort_by",
                              "children": []
                            },
                            {
                              "value": "[\"createdAt\", \"updatedAt\"]",
                              "children": [
                                {
                                  "value": "\"createdAt\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "createdAt",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"updatedAt\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "updatedAt",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'",
                          "children": [
                            {
                              "value": "order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'",
                              "children": [
                                {
                                  "value": "order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'",
                                  "children": [
                                    {
                                      "value": "order_by_clause",
                                      "children": []
                                    },
                                    {
                                      "value": "f'\"{sort_by}\" {sort_order.upper()}, rank DESC'",
                                      "children": [
                                        {
                                          "value": "f'",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "{sort_by}",
                                          "children": [
                                            {
                                              "value": "sort_by",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "{sort_order.upper()}",
                                          "children": [
                                            {
                                              "value": "sort_order.upper()",
                                              "children": [
                                                {
                                                  "value": "sort_order.upper",
                                                  "children": [
                                                    {
                                                      "value": "sort_order",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "upper",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": ", rank DESC",
                                          "children": []
                                        },
                                        {
                                          "value": "'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"",
                          "children": [
                            {
                              "value": "sort_by == \"name\"",
                              "children": [
                                {
                                  "value": "sort_by",
                                  "children": []
                                },
                                {
                                  "value": "\"name\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "name",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "order_by_clause = f\"name {sort_order.upper()}, rank DESC\"",
                              "children": [
                                {
                                  "value": "order_by_clause = f\"name {sort_order.upper()}, rank DESC\"",
                                  "children": [
                                    {
                                      "value": "order_by_clause = f\"name {sort_order.upper()}, rank DESC\"",
                                      "children": [
                                        {
                                          "value": "order_by_clause",
                                          "children": []
                                        },
                                        {
                                          "value": "f\"name {sort_order.upper()}, rank DESC\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            },
                                            {
                                              "value": "{sort_order.upper()}",
                                              "children": [
                                                {
                                                  "value": "sort_order.upper()",
                                                  "children": [
                                                    {
                                                      "value": "sort_order.upper",
                                                      "children": [
                                                        {
                                                          "value": "sort_order",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "upper",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": ", rank DESC",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'",
                          "children": [
                            {
                              "value": "order_by_clause = 'rank DESC, \"createdAt\" DESC'",
                              "children": [
                                {
                                  "value": "order_by_clause = 'rank DESC, \"createdAt\" DESC'",
                                  "children": [
                                    {
                                      "value": "order_by_clause = 'rank DESC, \"createdAt\" DESC'",
                                      "children": [
                                        {
                                          "value": "order_by_clause",
                                          "children": []
                                        },
                                        {
                                          "value": "'rank DESC, \"createdAt\" DESC'",
                                          "children": [
                                            {
                                              "value": "'",
                                              "children": []
                                            },
                                            {
                                              "value": "rank DESC, \"createdAt\" DESC",
                                              "children": []
                                            },
                                            {
                                              "value": "'",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"",
                      "children": [
                        {
                          "value": "submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"",
                          "children": [
                            {
                              "value": "submission_status_filter",
                              "children": []
                            },
                            {
                              "value": "f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"",
                              "children": [
                                {
                                  "value": "f\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "\"submissionStatus\" = '",
                                  "children": []
                                },
                                {
                                  "value": "{submission_status}",
                                  "children": [
                                    {
                                      "value": "submission_status",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"",
                      "children": [
                        {
                          "value": "sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"",
                          "children": [
                            {
                              "value": "sql_query",
                              "children": []
                            },
                            {
                              "value": "f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"",
                              "children": [
                                {
                                  "value": "f\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('",
                                  "children": []
                                },
                                {
                                  "value": "{query}",
                                  "children": [
                                    {
                                      "value": "query",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description,",
                                  "children": []
                                },
                                {
                                  "value": "{description_threshold}",
                                  "children": [
                                    {
                                      "value": "description_threshold",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": ") AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND",
                                  "children": []
                                },
                                {
                                  "value": "{category_filter}",
                                  "children": [
                                    {
                                      "value": "category_filter",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "AND",
                                  "children": []
                                },
                                {
                                  "value": "{submission_status_filter}",
                                  "children": [
                                    {
                                      "value": "submission_status_filter",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ORDER BY",
                                  "children": []
                                },
                                {
                                  "value": "{order_by_clause}",
                                  "children": [
                                    {
                                      "value": "order_by_clause",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "LIMIT",
                                  "children": []
                                },
                                {
                                  "value": "{page_size}",
                                  "children": [
                                    {
                                      "value": "page_size",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "OFFSET",
                                  "children": []
                                },
                                {
                                  "value": "{offset}",
                                  "children": [
                                    {
                                      "value": "offset",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": ";",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )",
                      "children": [
                        {
                          "value": "results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )",
                          "children": [
                            {
                              "value": "results",
                              "children": []
                            },
                            {
                              "value": "await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )",
                              "children": [
                                {
                                  "value": "prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.client.get_client().query_raw",
                                      "children": [
                                        {
                                          "value": "prisma.client.get_client()",
                                          "children": [
                                            {
                                              "value": "prisma.client.get_client",
                                              "children": [
                                                {
                                                  "value": "prisma.client",
                                                  "children": [
                                                    {
                                                      "value": "prisma",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "client",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "get_client",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "query_raw",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )",
                                      "children": [
                                        {
                                          "value": "query=sql_query",
                                          "children": [
                                            {
                                              "value": "query",
                                              "children": []
                                            },
                                            {
                                              "value": "sql_query",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "model=market.utils.extension_types.AgentsWithRank",
                                          "children": [
                                            {
                                              "value": "model",
                                              "children": []
                                            },
                                            {
                                              "value": "market.utils.extension_types.AgentsWithRank",
                                              "children": [
                                                {
                                                  "value": "market.utils.extension_types",
                                                  "children": [
                                                    {
                                                      "value": "market.utils",
                                                      "children": [
                                                        {
                                                          "value": "market",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "utils",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "extension_types",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "AgentsWithRank",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "class CountResponse(pydantic.BaseModel):\n            count: int",
                      "children": [
                        {
                          "value": "CountResponse",
                          "children": []
                        },
                        {
                          "value": "(pydantic.BaseModel)",
                          "children": [
                            {
                              "value": "pydantic.BaseModel",
                              "children": [
                                {
                                  "value": "pydantic",
                                  "children": []
                                },
                                {
                                  "value": "BaseModel",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "count: int",
                          "children": [
                            {
                              "value": "count: int",
                              "children": [
                                {
                                  "value": "count: int",
                                  "children": [
                                    {
                                      "value": "count",
                                      "children": []
                                    },
                                    {
                                      "value": "int",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"",
                      "children": [
                        {
                          "value": "count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"",
                          "children": [
                            {
                              "value": "count_query",
                              "children": []
                            },
                            {
                              "value": "f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"",
                              "children": [
                                {
                                  "value": "f\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('",
                                  "children": []
                                },
                                {
                                  "value": "{query}",
                                  "children": [
                                    {
                                      "value": "query",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND",
                                  "children": []
                                },
                                {
                                  "value": "{category_filter}",
                                  "children": [
                                    {
                                      "value": "category_filter",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "AND",
                                  "children": []
                                },
                                {
                                  "value": "{submission_status_filter}",
                                  "children": [
                                    {
                                      "value": "submission_status_filter",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": ";",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )",
                      "children": [
                        {
                          "value": "total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )",
                          "children": [
                            {
                              "value": "total_count",
                              "children": []
                            },
                            {
                              "value": "await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )",
                              "children": [
                                {
                                  "value": "prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.client.get_client().query_first",
                                      "children": [
                                        {
                                          "value": "prisma.client.get_client()",
                                          "children": [
                                            {
                                              "value": "prisma.client.get_client",
                                              "children": [
                                                {
                                                  "value": "prisma.client",
                                                  "children": [
                                                    {
                                                      "value": "prisma",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "client",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "get_client",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "query_first",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            query=count_query,\n            model=CountResponse,\n        )",
                                      "children": [
                                        {
                                          "value": "query=count_query",
                                          "children": [
                                            {
                                              "value": "query",
                                              "children": []
                                            },
                                            {
                                              "value": "count_query",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "model=CountResponse",
                                          "children": [
                                            {
                                              "value": "model",
                                              "children": []
                                            },
                                            {
                                              "value": "CountResponse",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "total_count = total_count.count if total_count else 0",
                      "children": [
                        {
                          "value": "total_count = total_count.count if total_count else 0",
                          "children": [
                            {
                              "value": "total_count",
                              "children": []
                            },
                            {
                              "value": "total_count.count if total_count else 0",
                              "children": [
                                {
                                  "value": "total_count.count",
                                  "children": [
                                    {
                                      "value": "total_count",
                                      "children": []
                                    },
                                    {
                                      "value": "count",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "total_count",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                      "children": [
                        {
                          "value": "market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                          "children": [
                            {
                              "value": "market.model.ListResponse",
                              "children": [
                                {
                                  "value": "market.model",
                                  "children": [
                                    {
                                      "value": "market",
                                      "children": []
                                    },
                                    {
                                      "value": "model",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ListResponse",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                              "children": [
                                {
                                  "value": "items=results",
                                  "children": [
                                    {
                                      "value": "items",
                                      "children": []
                                    },
                                    {
                                      "value": "results",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "total_count=total_count",
                                  "children": [
                                    {
                                      "value": "total_count",
                                      "children": []
                                    },
                                    {
                                      "value": "total_count",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "page=page",
                                  "children": [
                                    {
                                      "value": "page",
                                      "children": []
                                    },
                                    {
                                      "value": "page",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "page_size=page_size",
                                  "children": [
                                    {
                                      "value": "page_size",
                                      "children": []
                                    },
                                    {
                                      "value": "page_size",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "total_pages=(total_count + page_size - 1) // page_size",
                                  "children": [
                                    {
                                      "value": "total_pages",
                                      "children": []
                                    },
                                    {
                                      "value": "(total_count + page_size - 1) // page_size",
                                      "children": [
                                        {
                                          "value": "(total_count + page_size - 1)",
                                          "children": [
                                            {
                                              "value": "total_count + page_size - 1",
                                              "children": [
                                                {
                                                  "value": "total_count + page_size",
                                                  "children": [
                                                    {
                                                      "value": "total_count",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "page_size",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "page_size",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "prisma.errors.PrismaError as e",
                      "children": [
                        {
                          "value": "prisma.errors.PrismaError",
                          "children": [
                            {
                              "value": "prisma.errors",
                              "children": [
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "errors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PrismaError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Database query failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Database query failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_top_agents_by_downloads(\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[prisma.models.AnalyticsTracker]:\n    \"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
      "children": [
        {
          "value": "get_top_agents_by_downloads",
          "children": []
        },
        {
          "value": "(\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n)",
          "children": [
            {
              "value": "page: int = 1",
              "children": [
                {
                  "value": "page",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "1",
                  "children": []
                }
              ]
            },
            {
              "value": "page_size: int = 10",
              "children": [
                {
                  "value": "page_size",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "10",
                  "children": []
                }
              ]
            },
            {
              "value": "submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED",
              "children": [
                {
                  "value": "submission_status",
                  "children": []
                },
                {
                  "value": "prisma.enums.SubmissionStatus",
                  "children": [
                    {
                      "value": "prisma.enums.SubmissionStatus",
                      "children": [
                        {
                          "value": "prisma.enums",
                          "children": [
                            {
                              "value": "prisma",
                              "children": []
                            },
                            {
                              "value": "enums",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "SubmissionStatus",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "prisma.enums.SubmissionStatus.APPROVED",
                  "children": [
                    {
                      "value": "prisma.enums.SubmissionStatus",
                      "children": [
                        {
                          "value": "prisma.enums",
                          "children": [
                            {
                              "value": "prisma",
                              "children": []
                            },
                            {
                              "value": "enums",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "SubmissionStatus",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "APPROVED",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "market.model.ListResponse[prisma.models.AnalyticsTracker]",
          "children": [
            {
              "value": "market.model.ListResponse[prisma.models.AnalyticsTracker]",
              "children": [
                {
                  "value": "market.model.ListResponse",
                  "children": [
                    {
                      "value": "market.model",
                      "children": [
                        {
                          "value": "market",
                          "children": []
                        },
                        {
                          "value": "model",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ListResponse",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "prisma.models.AnalyticsTracker",
                  "children": [
                    {
                      "value": "prisma.models",
                      "children": [
                        {
                          "value": "prisma",
                          "children": []
                        },
                        {
                          "value": "models",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "AnalyticsTracker",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
          "children": [
            {
              "value": "\"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
              "children": [
                {
                  "value": "# Calculate pagination",
                  "children": []
                },
                {
                  "value": "skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                  "children": [
                    {
                      "value": "skip = (page - 1) * page_size",
                      "children": [
                        {
                          "value": "skip = (page - 1) * page_size",
                          "children": [
                            {
                              "value": "skip",
                              "children": []
                            },
                            {
                              "value": "(page - 1) * page_size",
                              "children": [
                                {
                                  "value": "(page - 1)",
                                  "children": [
                                    {
                                      "value": "page - 1",
                                      "children": [
                                        {
                                          "value": "page",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "page_size",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Execute the query",
                      "children": []
                    },
                    {
                      "value": "try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "# Agents with no downloads will not be included in the results... is this the desired behavior?",
                          "children": []
                        },
                        {
                          "value": "analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )",
                          "children": [
                            {
                              "value": "analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )",
                              "children": [
                                {
                                  "value": "analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )",
                                  "children": [
                                    {
                                      "value": "analytics",
                                      "children": []
                                    },
                                    {
                                      "value": "await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )",
                                      "children": [
                                        {
                                          "value": "prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )",
                                          "children": [
                                            {
                                              "value": "prisma.models.AnalyticsTracker.prisma().find_many",
                                              "children": [
                                                {
                                                  "value": "prisma.models.AnalyticsTracker.prisma()",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models.AnalyticsTracker.prisma",
                                                      "children": [
                                                        {
                                                          "value": "prisma.models.AnalyticsTracker",
                                                          "children": [
                                                            {
                                                              "value": "prisma.models",
                                                              "children": [
                                                                {
                                                                  "value": "prisma",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "models",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "AnalyticsTracker",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "find_many",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )",
                                              "children": [
                                                {
                                                  "value": "include={\"agent\": True}",
                                                  "children": [
                                                    {
                                                      "value": "include",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{\"agent\": True}",
                                                      "children": [
                                                        {
                                                          "value": "\"agent\": True",
                                                          "children": [
                                                            {
                                                              "value": "\"agent\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "agent",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "True",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "order={\"downloads\": \"desc\"}",
                                                  "children": [
                                                    {
                                                      "value": "order",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{\"downloads\": \"desc\"}",
                                                      "children": [
                                                        {
                                                          "value": "\"downloads\": \"desc\"",
                                                          "children": [
                                                            {
                                                              "value": "\"downloads\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "downloads",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"desc\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "desc",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}}",
                                                  "children": [
                                                    {
                                                      "value": "where",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{\"agent\": {\"is\": {\"submissionStatus\": submission_status}}}",
                                                      "children": [
                                                        {
                                                          "value": "\"agent\": {\"is\": {\"submissionStatus\": submission_status}}",
                                                          "children": [
                                                            {
                                                              "value": "\"agent\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "agent",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{\"is\": {\"submissionStatus\": submission_status}}",
                                                              "children": [
                                                                {
                                                                  "value": "\"is\": {\"submissionStatus\": submission_status}",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"is\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "is",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "{\"submissionStatus\": submission_status}",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"submissionStatus\": submission_status",
                                                                          "children": [
                                                                            {
                                                                              "value": "\"submissionStatus\"",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "submissionStatus",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "submission_status",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "skip=skip",
                                                  "children": [
                                                    {
                                                      "value": "skip",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "skip",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "take=page_size",
                                                  "children": [
                                                    {
                                                      "value": "take",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "page_size",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "prisma.errors.PrismaError as e",
                              "children": [
                                {
                                  "value": "prisma.errors.PrismaError",
                                  "children": [
                                    {
                                      "value": "prisma.errors",
                                      "children": [
                                        {
                                          "value": "prisma",
                                          "children": []
                                        },
                                        {
                                          "value": "errors",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "PrismaError",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "AgentQueryError",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"Database query failed: {str(e)}\")",
                                          "children": [
                                            {
                                              "value": "f\"Database query failed: {str(e)}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Database query failed:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{str(e)}",
                                                  "children": [
                                                    {
                                                      "value": "str(e)",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(e)",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )",
                          "children": [
                            {
                              "value": "total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )",
                              "children": [
                                {
                                  "value": "total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )",
                                  "children": [
                                    {
                                      "value": "total_count",
                                      "children": []
                                    },
                                    {
                                      "value": "await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )",
                                      "children": [
                                        {
                                          "value": "prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )",
                                          "children": [
                                            {
                                              "value": "prisma.models.AnalyticsTracker.prisma().count",
                                              "children": [
                                                {
                                                  "value": "prisma.models.AnalyticsTracker.prisma()",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models.AnalyticsTracker.prisma",
                                                      "children": [
                                                        {
                                                          "value": "prisma.models.AnalyticsTracker",
                                                          "children": [
                                                            {
                                                              "value": "prisma.models",
                                                              "children": [
                                                                {
                                                                  "value": "prisma",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "models",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "AnalyticsTracker",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "count",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )",
                                              "children": [
                                                {
                                                  "value": "where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}}",
                                                  "children": [
                                                    {
                                                      "value": "where",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{\"agent\": {\"is\": {\"submissionStatus\": submission_status}}}",
                                                      "children": [
                                                        {
                                                          "value": "\"agent\": {\"is\": {\"submissionStatus\": submission_status}}",
                                                          "children": [
                                                            {
                                                              "value": "\"agent\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "agent",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{\"is\": {\"submissionStatus\": submission_status}}",
                                                              "children": [
                                                                {
                                                                  "value": "\"is\": {\"submissionStatus\": submission_status}",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"is\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "is",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "{\"submissionStatus\": submission_status}",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"submissionStatus\": submission_status",
                                                                          "children": [
                                                                            {
                                                                              "value": "\"submissionStatus\"",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "submissionStatus",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "submission_status",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "prisma.errors.PrismaError as e",
                              "children": [
                                {
                                  "value": "prisma.errors.PrismaError",
                                  "children": [
                                    {
                                      "value": "prisma.errors",
                                      "children": [
                                        {
                                          "value": "prisma",
                                          "children": []
                                        },
                                        {
                                          "value": "errors",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "PrismaError",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "AgentQueryError",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"Database query failed: {str(e)}\")",
                                          "children": [
                                            {
                                              "value": "f\"Database query failed: {str(e)}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Database query failed:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{str(e)}",
                                                  "children": [
                                                    {
                                                      "value": "str(e)",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(e)",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                      "children": [
                        {
                          "value": "market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                          "children": [
                            {
                              "value": "market.model.ListResponse",
                              "children": [
                                {
                                  "value": "market.model",
                                  "children": [
                                    {
                                      "value": "market",
                                      "children": []
                                    },
                                    {
                                      "value": "model",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ListResponse",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                              "children": [
                                {
                                  "value": "items=analytics",
                                  "children": [
                                    {
                                      "value": "items",
                                      "children": []
                                    },
                                    {
                                      "value": "analytics",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "total_count=total_count",
                                  "children": [
                                    {
                                      "value": "total_count",
                                      "children": []
                                    },
                                    {
                                      "value": "total_count",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "page=page",
                                  "children": [
                                    {
                                      "value": "page",
                                      "children": []
                                    },
                                    {
                                      "value": "page",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "page_size=page_size",
                                  "children": [
                                    {
                                      "value": "page_size",
                                      "children": []
                                    },
                                    {
                                      "value": "page_size",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "total_pages=(total_count + page_size - 1) // page_size",
                                  "children": [
                                    {
                                      "value": "total_pages",
                                      "children": []
                                    },
                                    {
                                      "value": "(total_count + page_size - 1) // page_size",
                                      "children": [
                                        {
                                          "value": "(total_count + page_size - 1)",
                                          "children": [
                                            {
                                              "value": "total_count + page_size - 1",
                                              "children": [
                                                {
                                                  "value": "total_count + page_size",
                                                  "children": [
                                                    {
                                                      "value": "total_count",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "page_size",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "page_size",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e",
                  "children": [
                    {
                      "value": "AgentQueryError as e",
                      "children": [
                        {
                          "value": "AgentQueryError",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Log the error or handle it as needed",
                      "children": []
                    },
                    {
                      "value": "raise e from e",
                      "children": [
                        {
                          "value": "raise e from e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            },
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e",
                  "children": [
                    {
                      "value": "ValueError as e",
                      "children": [
                        {
                          "value": "ValueError",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Invalid input parameter: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Invalid input parameter: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Invalid input parameter: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Invalid input parameter:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Catch any other unexpected exceptions",
                      "children": []
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def set_agent_featured(\n    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]\n) -> prisma.models.FeaturedAgent:\n    \"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})\n        if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )\n        return featured\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
      "children": [
        {
          "value": "set_agent_featured",
          "children": []
        },
        {
          "value": "(\n    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]\n)",
          "children": [
            {
              "value": "agent_id: str",
              "children": [
                {
                  "value": "agent_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "is_active: bool = True",
              "children": [
                {
                  "value": "is_active",
                  "children": []
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "True",
                  "children": []
                }
              ]
            },
            {
              "value": "featured_categories: list[str] = [\"featured\"]",
              "children": [
                {
                  "value": "featured_categories",
                  "children": []
                },
                {
                  "value": "list[str]",
                  "children": [
                    {
                      "value": "list[str]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[str]",
                          "children": [
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "[\"featured\"]",
                  "children": [
                    {
                      "value": "\"featured\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "featured",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "prisma.models.FeaturedAgent",
          "children": [
            {
              "value": "prisma.models.FeaturedAgent",
              "children": [
                {
                  "value": "prisma.models",
                  "children": [
                    {
                      "value": "prisma",
                      "children": []
                    },
                    {
                      "value": "models",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "FeaturedAgent",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})\n        if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )\n        return featured\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})\n        if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )\n        return featured\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "children": [
                {
                  "value": "agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})\n        if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )\n        return featured",
                  "children": [
                    {
                      "value": "agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})",
                      "children": [
                        {
                          "value": "agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})",
                          "children": [
                            {
                              "value": "agent",
                              "children": []
                            },
                            {
                              "value": "await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})",
                              "children": [
                                {
                                  "value": "prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})",
                                  "children": [
                                    {
                                      "value": "prisma.models.Agents.prisma().find_unique",
                                      "children": [
                                        {
                                          "value": "prisma.models.Agents.prisma()",
                                          "children": [
                                            {
                                              "value": "prisma.models.Agents.prisma",
                                              "children": [
                                                {
                                                  "value": "prisma.models.Agents",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models",
                                                      "children": [
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "models",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "Agents",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "find_unique",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(where={\"id\": agent_id})",
                                      "children": [
                                        {
                                          "value": "where={\"id\": agent_id}",
                                          "children": [
                                            {
                                              "value": "where",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"id\": agent_id}",
                                              "children": [
                                                {
                                                  "value": "\"id\": agent_id",
                                                  "children": [
                                                    {
                                                      "value": "\"id\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "agent_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")",
                      "children": [
                        {
                          "value": "not agent",
                          "children": [
                            {
                              "value": "agent",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")",
                          "children": [
                            {
                              "value": "raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")",
                              "children": [
                                {
                                  "value": "AgentQueryError(f\"Agent with ID {agent_id} not found.\")",
                                  "children": [
                                    {
                                      "value": "AgentQueryError",
                                      "children": []
                                    },
                                    {
                                      "value": "(f\"Agent with ID {agent_id} not found.\")",
                                      "children": [
                                        {
                                          "value": "f\"Agent with ID {agent_id} not found.\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Agent with ID",
                                              "children": []
                                            },
                                            {
                                              "value": "{agent_id}",
                                              "children": [
                                                {
                                                  "value": "agent_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not found.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )",
                      "children": [
                        {
                          "value": "featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )",
                          "children": [
                            {
                              "value": "featured",
                              "children": []
                            },
                            {
                              "value": "await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )",
                              "children": [
                                {
                                  "value": "prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.models.FeaturedAgent.prisma().upsert",
                                      "children": [
                                        {
                                          "value": "prisma.models.FeaturedAgent.prisma()",
                                          "children": [
                                            {
                                              "value": "prisma.models.FeaturedAgent.prisma",
                                              "children": [
                                                {
                                                  "value": "prisma.models.FeaturedAgent",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models",
                                                      "children": [
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "models",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "FeaturedAgent",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "upsert",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )",
                                      "children": [
                                        {
                                          "value": "where={\"agentId\": agent_id}",
                                          "children": [
                                            {
                                              "value": "where",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"agentId\": agent_id}",
                                              "children": [
                                                {
                                                  "value": "\"agentId\": agent_id",
                                                  "children": [
                                                    {
                                                      "value": "\"agentId\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "agentId",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "agent_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            }",
                                          "children": [
                                            {
                                              "value": "data",
                                              "children": []
                                            },
                                            {
                                              "value": "{\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            }",
                                              "children": [
                                                {
                                                  "value": "\"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                }",
                                                  "children": [
                                                    {
                                                      "value": "\"update\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "update",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "{\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                }",
                                                      "children": [
                                                        {
                                                          "value": "\"featuredCategories\": featured_categories",
                                                          "children": [
                                                            {
                                                              "value": "\"featuredCategories\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "featuredCategories",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "featured_categories",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"isActive\": is_active",
                                                          "children": [
                                                            {
                                                              "value": "\"isActive\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "isActive",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "is_active",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                }",
                                                  "children": [
                                                    {
                                                      "value": "\"create\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "create",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "{\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                }",
                                                      "children": [
                                                        {
                                                          "value": "\"featuredCategories\": featured_categories",
                                                          "children": [
                                                            {
                                                              "value": "\"featuredCategories\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "featuredCategories",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "featured_categories",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"isActive\": is_active",
                                                          "children": [
                                                            {
                                                              "value": "\"isActive\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "isActive",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "is_active",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"agent\": {\"connect\": {\"id\": agent_id}}",
                                                          "children": [
                                                            {
                                                              "value": "\"agent\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "agent",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{\"connect\": {\"id\": agent_id}}",
                                                              "children": [
                                                                {
                                                                  "value": "\"connect\": {\"id\": agent_id}",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"connect\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "connect",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "{\"id\": agent_id}",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"id\": agent_id",
                                                                          "children": [
                                                                            {
                                                                              "value": "\"id\"",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "id",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "agent_id",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return featured",
                      "children": [
                        {
                          "value": "featured",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "prisma.errors.PrismaError as e",
                      "children": [
                        {
                          "value": "prisma.errors.PrismaError",
                          "children": [
                            {
                              "value": "prisma.errors",
                              "children": [
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "errors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PrismaError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Database query failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Database query failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_featured_agents(\n    category: str = \"featured\",\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> FeaturedAgentResponse:\n    \"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(featured_agents)\n\n        return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
      "children": [
        {
          "value": "get_featured_agents",
          "children": []
        },
        {
          "value": "(\n    category: str = \"featured\",\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n)",
          "children": [
            {
              "value": "category: str = \"featured\"",
              "children": [
                {
                  "value": "category",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"featured\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "featured",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "page: int = 1",
              "children": [
                {
                  "value": "page",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "1",
                  "children": []
                }
              ]
            },
            {
              "value": "page_size: int = 10",
              "children": [
                {
                  "value": "page_size",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "10",
                  "children": []
                }
              ]
            },
            {
              "value": "submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED",
              "children": [
                {
                  "value": "submission_status",
                  "children": []
                },
                {
                  "value": "prisma.enums.SubmissionStatus",
                  "children": [
                    {
                      "value": "prisma.enums.SubmissionStatus",
                      "children": [
                        {
                          "value": "prisma.enums",
                          "children": [
                            {
                              "value": "prisma",
                              "children": []
                            },
                            {
                              "value": "enums",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "SubmissionStatus",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "prisma.enums.SubmissionStatus.APPROVED",
                  "children": [
                    {
                      "value": "prisma.enums.SubmissionStatus",
                      "children": [
                        {
                          "value": "prisma.enums",
                          "children": [
                            {
                              "value": "prisma",
                              "children": []
                            },
                            {
                              "value": "enums",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "SubmissionStatus",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "APPROVED",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "FeaturedAgentResponse",
          "children": [
            {
              "value": "FeaturedAgentResponse",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(featured_agents)\n\n        return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
          "children": [
            {
              "value": "\"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(featured_agents)\n\n        return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
              "children": [
                {
                  "value": "# Calculate pagination",
                  "children": []
                },
                {
                  "value": "skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(featured_agents)\n\n        return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                  "children": [
                    {
                      "value": "skip = (page - 1) * page_size",
                      "children": [
                        {
                          "value": "skip = (page - 1) * page_size",
                          "children": [
                            {
                              "value": "skip",
                              "children": []
                            },
                            {
                              "value": "(page - 1) * page_size",
                              "children": [
                                {
                                  "value": "(page - 1)",
                                  "children": [
                                    {
                                      "value": "page - 1",
                                      "children": [
                                        {
                                          "value": "page",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "page_size",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Execute the query",
                      "children": []
                    },
                    {
                      "value": "try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )",
                          "children": [
                            {
                              "value": "featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )",
                              "children": [
                                {
                                  "value": "featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )",
                                  "children": [
                                    {
                                      "value": "featured_agents",
                                      "children": []
                                    },
                                    {
                                      "value": "await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )",
                                      "children": [
                                        {
                                          "value": "prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )",
                                          "children": [
                                            {
                                              "value": "prisma.models.FeaturedAgent.prisma().find_many",
                                              "children": [
                                                {
                                                  "value": "prisma.models.FeaturedAgent.prisma()",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models.FeaturedAgent.prisma",
                                                      "children": [
                                                        {
                                                          "value": "prisma.models.FeaturedAgent",
                                                          "children": [
                                                            {
                                                              "value": "prisma.models",
                                                              "children": [
                                                                {
                                                                  "value": "prisma",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "models",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "FeaturedAgent",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "find_many",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )",
                                              "children": [
                                                {
                                                  "value": "where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                }",
                                                  "children": [
                                                    {
                                                      "value": "where",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                }",
                                                      "children": [
                                                        {
                                                          "value": "\"featuredCategories\": {\"has\": category}",
                                                          "children": [
                                                            {
                                                              "value": "\"featuredCategories\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "featuredCategories",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{\"has\": category}",
                                                              "children": [
                                                                {
                                                                  "value": "\"has\": category",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"has\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "has",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "category",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"isActive\": True",
                                                          "children": [
                                                            {
                                                              "value": "\"isActive\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "isActive",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "True",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"agent\": {\"is\": {\"submissionStatus\": submission_status}}",
                                                          "children": [
                                                            {
                                                              "value": "\"agent\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "agent",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{\"is\": {\"submissionStatus\": submission_status}}",
                                                              "children": [
                                                                {
                                                                  "value": "\"is\": {\"submissionStatus\": submission_status}",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"is\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "is",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "{\"submissionStatus\": submission_status}",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"submissionStatus\": submission_status",
                                                                          "children": [
                                                                            {
                                                                              "value": "\"submissionStatus\"",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "submissionStatus",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "submission_status",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}}",
                                                  "children": [
                                                    {
                                                      "value": "include",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{\"agent\": {\"include\": {\"AnalyticsTracker\": True}}}",
                                                      "children": [
                                                        {
                                                          "value": "\"agent\": {\"include\": {\"AnalyticsTracker\": True}}",
                                                          "children": [
                                                            {
                                                              "value": "\"agent\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "agent",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{\"include\": {\"AnalyticsTracker\": True}}",
                                                              "children": [
                                                                {
                                                                  "value": "\"include\": {\"AnalyticsTracker\": True}",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"include\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "include",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "{\"AnalyticsTracker\": True}",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"AnalyticsTracker\": True",
                                                                          "children": [
                                                                            {
                                                                              "value": "\"AnalyticsTracker\"",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "AnalyticsTracker",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "True",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "skip=skip",
                                                  "children": [
                                                    {
                                                      "value": "skip",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "skip",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "take=page_size",
                                                  "children": [
                                                    {
                                                      "value": "take",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "page_size",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "prisma.errors.PrismaError as e",
                              "children": [
                                {
                                  "value": "prisma.errors.PrismaError",
                                  "children": [
                                    {
                                      "value": "prisma.errors",
                                      "children": [
                                        {
                                          "value": "prisma",
                                          "children": []
                                        },
                                        {
                                          "value": "errors",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "PrismaError",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "AgentQueryError",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"Database query failed: {str(e)}\")",
                                          "children": [
                                            {
                                              "value": "f\"Database query failed: {str(e)}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Database query failed:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{str(e)}",
                                                  "children": [
                                                    {
                                                      "value": "str(e)",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(e)",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Get total count for pagination info",
                      "children": []
                    },
                    {
                      "value": "total_count = len(featured_agents)",
                      "children": [
                        {
                          "value": "total_count = len(featured_agents)",
                          "children": [
                            {
                              "value": "total_count",
                              "children": []
                            },
                            {
                              "value": "len(featured_agents)",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(featured_agents)",
                                  "children": [
                                    {
                                      "value": "featured_agents",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                      "children": [
                        {
                          "value": "FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                          "children": [
                            {
                              "value": "FeaturedAgentResponse",
                              "children": []
                            },
                            {
                              "value": "(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                              "children": [
                                {
                                  "value": "featured_agents=featured_agents",
                                  "children": [
                                    {
                                      "value": "featured_agents",
                                      "children": []
                                    },
                                    {
                                      "value": "featured_agents",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "total_count=total_count",
                                  "children": [
                                    {
                                      "value": "total_count",
                                      "children": []
                                    },
                                    {
                                      "value": "total_count",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "page=page",
                                  "children": [
                                    {
                                      "value": "page",
                                      "children": []
                                    },
                                    {
                                      "value": "page",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "page_size=page_size",
                                  "children": [
                                    {
                                      "value": "page_size",
                                      "children": []
                                    },
                                    {
                                      "value": "page_size",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "total_pages=(total_count + page_size - 1) // page_size",
                                  "children": [
                                    {
                                      "value": "total_pages",
                                      "children": []
                                    },
                                    {
                                      "value": "(total_count + page_size - 1) // page_size",
                                      "children": [
                                        {
                                          "value": "(total_count + page_size - 1)",
                                          "children": [
                                            {
                                              "value": "total_count + page_size - 1",
                                              "children": [
                                                {
                                                  "value": "total_count + page_size",
                                                  "children": [
                                                    {
                                                      "value": "total_count",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "page_size",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "page_size",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e",
                  "children": [
                    {
                      "value": "AgentQueryError as e",
                      "children": [
                        {
                          "value": "AgentQueryError",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Log the error or handle it as needed",
                      "children": []
                    },
                    {
                      "value": "raise e from e",
                      "children": [
                        {
                          "value": "raise e from e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            },
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e",
                  "children": [
                    {
                      "value": "ValueError as e",
                      "children": [
                        {
                          "value": "ValueError",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Invalid input parameter: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Invalid input parameter: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Invalid input parameter: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Invalid input parameter:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Catch any other unexpected exceptions",
                      "children": []
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def remove_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\n\n        if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        # remove the category from the list\n        featured_agent.featuredCategories.remove(category)\n\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
      "children": [
        {
          "value": "remove_featured_category",
          "children": []
        },
        {
          "value": "(\n    agent_id: str, category: str\n)",
          "children": [
            {
              "value": "agent_id: str",
              "children": [
                {
                  "value": "agent_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "category: str",
              "children": [
                {
                  "value": "category",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "prisma.models.FeaturedAgent | None",
          "children": [
            {
              "value": "prisma.models.FeaturedAgent | None",
              "children": [
                {
                  "value": "prisma.models.FeaturedAgent",
                  "children": [
                    {
                      "value": "prisma.models",
                      "children": [
                        {
                          "value": "prisma",
                          "children": []
                        },
                        {
                          "value": "models",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "FeaturedAgent",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\n\n        if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        # remove the category from the list\n        featured_agent.featuredCategories.remove(category)\n\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\n\n        if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        # remove the category from the list\n        featured_agent.featuredCategories.remove(category)\n\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "children": [
                {
                  "value": "# get the existing categories",
                  "children": []
                },
                {
                  "value": "featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\n\n        if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        # remove the category from the list\n        featured_agent.featuredCategories.remove(category)\n\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )\n\n        return featured_agent",
                  "children": [
                    {
                      "value": "featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )",
                      "children": [
                        {
                          "value": "featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )",
                          "children": [
                            {
                              "value": "featured_agent",
                              "children": []
                            },
                            {
                              "value": "await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )",
                              "children": [
                                {
                                  "value": "prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.models.FeaturedAgent.prisma().find_unique",
                                      "children": [
                                        {
                                          "value": "prisma.models.FeaturedAgent.prisma()",
                                          "children": [
                                            {
                                              "value": "prisma.models.FeaturedAgent.prisma",
                                              "children": [
                                                {
                                                  "value": "prisma.models.FeaturedAgent",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models",
                                                      "children": [
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "models",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "FeaturedAgent",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "find_unique",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )",
                                      "children": [
                                        {
                                          "value": "where={\"agentId\": agent_id}",
                                          "children": [
                                            {
                                              "value": "where",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"agentId\": agent_id}",
                                              "children": [
                                                {
                                                  "value": "\"agentId\": agent_id",
                                                  "children": [
                                                    {
                                                      "value": "\"agentId\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "agentId",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "agent_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "include={\"agent\": True}",
                                          "children": [
                                            {
                                              "value": "include",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"agent\": True}",
                                              "children": [
                                                {
                                                  "value": "\"agent\": True",
                                                  "children": [
                                                    {
                                                      "value": "\"agent\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "agent",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "True",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")",
                      "children": [
                        {
                          "value": "not featured_agent",
                          "children": [
                            {
                              "value": "featured_agent",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")",
                          "children": [
                            {
                              "value": "raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")",
                              "children": [
                                {
                                  "value": "AgentQueryError(f\"Agent with ID {agent_id} not found.\")",
                                  "children": [
                                    {
                                      "value": "AgentQueryError",
                                      "children": []
                                    },
                                    {
                                      "value": "(f\"Agent with ID {agent_id} not found.\")",
                                      "children": [
                                        {
                                          "value": "f\"Agent with ID {agent_id} not found.\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Agent with ID",
                                              "children": []
                                            },
                                            {
                                              "value": "{agent_id}",
                                              "children": [
                                                {
                                                  "value": "agent_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not found.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# remove the category from the list",
                      "children": []
                    },
                    {
                      "value": "featured_agent.featuredCategories.remove(category)",
                      "children": [
                        {
                          "value": "featured_agent.featuredCategories.remove(category)",
                          "children": [
                            {
                              "value": "featured_agent.featuredCategories.remove",
                              "children": [
                                {
                                  "value": "featured_agent.featuredCategories",
                                  "children": [
                                    {
                                      "value": "featured_agent",
                                      "children": []
                                    },
                                    {
                                      "value": "featuredCategories",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "remove",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(category)",
                              "children": [
                                {
                                  "value": "category",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )",
                      "children": [
                        {
                          "value": "featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )",
                          "children": [
                            {
                              "value": "featured_agent",
                              "children": []
                            },
                            {
                              "value": "await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )",
                              "children": [
                                {
                                  "value": "prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.models.FeaturedAgent.prisma().update",
                                      "children": [
                                        {
                                          "value": "prisma.models.FeaturedAgent.prisma()",
                                          "children": [
                                            {
                                              "value": "prisma.models.FeaturedAgent.prisma",
                                              "children": [
                                                {
                                                  "value": "prisma.models.FeaturedAgent",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models",
                                                      "children": [
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "models",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "FeaturedAgent",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "update",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )",
                                      "children": [
                                        {
                                          "value": "where={\"agentId\": agent_id}",
                                          "children": [
                                            {
                                              "value": "where",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"agentId\": agent_id}",
                                              "children": [
                                                {
                                                  "value": "\"agentId\": agent_id",
                                                  "children": [
                                                    {
                                                      "value": "\"agentId\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "agentId",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "agent_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "data={\"featuredCategories\": featured_agent.featuredCategories}",
                                          "children": [
                                            {
                                              "value": "data",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"featuredCategories\": featured_agent.featuredCategories}",
                                              "children": [
                                                {
                                                  "value": "\"featuredCategories\": featured_agent.featuredCategories",
                                                  "children": [
                                                    {
                                                      "value": "\"featuredCategories\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "featuredCategories",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "featured_agent.featuredCategories",
                                                      "children": [
                                                        {
                                                          "value": "featured_agent",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "featuredCategories",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return featured_agent",
                      "children": [
                        {
                          "value": "featured_agent",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "prisma.errors.PrismaError as e",
                      "children": [
                        {
                          "value": "prisma.errors.PrismaError",
                          "children": [
                            {
                              "value": "prisma.errors",
                              "children": [
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "errors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PrismaError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Database query failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Database query failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def add_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
      "children": [
        {
          "value": "add_featured_category",
          "children": []
        },
        {
          "value": "(\n    agent_id: str, category: str\n)",
          "children": [
            {
              "value": "agent_id: str",
              "children": [
                {
                  "value": "agent_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "category: str",
              "children": [
                {
                  "value": "category",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "prisma.models.FeaturedAgent | None",
          "children": [
            {
              "value": "prisma.models.FeaturedAgent | None",
              "children": [
                {
                  "value": "prisma.models.FeaturedAgent",
                  "children": [
                    {
                      "value": "prisma.models",
                      "children": [
                        {
                          "value": "prisma",
                          "children": []
                        },
                        {
                          "value": "models",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "FeaturedAgent",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "children": [
                {
                  "value": "featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent",
                  "children": [
                    {
                      "value": "featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )",
                      "children": [
                        {
                          "value": "featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )",
                          "children": [
                            {
                              "value": "featured_agent",
                              "children": []
                            },
                            {
                              "value": "await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )",
                              "children": [
                                {
                                  "value": "prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.models.FeaturedAgent.prisma().update",
                                      "children": [
                                        {
                                          "value": "prisma.models.FeaturedAgent.prisma()",
                                          "children": [
                                            {
                                              "value": "prisma.models.FeaturedAgent.prisma",
                                              "children": [
                                                {
                                                  "value": "prisma.models.FeaturedAgent",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models",
                                                      "children": [
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "models",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "FeaturedAgent",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "update",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )",
                                      "children": [
                                        {
                                          "value": "where={\"agentId\": agent_id}",
                                          "children": [
                                            {
                                              "value": "where",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"agentId\": agent_id}",
                                              "children": [
                                                {
                                                  "value": "\"agentId\": agent_id",
                                                  "children": [
                                                    {
                                                      "value": "\"agentId\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "agentId",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "agent_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "data={\"featuredCategories\": {\"push\": [category]}}",
                                          "children": [
                                            {
                                              "value": "data",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"featuredCategories\": {\"push\": [category]}}",
                                              "children": [
                                                {
                                                  "value": "\"featuredCategories\": {\"push\": [category]}",
                                                  "children": [
                                                    {
                                                      "value": "\"featuredCategories\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "featuredCategories",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "{\"push\": [category]}",
                                                      "children": [
                                                        {
                                                          "value": "\"push\": [category]",
                                                          "children": [
                                                            {
                                                              "value": "\"push\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "push",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "[category]",
                                                              "children": [
                                                                {
                                                                  "value": "category",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return featured_agent",
                      "children": [
                        {
                          "value": "featured_agent",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "prisma.errors.PrismaError as e",
                      "children": [
                        {
                          "value": "prisma.errors.PrismaError",
                          "children": [
                            {
                              "value": "prisma.errors",
                              "children": [
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "errors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PrismaError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Database query failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Database query failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_agent_featured(agent_id: str) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
      "children": [
        {
          "value": "get_agent_featured",
          "children": []
        },
        {
          "value": "(agent_id: str)",
          "children": [
            {
              "value": "agent_id: str",
              "children": [
                {
                  "value": "agent_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "prisma.models.FeaturedAgent | None",
          "children": [
            {
              "value": "prisma.models.FeaturedAgent | None",
              "children": [
                {
                  "value": "prisma.models.FeaturedAgent",
                  "children": [
                    {
                      "value": "prisma.models",
                      "children": [
                        {
                          "value": "prisma",
                          "children": []
                        },
                        {
                          "value": "models",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "FeaturedAgent",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "children": [
                {
                  "value": "featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent",
                  "children": [
                    {
                      "value": "featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )",
                      "children": [
                        {
                          "value": "featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )",
                          "children": [
                            {
                              "value": "featured_agent",
                              "children": []
                            },
                            {
                              "value": "await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )",
                              "children": [
                                {
                                  "value": "prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.models.FeaturedAgent.prisma().find_unique",
                                      "children": [
                                        {
                                          "value": "prisma.models.FeaturedAgent.prisma()",
                                          "children": [
                                            {
                                              "value": "prisma.models.FeaturedAgent.prisma",
                                              "children": [
                                                {
                                                  "value": "prisma.models.FeaturedAgent",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models",
                                                      "children": [
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "models",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "FeaturedAgent",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "find_unique",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            where={\"agentId\": agent_id},\n        )",
                                      "children": [
                                        {
                                          "value": "where={\"agentId\": agent_id}",
                                          "children": [
                                            {
                                              "value": "where",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"agentId\": agent_id}",
                                              "children": [
                                                {
                                                  "value": "\"agentId\": agent_id",
                                                  "children": [
                                                    {
                                                      "value": "\"agentId\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "agentId",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "agent_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return featured_agent",
                      "children": [
                        {
                          "value": "featured_agent",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "prisma.errors.PrismaError as e",
                      "children": [
                        {
                          "value": "prisma.errors.PrismaError",
                          "children": [
                            {
                              "value": "prisma.errors",
                              "children": [
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "errors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PrismaError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Database query failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Database query failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_not_featured_agents(\n    page: int = 1, page_size: int = 10\n) -> typing.List[prisma.models.Agents]:\n    \"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"\n    try:\n        agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )\n        return agents\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
      "children": [
        {
          "value": "get_not_featured_agents",
          "children": []
        },
        {
          "value": "(\n    page: int = 1, page_size: int = 10\n)",
          "children": [
            {
              "value": "page: int = 1",
              "children": [
                {
                  "value": "page",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "1",
                  "children": []
                }
              ]
            },
            {
              "value": "page_size: int = 10",
              "children": [
                {
                  "value": "page_size",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "10",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "typing.List[prisma.models.Agents]",
          "children": [
            {
              "value": "typing.List[prisma.models.Agents]",
              "children": [
                {
                  "value": "typing.List",
                  "children": [
                    {
                      "value": "typing",
                      "children": []
                    },
                    {
                      "value": "List",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "prisma.models.Agents",
                  "children": [
                    {
                      "value": "prisma.models",
                      "children": [
                        {
                          "value": "prisma",
                          "children": []
                        },
                        {
                          "value": "models",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "Agents",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"\n    try:\n        agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )\n        return agents\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Retrieve a list of not featured agents from the database.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )\n        return agents\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "children": [
                {
                  "value": "agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )\n        return agents",
                  "children": [
                    {
                      "value": "agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )",
                      "children": [
                        {
                          "value": "agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )",
                          "children": [
                            {
                              "value": "agents",
                              "children": []
                            },
                            {
                              "value": "await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )",
                              "children": [
                                {
                                  "value": "prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.client.get_client().query_raw",
                                      "children": [
                                        {
                                          "value": "prisma.client.get_client()",
                                          "children": [
                                            {
                                              "value": "prisma.client.get_client",
                                              "children": [
                                                {
                                                  "value": "prisma.client",
                                                  "children": [
                                                    {
                                                      "value": "prisma",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "client",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "get_client",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "query_raw",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )",
                                      "children": [
                                        {
                                          "value": "query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\"",
                                          "children": [
                                            {
                                              "value": "query",
                                              "children": []
                                            },
                                            {
                                              "value": "f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\"",
                                              "children": [
                                                {
                                                  "value": "f\"\"\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT",
                                                  "children": [
                                                    {
                                                      "value": "{{",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "}}",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "{page_size}",
                                                  "children": [
                                                    {
                                                      "value": "page_size",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "OFFSET",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{page_size * (page - 1)}",
                                                  "children": [
                                                    {
                                                      "value": "page_size * (page - 1)",
                                                      "children": [
                                                        {
                                                          "value": "page_size",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(page - 1)",
                                                          "children": [
                                                            {
                                                              "value": "page - 1",
                                                              "children": [
                                                                {
                                                                  "value": "page",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "1",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"\"\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "model=prisma.models.Agents",
                                          "children": [
                                            {
                                              "value": "model",
                                              "children": []
                                            },
                                            {
                                              "value": "prisma.models.Agents",
                                              "children": [
                                                {
                                                  "value": "prisma.models",
                                                  "children": [
                                                    {
                                                      "value": "prisma",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "models",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "Agents",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return agents",
                      "children": [
                        {
                          "value": "agents",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "prisma.errors.PrismaError as e",
                      "children": [
                        {
                          "value": "prisma.errors.PrismaError",
                          "children": [
                            {
                              "value": "prisma.errors",
                              "children": [
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "errors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PrismaError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Database query failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Database query failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_all_categories() -> market.model.CategoriesResponse:\n    \"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"\n    try:\n        agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])",
      "children": [
        {
          "value": "get_all_categories",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "market.model.CategoriesResponse",
          "children": [
            {
              "value": "market.model.CategoriesResponse",
              "children": [
                {
                  "value": "market.model",
                  "children": [
                    {
                      "value": "market",
                      "children": []
                    },
                    {
                      "value": "model",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "CategoriesResponse",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"\n    try:\n        agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])",
          "children": [
            {
              "value": "\"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])",
              "children": [
                {
                  "value": "agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)",
                  "children": [
                    {
                      "value": "agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])",
                      "children": [
                        {
                          "value": "agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])",
                          "children": [
                            {
                              "value": "agents",
                              "children": []
                            },
                            {
                              "value": "await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])",
                              "children": [
                                {
                                  "value": "prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])",
                                  "children": [
                                    {
                                      "value": "prisma.models.Agents.prisma().find_many",
                                      "children": [
                                        {
                                          "value": "prisma.models.Agents.prisma()",
                                          "children": [
                                            {
                                              "value": "prisma.models.Agents.prisma",
                                              "children": [
                                                {
                                                  "value": "prisma.models.Agents",
                                                  "children": [
                                                    {
                                                      "value": "prisma.models",
                                                      "children": [
                                                        {
                                                          "value": "prisma",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "models",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "Agents",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "find_many",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(distinct=[\"categories\"])",
                                      "children": [
                                        {
                                          "value": "distinct=[\"categories\"]",
                                          "children": [
                                            {
                                              "value": "distinct",
                                              "children": []
                                            },
                                            {
                                              "value": "[\"categories\"]",
                                              "children": [
                                                {
                                                  "value": "\"categories\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "categories",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Aggregate categories on the Python side",
                      "children": []
                    },
                    {
                      "value": "all_categories = set()",
                      "children": [
                        {
                          "value": "all_categories = set()",
                          "children": [
                            {
                              "value": "all_categories",
                              "children": []
                            },
                            {
                              "value": "set()",
                              "children": [
                                {
                                  "value": "set",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for agent in agents:\n            all_categories.update(agent.categories)",
                      "children": [
                        {
                          "value": "agent",
                          "children": []
                        },
                        {
                          "value": "agents",
                          "children": []
                        },
                        {
                          "value": "all_categories.update(agent.categories)",
                          "children": [
                            {
                              "value": "all_categories.update(agent.categories)",
                              "children": [
                                {
                                  "value": "all_categories.update(agent.categories)",
                                  "children": [
                                    {
                                      "value": "all_categories.update",
                                      "children": [
                                        {
                                          "value": "all_categories",
                                          "children": []
                                        },
                                        {
                                          "value": "update",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(agent.categories)",
                                      "children": [
                                        {
                                          "value": "agent.categories",
                                          "children": [
                                            {
                                              "value": "agent",
                                              "children": []
                                            },
                                            {
                                              "value": "categories",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "unique_categories = sorted(list(all_categories))",
                      "children": [
                        {
                          "value": "unique_categories = sorted(list(all_categories))",
                          "children": [
                            {
                              "value": "unique_categories",
                              "children": []
                            },
                            {
                              "value": "sorted(list(all_categories))",
                              "children": [
                                {
                                  "value": "sorted",
                                  "children": []
                                },
                                {
                                  "value": "(list(all_categories))",
                                  "children": [
                                    {
                                      "value": "list(all_categories)",
                                      "children": [
                                        {
                                          "value": "list",
                                          "children": []
                                        },
                                        {
                                          "value": "(all_categories)",
                                          "children": [
                                            {
                                              "value": "all_categories",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return market.model.CategoriesResponse(unique_categories=unique_categories)",
                      "children": [
                        {
                          "value": "market.model.CategoriesResponse(unique_categories=unique_categories)",
                          "children": [
                            {
                              "value": "market.model.CategoriesResponse",
                              "children": [
                                {
                                  "value": "market.model",
                                  "children": [
                                    {
                                      "value": "market",
                                      "children": []
                                    },
                                    {
                                      "value": "model",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "CategoriesResponse",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(unique_categories=unique_categories)",
                              "children": [
                                {
                                  "value": "unique_categories=unique_categories",
                                  "children": [
                                    {
                                      "value": "unique_categories",
                                      "children": []
                                    },
                                    {
                                      "value": "unique_categories",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "prisma.errors.PrismaError as e",
                      "children": [
                        {
                          "value": "prisma.errors.PrismaError",
                          "children": [
                            {
                              "value": "prisma.errors",
                              "children": [
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "errors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PrismaError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Database query failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Database query failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])",
                  "children": [
                    {
                      "value": "Exception",
                      "children": []
                    },
                    {
                      "value": "# Return an empty list of categories in case of unexpected errors",
                      "children": []
                    },
                    {
                      "value": "return market.model.CategoriesResponse(unique_categories=[])",
                      "children": [
                        {
                          "value": "return market.model.CategoriesResponse(unique_categories=[])",
                          "children": [
                            {
                              "value": "market.model.CategoriesResponse(unique_categories=[])",
                              "children": [
                                {
                                  "value": "market.model.CategoriesResponse",
                                  "children": [
                                    {
                                      "value": "market.model",
                                      "children": [
                                        {
                                          "value": "market",
                                          "children": []
                                        },
                                        {
                                          "value": "model",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "CategoriesResponse",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(unique_categories=[])",
                                  "children": [
                                    {
                                      "value": "unique_categories=[]",
                                      "children": [
                                        {
                                          "value": "unique_categories",
                                          "children": []
                                        },
                                        {
                                          "value": "[]",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def create_agent_installed_event(\n    event_data: market.model.AgentInstalledFromMarketplaceEventData,\n):\n    try:\n        await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
      "children": [
        {
          "value": "create_agent_installed_event",
          "children": []
        },
        {
          "value": "(\n    event_data: market.model.AgentInstalledFromMarketplaceEventData,\n)",
          "children": [
            {
              "value": "event_data: market.model.AgentInstalledFromMarketplaceEventData",
              "children": [
                {
                  "value": "event_data",
                  "children": []
                },
                {
                  "value": "market.model.AgentInstalledFromMarketplaceEventData",
                  "children": [
                    {
                      "value": "market.model.AgentInstalledFromMarketplaceEventData",
                      "children": [
                        {
                          "value": "market.model",
                          "children": [
                            {
                              "value": "market",
                              "children": []
                            },
                            {
                              "value": "model",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "AgentInstalledFromMarketplaceEventData",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "try:\n        await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
          "children": [
            {
              "value": "try:\n        await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "children": [
                {
                  "value": "await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )",
                  "children": [
                    {
                      "value": "await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )",
                      "children": [
                        {
                          "value": "await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )",
                          "children": [
                            {
                              "value": "prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )",
                              "children": [
                                {
                                  "value": "prisma.models.InstallTracker.prisma().create",
                                  "children": [
                                    {
                                      "value": "prisma.models.InstallTracker.prisma()",
                                      "children": [
                                        {
                                          "value": "prisma.models.InstallTracker.prisma",
                                          "children": [
                                            {
                                              "value": "prisma.models.InstallTracker",
                                              "children": [
                                                {
                                                  "value": "prisma.models",
                                                  "children": [
                                                    {
                                                      "value": "prisma",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "models",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "InstallTracker",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "prisma",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "create",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )",
                                  "children": [
                                    {
                                      "value": "data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "{\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }",
                                          "children": [
                                            {
                                              "value": "\"installedAgentId\": event_data.installed_agent_id",
                                              "children": [
                                                {
                                                  "value": "\"installedAgentId\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "installedAgentId",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "event_data.installed_agent_id",
                                                  "children": [
                                                    {
                                                      "value": "event_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "installed_agent_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"marketplaceAgentId\": event_data.marketplace_agent_id",
                                              "children": [
                                                {
                                                  "value": "\"marketplaceAgentId\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "marketplaceAgentId",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "event_data.marketplace_agent_id",
                                                  "children": [
                                                    {
                                                      "value": "event_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "marketplace_agent_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                )",
                                              "children": [
                                                {
                                                  "value": "\"installationLocation\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "installationLocation",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                )",
                                                  "children": [
                                                    {
                                                      "value": "prisma.enums.InstallationLocation",
                                                      "children": [
                                                        {
                                                          "value": "prisma.enums",
                                                          "children": [
                                                            {
                                                              "value": "prisma",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "enums",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "InstallationLocation",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\n                    event_data.installation_location.name\n                )",
                                                      "children": [
                                                        {
                                                          "value": "event_data.installation_location.name",
                                                          "children": [
                                                            {
                                                              "value": "event_data.installation_location",
                                                              "children": [
                                                                {
                                                                  "value": "event_data",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "installation_location",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "name",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "prisma.errors.PrismaError as e",
                      "children": [
                        {
                          "value": "prisma.errors.PrismaError",
                          "children": [
                            {
                              "value": "prisma.errors",
                              "children": [
                                {
                                  "value": "prisma",
                                  "children": []
                                },
                                {
                                  "value": "errors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PrismaError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Database query failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Database query failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Database query failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                          "children": [
                            {
                              "value": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                              "children": [
                                {
                                  "value": "AgentQueryError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Unexpected error occurred: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Unexpected error occurred: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error occurred:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}