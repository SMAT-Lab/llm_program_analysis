{
  "value": "\"\"\"\nAuthor  : Alexander Pantyukhin\nDate    : November 24, 2022\n\nTask:\nGiven an m x n grid of characters board and a string word,\nreturn true if word exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells,\nwhere adjacent cells are horizontally or vertically neighboring.\nThe same letter cell may not be used more than once.\n\nExample:\n\nMatrix:\n---------\n|A|B|C|E|\n|S|F|C|S|\n|A|D|E|E|\n---------\n\nWord:\n\"ABCCED\"\n\nResult:\nTrue\n\nImplementation notes: Use backtracking approach.\nAt each point, check all neighbors to try to find the next letter of the word.\n\nleetcode: https://leetcode.com/problems/word-search/\n\n\"\"\"\n\n\ndef get_point_key(len_board: int, len_board_column: int, row: int, column: int) -> int:\n    \"\"\"\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    \"\"\"\n\n    return len_board * len_board_column * row + column\n\n\ndef exits_word(\n    board: list[list[str]],\n    word: str,\n    row: int,\n    column: int,\n    word_index: int,\n    visited_points_set: set[int],\n) -> bool:\n    \"\"\"\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    \"\"\"\n\n    if board[row][column] != word[word_index]:\n        return False\n\n    if word_index == len(word) - 1:\n        return True\n\n    traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n    len_board = len(board)\n    len_board_column = len(board[0])\n    for direction in traverts_directions:\n        next_i = row + direction[0]\n        next_j = column + direction[1]\n        if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n            continue\n\n        key = get_point_key(len_board, len_board_column, next_i, next_j)\n        if key in visited_points_set:\n            continue\n\n        visited_points_set.add(key)\n        if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n            return True\n\n        visited_points_set.remove(key)\n\n    return False\n\n\ndef word_exists(board: list[list[str]], word: str) -> bool:\n    \"\"\"\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    \"\"\"\n\n    # Validate board\n    board_error_message = (\n        \"The board should be a non empty matrix of single chars strings.\"\n    )\n\n    len_board = len(board)\n    if not isinstance(board, list) or len(board) == 0:\n        raise ValueError(board_error_message)\n\n    for row in board:\n        if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)\n\n        for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)\n\n    # Validate word\n    if not isinstance(word, str) or len(word) == 0:\n        raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )\n\n    len_board_column = len(board[0])\n    for i in range(len_board):\n        for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "children": [
    {
      "value": "\"\"\"\nAuthor  : Alexander Pantyukhin\nDate    : November 24, 2022\n\nTask:\nGiven an m x n grid of characters board and a string word,\nreturn true if word exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells,\nwhere adjacent cells are horizontally or vertically neighboring.\nThe same letter cell may not be used more than once.\n\nExample:\n\nMatrix:\n---------\n|A|B|C|E|\n|S|F|C|S|\n|A|D|E|E|\n---------\n\nWord:\n\"ABCCED\"\n\nResult:\nTrue\n\nImplementation notes: Use backtracking approach.\nAt each point, check all neighbors to try to find the next letter of the word.\n\nleetcode: https://leetcode.com/problems/word-search/\n\n\"\"\"",
      "children": [
        {
          "value": "\"\"\"\nAuthor  : Alexander Pantyukhin\nDate    : November 24, 2022\n\nTask:\nGiven an m x n grid of characters board and a string word,\nreturn true if word exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells,\nwhere adjacent cells are horizontally or vertically neighboring.\nThe same letter cell may not be used more than once.\n\nExample:\n\nMatrix:\n---------\n|A|B|C|E|\n|S|F|C|S|\n|A|D|E|E|\n---------\n\nWord:\n\"ABCCED\"\n\nResult:\nTrue\n\nImplementation notes: Use backtracking approach.\nAt each point, check all neighbors to try to find the next letter of the word.\n\nleetcode: https://leetcode.com/problems/word-search/\n\n\"\"\"",
          "children": [
            {
              "value": "\"\"\"",
              "children": []
            },
            {
              "value": "Author  : Alexander Pantyukhin\nDate    : November 24, 2022\n\nTask:\nGiven an m x n grid of characters board and a string word,\nreturn true if word exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells,\nwhere adjacent cells are horizontally or vertically neighboring.\nThe same letter cell may not be used more than once.\n\nExample:\n\nMatrix:\n---------\n|A|B|C|E|\n|S|F|C|S|\n|A|D|E|E|\n---------\n\nWord:\n\"ABCCED\"\n\nResult:\nTrue\n\nImplementation notes: Use backtracking approach.\nAt each point, check all neighbors to try to find the next letter of the word.\n\nleetcode: https://leetcode.com/problems/word-search/",
              "children": []
            },
            {
              "value": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def get_point_key(len_board: int, len_board_column: int, row: int, column: int) -> int:\n    \"\"\"\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    \"\"\"\n\n    return len_board * len_board_column * row + column",
      "children": [
        {
          "value": "get_point_key",
          "children": []
        },
        {
          "value": "(len_board: int, len_board_column: int, row: int, column: int)",
          "children": [
            {
              "value": "len_board: int",
              "children": [
                {
                  "value": "len_board",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "len_board_column: int",
              "children": [
                {
                  "value": "len_board_column",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "row: int",
              "children": [
                {
                  "value": "row",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "column: int",
              "children": [
                {
                  "value": "column",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "int",
          "children": [
            {
              "value": "int",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    \"\"\"\n\n    return len_board * len_board_column * row + column",
          "children": [
            {
              "value": "\"\"\"\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "return len_board * len_board_column * row + column",
              "children": [
                {
                  "value": "len_board * len_board_column * row + column",
                  "children": [
                    {
                      "value": "len_board * len_board_column * row",
                      "children": [
                        {
                          "value": "len_board * len_board_column",
                          "children": [
                            {
                              "value": "len_board",
                              "children": []
                            },
                            {
                              "value": "len_board_column",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "row",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "column",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def exits_word(\n    board: list[list[str]],\n    word: str,\n    row: int,\n    column: int,\n    word_index: int,\n    visited_points_set: set[int],\n) -> bool:\n    \"\"\"\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    \"\"\"\n\n    if board[row][column] != word[word_index]:\n        return False\n\n    if word_index == len(word) - 1:\n        return True\n\n    traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n    len_board = len(board)\n    len_board_column = len(board[0])\n    for direction in traverts_directions:\n        next_i = row + direction[0]\n        next_j = column + direction[1]\n        if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n            continue\n\n        key = get_point_key(len_board, len_board_column, next_i, next_j)\n        if key in visited_points_set:\n            continue\n\n        visited_points_set.add(key)\n        if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n            return True\n\n        visited_points_set.remove(key)\n\n    return False",
      "children": [
        {
          "value": "exits_word",
          "children": []
        },
        {
          "value": "(\n    board: list[list[str]],\n    word: str,\n    row: int,\n    column: int,\n    word_index: int,\n    visited_points_set: set[int],\n)",
          "children": [
            {
              "value": "board: list[list[str]]",
              "children": [
                {
                  "value": "board",
                  "children": []
                },
                {
                  "value": "list[list[str]]",
                  "children": [
                    {
                      "value": "list[list[str]]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[list[str]]",
                          "children": [
                            {
                              "value": "list[str]",
                              "children": [
                                {
                                  "value": "list[str]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[str]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "word: str",
              "children": [
                {
                  "value": "word",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "row: int",
              "children": [
                {
                  "value": "row",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "column: int",
              "children": [
                {
                  "value": "column",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "word_index: int",
              "children": [
                {
                  "value": "word_index",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "visited_points_set: set[int]",
              "children": [
                {
                  "value": "visited_points_set",
                  "children": []
                },
                {
                  "value": "set[int]",
                  "children": [
                    {
                      "value": "set[int]",
                      "children": [
                        {
                          "value": "set",
                          "children": []
                        },
                        {
                          "value": "[int]",
                          "children": [
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "bool",
          "children": [
            {
              "value": "bool",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    \"\"\"\n\n    if board[row][column] != word[word_index]:\n        return False\n\n    if word_index == len(word) - 1:\n        return True\n\n    traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\n    len_board = len(board)\n    len_board_column = len(board[0])\n    for direction in traverts_directions:\n        next_i = row + direction[0]\n        next_j = column + direction[1]\n        if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n            continue\n\n        key = get_point_key(len_board, len_board_column, next_i, next_j)\n        if key in visited_points_set:\n            continue\n\n        visited_points_set.add(key)\n        if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n            return True\n\n        visited_points_set.remove(key)\n\n    return False",
          "children": [
            {
              "value": "\"\"\"\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if board[row][column] != word[word_index]:\n        return False",
              "children": [
                {
                  "value": "board[row][column] != word[word_index]",
                  "children": [
                    {
                      "value": "board[row][column]",
                      "children": [
                        {
                          "value": "board[row]",
                          "children": [
                            {
                              "value": "board",
                              "children": []
                            },
                            {
                              "value": "row",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "column",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "word[word_index]",
                      "children": [
                        {
                          "value": "word",
                          "children": []
                        },
                        {
                          "value": "word_index",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return False",
                  "children": [
                    {
                      "value": "return False",
                      "children": [
                        {
                          "value": "False",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if word_index == len(word) - 1:\n        return True",
              "children": [
                {
                  "value": "word_index == len(word) - 1",
                  "children": [
                    {
                      "value": "word_index",
                      "children": []
                    },
                    {
                      "value": "len(word) - 1",
                      "children": [
                        {
                          "value": "len(word)",
                          "children": [
                            {
                              "value": "len",
                              "children": []
                            },
                            {
                              "value": "(word)",
                              "children": [
                                {
                                  "value": "word",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return True",
                  "children": [
                    {
                      "value": "return True",
                      "children": [
                        {
                          "value": "True",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]",
              "children": [
                {
                  "value": "traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]",
                  "children": [
                    {
                      "value": "traverts_directions",
                      "children": []
                    },
                    {
                      "value": "[(0, 1), (0, -1), (-1, 0), (1, 0)]",
                      "children": [
                        {
                          "value": "(0, 1)",
                          "children": [
                            {
                              "value": "0",
                              "children": []
                            },
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(0, -1)",
                          "children": [
                            {
                              "value": "0",
                              "children": []
                            },
                            {
                              "value": "-1",
                              "children": [
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "(-1, 0)",
                          "children": [
                            {
                              "value": "-1",
                              "children": [
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(1, 0)",
                          "children": [
                            {
                              "value": "1",
                              "children": []
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "len_board = len(board)",
              "children": [
                {
                  "value": "len_board = len(board)",
                  "children": [
                    {
                      "value": "len_board",
                      "children": []
                    },
                    {
                      "value": "len(board)",
                      "children": [
                        {
                          "value": "len",
                          "children": []
                        },
                        {
                          "value": "(board)",
                          "children": [
                            {
                              "value": "board",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "len_board_column = len(board[0])",
              "children": [
                {
                  "value": "len_board_column = len(board[0])",
                  "children": [
                    {
                      "value": "len_board_column",
                      "children": []
                    },
                    {
                      "value": "len(board[0])",
                      "children": [
                        {
                          "value": "len",
                          "children": []
                        },
                        {
                          "value": "(board[0])",
                          "children": [
                            {
                              "value": "board[0]",
                              "children": [
                                {
                                  "value": "board",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for direction in traverts_directions:\n        next_i = row + direction[0]\n        next_j = column + direction[1]\n        if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n            continue\n\n        key = get_point_key(len_board, len_board_column, next_i, next_j)\n        if key in visited_points_set:\n            continue\n\n        visited_points_set.add(key)\n        if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n            return True\n\n        visited_points_set.remove(key)",
              "children": [
                {
                  "value": "direction",
                  "children": []
                },
                {
                  "value": "traverts_directions",
                  "children": []
                },
                {
                  "value": "next_i = row + direction[0]\n        next_j = column + direction[1]\n        if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n            continue\n\n        key = get_point_key(len_board, len_board_column, next_i, next_j)\n        if key in visited_points_set:\n            continue\n\n        visited_points_set.add(key)\n        if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n            return True\n\n        visited_points_set.remove(key)",
                  "children": [
                    {
                      "value": "next_i = row + direction[0]",
                      "children": [
                        {
                          "value": "next_i = row + direction[0]",
                          "children": [
                            {
                              "value": "next_i",
                              "children": []
                            },
                            {
                              "value": "row + direction[0]",
                              "children": [
                                {
                                  "value": "row",
                                  "children": []
                                },
                                {
                                  "value": "direction[0]",
                                  "children": [
                                    {
                                      "value": "direction",
                                      "children": []
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "next_j = column + direction[1]",
                      "children": [
                        {
                          "value": "next_j = column + direction[1]",
                          "children": [
                            {
                              "value": "next_j",
                              "children": []
                            },
                            {
                              "value": "column + direction[1]",
                              "children": [
                                {
                                  "value": "column",
                                  "children": []
                                },
                                {
                                  "value": "direction[1]",
                                  "children": [
                                    {
                                      "value": "direction",
                                      "children": []
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n            continue",
                      "children": [
                        {
                          "value": "not (0 <= next_i < len_board and 0 <= next_j < len_board_column)",
                          "children": [
                            {
                              "value": "(0 <= next_i < len_board and 0 <= next_j < len_board_column)",
                              "children": [
                                {
                                  "value": "0 <= next_i < len_board and 0 <= next_j < len_board_column",
                                  "children": [
                                    {
                                      "value": "0 <= next_i < len_board",
                                      "children": [
                                        {
                                          "value": "0",
                                          "children": []
                                        },
                                        {
                                          "value": "next_i",
                                          "children": []
                                        },
                                        {
                                          "value": "len_board",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "0 <= next_j < len_board_column",
                                      "children": [
                                        {
                                          "value": "0",
                                          "children": []
                                        },
                                        {
                                          "value": "next_j",
                                          "children": []
                                        },
                                        {
                                          "value": "len_board_column",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "continue",
                          "children": [
                            {
                              "value": "continue",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "key = get_point_key(len_board, len_board_column, next_i, next_j)",
                      "children": [
                        {
                          "value": "key = get_point_key(len_board, len_board_column, next_i, next_j)",
                          "children": [
                            {
                              "value": "key",
                              "children": []
                            },
                            {
                              "value": "get_point_key(len_board, len_board_column, next_i, next_j)",
                              "children": [
                                {
                                  "value": "get_point_key",
                                  "children": []
                                },
                                {
                                  "value": "(len_board, len_board_column, next_i, next_j)",
                                  "children": [
                                    {
                                      "value": "len_board",
                                      "children": []
                                    },
                                    {
                                      "value": "len_board_column",
                                      "children": []
                                    },
                                    {
                                      "value": "next_i",
                                      "children": []
                                    },
                                    {
                                      "value": "next_j",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if key in visited_points_set:\n            continue",
                      "children": [
                        {
                          "value": "key in visited_points_set",
                          "children": [
                            {
                              "value": "key",
                              "children": []
                            },
                            {
                              "value": "visited_points_set",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "continue",
                          "children": [
                            {
                              "value": "continue",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "visited_points_set.add(key)",
                      "children": [
                        {
                          "value": "visited_points_set.add(key)",
                          "children": [
                            {
                              "value": "visited_points_set.add",
                              "children": [
                                {
                                  "value": "visited_points_set",
                                  "children": []
                                },
                                {
                                  "value": "add",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(key)",
                              "children": [
                                {
                                  "value": "key",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n            return True",
                      "children": [
                        {
                          "value": "exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set)",
                          "children": [
                            {
                              "value": "exits_word",
                              "children": []
                            },
                            {
                              "value": "(board, word, next_i, next_j, word_index + 1, visited_points_set)",
                              "children": [
                                {
                                  "value": "board",
                                  "children": []
                                },
                                {
                                  "value": "word",
                                  "children": []
                                },
                                {
                                  "value": "next_i",
                                  "children": []
                                },
                                {
                                  "value": "next_j",
                                  "children": []
                                },
                                {
                                  "value": "word_index + 1",
                                  "children": [
                                    {
                                      "value": "word_index",
                                      "children": []
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "visited_points_set",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return True",
                          "children": [
                            {
                              "value": "return True",
                              "children": [
                                {
                                  "value": "True",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "visited_points_set.remove(key)",
                      "children": [
                        {
                          "value": "visited_points_set.remove(key)",
                          "children": [
                            {
                              "value": "visited_points_set.remove",
                              "children": [
                                {
                                  "value": "visited_points_set",
                                  "children": []
                                },
                                {
                                  "value": "remove",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(key)",
                              "children": [
                                {
                                  "value": "key",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return False",
              "children": [
                {
                  "value": "False",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def word_exists(board: list[list[str]], word: str) -> bool:\n    \"\"\"\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    \"\"\"\n\n    # Validate board\n    board_error_message = (\n        \"The board should be a non empty matrix of single chars strings.\"\n    )\n\n    len_board = len(board)\n    if not isinstance(board, list) or len(board) == 0:\n        raise ValueError(board_error_message)\n\n    for row in board:\n        if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)\n\n        for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)\n\n    # Validate word\n    if not isinstance(word, str) or len(word) == 0:\n        raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )\n\n    len_board_column = len(board[0])\n    for i in range(len_board):\n        for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True\n\n    return False",
      "children": [
        {
          "value": "word_exists",
          "children": []
        },
        {
          "value": "(board: list[list[str]], word: str)",
          "children": [
            {
              "value": "board: list[list[str]]",
              "children": [
                {
                  "value": "board",
                  "children": []
                },
                {
                  "value": "list[list[str]]",
                  "children": [
                    {
                      "value": "list[list[str]]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[list[str]]",
                          "children": [
                            {
                              "value": "list[str]",
                              "children": [
                                {
                                  "value": "list[str]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[str]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "word: str",
              "children": [
                {
                  "value": "word",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "bool",
          "children": [
            {
              "value": "bool",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    \"\"\"\n\n    # Validate board\n    board_error_message = (\n        \"The board should be a non empty matrix of single chars strings.\"\n    )\n\n    len_board = len(board)\n    if not isinstance(board, list) or len(board) == 0:\n        raise ValueError(board_error_message)\n\n    for row in board:\n        if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)\n\n        for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)\n\n    # Validate word\n    if not isinstance(word, str) or len(word) == 0:\n        raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )\n\n    len_board_column = len(board[0])\n    for i in range(len_board):\n        for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True\n\n    return False",
          "children": [
            {
              "value": "\"\"\"\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": ">>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True\n    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False\n    >>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Validate board",
              "children": []
            },
            {
              "value": "board_error_message = (\n        \"The board should be a non empty matrix of single chars strings.\"\n    )",
              "children": [
                {
                  "value": "board_error_message = (\n        \"The board should be a non empty matrix of single chars strings.\"\n    )",
                  "children": [
                    {
                      "value": "board_error_message",
                      "children": []
                    },
                    {
                      "value": "(\n        \"The board should be a non empty matrix of single chars strings.\"\n    )",
                      "children": [
                        {
                          "value": "\"The board should be a non empty matrix of single chars strings.\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "The board should be a non empty matrix of single chars strings.",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "len_board = len(board)",
              "children": [
                {
                  "value": "len_board = len(board)",
                  "children": [
                    {
                      "value": "len_board",
                      "children": []
                    },
                    {
                      "value": "len(board)",
                      "children": [
                        {
                          "value": "len",
                          "children": []
                        },
                        {
                          "value": "(board)",
                          "children": [
                            {
                              "value": "board",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not isinstance(board, list) or len(board) == 0:\n        raise ValueError(board_error_message)",
              "children": [
                {
                  "value": "not isinstance(board, list) or len(board) == 0",
                  "children": [
                    {
                      "value": "not isinstance(board, list)",
                      "children": [
                        {
                          "value": "isinstance(board, list)",
                          "children": [
                            {
                              "value": "isinstance",
                              "children": []
                            },
                            {
                              "value": "(board, list)",
                              "children": [
                                {
                                  "value": "board",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "len(board) == 0",
                      "children": [
                        {
                          "value": "len(board)",
                          "children": [
                            {
                              "value": "len",
                              "children": []
                            },
                            {
                              "value": "(board)",
                              "children": [
                                {
                                  "value": "board",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "raise ValueError(board_error_message)",
                  "children": [
                    {
                      "value": "raise ValueError(board_error_message)",
                      "children": [
                        {
                          "value": "ValueError(board_error_message)",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(board_error_message)",
                              "children": [
                                {
                                  "value": "board_error_message",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for row in board:\n        if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)\n\n        for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)",
              "children": [
                {
                  "value": "row",
                  "children": []
                },
                {
                  "value": "board",
                  "children": []
                },
                {
                  "value": "if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)\n\n        for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)",
                  "children": [
                    {
                      "value": "if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)",
                      "children": [
                        {
                          "value": "not isinstance(row, list) or len(row) == 0",
                          "children": [
                            {
                              "value": "not isinstance(row, list)",
                              "children": [
                                {
                                  "value": "isinstance(row, list)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(row, list)",
                                      "children": [
                                        {
                                          "value": "row",
                                          "children": []
                                        },
                                        {
                                          "value": "list",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "len(row) == 0",
                              "children": [
                                {
                                  "value": "len(row)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(row)",
                                      "children": [
                                        {
                                          "value": "row",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(board_error_message)",
                          "children": [
                            {
                              "value": "raise ValueError(board_error_message)",
                              "children": [
                                {
                                  "value": "ValueError(board_error_message)",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(board_error_message)",
                                      "children": [
                                        {
                                          "value": "board_error_message",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)",
                      "children": [
                        {
                          "value": "item",
                          "children": []
                        },
                        {
                          "value": "row",
                          "children": []
                        },
                        {
                          "value": "if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)",
                          "children": [
                            {
                              "value": "if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)",
                              "children": [
                                {
                                  "value": "not isinstance(item, str) or len(item) != 1",
                                  "children": [
                                    {
                                      "value": "not isinstance(item, str)",
                                      "children": [
                                        {
                                          "value": "isinstance(item, str)",
                                          "children": [
                                            {
                                              "value": "isinstance",
                                              "children": []
                                            },
                                            {
                                              "value": "(item, str)",
                                              "children": [
                                                {
                                                  "value": "item",
                                                  "children": []
                                                },
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "len(item) != 1",
                                      "children": [
                                        {
                                          "value": "len(item)",
                                          "children": [
                                            {
                                              "value": "len",
                                              "children": []
                                            },
                                            {
                                              "value": "(item)",
                                              "children": [
                                                {
                                                  "value": "item",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise ValueError(board_error_message)",
                                  "children": [
                                    {
                                      "value": "raise ValueError(board_error_message)",
                                      "children": [
                                        {
                                          "value": "ValueError(board_error_message)",
                                          "children": [
                                            {
                                              "value": "ValueError",
                                              "children": []
                                            },
                                            {
                                              "value": "(board_error_message)",
                                              "children": [
                                                {
                                                  "value": "board_error_message",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Validate word",
              "children": []
            },
            {
              "value": "if not isinstance(word, str) or len(word) == 0:\n        raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )",
              "children": [
                {
                  "value": "not isinstance(word, str) or len(word) == 0",
                  "children": [
                    {
                      "value": "not isinstance(word, str)",
                      "children": [
                        {
                          "value": "isinstance(word, str)",
                          "children": [
                            {
                              "value": "isinstance",
                              "children": []
                            },
                            {
                              "value": "(word, str)",
                              "children": [
                                {
                                  "value": "word",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "len(word) == 0",
                      "children": [
                        {
                          "value": "len(word)",
                          "children": [
                            {
                              "value": "len",
                              "children": []
                            },
                            {
                              "value": "(word)",
                              "children": [
                                {
                                  "value": "word",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )",
                  "children": [
                    {
                      "value": "raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )",
                      "children": [
                        {
                          "value": "ValueError(\n            \"The word parameter should be a string of length greater than 0.\"\n        )",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\n            \"The word parameter should be a string of length greater than 0.\"\n        )",
                              "children": [
                                {
                                  "value": "\"The word parameter should be a string of length greater than 0.\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "The word parameter should be a string of length greater than 0.",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "len_board_column = len(board[0])",
              "children": [
                {
                  "value": "len_board_column = len(board[0])",
                  "children": [
                    {
                      "value": "len_board_column",
                      "children": []
                    },
                    {
                      "value": "len(board[0])",
                      "children": [
                        {
                          "value": "len",
                          "children": []
                        },
                        {
                          "value": "(board[0])",
                          "children": [
                            {
                              "value": "board[0]",
                              "children": [
                                {
                                  "value": "board",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for i in range(len_board):\n        for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True",
              "children": [
                {
                  "value": "i",
                  "children": []
                },
                {
                  "value": "range(len_board)",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(len_board)",
                      "children": [
                        {
                          "value": "len_board",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True",
                  "children": [
                    {
                      "value": "for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True",
                      "children": [
                        {
                          "value": "j",
                          "children": []
                        },
                        {
                          "value": "range(len_board_column)",
                          "children": [
                            {
                              "value": "range",
                              "children": []
                            },
                            {
                              "value": "(len_board_column)",
                              "children": [
                                {
                                  "value": "len_board_column",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True",
                          "children": [
                            {
                              "value": "if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True",
                              "children": [
                                {
                                  "value": "exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            )",
                                  "children": [
                                    {
                                      "value": "exits_word",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            )",
                                      "children": [
                                        {
                                          "value": "board",
                                          "children": []
                                        },
                                        {
                                          "value": "word",
                                          "children": []
                                        },
                                        {
                                          "value": "i",
                                          "children": []
                                        },
                                        {
                                          "value": "j",
                                          "children": []
                                        },
                                        {
                                          "value": "0",
                                          "children": []
                                        },
                                        {
                                          "value": "{get_point_key(len_board, len_board_column, i, j)}",
                                          "children": [
                                            {
                                              "value": "get_point_key(len_board, len_board_column, i, j)",
                                              "children": [
                                                {
                                                  "value": "get_point_key",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(len_board, len_board_column, i, j)",
                                                  "children": [
                                                    {
                                                      "value": "len_board",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "len_board_column",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "i",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "j",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return True",
                                  "children": [
                                    {
                                      "value": "return True",
                                      "children": [
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return False",
              "children": [
                {
                  "value": "False",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      "children": [
        {
          "value": "__name__ == \"__main__\"",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "\"__main__\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "import doctest\n\n    doctest.testmod()",
          "children": [
            {
              "value": "import doctest",
              "children": [
                {
                  "value": "doctest",
                  "children": [
                    {
                      "value": "doctest",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "doctest.testmod()",
              "children": [
                {
                  "value": "doctest.testmod()",
                  "children": [
                    {
                      "value": "doctest.testmod",
                      "children": [
                        {
                          "value": "doctest",
                          "children": []
                        },
                        {
                          "value": "testmod",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}