{
  "value": "\"\"\"\nIn this problem, we want to determine all possible combinations of k\nnumbers out of 1 ... n. We use backtracking to solve this problem.\n\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom itertools import combinations\n\n\ndef combination_lists(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"\n    return [list(x) for x in combinations(range(1, n + 1), k)]\n\n\ndef generate_all_combinations(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must not be negative\")\n    if n < 0:\n        raise ValueError(\"n must not be negative\")\n\n    result: list[list[int]] = []\n    create_all_state(1, n, k, [], result)\n    return result\n\n\ndef create_all_state(\n    increment: int,\n    total_number: int,\n    level: int,\n    current_list: list[int],\n    total_list: list[list[int]],\n) -> None:\n    if level == 0:\n        total_list.append(current_list[:])\n        return\n\n    for i in range(increment, total_number - level + 2):\n        current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    print(generate_all_combinations(n=4, k=2))\n    tests = ((n, k) for n in range(1, 5) for k in range(1, 5))\n    for n, k in tests:\n        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))\n\n    print(\"Benchmark:\")\n    from timeit import timeit\n\n    for func in (\"combination_lists\", \"generate_all_combinations\"):\n        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
  "children": [
    {
      "value": "\"\"\"\nIn this problem, we want to determine all possible combinations of k\nnumbers out of 1 ... n. We use backtracking to solve this problem.\n\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),\n\"\"\"",
      "children": [
        {
          "value": "\"\"\"\nIn this problem, we want to determine all possible combinations of k\nnumbers out of 1 ... n. We use backtracking to solve this problem.\n\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),\n\"\"\"",
          "children": [
            {
              "value": "\"\"\"",
              "children": []
            },
            {
              "value": "In this problem, we want to determine all possible combinations of k\nnumbers out of 1 ... n. We use backtracking to solve this problem.\n\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),",
              "children": []
            },
            {
              "value": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from __future__ import annotations",
      "children": [
        {
          "value": "annotations",
          "children": [
            {
              "value": "annotations",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from itertools import combinations",
      "children": [
        {
          "value": "itertools",
          "children": [
            {
              "value": "itertools",
              "children": []
            }
          ]
        },
        {
          "value": "combinations",
          "children": [
            {
              "value": "combinations",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def combination_lists(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"\n    return [list(x) for x in combinations(range(1, n + 1), k)]",
      "children": [
        {
          "value": "combination_lists",
          "children": []
        },
        {
          "value": "(n: int, k: int)",
          "children": [
            {
              "value": "n: int",
              "children": [
                {
                  "value": "n",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "k: int",
              "children": [
                {
                  "value": "k",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "list[list[int]]",
          "children": [
            {
              "value": "list[list[int]]",
              "children": [
                {
                  "value": "list",
                  "children": []
                },
                {
                  "value": "[list[int]]",
                  "children": [
                    {
                      "value": "list[int]",
                      "children": [
                        {
                          "value": "list[int]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[int]",
                              "children": [
                                {
                                  "value": "int",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"\n    return [list(x) for x in combinations(range(1, n + 1), k)]",
          "children": [
            {
              "value": "\"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": ">>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "return [list(x) for x in combinations(range(1, n + 1), k)]",
              "children": [
                {
                  "value": "[list(x) for x in combinations(range(1, n + 1), k)]",
                  "children": [
                    {
                      "value": "list(x)",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "(x)",
                          "children": [
                            {
                              "value": "x",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for x in combinations(range(1, n + 1), k)",
                      "children": [
                        {
                          "value": "x",
                          "children": []
                        },
                        {
                          "value": "combinations(range(1, n + 1), k)",
                          "children": [
                            {
                              "value": "combinations",
                              "children": []
                            },
                            {
                              "value": "(range(1, n + 1), k)",
                              "children": [
                                {
                                  "value": "range(1, n + 1)",
                                  "children": [
                                    {
                                      "value": "range",
                                      "children": []
                                    },
                                    {
                                      "value": "(1, n + 1)",
                                      "children": [
                                        {
                                          "value": "1",
                                          "children": []
                                        },
                                        {
                                          "value": "n + 1",
                                          "children": [
                                            {
                                              "value": "n",
                                              "children": []
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "k",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def generate_all_combinations(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must not be negative\")\n    if n < 0:\n        raise ValueError(\"n must not be negative\")\n\n    result: list[list[int]] = []\n    create_all_state(1, n, k, [], result)\n    return result",
      "children": [
        {
          "value": "generate_all_combinations",
          "children": []
        },
        {
          "value": "(n: int, k: int)",
          "children": [
            {
              "value": "n: int",
              "children": [
                {
                  "value": "n",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "k: int",
              "children": [
                {
                  "value": "k",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "list[list[int]]",
          "children": [
            {
              "value": "list[list[int]]",
              "children": [
                {
                  "value": "list",
                  "children": []
                },
                {
                  "value": "[list[int]]",
                  "children": [
                    {
                      "value": "list[int]",
                      "children": [
                        {
                          "value": "list[int]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[int]",
                              "children": [
                                {
                                  "value": "int",
                                  "children": [
                                    {
                                      "value": "int",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must not be negative\")\n    if n < 0:\n        raise ValueError(\"n must not be negative\")\n\n    result: list[list[int]] = []\n    create_all_state(1, n, k, [], result)\n    return result",
          "children": [
            {
              "value": "\"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": ">>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if k < 0:\n        raise ValueError(\"k must not be negative\")",
              "children": [
                {
                  "value": "k < 0",
                  "children": [
                    {
                      "value": "k",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"k must not be negative\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"k must not be negative\")",
                      "children": [
                        {
                          "value": "ValueError(\"k must not be negative\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"k must not be negative\")",
                              "children": [
                                {
                                  "value": "\"k must not be negative\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "k must not be negative",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if n < 0:\n        raise ValueError(\"n must not be negative\")",
              "children": [
                {
                  "value": "n < 0",
                  "children": [
                    {
                      "value": "n",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"n must not be negative\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"n must not be negative\")",
                      "children": [
                        {
                          "value": "ValueError(\"n must not be negative\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"n must not be negative\")",
                              "children": [
                                {
                                  "value": "\"n must not be negative\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "n must not be negative",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "result: list[list[int]] = []",
              "children": [
                {
                  "value": "result: list[list[int]] = []",
                  "children": [
                    {
                      "value": "result",
                      "children": []
                    },
                    {
                      "value": "list[list[int]]",
                      "children": [
                        {
                          "value": "list[list[int]]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[list[int]]",
                              "children": [
                                {
                                  "value": "list[int]",
                                  "children": [
                                    {
                                      "value": "list[int]",
                                      "children": [
                                        {
                                          "value": "list",
                                          "children": []
                                        },
                                        {
                                          "value": "[int]",
                                          "children": [
                                            {
                                              "value": "int",
                                              "children": [
                                                {
                                                  "value": "int",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "create_all_state(1, n, k, [], result)",
              "children": [
                {
                  "value": "create_all_state(1, n, k, [], result)",
                  "children": [
                    {
                      "value": "create_all_state",
                      "children": []
                    },
                    {
                      "value": "(1, n, k, [], result)",
                      "children": [
                        {
                          "value": "1",
                          "children": []
                        },
                        {
                          "value": "n",
                          "children": []
                        },
                        {
                          "value": "k",
                          "children": []
                        },
                        {
                          "value": "[]",
                          "children": []
                        },
                        {
                          "value": "result",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return result",
              "children": [
                {
                  "value": "result",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def create_all_state(\n    increment: int,\n    total_number: int,\n    level: int,\n    current_list: list[int],\n    total_list: list[list[int]],\n) -> None:\n    if level == 0:\n        total_list.append(current_list[:])\n        return\n\n    for i in range(increment, total_number - level + 2):\n        current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()",
      "children": [
        {
          "value": "create_all_state",
          "children": []
        },
        {
          "value": "(\n    increment: int,\n    total_number: int,\n    level: int,\n    current_list: list[int],\n    total_list: list[list[int]],\n)",
          "children": [
            {
              "value": "increment: int",
              "children": [
                {
                  "value": "increment",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "total_number: int",
              "children": [
                {
                  "value": "total_number",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "level: int",
              "children": [
                {
                  "value": "level",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "current_list: list[int]",
              "children": [
                {
                  "value": "current_list",
                  "children": []
                },
                {
                  "value": "list[int]",
                  "children": [
                    {
                      "value": "list[int]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[int]",
                          "children": [
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "total_list: list[list[int]]",
              "children": [
                {
                  "value": "total_list",
                  "children": []
                },
                {
                  "value": "list[list[int]]",
                  "children": [
                    {
                      "value": "list[list[int]]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[list[int]]",
                          "children": [
                            {
                              "value": "list[int]",
                              "children": [
                                {
                                  "value": "list[int]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[int]",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": [
                                            {
                                              "value": "int",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "if level == 0:\n        total_list.append(current_list[:])\n        return\n\n    for i in range(increment, total_number - level + 2):\n        current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()",
          "children": [
            {
              "value": "if level == 0:\n        total_list.append(current_list[:])\n        return",
              "children": [
                {
                  "value": "level == 0",
                  "children": [
                    {
                      "value": "level",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "total_list.append(current_list[:])\n        return",
                  "children": [
                    {
                      "value": "total_list.append(current_list[:])",
                      "children": [
                        {
                          "value": "total_list.append(current_list[:])",
                          "children": [
                            {
                              "value": "total_list.append",
                              "children": [
                                {
                                  "value": "total_list",
                                  "children": []
                                },
                                {
                                  "value": "append",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(current_list[:])",
                              "children": [
                                {
                                  "value": "current_list[:]",
                                  "children": [
                                    {
                                      "value": "current_list",
                                      "children": []
                                    },
                                    {
                                      "value": ":",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "for i in range(increment, total_number - level + 2):\n        current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()",
              "children": [
                {
                  "value": "i",
                  "children": []
                },
                {
                  "value": "range(increment, total_number - level + 2)",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(increment, total_number - level + 2)",
                      "children": [
                        {
                          "value": "increment",
                          "children": []
                        },
                        {
                          "value": "total_number - level + 2",
                          "children": [
                            {
                              "value": "total_number - level",
                              "children": [
                                {
                                  "value": "total_number",
                                  "children": []
                                },
                                {
                                  "value": "level",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "2",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()",
                  "children": [
                    {
                      "value": "current_list.append(i)",
                      "children": [
                        {
                          "value": "current_list.append(i)",
                          "children": [
                            {
                              "value": "current_list.append",
                              "children": [
                                {
                                  "value": "current_list",
                                  "children": []
                                },
                                {
                                  "value": "append",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(i)",
                              "children": [
                                {
                                  "value": "i",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "create_all_state(i + 1, total_number, level - 1, current_list, total_list)",
                      "children": [
                        {
                          "value": "create_all_state(i + 1, total_number, level - 1, current_list, total_list)",
                          "children": [
                            {
                              "value": "create_all_state",
                              "children": []
                            },
                            {
                              "value": "(i + 1, total_number, level - 1, current_list, total_list)",
                              "children": [
                                {
                                  "value": "i + 1",
                                  "children": [
                                    {
                                      "value": "i",
                                      "children": []
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "total_number",
                                  "children": []
                                },
                                {
                                  "value": "level - 1",
                                  "children": [
                                    {
                                      "value": "level",
                                      "children": []
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "current_list",
                                  "children": []
                                },
                                {
                                  "value": "total_list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "current_list.pop()",
                      "children": [
                        {
                          "value": "current_list.pop()",
                          "children": [
                            {
                              "value": "current_list.pop",
                              "children": [
                                {
                                  "value": "current_list",
                                  "children": []
                                },
                                {
                                  "value": "pop",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    print(generate_all_combinations(n=4, k=2))\n    tests = ((n, k) for n in range(1, 5) for k in range(1, 5))\n    for n, k in tests:\n        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))\n\n    print(\"Benchmark:\")\n    from timeit import timeit\n\n    for func in (\"combination_lists\", \"generate_all_combinations\"):\n        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
      "children": [
        {
          "value": "__name__ == \"__main__\"",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "\"__main__\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "from doctest import testmod\n\n    testmod()\n    print(generate_all_combinations(n=4, k=2))\n    tests = ((n, k) for n in range(1, 5) for k in range(1, 5))\n    for n, k in tests:\n        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))\n\n    print(\"Benchmark:\")\n    from timeit import timeit\n\n    for func in (\"combination_lists\", \"generate_all_combinations\"):\n        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
          "children": [
            {
              "value": "from doctest import testmod",
              "children": [
                {
                  "value": "doctest",
                  "children": [
                    {
                      "value": "doctest",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "testmod",
                  "children": [
                    {
                      "value": "testmod",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "testmod()",
              "children": [
                {
                  "value": "testmod()",
                  "children": [
                    {
                      "value": "testmod",
                      "children": []
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "print(generate_all_combinations(n=4, k=2))",
              "children": [
                {
                  "value": "print(generate_all_combinations(n=4, k=2))",
                  "children": [
                    {
                      "value": "print",
                      "children": []
                    },
                    {
                      "value": "(generate_all_combinations(n=4, k=2))",
                      "children": [
                        {
                          "value": "generate_all_combinations(n=4, k=2)",
                          "children": [
                            {
                              "value": "generate_all_combinations",
                              "children": []
                            },
                            {
                              "value": "(n=4, k=2)",
                              "children": [
                                {
                                  "value": "n=4",
                                  "children": [
                                    {
                                      "value": "n",
                                      "children": []
                                    },
                                    {
                                      "value": "4",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "k=2",
                                  "children": [
                                    {
                                      "value": "k",
                                      "children": []
                                    },
                                    {
                                      "value": "2",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "tests = ((n, k) for n in range(1, 5) for k in range(1, 5))",
              "children": [
                {
                  "value": "tests = ((n, k) for n in range(1, 5) for k in range(1, 5))",
                  "children": [
                    {
                      "value": "tests",
                      "children": []
                    },
                    {
                      "value": "((n, k) for n in range(1, 5) for k in range(1, 5))",
                      "children": [
                        {
                          "value": "(n, k)",
                          "children": [
                            {
                              "value": "n",
                              "children": []
                            },
                            {
                              "value": "k",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "for n in range(1, 5)",
                          "children": [
                            {
                              "value": "n",
                              "children": []
                            },
                            {
                              "value": "range(1, 5)",
                              "children": [
                                {
                                  "value": "range",
                                  "children": []
                                },
                                {
                                  "value": "(1, 5)",
                                  "children": [
                                    {
                                      "value": "1",
                                      "children": []
                                    },
                                    {
                                      "value": "5",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for k in range(1, 5)",
                          "children": [
                            {
                              "value": "k",
                              "children": []
                            },
                            {
                              "value": "range(1, 5)",
                              "children": [
                                {
                                  "value": "range",
                                  "children": []
                                },
                                {
                                  "value": "(1, 5)",
                                  "children": [
                                    {
                                      "value": "1",
                                      "children": []
                                    },
                                    {
                                      "value": "5",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for n, k in tests:\n        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
              "children": [
                {
                  "value": "n, k",
                  "children": [
                    {
                      "value": "n",
                      "children": []
                    },
                    {
                      "value": "k",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "tests",
                  "children": []
                },
                {
                  "value": "print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
                  "children": [
                    {
                      "value": "print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
                      "children": [
                        {
                          "value": "print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
                              "children": [
                                {
                                  "value": "n",
                                  "children": []
                                },
                                {
                                  "value": "k",
                                  "children": []
                                },
                                {
                                  "value": "generate_all_combinations(n, k) == combination_lists(n, k)",
                                  "children": [
                                    {
                                      "value": "generate_all_combinations(n, k)",
                                      "children": [
                                        {
                                          "value": "generate_all_combinations",
                                          "children": []
                                        },
                                        {
                                          "value": "(n, k)",
                                          "children": [
                                            {
                                              "value": "n",
                                              "children": []
                                            },
                                            {
                                              "value": "k",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "combination_lists(n, k)",
                                      "children": [
                                        {
                                          "value": "combination_lists",
                                          "children": []
                                        },
                                        {
                                          "value": "(n, k)",
                                          "children": [
                                            {
                                              "value": "n",
                                              "children": []
                                            },
                                            {
                                              "value": "k",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "print(\"Benchmark:\")",
              "children": [
                {
                  "value": "print(\"Benchmark:\")",
                  "children": [
                    {
                      "value": "print",
                      "children": []
                    },
                    {
                      "value": "(\"Benchmark:\")",
                      "children": [
                        {
                          "value": "\"Benchmark:\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Benchmark:",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "from timeit import timeit",
              "children": [
                {
                  "value": "timeit",
                  "children": [
                    {
                      "value": "timeit",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "timeit",
                  "children": [
                    {
                      "value": "timeit",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "for func in (\"combination_lists\", \"generate_all_combinations\"):\n        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
              "children": [
                {
                  "value": "func",
                  "children": []
                },
                {
                  "value": "(\"combination_lists\", \"generate_all_combinations\")",
                  "children": [
                    {
                      "value": "\"combination_lists\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "combination_lists",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"generate_all_combinations\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "generate_all_combinations",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                  "children": [
                    {
                      "value": "print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                      "children": [
                        {
                          "value": "print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                              "children": [
                                {
                                  "value": "f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "{func:>25}",
                                      "children": [
                                        {
                                          "value": "func",
                                          "children": []
                                        },
                                        {
                                          "value": ":>25",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "():",
                                      "children": []
                                    },
                                    {
                                      "value": "{timeit(f'{func}(n=4, k = 2)', globals=globals())}",
                                      "children": [
                                        {
                                          "value": "timeit(f'{func}(n=4, k = 2)', globals=globals())",
                                          "children": [
                                            {
                                              "value": "timeit",
                                              "children": []
                                            },
                                            {
                                              "value": "(f'{func}(n=4, k = 2)', globals=globals())",
                                              "children": [
                                                {
                                                  "value": "f'{func}(n=4, k = 2)'",
                                                  "children": [
                                                    {
                                                      "value": "f'",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{func}",
                                                      "children": [
                                                        {
                                                          "value": "func",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(n=4, k = 2)",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "'",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "globals=globals()",
                                                  "children": [
                                                    {
                                                      "value": "globals",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "globals()",
                                                      "children": [
                                                        {
                                                          "value": "globals",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "()",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}