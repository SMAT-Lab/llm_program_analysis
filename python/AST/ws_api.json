{
  "value": "import asyncio\nimport logging\nfrom contextlib import asynccontextmanager\n\nimport uvicorn\nfrom autogpt_libs.auth import parse_jwt_token\nfrom fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect\nfrom starlette.middleware.cors import CORSMiddleware\n\nfrom backend.data import redis\nfrom backend.data.execution import AsyncRedisExecutionEventBus\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import ExecutionSubscription, Methods, WsMessage\nfrom backend.util.service import AppProcess\nfrom backend.util.settings import AppEnvironment, Config, Settings\n\nlogger = logging.getLogger(__name__)\nsettings = Settings()\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    manager = get_connection_manager()\n    fut = asyncio.create_task(event_broadcaster(manager))\n    fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))\n    yield\n\n\ndocs_url = \"/docs\" if settings.config.app_env == AppEnvironment.LOCAL else None\napp = FastAPI(lifespan=lifespan, docs_url=docs_url)\n_connection_manager = None\n\n\ndef get_connection_manager():\n    global _connection_manager\n    if _connection_manager is None:\n        _connection_manager = ConnectionManager()\n    return _connection_manager\n\n\nasync def event_broadcaster(manager: ConnectionManager):\n    try:\n        redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n        async for event in event_queue.listen():\n            await manager.send_execution_result(event)\n    except Exception as e:\n        logger.exception(f\"Event broadcaster error: {e}\")\n        raise\n    finally:\n        redis.disconnect()\n\n\nasync def authenticate_websocket(websocket: WebSocket) -> str:\n    if not settings.config.enable_auth:\n        return DEFAULT_USER_ID\n\n    token = websocket.query_params.get(\"token\")\n    if not token:\n        await websocket.close(code=4001, reason=\"Missing authentication token\")\n        return \"\"\n\n    try:\n        payload = parse_jwt_token(token)\n        user_id = payload.get(\"sub\")\n        if not user_id:\n            await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"\n        return user_id\n    except ValueError:\n        await websocket.close(code=4003, reason=\"Invalid token\")\n        return \"\"\n\n\nasync def handle_subscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\n    if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )\n\n\nasync def handle_unsubscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\n    if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )\n\n\n@app.get(\"/\")\nasync def health():\n    return {\"status\": \"healthy\"}\n\n\n@app.websocket(\"/ws\")\nasync def websocket_router(\n    websocket: WebSocket, manager: ConnectionManager = Depends(get_connection_manager)\n):\n    user_id = await authenticate_websocket(websocket)\n    if not user_id:\n        return\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n\n            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue\n\n            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n\n            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n\n            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )\n\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug(\"WebSocket client disconnected\")\n\n\nclass WebsocketServer(AppProcess):\n    def run(self):\n        logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")\n        server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n        uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )",
  "children": [
    {
      "value": "import asyncio",
      "children": [
        {
          "value": "asyncio",
          "children": [
            {
              "value": "asyncio",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from contextlib import asynccontextmanager",
      "children": [
        {
          "value": "contextlib",
          "children": [
            {
              "value": "contextlib",
              "children": []
            }
          ]
        },
        {
          "value": "asynccontextmanager",
          "children": [
            {
              "value": "asynccontextmanager",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import uvicorn",
      "children": [
        {
          "value": "uvicorn",
          "children": [
            {
              "value": "uvicorn",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from autogpt_libs.auth import parse_jwt_token",
      "children": [
        {
          "value": "autogpt_libs.auth",
          "children": [
            {
              "value": "autogpt_libs",
              "children": []
            },
            {
              "value": "auth",
              "children": []
            }
          ]
        },
        {
          "value": "parse_jwt_token",
          "children": [
            {
              "value": "parse_jwt_token",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect",
      "children": [
        {
          "value": "fastapi",
          "children": [
            {
              "value": "fastapi",
              "children": []
            }
          ]
        },
        {
          "value": "Depends",
          "children": [
            {
              "value": "Depends",
              "children": []
            }
          ]
        },
        {
          "value": "FastAPI",
          "children": [
            {
              "value": "FastAPI",
              "children": []
            }
          ]
        },
        {
          "value": "WebSocket",
          "children": [
            {
              "value": "WebSocket",
              "children": []
            }
          ]
        },
        {
          "value": "WebSocketDisconnect",
          "children": [
            {
              "value": "WebSocketDisconnect",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from starlette.middleware.cors import CORSMiddleware",
      "children": [
        {
          "value": "starlette.middleware.cors",
          "children": [
            {
              "value": "starlette",
              "children": []
            },
            {
              "value": "middleware",
              "children": []
            },
            {
              "value": "cors",
              "children": []
            }
          ]
        },
        {
          "value": "CORSMiddleware",
          "children": [
            {
              "value": "CORSMiddleware",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data import redis",
      "children": [
        {
          "value": "backend.data",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            }
          ]
        },
        {
          "value": "redis",
          "children": [
            {
              "value": "redis",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.execution import AsyncRedisExecutionEventBus",
      "children": [
        {
          "value": "backend.data.execution",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "execution",
              "children": []
            }
          ]
        },
        {
          "value": "AsyncRedisExecutionEventBus",
          "children": [
            {
              "value": "AsyncRedisExecutionEventBus",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.user import DEFAULT_USER_ID",
      "children": [
        {
          "value": "backend.data.user",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "user",
              "children": []
            }
          ]
        },
        {
          "value": "DEFAULT_USER_ID",
          "children": [
            {
              "value": "DEFAULT_USER_ID",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.server.conn_manager import ConnectionManager",
      "children": [
        {
          "value": "backend.server.conn_manager",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "server",
              "children": []
            },
            {
              "value": "conn_manager",
              "children": []
            }
          ]
        },
        {
          "value": "ConnectionManager",
          "children": [
            {
              "value": "ConnectionManager",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.server.model import ExecutionSubscription, Methods, WsMessage",
      "children": [
        {
          "value": "backend.server.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "server",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionSubscription",
          "children": [
            {
              "value": "ExecutionSubscription",
              "children": []
            }
          ]
        },
        {
          "value": "Methods",
          "children": [
            {
              "value": "Methods",
              "children": []
            }
          ]
        },
        {
          "value": "WsMessage",
          "children": [
            {
              "value": "WsMessage",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.service import AppProcess",
      "children": [
        {
          "value": "backend.util.service",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "service",
              "children": []
            }
          ]
        },
        {
          "value": "AppProcess",
          "children": [
            {
              "value": "AppProcess",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import AppEnvironment, Config, Settings",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "AppEnvironment",
          "children": [
            {
              "value": "AppEnvironment",
              "children": []
            }
          ]
        },
        {
          "value": "Config",
          "children": [
            {
              "value": "Config",
              "children": []
            }
          ]
        },
        {
          "value": "Settings",
          "children": [
            {
              "value": "Settings",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "settings = Settings()",
      "children": [
        {
          "value": "settings = Settings()",
          "children": [
            {
              "value": "settings",
              "children": []
            },
            {
              "value": "Settings()",
              "children": [
                {
                  "value": "Settings",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    manager = get_connection_manager()\n    fut = asyncio.create_task(event_broadcaster(manager))\n    fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))\n    yield",
      "children": [
        {
          "value": "@asynccontextmanager",
          "children": [
            {
              "value": "asynccontextmanager",
              "children": []
            }
          ]
        },
        {
          "value": "async def lifespan(app: FastAPI):\n    manager = get_connection_manager()\n    fut = asyncio.create_task(event_broadcaster(manager))\n    fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))\n    yield",
          "children": [
            {
              "value": "lifespan",
              "children": []
            },
            {
              "value": "(app: FastAPI)",
              "children": [
                {
                  "value": "app: FastAPI",
                  "children": [
                    {
                      "value": "app",
                      "children": []
                    },
                    {
                      "value": "FastAPI",
                      "children": [
                        {
                          "value": "FastAPI",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "manager = get_connection_manager()\n    fut = asyncio.create_task(event_broadcaster(manager))\n    fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))\n    yield",
              "children": [
                {
                  "value": "manager = get_connection_manager()",
                  "children": [
                    {
                      "value": "manager = get_connection_manager()",
                      "children": [
                        {
                          "value": "manager",
                          "children": []
                        },
                        {
                          "value": "get_connection_manager()",
                          "children": [
                            {
                              "value": "get_connection_manager",
                              "children": []
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "fut = asyncio.create_task(event_broadcaster(manager))",
                  "children": [
                    {
                      "value": "fut = asyncio.create_task(event_broadcaster(manager))",
                      "children": [
                        {
                          "value": "fut",
                          "children": []
                        },
                        {
                          "value": "asyncio.create_task(event_broadcaster(manager))",
                          "children": [
                            {
                              "value": "asyncio.create_task",
                              "children": [
                                {
                                  "value": "asyncio",
                                  "children": []
                                },
                                {
                                  "value": "create_task",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(event_broadcaster(manager))",
                              "children": [
                                {
                                  "value": "event_broadcaster(manager)",
                                  "children": [
                                    {
                                      "value": "event_broadcaster",
                                      "children": []
                                    },
                                    {
                                      "value": "(manager)",
                                      "children": [
                                        {
                                          "value": "manager",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))",
                  "children": [
                    {
                      "value": "fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))",
                      "children": [
                        {
                          "value": "fut.add_done_callback",
                          "children": [
                            {
                              "value": "fut",
                              "children": []
                            },
                            {
                              "value": "add_done_callback",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(lambda _: logger.info(\"Event broadcaster stopped\"))",
                          "children": [
                            {
                              "value": "lambda _: logger.info(\"Event broadcaster stopped\")",
                              "children": [
                                {
                                  "value": "_",
                                  "children": [
                                    {
                                      "value": "_",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "logger.info(\"Event broadcaster stopped\")",
                                  "children": [
                                    {
                                      "value": "logger.info",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"Event broadcaster stopped\")",
                                      "children": [
                                        {
                                          "value": "\"Event broadcaster stopped\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Event broadcaster stopped",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "yield",
                  "children": [
                    {
                      "value": "yield",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "docs_url = \"/docs\" if settings.config.app_env == AppEnvironment.LOCAL else None",
      "children": [
        {
          "value": "docs_url = \"/docs\" if settings.config.app_env == AppEnvironment.LOCAL else None",
          "children": [
            {
              "value": "docs_url",
              "children": []
            },
            {
              "value": "\"/docs\" if settings.config.app_env == AppEnvironment.LOCAL else None",
              "children": [
                {
                  "value": "\"/docs\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "/docs",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "settings.config.app_env == AppEnvironment.LOCAL",
                  "children": [
                    {
                      "value": "settings.config.app_env",
                      "children": [
                        {
                          "value": "settings.config",
                          "children": [
                            {
                              "value": "settings",
                              "children": []
                            },
                            {
                              "value": "config",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "app_env",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "AppEnvironment.LOCAL",
                      "children": [
                        {
                          "value": "AppEnvironment",
                          "children": []
                        },
                        {
                          "value": "LOCAL",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "app = FastAPI(lifespan=lifespan, docs_url=docs_url)",
      "children": [
        {
          "value": "app = FastAPI(lifespan=lifespan, docs_url=docs_url)",
          "children": [
            {
              "value": "app",
              "children": []
            },
            {
              "value": "FastAPI(lifespan=lifespan, docs_url=docs_url)",
              "children": [
                {
                  "value": "FastAPI",
                  "children": []
                },
                {
                  "value": "(lifespan=lifespan, docs_url=docs_url)",
                  "children": [
                    {
                      "value": "lifespan=lifespan",
                      "children": [
                        {
                          "value": "lifespan",
                          "children": []
                        },
                        {
                          "value": "lifespan",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "docs_url=docs_url",
                      "children": [
                        {
                          "value": "docs_url",
                          "children": []
                        },
                        {
                          "value": "docs_url",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "_connection_manager = None",
      "children": [
        {
          "value": "_connection_manager = None",
          "children": [
            {
              "value": "_connection_manager",
              "children": []
            },
            {
              "value": "None",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def get_connection_manager():\n    global _connection_manager\n    if _connection_manager is None:\n        _connection_manager = ConnectionManager()\n    return _connection_manager",
      "children": [
        {
          "value": "get_connection_manager",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "global _connection_manager\n    if _connection_manager is None:\n        _connection_manager = ConnectionManager()\n    return _connection_manager",
          "children": [
            {
              "value": "global _connection_manager",
              "children": [
                {
                  "value": "_connection_manager",
                  "children": []
                }
              ]
            },
            {
              "value": "if _connection_manager is None:\n        _connection_manager = ConnectionManager()",
              "children": [
                {
                  "value": "_connection_manager is None",
                  "children": [
                    {
                      "value": "_connection_manager",
                      "children": []
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "_connection_manager = ConnectionManager()",
                  "children": [
                    {
                      "value": "_connection_manager = ConnectionManager()",
                      "children": [
                        {
                          "value": "_connection_manager = ConnectionManager()",
                          "children": [
                            {
                              "value": "_connection_manager",
                              "children": []
                            },
                            {
                              "value": "ConnectionManager()",
                              "children": [
                                {
                                  "value": "ConnectionManager",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return _connection_manager",
              "children": [
                {
                  "value": "_connection_manager",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def event_broadcaster(manager: ConnectionManager):\n    try:\n        redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n        async for event in event_queue.listen():\n            await manager.send_execution_result(event)\n    except Exception as e:\n        logger.exception(f\"Event broadcaster error: {e}\")\n        raise\n    finally:\n        redis.disconnect()",
      "children": [
        {
          "value": "event_broadcaster",
          "children": []
        },
        {
          "value": "(manager: ConnectionManager)",
          "children": [
            {
              "value": "manager: ConnectionManager",
              "children": [
                {
                  "value": "manager",
                  "children": []
                },
                {
                  "value": "ConnectionManager",
                  "children": [
                    {
                      "value": "ConnectionManager",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "try:\n        redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n        async for event in event_queue.listen():\n            await manager.send_execution_result(event)\n    except Exception as e:\n        logger.exception(f\"Event broadcaster error: {e}\")\n        raise\n    finally:\n        redis.disconnect()",
          "children": [
            {
              "value": "try:\n        redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n        async for event in event_queue.listen():\n            await manager.send_execution_result(event)\n    except Exception as e:\n        logger.exception(f\"Event broadcaster error: {e}\")\n        raise\n    finally:\n        redis.disconnect()",
              "children": [
                {
                  "value": "redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n        async for event in event_queue.listen():\n            await manager.send_execution_result(event)",
                  "children": [
                    {
                      "value": "redis.connect()",
                      "children": [
                        {
                          "value": "redis.connect()",
                          "children": [
                            {
                              "value": "redis.connect",
                              "children": [
                                {
                                  "value": "redis",
                                  "children": []
                                },
                                {
                                  "value": "connect",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "event_queue = AsyncRedisExecutionEventBus()",
                      "children": [
                        {
                          "value": "event_queue = AsyncRedisExecutionEventBus()",
                          "children": [
                            {
                              "value": "event_queue",
                              "children": []
                            },
                            {
                              "value": "AsyncRedisExecutionEventBus()",
                              "children": [
                                {
                                  "value": "AsyncRedisExecutionEventBus",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "async for event in event_queue.listen():\n            await manager.send_execution_result(event)",
                      "children": [
                        {
                          "value": "event",
                          "children": []
                        },
                        {
                          "value": "event_queue.listen()",
                          "children": [
                            {
                              "value": "event_queue.listen",
                              "children": [
                                {
                                  "value": "event_queue",
                                  "children": []
                                },
                                {
                                  "value": "listen",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "await manager.send_execution_result(event)",
                          "children": [
                            {
                              "value": "await manager.send_execution_result(event)",
                              "children": [
                                {
                                  "value": "await manager.send_execution_result(event)",
                                  "children": [
                                    {
                                      "value": "manager.send_execution_result(event)",
                                      "children": [
                                        {
                                          "value": "manager.send_execution_result",
                                          "children": [
                                            {
                                              "value": "manager",
                                              "children": []
                                            },
                                            {
                                              "value": "send_execution_result",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(event)",
                                          "children": [
                                            {
                                              "value": "event",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        logger.exception(f\"Event broadcaster error: {e}\")\n        raise",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.exception(f\"Event broadcaster error: {e}\")\n        raise",
                      "children": [
                        {
                          "value": "logger.exception(f\"Event broadcaster error: {e}\")",
                          "children": [
                            {
                              "value": "logger.exception(f\"Event broadcaster error: {e}\")",
                              "children": [
                                {
                                  "value": "logger.exception",
                                  "children": [
                                    {
                                      "value": "logger",
                                      "children": []
                                    },
                                    {
                                      "value": "exception",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(f\"Event broadcaster error: {e}\")",
                                  "children": [
                                    {
                                      "value": "f\"Event broadcaster error: {e}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Event broadcaster error:",
                                          "children": []
                                        },
                                        {
                                          "value": "{e}",
                                          "children": [
                                            {
                                              "value": "e",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "finally:\n        redis.disconnect()",
                  "children": [
                    {
                      "value": "redis.disconnect()",
                      "children": [
                        {
                          "value": "redis.disconnect()",
                          "children": [
                            {
                              "value": "redis.disconnect()",
                              "children": [
                                {
                                  "value": "redis.disconnect",
                                  "children": [
                                    {
                                      "value": "redis",
                                      "children": []
                                    },
                                    {
                                      "value": "disconnect",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def authenticate_websocket(websocket: WebSocket) -> str:\n    if not settings.config.enable_auth:\n        return DEFAULT_USER_ID\n\n    token = websocket.query_params.get(\"token\")\n    if not token:\n        await websocket.close(code=4001, reason=\"Missing authentication token\")\n        return \"\"\n\n    try:\n        payload = parse_jwt_token(token)\n        user_id = payload.get(\"sub\")\n        if not user_id:\n            await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"\n        return user_id\n    except ValueError:\n        await websocket.close(code=4003, reason=\"Invalid token\")\n        return \"\"",
      "children": [
        {
          "value": "authenticate_websocket",
          "children": []
        },
        {
          "value": "(websocket: WebSocket)",
          "children": [
            {
              "value": "websocket: WebSocket",
              "children": [
                {
                  "value": "websocket",
                  "children": []
                },
                {
                  "value": "WebSocket",
                  "children": [
                    {
                      "value": "WebSocket",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "str",
          "children": [
            {
              "value": "str",
              "children": []
            }
          ]
        },
        {
          "value": "if not settings.config.enable_auth:\n        return DEFAULT_USER_ID\n\n    token = websocket.query_params.get(\"token\")\n    if not token:\n        await websocket.close(code=4001, reason=\"Missing authentication token\")\n        return \"\"\n\n    try:\n        payload = parse_jwt_token(token)\n        user_id = payload.get(\"sub\")\n        if not user_id:\n            await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"\n        return user_id\n    except ValueError:\n        await websocket.close(code=4003, reason=\"Invalid token\")\n        return \"\"",
          "children": [
            {
              "value": "if not settings.config.enable_auth:\n        return DEFAULT_USER_ID",
              "children": [
                {
                  "value": "not settings.config.enable_auth",
                  "children": [
                    {
                      "value": "settings.config.enable_auth",
                      "children": [
                        {
                          "value": "settings.config",
                          "children": [
                            {
                              "value": "settings",
                              "children": []
                            },
                            {
                              "value": "config",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "enable_auth",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return DEFAULT_USER_ID",
                  "children": [
                    {
                      "value": "return DEFAULT_USER_ID",
                      "children": [
                        {
                          "value": "DEFAULT_USER_ID",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "token = websocket.query_params.get(\"token\")",
              "children": [
                {
                  "value": "token = websocket.query_params.get(\"token\")",
                  "children": [
                    {
                      "value": "token",
                      "children": []
                    },
                    {
                      "value": "websocket.query_params.get(\"token\")",
                      "children": [
                        {
                          "value": "websocket.query_params.get",
                          "children": [
                            {
                              "value": "websocket.query_params",
                              "children": [
                                {
                                  "value": "websocket",
                                  "children": []
                                },
                                {
                                  "value": "query_params",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "get",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\"token\")",
                          "children": [
                            {
                              "value": "\"token\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "token",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not token:\n        await websocket.close(code=4001, reason=\"Missing authentication token\")\n        return \"\"",
              "children": [
                {
                  "value": "not token",
                  "children": [
                    {
                      "value": "token",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "await websocket.close(code=4001, reason=\"Missing authentication token\")\n        return \"\"",
                  "children": [
                    {
                      "value": "await websocket.close(code=4001, reason=\"Missing authentication token\")",
                      "children": [
                        {
                          "value": "await websocket.close(code=4001, reason=\"Missing authentication token\")",
                          "children": [
                            {
                              "value": "websocket.close(code=4001, reason=\"Missing authentication token\")",
                              "children": [
                                {
                                  "value": "websocket.close",
                                  "children": [
                                    {
                                      "value": "websocket",
                                      "children": []
                                    },
                                    {
                                      "value": "close",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(code=4001, reason=\"Missing authentication token\")",
                                  "children": [
                                    {
                                      "value": "code=4001",
                                      "children": [
                                        {
                                          "value": "code",
                                          "children": []
                                        },
                                        {
                                          "value": "4001",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "reason=\"Missing authentication token\"",
                                      "children": [
                                        {
                                          "value": "reason",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Missing authentication token\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Missing authentication token",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return \"\"",
                      "children": [
                        {
                          "value": "\"\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        payload = parse_jwt_token(token)\n        user_id = payload.get(\"sub\")\n        if not user_id:\n            await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"\n        return user_id\n    except ValueError:\n        await websocket.close(code=4003, reason=\"Invalid token\")\n        return \"\"",
              "children": [
                {
                  "value": "payload = parse_jwt_token(token)\n        user_id = payload.get(\"sub\")\n        if not user_id:\n            await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"\n        return user_id",
                  "children": [
                    {
                      "value": "payload = parse_jwt_token(token)",
                      "children": [
                        {
                          "value": "payload = parse_jwt_token(token)",
                          "children": [
                            {
                              "value": "payload",
                              "children": []
                            },
                            {
                              "value": "parse_jwt_token(token)",
                              "children": [
                                {
                                  "value": "parse_jwt_token",
                                  "children": []
                                },
                                {
                                  "value": "(token)",
                                  "children": [
                                    {
                                      "value": "token",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "user_id = payload.get(\"sub\")",
                      "children": [
                        {
                          "value": "user_id = payload.get(\"sub\")",
                          "children": [
                            {
                              "value": "user_id",
                              "children": []
                            },
                            {
                              "value": "payload.get(\"sub\")",
                              "children": [
                                {
                                  "value": "payload.get",
                                  "children": [
                                    {
                                      "value": "payload",
                                      "children": []
                                    },
                                    {
                                      "value": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\"sub\")",
                                  "children": [
                                    {
                                      "value": "\"sub\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "sub",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not user_id:\n            await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"",
                      "children": [
                        {
                          "value": "not user_id",
                          "children": [
                            {
                              "value": "user_id",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"",
                          "children": [
                            {
                              "value": "await websocket.close(code=4002, reason=\"Invalid token\")",
                              "children": [
                                {
                                  "value": "await websocket.close(code=4002, reason=\"Invalid token\")",
                                  "children": [
                                    {
                                      "value": "websocket.close(code=4002, reason=\"Invalid token\")",
                                      "children": [
                                        {
                                          "value": "websocket.close",
                                          "children": [
                                            {
                                              "value": "websocket",
                                              "children": []
                                            },
                                            {
                                              "value": "close",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(code=4002, reason=\"Invalid token\")",
                                          "children": [
                                            {
                                              "value": "code=4002",
                                              "children": [
                                                {
                                                  "value": "code",
                                                  "children": []
                                                },
                                                {
                                                  "value": "4002",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "reason=\"Invalid token\"",
                                              "children": [
                                                {
                                                  "value": "reason",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"Invalid token\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Invalid token",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "return \"\"",
                              "children": [
                                {
                                  "value": "\"\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return user_id",
                      "children": [
                        {
                          "value": "user_id",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except ValueError:\n        await websocket.close(code=4003, reason=\"Invalid token\")\n        return \"\"",
                  "children": [
                    {
                      "value": "ValueError",
                      "children": []
                    },
                    {
                      "value": "await websocket.close(code=4003, reason=\"Invalid token\")\n        return \"\"",
                      "children": [
                        {
                          "value": "await websocket.close(code=4003, reason=\"Invalid token\")",
                          "children": [
                            {
                              "value": "await websocket.close(code=4003, reason=\"Invalid token\")",
                              "children": [
                                {
                                  "value": "websocket.close(code=4003, reason=\"Invalid token\")",
                                  "children": [
                                    {
                                      "value": "websocket.close",
                                      "children": [
                                        {
                                          "value": "websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "close",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(code=4003, reason=\"Invalid token\")",
                                      "children": [
                                        {
                                          "value": "code=4003",
                                          "children": [
                                            {
                                              "value": "code",
                                              "children": []
                                            },
                                            {
                                              "value": "4003",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "reason=\"Invalid token\"",
                                          "children": [
                                            {
                                              "value": "reason",
                                              "children": []
                                            },
                                            {
                                              "value": "\"Invalid token\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Invalid token",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return \"\"",
                          "children": [
                            {
                              "value": "\"\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def handle_subscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\n    if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
      "children": [
        {
          "value": "handle_subscribe",
          "children": []
        },
        {
          "value": "(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n)",
          "children": [
            {
              "value": "websocket: WebSocket",
              "children": [
                {
                  "value": "websocket",
                  "children": []
                },
                {
                  "value": "WebSocket",
                  "children": [
                    {
                      "value": "WebSocket",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "manager: ConnectionManager",
              "children": [
                {
                  "value": "manager",
                  "children": []
                },
                {
                  "value": "ConnectionManager",
                  "children": [
                    {
                      "value": "ConnectionManager",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "message: WsMessage",
              "children": [
                {
                  "value": "message",
                  "children": []
                },
                {
                  "value": "WsMessage",
                  "children": [
                    {
                      "value": "WsMessage",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
          "children": [
            {
              "value": "if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
              "children": [
                {
                  "value": "not message.data",
                  "children": [
                    {
                      "value": "message.data",
                      "children": [
                        {
                          "value": "message",
                          "children": []
                        },
                        {
                          "value": "data",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )",
                  "children": [
                    {
                      "value": "await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )",
                      "children": [
                        {
                          "value": "await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )",
                          "children": [
                            {
                              "value": "websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )",
                              "children": [
                                {
                                  "value": "websocket.send_text",
                                  "children": [
                                    {
                                      "value": "websocket",
                                      "children": []
                                    },
                                    {
                                      "value": "send_text",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )",
                                  "children": [
                                    {
                                      "value": "WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()",
                                      "children": [
                                        {
                                          "value": "WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json",
                                          "children": [
                                            {
                                              "value": "WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            )",
                                              "children": [
                                                {
                                                  "value": "WsMessage",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            )",
                                                  "children": [
                                                    {
                                                      "value": "method=Methods.ERROR",
                                                      "children": [
                                                        {
                                                          "value": "method",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Methods.ERROR",
                                                          "children": [
                                                            {
                                                              "value": "Methods",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "ERROR",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "success=False",
                                                      "children": [
                                                        {
                                                          "value": "success",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "False",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "error=\"Subscription data missing\"",
                                                      "children": [
                                                        {
                                                          "value": "error",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"Subscription data missing\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Subscription data missing",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "model_dump_json",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                  "children": [
                    {
                      "value": "ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                      "children": [
                        {
                          "value": "ex_sub = ExecutionSubscription.model_validate(message.data)",
                          "children": [
                            {
                              "value": "ex_sub = ExecutionSubscription.model_validate(message.data)",
                              "children": [
                                {
                                  "value": "ex_sub",
                                  "children": []
                                },
                                {
                                  "value": "ExecutionSubscription.model_validate(message.data)",
                                  "children": [
                                    {
                                      "value": "ExecutionSubscription.model_validate",
                                      "children": [
                                        {
                                          "value": "ExecutionSubscription",
                                          "children": []
                                        },
                                        {
                                          "value": "model_validate",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(message.data)",
                                      "children": [
                                        {
                                          "value": "message.data",
                                          "children": [
                                            {
                                              "value": "message",
                                              "children": []
                                            },
                                            {
                                              "value": "data",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "await manager.subscribe(ex_sub.graph_id, websocket)",
                          "children": [
                            {
                              "value": "await manager.subscribe(ex_sub.graph_id, websocket)",
                              "children": [
                                {
                                  "value": "manager.subscribe(ex_sub.graph_id, websocket)",
                                  "children": [
                                    {
                                      "value": "manager.subscribe",
                                      "children": [
                                        {
                                          "value": "manager",
                                          "children": []
                                        },
                                        {
                                          "value": "subscribe",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(ex_sub.graph_id, websocket)",
                                      "children": [
                                        {
                                          "value": "ex_sub.graph_id",
                                          "children": [
                                            {
                                              "value": "ex_sub",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "websocket",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")",
                          "children": [
                            {
                              "value": "logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")",
                              "children": [
                                {
                                  "value": "logger.debug",
                                  "children": [
                                    {
                                      "value": "logger",
                                      "children": []
                                    },
                                    {
                                      "value": "debug",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(f\"New execution subscription for graph {ex_sub.graph_id}\")",
                                  "children": [
                                    {
                                      "value": "f\"New execution subscription for graph {ex_sub.graph_id}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "New execution subscription for graph",
                                          "children": []
                                        },
                                        {
                                          "value": "{ex_sub.graph_id}",
                                          "children": [
                                            {
                                              "value": "ex_sub.graph_id",
                                              "children": [
                                                {
                                                  "value": "ex_sub",
                                                  "children": []
                                                },
                                                {
                                                  "value": "graph_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                          "children": [
                            {
                              "value": "await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                              "children": [
                                {
                                  "value": "websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                                  "children": [
                                    {
                                      "value": "websocket.send_text",
                                      "children": [
                                        {
                                          "value": "websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                                      "children": [
                                        {
                                          "value": "WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()",
                                          "children": [
                                            {
                                              "value": "WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json",
                                              "children": [
                                                {
                                                  "value": "WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            )",
                                                  "children": [
                                                    {
                                                      "value": "WsMessage",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            )",
                                                      "children": [
                                                        {
                                                          "value": "method=Methods.SUBSCRIBE",
                                                          "children": [
                                                            {
                                                              "value": "method",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Methods.SUBSCRIBE",
                                                              "children": [
                                                                {
                                                                  "value": "Methods",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "SUBSCRIBE",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "success=True",
                                                          "children": [
                                                            {
                                                              "value": "success",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "True",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "channel=ex_sub.graph_id",
                                                          "children": [
                                                            {
                                                              "value": "channel",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "ex_sub.graph_id",
                                                              "children": [
                                                                {
                                                                  "value": "ex_sub",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "graph_id",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "model_dump_json",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def handle_unsubscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\n    if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
      "children": [
        {
          "value": "handle_unsubscribe",
          "children": []
        },
        {
          "value": "(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n)",
          "children": [
            {
              "value": "websocket: WebSocket",
              "children": [
                {
                  "value": "websocket",
                  "children": []
                },
                {
                  "value": "WebSocket",
                  "children": [
                    {
                      "value": "WebSocket",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "manager: ConnectionManager",
              "children": [
                {
                  "value": "manager",
                  "children": []
                },
                {
                  "value": "ConnectionManager",
                  "children": [
                    {
                      "value": "ConnectionManager",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "message: WsMessage",
              "children": [
                {
                  "value": "message",
                  "children": []
                },
                {
                  "value": "WsMessage",
                  "children": [
                    {
                      "value": "WsMessage",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
          "children": [
            {
              "value": "if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
              "children": [
                {
                  "value": "not message.data",
                  "children": [
                    {
                      "value": "message.data",
                      "children": [
                        {
                          "value": "message",
                          "children": []
                        },
                        {
                          "value": "data",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )",
                  "children": [
                    {
                      "value": "await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )",
                      "children": [
                        {
                          "value": "await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )",
                          "children": [
                            {
                              "value": "websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )",
                              "children": [
                                {
                                  "value": "websocket.send_text",
                                  "children": [
                                    {
                                      "value": "websocket",
                                      "children": []
                                    },
                                    {
                                      "value": "send_text",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )",
                                  "children": [
                                    {
                                      "value": "WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()",
                                      "children": [
                                        {
                                          "value": "WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json",
                                          "children": [
                                            {
                                              "value": "WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            )",
                                              "children": [
                                                {
                                                  "value": "WsMessage",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            )",
                                                  "children": [
                                                    {
                                                      "value": "method=Methods.ERROR",
                                                      "children": [
                                                        {
                                                          "value": "method",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Methods.ERROR",
                                                          "children": [
                                                            {
                                                              "value": "Methods",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "ERROR",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "success=False",
                                                      "children": [
                                                        {
                                                          "value": "success",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "False",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "error=\"Subscription data missing\"",
                                                      "children": [
                                                        {
                                                          "value": "error",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"Subscription data missing\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Subscription data missing",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "model_dump_json",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                  "children": [
                    {
                      "value": "ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                      "children": [
                        {
                          "value": "ex_sub = ExecutionSubscription.model_validate(message.data)",
                          "children": [
                            {
                              "value": "ex_sub = ExecutionSubscription.model_validate(message.data)",
                              "children": [
                                {
                                  "value": "ex_sub",
                                  "children": []
                                },
                                {
                                  "value": "ExecutionSubscription.model_validate(message.data)",
                                  "children": [
                                    {
                                      "value": "ExecutionSubscription.model_validate",
                                      "children": [
                                        {
                                          "value": "ExecutionSubscription",
                                          "children": []
                                        },
                                        {
                                          "value": "model_validate",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(message.data)",
                                      "children": [
                                        {
                                          "value": "message.data",
                                          "children": [
                                            {
                                              "value": "message",
                                              "children": []
                                            },
                                            {
                                              "value": "data",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "await manager.unsubscribe(ex_sub.graph_id, websocket)",
                          "children": [
                            {
                              "value": "await manager.unsubscribe(ex_sub.graph_id, websocket)",
                              "children": [
                                {
                                  "value": "manager.unsubscribe(ex_sub.graph_id, websocket)",
                                  "children": [
                                    {
                                      "value": "manager.unsubscribe",
                                      "children": [
                                        {
                                          "value": "manager",
                                          "children": []
                                        },
                                        {
                                          "value": "unsubscribe",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(ex_sub.graph_id, websocket)",
                                      "children": [
                                        {
                                          "value": "ex_sub.graph_id",
                                          "children": [
                                            {
                                              "value": "ex_sub",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "websocket",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")",
                          "children": [
                            {
                              "value": "logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")",
                              "children": [
                                {
                                  "value": "logger.debug",
                                  "children": [
                                    {
                                      "value": "logger",
                                      "children": []
                                    },
                                    {
                                      "value": "debug",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(f\"Removed execution subscription for graph {ex_sub.graph_id}\")",
                                  "children": [
                                    {
                                      "value": "f\"Removed execution subscription for graph {ex_sub.graph_id}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Removed execution subscription for graph",
                                          "children": []
                                        },
                                        {
                                          "value": "{ex_sub.graph_id}",
                                          "children": [
                                            {
                                              "value": "ex_sub.graph_id",
                                              "children": [
                                                {
                                                  "value": "ex_sub",
                                                  "children": []
                                                },
                                                {
                                                  "value": "graph_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                          "children": [
                            {
                              "value": "await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                              "children": [
                                {
                                  "value": "websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                                  "children": [
                                    {
                                      "value": "websocket.send_text",
                                      "children": [
                                        {
                                          "value": "websocket",
                                          "children": []
                                        },
                                        {
                                          "value": "send_text",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                                      "children": [
                                        {
                                          "value": "WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()",
                                          "children": [
                                            {
                                              "value": "WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json",
                                              "children": [
                                                {
                                                  "value": "WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            )",
                                                  "children": [
                                                    {
                                                      "value": "WsMessage",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            )",
                                                      "children": [
                                                        {
                                                          "value": "method=Methods.UNSUBSCRIBE",
                                                          "children": [
                                                            {
                                                              "value": "method",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Methods.UNSUBSCRIBE",
                                                              "children": [
                                                                {
                                                                  "value": "Methods",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "UNSUBSCRIBE",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "success=True",
                                                          "children": [
                                                            {
                                                              "value": "success",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "True",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "channel=ex_sub.graph_id",
                                                          "children": [
                                                            {
                                                              "value": "channel",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "ex_sub.graph_id",
                                                              "children": [
                                                                {
                                                                  "value": "ex_sub",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "graph_id",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "model_dump_json",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@app.get(\"/\")\nasync def health():\n    return {\"status\": \"healthy\"}",
      "children": [
        {
          "value": "@app.get(\"/\")",
          "children": [
            {
              "value": "app.get(\"/\")",
              "children": [
                {
                  "value": "app.get",
                  "children": [
                    {
                      "value": "app",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\"/\")",
                  "children": [
                    {
                      "value": "\"/\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def health():\n    return {\"status\": \"healthy\"}",
          "children": [
            {
              "value": "health",
              "children": []
            },
            {
              "value": "()",
              "children": []
            },
            {
              "value": "return {\"status\": \"healthy\"}",
              "children": [
                {
                  "value": "return {\"status\": \"healthy\"}",
                  "children": [
                    {
                      "value": "{\"status\": \"healthy\"}",
                      "children": [
                        {
                          "value": "\"status\": \"healthy\"",
                          "children": [
                            {
                              "value": "\"status\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "status",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"healthy\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "healthy",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@app.websocket(\"/ws\")\nasync def websocket_router(\n    websocket: WebSocket, manager: ConnectionManager = Depends(get_connection_manager)\n):\n    user_id = await authenticate_websocket(websocket)\n    if not user_id:\n        return\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n\n            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue\n\n            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n\n            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n\n            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )\n\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug(\"WebSocket client disconnected\")",
      "children": [
        {
          "value": "@app.websocket(\"/ws\")",
          "children": [
            {
              "value": "app.websocket(\"/ws\")",
              "children": [
                {
                  "value": "app.websocket",
                  "children": [
                    {
                      "value": "app",
                      "children": []
                    },
                    {
                      "value": "websocket",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\"/ws\")",
                  "children": [
                    {
                      "value": "\"/ws\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/ws",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def websocket_router(\n    websocket: WebSocket, manager: ConnectionManager = Depends(get_connection_manager)\n):\n    user_id = await authenticate_websocket(websocket)\n    if not user_id:\n        return\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n\n            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue\n\n            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n\n            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n\n            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )\n\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug(\"WebSocket client disconnected\")",
          "children": [
            {
              "value": "websocket_router",
              "children": []
            },
            {
              "value": "(\n    websocket: WebSocket, manager: ConnectionManager = Depends(get_connection_manager)\n)",
              "children": [
                {
                  "value": "websocket: WebSocket",
                  "children": [
                    {
                      "value": "websocket",
                      "children": []
                    },
                    {
                      "value": "WebSocket",
                      "children": [
                        {
                          "value": "WebSocket",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "manager: ConnectionManager = Depends(get_connection_manager)",
                  "children": [
                    {
                      "value": "manager",
                      "children": []
                    },
                    {
                      "value": "ConnectionManager",
                      "children": [
                        {
                          "value": "ConnectionManager",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "Depends(get_connection_manager)",
                      "children": [
                        {
                          "value": "Depends",
                          "children": []
                        },
                        {
                          "value": "(get_connection_manager)",
                          "children": [
                            {
                              "value": "get_connection_manager",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "user_id = await authenticate_websocket(websocket)\n    if not user_id:\n        return\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n\n            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue\n\n            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n\n            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n\n            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )\n\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug(\"WebSocket client disconnected\")",
              "children": [
                {
                  "value": "user_id = await authenticate_websocket(websocket)",
                  "children": [
                    {
                      "value": "user_id = await authenticate_websocket(websocket)",
                      "children": [
                        {
                          "value": "user_id",
                          "children": []
                        },
                        {
                          "value": "await authenticate_websocket(websocket)",
                          "children": [
                            {
                              "value": "authenticate_websocket(websocket)",
                              "children": [
                                {
                                  "value": "authenticate_websocket",
                                  "children": []
                                },
                                {
                                  "value": "(websocket)",
                                  "children": [
                                    {
                                      "value": "websocket",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not user_id:\n        return",
                  "children": [
                    {
                      "value": "not user_id",
                      "children": [
                        {
                          "value": "user_id",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return",
                      "children": [
                        {
                          "value": "return",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await manager.connect(websocket)",
                  "children": [
                    {
                      "value": "await manager.connect(websocket)",
                      "children": [
                        {
                          "value": "manager.connect(websocket)",
                          "children": [
                            {
                              "value": "manager.connect",
                              "children": [
                                {
                                  "value": "manager",
                                  "children": []
                                },
                                {
                                  "value": "connect",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(websocket)",
                              "children": [
                                {
                                  "value": "websocket",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n        while True:\n            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n\n            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue\n\n            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n\n            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n\n            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )\n\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug(\"WebSocket client disconnected\")",
                  "children": [
                    {
                      "value": "while True:\n            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n\n            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue\n\n            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n\n            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n\n            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )",
                      "children": [
                        {
                          "value": "while True:\n            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n\n            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue\n\n            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n\n            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n\n            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )",
                          "children": [
                            {
                              "value": "True",
                              "children": []
                            },
                            {
                              "value": "data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n\n            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue\n\n            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n\n            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n\n            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )",
                              "children": [
                                {
                                  "value": "data = await websocket.receive_text()",
                                  "children": [
                                    {
                                      "value": "data = await websocket.receive_text()",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "await websocket.receive_text()",
                                          "children": [
                                            {
                                              "value": "websocket.receive_text()",
                                              "children": [
                                                {
                                                  "value": "websocket.receive_text",
                                                  "children": [
                                                    {
                                                      "value": "websocket",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "receive_text",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "message = WsMessage.model_validate_json(data)",
                                  "children": [
                                    {
                                      "value": "message = WsMessage.model_validate_json(data)",
                                      "children": [
                                        {
                                          "value": "message",
                                          "children": []
                                        },
                                        {
                                          "value": "WsMessage.model_validate_json(data)",
                                          "children": [
                                            {
                                              "value": "WsMessage.model_validate_json",
                                              "children": [
                                                {
                                                  "value": "WsMessage",
                                                  "children": []
                                                },
                                                {
                                                  "value": "model_validate_json",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(data)",
                                              "children": [
                                                {
                                                  "value": "data",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue",
                                  "children": [
                                    {
                                      "value": "message.method == Methods.HEARTBEAT",
                                      "children": [
                                        {
                                          "value": "message.method",
                                          "children": [
                                            {
                                              "value": "message",
                                              "children": []
                                            },
                                            {
                                              "value": "method",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "Methods.HEARTBEAT",
                                          "children": [
                                            {
                                              "value": "Methods",
                                              "children": []
                                            },
                                            {
                                              "value": "HEARTBEAT",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue",
                                      "children": [
                                        {
                                          "value": "await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )",
                                          "children": [
                                            {
                                              "value": "await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )",
                                              "children": [
                                                {
                                                  "value": "websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )",
                                                  "children": [
                                                    {
                                                      "value": "websocket.send_json",
                                                      "children": [
                                                        {
                                                          "value": "websocket",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "send_json",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )",
                                                      "children": [
                                                        {
                                                          "value": "{\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}",
                                                          "children": [
                                                            {
                                                              "value": "\"method\": Methods.HEARTBEAT.value",
                                                              "children": [
                                                                {
                                                                  "value": "\"method\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "method",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "Methods.HEARTBEAT.value",
                                                                  "children": [
                                                                    {
                                                                      "value": "Methods.HEARTBEAT",
                                                                      "children": [
                                                                        {
                                                                          "value": "Methods",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "HEARTBEAT",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "value",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"data\": \"pong\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"data\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"pong\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "pong",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"success\": True",
                                                              "children": [
                                                                {
                                                                  "value": "\"success\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "success",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "True",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "continue",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n\n            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n\n            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )",
                                  "children": [
                                    {
                                      "value": "message.method == Methods.SUBSCRIBE",
                                      "children": [
                                        {
                                          "value": "message.method",
                                          "children": [
                                            {
                                              "value": "message",
                                              "children": []
                                            },
                                            {
                                              "value": "method",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "Methods.SUBSCRIBE",
                                          "children": [
                                            {
                                              "value": "Methods",
                                              "children": []
                                            },
                                            {
                                              "value": "SUBSCRIBE",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "await handle_subscribe(websocket, manager, message)",
                                      "children": [
                                        {
                                          "value": "await handle_subscribe(websocket, manager, message)",
                                          "children": [
                                            {
                                              "value": "await handle_subscribe(websocket, manager, message)",
                                              "children": [
                                                {
                                                  "value": "handle_subscribe(websocket, manager, message)",
                                                  "children": [
                                                    {
                                                      "value": "handle_subscribe",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(websocket, manager, message)",
                                                      "children": [
                                                        {
                                                          "value": "websocket",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "manager",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "message",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)",
                                      "children": [
                                        {
                                          "value": "message.method == Methods.UNSUBSCRIBE",
                                          "children": [
                                            {
                                              "value": "message.method",
                                              "children": [
                                                {
                                                  "value": "message",
                                                  "children": []
                                                },
                                                {
                                                  "value": "method",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "Methods.UNSUBSCRIBE",
                                              "children": [
                                                {
                                                  "value": "Methods",
                                                  "children": []
                                                },
                                                {
                                                  "value": "UNSUBSCRIBE",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "await handle_unsubscribe(websocket, manager, message)",
                                          "children": [
                                            {
                                              "value": "await handle_unsubscribe(websocket, manager, message)",
                                              "children": [
                                                {
                                                  "value": "await handle_unsubscribe(websocket, manager, message)",
                                                  "children": [
                                                    {
                                                      "value": "handle_unsubscribe(websocket, manager, message)",
                                                      "children": [
                                                        {
                                                          "value": "handle_unsubscribe",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(websocket, manager, message)",
                                                          "children": [
                                                            {
                                                              "value": "websocket",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "manager",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "message",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")",
                                      "children": [
                                        {
                                          "value": "message.method == Methods.ERROR",
                                          "children": [
                                            {
                                              "value": "message.method",
                                              "children": [
                                                {
                                                  "value": "message",
                                                  "children": []
                                                },
                                                {
                                                  "value": "method",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "Methods.ERROR",
                                              "children": [
                                                {
                                                  "value": "Methods",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ERROR",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "logger.error(f\"WebSocket Error message received: {message.data}\")",
                                          "children": [
                                            {
                                              "value": "logger.error(f\"WebSocket Error message received: {message.data}\")",
                                              "children": [
                                                {
                                                  "value": "logger.error(f\"WebSocket Error message received: {message.data}\")",
                                                  "children": [
                                                    {
                                                      "value": "logger.error",
                                                      "children": [
                                                        {
                                                          "value": "logger",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "error",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(f\"WebSocket Error message received: {message.data}\")",
                                                      "children": [
                                                        {
                                                          "value": "f\"WebSocket Error message received: {message.data}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "WebSocket Error message received:",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{message.data}",
                                                              "children": [
                                                                {
                                                                  "value": "message.data",
                                                                  "children": [
                                                                    {
                                                                      "value": "message",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "data",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )",
                                      "children": [
                                        {
                                          "value": "logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )",
                                          "children": [
                                            {
                                              "value": "logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )",
                                              "children": [
                                                {
                                                  "value": "logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )",
                                                  "children": [
                                                    {
                                                      "value": "logger.warning",
                                                      "children": [
                                                        {
                                                          "value": "logger",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "warning",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )",
                                                      "children": [
                                                        {
                                                          "value": "f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"Unknown WebSocket message type {message.method} received: \"",
                                                              "children": [
                                                                {
                                                                  "value": "f\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "Unknown WebSocket message type",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{message.method}",
                                                                  "children": [
                                                                    {
                                                                      "value": "message.method",
                                                                      "children": [
                                                                        {
                                                                          "value": "message",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "method",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "received:",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "f\"{message.data}\"",
                                                              "children": [
                                                                {
                                                                  "value": "f\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{message.data}",
                                                                  "children": [
                                                                    {
                                                                      "value": "message.data",
                                                                      "children": [
                                                                        {
                                                                          "value": "message",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "data",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )",
                                              "children": [
                                                {
                                                  "value": "await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )",
                                                  "children": [
                                                    {
                                                      "value": "websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )",
                                                      "children": [
                                                        {
                                                          "value": "websocket.send_text",
                                                          "children": [
                                                            {
                                                              "value": "websocket",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "send_text",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )",
                                                          "children": [
                                                            {
                                                              "value": "WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()",
                                                              "children": [
                                                                {
                                                                  "value": "WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json",
                                                                  "children": [
                                                                    {
                                                                      "value": "WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    )",
                                                                      "children": [
                                                                        {
                                                                          "value": "WsMessage",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    )",
                                                                          "children": [
                                                                            {
                                                                              "value": "method=Methods.ERROR",
                                                                              "children": [
                                                                                {
                                                                                  "value": "method",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "Methods.ERROR",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "Methods",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "ERROR",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "success=False",
                                                                              "children": [
                                                                                {
                                                                                  "value": "success",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "False",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "error=\"Message type is not processed by the server\"",
                                                                              "children": [
                                                                                {
                                                                                  "value": "error",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "\"Message type is not processed by the server\"",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "\"",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "Message type is not processed by the server",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "\"",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "model_dump_json",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "()",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug(\"WebSocket client disconnected\")",
                      "children": [
                        {
                          "value": "WebSocketDisconnect",
                          "children": []
                        },
                        {
                          "value": "manager.disconnect(websocket)\n        logger.debug(\"WebSocket client disconnected\")",
                          "children": [
                            {
                              "value": "manager.disconnect(websocket)",
                              "children": [
                                {
                                  "value": "manager.disconnect(websocket)",
                                  "children": [
                                    {
                                      "value": "manager.disconnect",
                                      "children": [
                                        {
                                          "value": "manager",
                                          "children": []
                                        },
                                        {
                                          "value": "disconnect",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(websocket)",
                                      "children": [
                                        {
                                          "value": "websocket",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "logger.debug(\"WebSocket client disconnected\")",
                              "children": [
                                {
                                  "value": "logger.debug(\"WebSocket client disconnected\")",
                                  "children": [
                                    {
                                      "value": "logger.debug",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "debug",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"WebSocket client disconnected\")",
                                      "children": [
                                        {
                                          "value": "\"WebSocket client disconnected\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "WebSocket client disconnected",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class WebsocketServer(AppProcess):\n    def run(self):\n        logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")\n        server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n        uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )",
      "children": [
        {
          "value": "WebsocketServer",
          "children": []
        },
        {
          "value": "(AppProcess)",
          "children": [
            {
              "value": "AppProcess",
              "children": []
            }
          ]
        },
        {
          "value": "def run(self):\n        logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")\n        server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n        uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )",
          "children": [
            {
              "value": "def run(self):\n        logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")\n        server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n        uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")\n        server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n        uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )",
                  "children": [
                    {
                      "value": "logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")",
                      "children": [
                        {
                          "value": "logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")",
                          "children": [
                            {
                              "value": "logger.info",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "info",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")",
                              "children": [
                                {
                                  "value": "f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "CORS allow origins:",
                                      "children": []
                                    },
                                    {
                                      "value": "{settings.config.backend_cors_allow_origins}",
                                      "children": [
                                        {
                                          "value": "settings.config.backend_cors_allow_origins",
                                          "children": [
                                            {
                                              "value": "settings.config",
                                              "children": [
                                                {
                                                  "value": "settings",
                                                  "children": []
                                                },
                                                {
                                                  "value": "config",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "backend_cors_allow_origins",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )",
                      "children": [
                        {
                          "value": "server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )",
                          "children": [
                            {
                              "value": "server_app",
                              "children": []
                            },
                            {
                              "value": "CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )",
                              "children": [
                                {
                                  "value": "CORSMiddleware",
                                  "children": []
                                },
                                {
                                  "value": "(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )",
                                  "children": [
                                    {
                                      "value": "app=app",
                                      "children": [
                                        {
                                          "value": "app",
                                          "children": []
                                        },
                                        {
                                          "value": "app",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "allow_origins=settings.config.backend_cors_allow_origins",
                                      "children": [
                                        {
                                          "value": "allow_origins",
                                          "children": []
                                        },
                                        {
                                          "value": "settings.config.backend_cors_allow_origins",
                                          "children": [
                                            {
                                              "value": "settings.config",
                                              "children": [
                                                {
                                                  "value": "settings",
                                                  "children": []
                                                },
                                                {
                                                  "value": "config",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "backend_cors_allow_origins",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "allow_credentials=True",
                                      "children": [
                                        {
                                          "value": "allow_credentials",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "allow_methods=[\"*\"]",
                                      "children": [
                                        {
                                          "value": "allow_methods",
                                          "children": []
                                        },
                                        {
                                          "value": "[\"*\"]",
                                          "children": [
                                            {
                                              "value": "\"*\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "*",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "allow_headers=[\"*\"]",
                                      "children": [
                                        {
                                          "value": "allow_headers",
                                          "children": []
                                        },
                                        {
                                          "value": "[\"*\"]",
                                          "children": [
                                            {
                                              "value": "\"*\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "*",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )",
                      "children": [
                        {
                          "value": "uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )",
                          "children": [
                            {
                              "value": "uvicorn.run",
                              "children": [
                                {
                                  "value": "uvicorn",
                                  "children": []
                                },
                                {
                                  "value": "run",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )",
                              "children": [
                                {
                                  "value": "server_app",
                                  "children": []
                                },
                                {
                                  "value": "host=Config().websocket_server_host",
                                  "children": [
                                    {
                                      "value": "host",
                                      "children": []
                                    },
                                    {
                                      "value": "Config().websocket_server_host",
                                      "children": [
                                        {
                                          "value": "Config()",
                                          "children": [
                                            {
                                              "value": "Config",
                                              "children": []
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "websocket_server_host",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "port=Config().websocket_server_port",
                                  "children": [
                                    {
                                      "value": "port",
                                      "children": []
                                    },
                                    {
                                      "value": "Config().websocket_server_port",
                                      "children": [
                                        {
                                          "value": "Config()",
                                          "children": [
                                            {
                                              "value": "Config",
                                              "children": []
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "websocket_server_port",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}