{
  "value": "import asyncio\nimport builtins\nimport logging\nimport os\nimport threading\nimport time\nimport typing\nfrom abc import ABC, abstractmethod\nfrom enum import Enum\nfrom types import NoneType, UnionType\nfrom typing import (\n    Annotated,\n    Any,\n    Awaitable,\n    Callable,\n    Coroutine,\n    Dict,\n    FrozenSet,\n    Iterator,\n    List,\n    Set,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n    cast,\n    get_args,\n    get_origin,\n)\n\nimport Pyro5.api\nfrom pydantic import BaseModel\nfrom Pyro5 import api as pyro\nfrom Pyro5 import config as pyro_config\n\nfrom backend.data import db, redis\nfrom backend.util.process import AppProcess\nfrom backend.util.retry import conn_retry\nfrom backend.util.settings import Config, Secrets\n\nlogger = logging.getLogger(__name__)\nT = TypeVar(\"T\")\nC = TypeVar(\"C\", bound=Callable)\n\nconfig = Config()\npyro_host = config.pyro_host\npyro_config.MAX_RETRIES = config.pyro_client_comm_retry  # type: ignore\npyro_config.COMMTIMEOUT = config.pyro_client_comm_timeout  # type: ignore\n\n\ndef expose(func: C) -> C:\n    \"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## \u26a0\ufe0f Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise\n\n    register_pydantic_serializers(func)\n\n    return pyro.expose(wrapper)  # type: ignore\n\n\ndef register_pydantic_serializers(func: Callable):\n    \"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"\n    for name, annotation in func.__annotations__.items():\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\ndef _make_custom_serializer(model: Type[BaseModel]):\n    def custom_class_to_dict(obj):\n        data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }\n        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")\n        return data\n\n    return custom_class_to_dict\n\n\ndef _make_custom_deserializer(model: Type[BaseModel]):\n    def custom_dict_to_class(qualname, data: dict):\n        logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")\n        return model(**data)\n\n    return custom_dict_to_class\n\n\nclass AppService(AppProcess, ABC):\n    shared_event_loop: asyncio.AbstractEventLoop\n    use_db: bool = False\n    use_redis: bool = False\n    use_supabase: bool = False\n\n    def __init__(self):\n        self.uri = None\n\n    @classmethod\n    @abstractmethod\n    def get_port(cls) -> int:\n        pass\n\n    @classmethod\n    def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)\n\n    def run_service(self) -> None:\n        while True:\n            time.sleep(10)\n\n    def __run_async(self, coro: Coroutine[Any, Any, T]):\n        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)\n\n    def run_and_wait(self, coro: Coroutine[Any, Any, T]) -> T:\n        future = self.__run_async(coro)\n        return future.result()\n\n    def run(self):\n        self.shared_event_loop = asyncio.get_event_loop()\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n        if self.use_redis:\n            redis.connect()\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()\n\n    def cleanup(self):\n        if self.use_db:\n            logger.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())\n        if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting Redis...\")\n            redis.disconnect()\n\n    @conn_retry(\"Pyro\", \"Starting Pyro Service\")\n    def __start_pyro(self):\n        maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()\n\n    def __start_async_loop(self):\n        self.shared_event_loop.run_forever()\n\n\n# --------- UTILITIES --------- #\n\n\nAS = TypeVar(\"AS\", bound=AppService)\n\n\nclass PyroClient:\n    proxy: Pyro5.api.Proxy\n\n\ndef close_service_client(client: AppService) -> None:\n    if isinstance(client, PyroClient):\n        client.proxy._pyroRelease()\n    else:\n        raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")\n\n\ndef get_service_client(service_type: Type[AS]) -> AS:\n    service_name = service_type.service_name\n\n    class DynamicClient(PyroClient):\n        @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")\n\n        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res\n\n    return cast(AS, DynamicClient())\n\n\nbuiltin_types = [*vars(builtins).values(), NoneType, Enum]\n\n\ndef _pydantic_models_from_type_annotation(annotation) -> Iterator[type[BaseModel]]:\n    # Peel Annotated parameters\n    if (origin := get_origin(annotation)) and origin is Annotated:\n        annotation = get_args(annotation)[0]\n\n    origin = get_origin(annotation)\n    args = get_args(annotation)\n\n    if origin in (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):\n        for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)\n    elif origin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)\n    elif origin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)\n    else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
  "children": [
    {
      "value": "import asyncio",
      "children": [
        {
          "value": "asyncio",
          "children": [
            {
              "value": "asyncio",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import builtins",
      "children": [
        {
          "value": "builtins",
          "children": [
            {
              "value": "builtins",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import os",
      "children": [
        {
          "value": "os",
          "children": [
            {
              "value": "os",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import threading",
      "children": [
        {
          "value": "threading",
          "children": [
            {
              "value": "threading",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import time",
      "children": [
        {
          "value": "time",
          "children": [
            {
              "value": "time",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import typing",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from abc import ABC, abstractmethod",
      "children": [
        {
          "value": "abc",
          "children": [
            {
              "value": "abc",
              "children": []
            }
          ]
        },
        {
          "value": "ABC",
          "children": [
            {
              "value": "ABC",
              "children": []
            }
          ]
        },
        {
          "value": "abstractmethod",
          "children": [
            {
              "value": "abstractmethod",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from enum import Enum",
      "children": [
        {
          "value": "enum",
          "children": [
            {
              "value": "enum",
              "children": []
            }
          ]
        },
        {
          "value": "Enum",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from types import NoneType, UnionType",
      "children": [
        {
          "value": "types",
          "children": [
            {
              "value": "types",
              "children": []
            }
          ]
        },
        {
          "value": "NoneType",
          "children": [
            {
              "value": "NoneType",
              "children": []
            }
          ]
        },
        {
          "value": "UnionType",
          "children": [
            {
              "value": "UnionType",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import (\n    Annotated,\n    Any,\n    Awaitable,\n    Callable,\n    Coroutine,\n    Dict,\n    FrozenSet,\n    Iterator,\n    List,\n    Set,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n    cast,\n    get_args,\n    get_origin,\n)",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Annotated",
          "children": [
            {
              "value": "Annotated",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "Awaitable",
          "children": [
            {
              "value": "Awaitable",
              "children": []
            }
          ]
        },
        {
          "value": "Callable",
          "children": [
            {
              "value": "Callable",
              "children": []
            }
          ]
        },
        {
          "value": "Coroutine",
          "children": [
            {
              "value": "Coroutine",
              "children": []
            }
          ]
        },
        {
          "value": "Dict",
          "children": [
            {
              "value": "Dict",
              "children": []
            }
          ]
        },
        {
          "value": "FrozenSet",
          "children": [
            {
              "value": "FrozenSet",
              "children": []
            }
          ]
        },
        {
          "value": "Iterator",
          "children": [
            {
              "value": "Iterator",
              "children": []
            }
          ]
        },
        {
          "value": "List",
          "children": [
            {
              "value": "List",
              "children": []
            }
          ]
        },
        {
          "value": "Set",
          "children": [
            {
              "value": "Set",
              "children": []
            }
          ]
        },
        {
          "value": "Tuple",
          "children": [
            {
              "value": "Tuple",
              "children": []
            }
          ]
        },
        {
          "value": "Type",
          "children": [
            {
              "value": "Type",
              "children": []
            }
          ]
        },
        {
          "value": "TypeVar",
          "children": [
            {
              "value": "TypeVar",
              "children": []
            }
          ]
        },
        {
          "value": "Union",
          "children": [
            {
              "value": "Union",
              "children": []
            }
          ]
        },
        {
          "value": "cast",
          "children": [
            {
              "value": "cast",
              "children": []
            }
          ]
        },
        {
          "value": "get_args",
          "children": [
            {
              "value": "get_args",
              "children": []
            }
          ]
        },
        {
          "value": "get_origin",
          "children": [
            {
              "value": "get_origin",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import Pyro5.api",
      "children": [
        {
          "value": "Pyro5.api",
          "children": [
            {
              "value": "Pyro5",
              "children": []
            },
            {
              "value": "api",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from pydantic import BaseModel",
      "children": [
        {
          "value": "pydantic",
          "children": [
            {
              "value": "pydantic",
              "children": []
            }
          ]
        },
        {
          "value": "BaseModel",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from Pyro5 import api as pyro",
      "children": [
        {
          "value": "Pyro5",
          "children": [
            {
              "value": "Pyro5",
              "children": []
            }
          ]
        },
        {
          "value": "api as pyro",
          "children": [
            {
              "value": "api",
              "children": [
                {
                  "value": "api",
                  "children": []
                }
              ]
            },
            {
              "value": "pyro",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from Pyro5 import config as pyro_config",
      "children": [
        {
          "value": "Pyro5",
          "children": [
            {
              "value": "Pyro5",
              "children": []
            }
          ]
        },
        {
          "value": "config as pyro_config",
          "children": [
            {
              "value": "config",
              "children": [
                {
                  "value": "config",
                  "children": []
                }
              ]
            },
            {
              "value": "pyro_config",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data import db, redis",
      "children": [
        {
          "value": "backend.data",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            }
          ]
        },
        {
          "value": "db",
          "children": [
            {
              "value": "db",
              "children": []
            }
          ]
        },
        {
          "value": "redis",
          "children": [
            {
              "value": "redis",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.process import AppProcess",
      "children": [
        {
          "value": "backend.util.process",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "process",
              "children": []
            }
          ]
        },
        {
          "value": "AppProcess",
          "children": [
            {
              "value": "AppProcess",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.retry import conn_retry",
      "children": [
        {
          "value": "backend.util.retry",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "retry",
              "children": []
            }
          ]
        },
        {
          "value": "conn_retry",
          "children": [
            {
              "value": "conn_retry",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Config, Secrets",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Config",
          "children": [
            {
              "value": "Config",
              "children": []
            }
          ]
        },
        {
          "value": "Secrets",
          "children": [
            {
              "value": "Secrets",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "T = TypeVar(\"T\")",
      "children": [
        {
          "value": "T = TypeVar(\"T\")",
          "children": [
            {
              "value": "T",
              "children": []
            },
            {
              "value": "TypeVar(\"T\")",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"T\")",
                  "children": [
                    {
                      "value": "\"T\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "T",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "C = TypeVar(\"C\", bound=Callable)",
      "children": [
        {
          "value": "C = TypeVar(\"C\", bound=Callable)",
          "children": [
            {
              "value": "C",
              "children": []
            },
            {
              "value": "TypeVar(\"C\", bound=Callable)",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"C\", bound=Callable)",
                  "children": [
                    {
                      "value": "\"C\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "C",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "bound=Callable",
                      "children": [
                        {
                          "value": "bound",
                          "children": []
                        },
                        {
                          "value": "Callable",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "config = Config()",
      "children": [
        {
          "value": "config = Config()",
          "children": [
            {
              "value": "config",
              "children": []
            },
            {
              "value": "Config()",
              "children": [
                {
                  "value": "Config",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "pyro_host = config.pyro_host",
      "children": [
        {
          "value": "pyro_host = config.pyro_host",
          "children": [
            {
              "value": "pyro_host",
              "children": []
            },
            {
              "value": "config.pyro_host",
              "children": [
                {
                  "value": "config",
                  "children": []
                },
                {
                  "value": "pyro_host",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "pyro_config.MAX_RETRIES = config.pyro_client_comm_retry",
      "children": [
        {
          "value": "pyro_config.MAX_RETRIES = config.pyro_client_comm_retry",
          "children": [
            {
              "value": "pyro_config.MAX_RETRIES",
              "children": [
                {
                  "value": "pyro_config",
                  "children": []
                },
                {
                  "value": "MAX_RETRIES",
                  "children": []
                }
              ]
            },
            {
              "value": "config.pyro_client_comm_retry",
              "children": [
                {
                  "value": "config",
                  "children": []
                },
                {
                  "value": "pyro_client_comm_retry",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# type: ignore",
      "children": []
    },
    {
      "value": "pyro_config.COMMTIMEOUT = config.pyro_client_comm_timeout",
      "children": [
        {
          "value": "pyro_config.COMMTIMEOUT = config.pyro_client_comm_timeout",
          "children": [
            {
              "value": "pyro_config.COMMTIMEOUT",
              "children": [
                {
                  "value": "pyro_config",
                  "children": []
                },
                {
                  "value": "COMMTIMEOUT",
                  "children": []
                }
              ]
            },
            {
              "value": "config.pyro_client_comm_timeout",
              "children": [
                {
                  "value": "config",
                  "children": []
                },
                {
                  "value": "pyro_client_comm_timeout",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# type: ignore",
      "children": []
    },
    {
      "value": "def expose(func: C) -> C:\n    \"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## \u26a0\ufe0f Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise\n\n    register_pydantic_serializers(func)\n\n    return pyro.expose(wrapper)  # type: ignore\n\n\nd",
      "children": [
        {
          "value": "expose",
          "children": []
        },
        {
          "value": "(func: C)",
          "children": [
            {
              "value": "func: C",
              "children": [
                {
                  "value": "func",
                  "children": []
                },
                {
                  "value": "C",
                  "children": [
                    {
                      "value": "C",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "C",
          "children": [
            {
              "value": "C",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## \u26a0\ufe0f Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise\n\n    register_pydantic_serializers(func)\n\n    return pyro.expose(wrapper)  # type: ignore\n\n\nd",
          "children": [
            {
              "value": "\"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## \u26a0\ufe0f Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## \u26a0\ufe0f Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Decorator to mark a method or class to be exposed for remote calls.\n\n    ## \u26a0\ufe0f Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise",
              "children": [
                {
                  "value": "per(*ar",
                  "children": []
                },
                {
                  "value": "gs, **kwargs):",
                  "children": [
                    {
                      "value": "s, **",
                      "children": [
                        {
                          "value": ", **",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "args):",
                      "children": [
                        {
                          "value": "gs):",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise",
                  "children": [
                    {
                      "value": "return func(*args, **kwargs)\n        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise",
                      "children": [
                        {
                          "value": "rn func(*args, **kwargs)",
                          "children": [
                            {
                              "value": "rn func(*args, **kwargs)",
                              "children": [
                                {
                                  "value": "(*args, **kwargs)",
                                  "children": [
                                    {
                                      "value": "(*ar",
                                      "children": []
                                    },
                                    {
                                      "value": "gs, **kwargs)",
                                      "children": [
                                        {
                                          "value": "s, **",
                                          "children": [
                                            {
                                              "value": ", **",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "args)",
                                          "children": [
                                            {
                                              "value": "gs)",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "pt Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise",
                          "children": [
                            {
                              "value": "ption as e:",
                              "children": [
                                {
                                  "value": "ption as",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "= f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise",
                              "children": [
                                {
                                  "value": "= f\"Error in {func.__name__}: {e.__str__()}\"",
                                  "children": [
                                    {
                                      "value": "= f\"Error in {func.__name__}: {e.__str__()}\"",
                                      "children": [
                                        {
                                          "value": "= f",
                                          "children": []
                                        },
                                        {
                                          "value": "ror in {func.__name__}: {e.__str__()}\"",
                                          "children": [
                                            {
                                              "value": "ro",
                                              "children": []
                                            },
                                            {
                                              "value": "r in {fun",
                                              "children": []
                                            },
                                            {
                                              "value": "c.__name__}: {e",
                                              "children": [
                                                {
                                                  "value": ".__name__}: {",
                                                  "children": [
                                                    {
                                                      "value": ".__n",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "me__}: {",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "._",
                                              "children": []
                                            },
                                            {
                                              "value": "_str__()}\"",
                                              "children": [
                                                {
                                                  "value": "str__()}\"",
                                                  "children": [
                                                    {
                                                      "value": "str__()}\"",
                                                      "children": [
                                                        {
                                                          "value": "s",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "r__()}\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "er.exception(msg)",
                                  "children": [
                                    {
                                      "value": "er.exception(msg)",
                                      "children": [
                                        {
                                          "value": "er.exception(msg",
                                          "children": [
                                            {
                                              "value": "er.exc",
                                              "children": []
                                            },
                                            {
                                              "value": "ption(msg",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": ")",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ster_pydantic_serializers(func)",
              "children": [
                {
                  "value": "ster_pydantic_serializers(func)",
                  "children": [
                    {
                      "value": "ster_pydantic_serializers(fun",
                      "children": []
                    },
                    {
                      "value": "c)",
                      "children": [
                        {
                          "value": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "rn pyro.expose(wrapper)  #",
              "children": [
                {
                  "value": ".expose(wrapper)  #",
                  "children": [
                    {
                      "value": ".expose(wra",
                      "children": [
                        {
                          "value": ".exp",
                          "children": []
                        },
                        {
                          "value": "se(wra",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "pper)  #",
                      "children": [
                        {
                          "value": "per)  #",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "pe: ignore\n\n\nd",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "register_pydantic_serializers(func: Callable):\n    \"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"\n    for name, annotation in func.__annotations__.items():\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\nd",
      "children": [
        {
          "value": "ster_pydantic_serializers(fun",
          "children": []
        },
        {
          "value": "c: Callable):",
          "children": [
            {
              "value": ": Callable):",
              "children": [
                {
                  "value": ": Ca",
                  "children": []
                },
                {
                  "value": "able):",
                  "children": [
                    {
                      "value": "able):",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "egister custom serializers and deserializers for annotated Pydantic models\"\"\"\n    for name, annotation in func.__annotations__.items():\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\nd",
          "children": [
            {
              "value": "egister custom serializers and deserializers for annotated Pydantic models\"\"\"",
              "children": [
                {
                  "value": "egister custom serializers and deserializers for annotated Pydantic models\"\"\"",
                  "children": [
                    {
                      "value": "egi",
                      "children": []
                    },
                    {
                      "value": "ster custom serializers and deserializers for annotated Pydantic models\"\"\"",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "name, annotation in func.__annotations__.items():\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\nd",
              "children": [
                {
                  "value": ", annotation in",
                  "children": [
                    {
                      "value": ", an",
                      "children": []
                    },
                    {
                      "value": "tation in",
                      "children": []
                    }
                  ]
                },
                {
                  "value": ".__annotations__.items():",
                  "children": [
                    {
                      "value": ".__annotations__.items():",
                      "children": [
                        {
                          "value": ".__annotations__.ite",
                          "children": [
                            {
                              "value": ".__a",
                              "children": []
                            },
                            {
                              "value": "notations__.ite",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "s():",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n\n        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\nd",
                  "children": [
                    {
                      "value": "pydantic_types = _pydantic_models_from_type_annotation(annotation)\n        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")",
                      "children": [
                        {
                          "value": "ntic_types = _pydantic_models_from_type_annotation(annotation)",
                          "children": [
                            {
                              "value": "ntic_types = _pydantic_models_from_type_annotation(annotation)",
                              "children": [
                                {
                                  "value": "ntic_types = _pydantic_models_from_type_annotation(annotation)",
                                  "children": [
                                    {
                                      "value": "ntic_types = _",
                                      "children": []
                                    },
                                    {
                                      "value": "antic_models_from_type_annotation(annotation)",
                                      "children": [
                                        {
                                          "value": "antic_models_from_type_annotation(ann",
                                          "children": []
                                        },
                                        {
                                          "value": "otation)",
                                          "children": [
                                            {
                                              "value": "tation)",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "pt Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")",
                          "children": [
                            {
                              "value": "ption as e:",
                              "children": [
                                {
                                  "value": "ption as",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "e TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")",
                              "children": [
                                {
                                  "value": "e TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")",
                                  "children": [
                                    {
                                      "value": "Error(f\"Error while exposing {func.__name__}: {e.__str__()}\")",
                                      "children": [
                                        {
                                          "value": "Error(f\"E",
                                          "children": []
                                        },
                                        {
                                          "value": "rror while exposing {func.__name__}: {e.__str__()}\")",
                                          "children": [
                                            {
                                              "value": "ror while exposing {func.__name__}: {e.__str__()}\")",
                                              "children": [
                                                {
                                                  "value": "ro",
                                                  "children": []
                                                },
                                                {
                                                  "value": "r while exposing {fun",
                                                  "children": []
                                                },
                                                {
                                                  "value": "c.__name__}: {e",
                                                  "children": [
                                                    {
                                                      "value": ".__name__}: {",
                                                      "children": [
                                                        {
                                                          "value": ".__n",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "me__}: {",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "._",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_str__()}\")",
                                                  "children": [
                                                    {
                                                      "value": "str__()}\")",
                                                      "children": [
                                                        {
                                                          "value": "str__()}\"",
                                                          "children": [
                                                            {
                                                              "value": "s",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "r__()}\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": ")",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\nd",
                      "children": [
                        {
                          "value": "l in",
                          "children": []
                        },
                        {
                          "value": "ntic_types:",
                          "children": []
                        },
                        {
                          "value": "er.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\nd",
                          "children": [
                            {
                              "value": "er.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )",
                              "children": [
                                {
                                  "value": "er.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )",
                                  "children": [
                                    {
                                      "value": "er.debug(",
                                      "children": [
                                        {
                                          "value": "er.deb",
                                          "children": []
                                        },
                                        {
                                          "value": "g(",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )",
                                      "children": [
                                        {
                                          "value": "gistering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"",
                                          "children": [
                                            {
                                              "value": "gistering Pyro (de)serializers for {func.__name__} annotation \"",
                                              "children": [
                                                {
                                                  "value": "gi",
                                                  "children": []
                                                },
                                                {
                                                  "value": "stering Pyro (de)serializers for {fun",
                                                  "children": []
                                                },
                                                {
                                                  "value": "c.__name__} ann",
                                                  "children": [
                                                    {
                                                      "value": ".__name__} an",
                                                      "children": [
                                                        {
                                                          "value": ".__n",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "me__} an",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "otation \"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "name}': {model.__qualname__}\"",
                                              "children": [
                                                {
                                                  "value": "na",
                                                  "children": []
                                                },
                                                {
                                                  "value": "m",
                                                  "children": []
                                                },
                                                {
                                                  "value": "e}': {",
                                                  "children": [
                                                    {
                                                      "value": "}':",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "mod",
                                                  "children": []
                                                },
                                                {
                                                  "value": "el.__qualname__}\"",
                                                  "children": [
                                                    {
                                                      "value": "l.__qualname__}\"",
                                                      "children": [
                                                        {
                                                          "value": "l.__q",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "alname__}\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": ".register_class_to_dict(model, _make_custom_serializer(model))",
                              "children": [
                                {
                                  "value": ".register_class_to_dict(model, _make_custom_serializer(model))",
                                  "children": [
                                    {
                                      "value": ".register_class_to_dict(mod",
                                      "children": [
                                        {
                                          "value": ".reg",
                                          "children": []
                                        },
                                        {
                                          "value": "ster_class_to_dict(mod",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "el, _make_custom_serializer(model))",
                                      "children": [
                                        {
                                          "value": "l, _m",
                                          "children": []
                                        },
                                        {
                                          "value": "e_custom_serializer(model))",
                                          "children": [
                                            {
                                              "value": "e_custom_serializer(mod",
                                              "children": []
                                            },
                                            {
                                              "value": "el))",
                                              "children": [
                                                {
                                                  "value": "l))",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": ".register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\nd",
                              "children": [
                                {
                                  "value": ".register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\nd",
                                  "children": [
                                    {
                                      "value": ".register_dict_to_class(",
                                      "children": [
                                        {
                                          "value": ".reg",
                                          "children": []
                                        },
                                        {
                                          "value": "ster_dict_to_class(",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "model.__qualname__, _make_custom_deserializer(model)\n            )\n\n\nd",
                                      "children": [
                                        {
                                          "value": "l.__qualname__, _m",
                                          "children": [
                                            {
                                              "value": "l.__q",
                                              "children": []
                                            },
                                            {
                                              "value": "alname__, _m",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "e_custom_deserializer(model)",
                                          "children": [
                                            {
                                              "value": "e_custom_deserializer(mod",
                                              "children": []
                                            },
                                            {
                                              "value": "el)",
                                              "children": [
                                                {
                                                  "value": "l)",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "_make_custom_serializer(model: Type[BaseModel]):\n    def custom_class_to_dict(obj):\n        data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }\n        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")\n        return data\n\n    return custom_class_to_dict\n\n\nd",
      "children": [
        {
          "value": "e_custom_serializer(mod",
          "children": []
        },
        {
          "value": "el: Type[BaseModel]):",
          "children": [
            {
              "value": "l: Type[BaseModel]):",
              "children": [
                {
                  "value": "l: Ty",
                  "children": []
                },
                {
                  "value": "[BaseModel]):",
                  "children": [
                    {
                      "value": "[BaseModel]):",
                      "children": [
                        {
                          "value": "[Bas",
                          "children": []
                        },
                        {
                          "value": "eModel]):",
                          "children": [
                            {
                              "value": "Model]):",
                              "children": [
                                {
                                  "value": "Model]):",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "custom_class_to_dict(obj):\n        data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }\n        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")\n        return data\n\n    return custom_class_to_dict\n\n\nd",
          "children": [
            {
              "value": "custom_class_to_dict(obj):\n        data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }\n        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")\n        return data",
              "children": [
                {
                  "value": "om_class_to_dict(obj",
                  "children": []
                },
                {
                  "value": "):",
                  "children": [
                    {
                      "value": ":",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "= {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }\n        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")\n        return data",
                  "children": [
                    {
                      "value": "= {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }",
                      "children": [
                        {
                          "value": "= {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }",
                          "children": [
                            {
                              "value": "= {",
                              "children": []
                            },
                            {
                              "value": "\"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }",
                              "children": [
                                {
                                  "value": "lass__\": obj.__class__.__qualname__,",
                                  "children": [
                                    {
                                      "value": "lass__\": ob",
                                      "children": [
                                        {
                                          "value": "l",
                                          "children": []
                                        },
                                        {
                                          "value": "ass__\": o",
                                          "children": []
                                        },
                                        {
                                          "value": "b",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "__class__.__qualname__,",
                                      "children": [
                                        {
                                          "value": "__class__.__q",
                                          "children": [
                                            {
                                              "value": "__c",
                                              "children": []
                                            },
                                            {
                                              "value": "ass__.__q",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "alname__,",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "j.model_dump(),",
                                  "children": [
                                    {
                                      "value": "model_dump(),",
                                      "children": [
                                        {
                                          "value": "model_dump(),",
                                          "children": [
                                            {
                                              "value": "mod",
                                              "children": []
                                            },
                                            {
                                              "value": "l_dump(),",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "er.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")",
                      "children": [
                        {
                          "value": "er.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")",
                          "children": [
                            {
                              "value": "er.debug(f\"S",
                              "children": [
                                {
                                  "value": "er.deb",
                                  "children": []
                                },
                                {
                                  "value": "g(f\"S",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "erializing {obj.__class__.__qualname__} with data: {data}\")",
                              "children": [
                                {
                                  "value": "rializing {obj.__class__.__qualname__} with data: {data}\")",
                                  "children": [
                                    {
                                      "value": "ri",
                                      "children": []
                                    },
                                    {
                                      "value": "alizing {obj",
                                      "children": []
                                    },
                                    {
                                      "value": ".__class__.__qualname__} wit",
                                      "children": [
                                        {
                                          "value": "__class__.__qualname__} wi",
                                          "children": [
                                            {
                                              "value": "__class__.__q",
                                              "children": [
                                                {
                                                  "value": "__c",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ass__.__q",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "alname__} wi",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "h data: {dat",
                                      "children": []
                                    },
                                    {
                                      "value": "a}\")",
                                      "children": [
                                        {
                                          "value": "}\")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "rn data",
                      "children": [
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "rn custom_class_to_dict\n\n\nd",
              "children": [
                {
                  "value": "om_class_to_dict\n\n\nd",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "_make_custom_deserializer(model: Type[BaseModel]):\n    def custom_dict_to_class(qualname, data: dict):\n        logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")\n        return model(**data)\n\n    return custom_dict_to_class\n\n\nc",
      "children": [
        {
          "value": "e_custom_deserializer(mod",
          "children": []
        },
        {
          "value": "el: Type[BaseModel]):",
          "children": [
            {
              "value": "l: Type[BaseModel]):",
              "children": [
                {
                  "value": "l: Ty",
                  "children": []
                },
                {
                  "value": "[BaseModel]):",
                  "children": [
                    {
                      "value": "[BaseModel]):",
                      "children": [
                        {
                          "value": "[Bas",
                          "children": []
                        },
                        {
                          "value": "eModel]):",
                          "children": [
                            {
                              "value": "Model]):",
                              "children": [
                                {
                                  "value": "Model]):",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "custom_dict_to_class(qualname, data: dict):\n        logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")\n        return model(**data)\n\n    return custom_dict_to_class\n\n\nc",
          "children": [
            {
              "value": "custom_dict_to_class(qualname, data: dict):\n        logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")\n        return model(**data)",
              "children": [
                {
                  "value": "om_dict_to_class(qua",
                  "children": []
                },
                {
                  "value": "lname, data: dict):",
                  "children": [
                    {
                      "value": "name, da",
                      "children": []
                    },
                    {
                      "value": ": dict):",
                      "children": [
                        {
                          "value": ": di",
                          "children": []
                        },
                        {
                          "value": "):",
                          "children": [
                            {
                              "value": "):",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "er.debug(f\"Deserializing {model.__qualname__} from data: {data}\")\n        return model(**data)",
                  "children": [
                    {
                      "value": "er.debug(f\"Deserializing {model.__qualname__} from data: {data}\")",
                      "children": [
                        {
                          "value": "er.debug(f\"Deserializing {model.__qualname__} from data: {data}\")",
                          "children": [
                            {
                              "value": "er.debug(f\"D",
                              "children": [
                                {
                                  "value": "er.deb",
                                  "children": []
                                },
                                {
                                  "value": "g(f\"D",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "eserializing {model.__qualname__} from data: {data}\")",
                              "children": [
                                {
                                  "value": "serializing {model.__qualname__} from data: {data}\")",
                                  "children": [
                                    {
                                      "value": "se",
                                      "children": []
                                    },
                                    {
                                      "value": "rializing {mod",
                                      "children": []
                                    },
                                    {
                                      "value": "el.__qualname__} fro",
                                      "children": [
                                        {
                                          "value": "l.__qualname__} fr",
                                          "children": [
                                            {
                                              "value": "l.__q",
                                              "children": []
                                            },
                                            {
                                              "value": "alname__} fr",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "m data: {dat",
                                      "children": []
                                    },
                                    {
                                      "value": "a}\")",
                                      "children": [
                                        {
                                          "value": "}\")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "rn model(**data)",
                      "children": [
                        {
                          "value": "l(**data)",
                          "children": [
                            {
                              "value": "l(**d",
                              "children": []
                            },
                            {
                              "value": "ata)",
                              "children": [
                                {
                                  "value": "ta)",
                                  "children": [
                                    {
                                      "value": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "rn custom_dict_to_class\n\n\nc",
              "children": [
                {
                  "value": "om_dict_to_class\n\n\nc",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "s AppService(AppProcess, ABC):\n    shared_event_loop: asyncio.AbstractEventLoop\n    use_db: bool = False\n    use_redis: bool = False\n    use_supabase: bool = False\n\n    def __init__(self):\n        self.uri = None\n\n    @classmethod\n    @abstractmethod\n    def get_port(cls) -> int:\n        pass\n\n    @classmethod\n    def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)\n\n    def run_service(self) -> None:\n        while True:\n            time.sleep(10)\n\n    def __run_async(self, coro: Coroutine[Any, Any, T]):\n        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)\n\n    def run_and_wait(self, coro: Coroutine[Any, Any, T]) -> T:\n        future = self.__run_async(coro)\n        return future.result()\n\n    def run(self):\n        self.shared_event_loop = asyncio.get_event_loop()\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n        if self.use_redis:\n            redis.connect()\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()\n\n    def cleanup(self):\n        if self.use_db:\n            logger.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())\n        if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting Redis...\")\n            redis.disconnect()\n\n    @conn_retry(\"Pyro\", \"Starting Pyro Service\")\n    def __start_pyro(self):\n        maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()\n\n    def __start_async_loop(self):\n        self.shared_event_loop.run_forever()\n\n\n# ---",
      "children": [
        {
          "value": "ervice(App",
          "children": []
        },
        {
          "value": "Process, ABC):",
          "children": [
            {
              "value": "rocess, AB",
              "children": []
            },
            {
              "value": ":",
              "children": []
            }
          ]
        },
        {
          "value": "ed_event_loop: asyncio.AbstractEventLoop\n    use_db: bool = False\n    use_redis: bool = False\n    use_supabase: bool = False\n\n    def __init__(self):\n        self.uri = None\n\n    @classmethod\n    @abstractmethod\n    def get_port(cls) -> int:\n        pass\n\n    @classmethod\n    def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)\n\n    def run_service(self) -> None:\n        while True:\n            time.sleep(10)\n\n    def __run_async(self, coro: Coroutine[Any, Any, T]):\n        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)\n\n    def run_and_wait(self, coro: Coroutine[Any, Any, T]) -> T:\n        future = self.__run_async(coro)\n        return future.result()\n\n    def run(self):\n        self.shared_event_loop = asyncio.get_event_loop()\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n        if self.use_redis:\n            redis.connect()\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()\n\n    def cleanup(self):\n        if self.use_db:\n            logger.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())\n        if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting Redis...\")\n            redis.disconnect()\n\n    @conn_retry(\"Pyro\", \"Starting Pyro Service\")\n    def __start_pyro(self):\n        maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()\n\n    def __start_async_loop(self):\n        self.shared_event_loop.run_forever()\n\n\n# ---",
          "children": [
            {
              "value": "ed_event_loop: asyncio.AbstractEventLoop",
              "children": [
                {
                  "value": "ed_event_loop: asyncio.AbstractEventLoop",
                  "children": [
                    {
                      "value": "ed_event_loop: as",
                      "children": []
                    },
                    {
                      "value": "cio.AbstractEventLoop",
                      "children": [
                        {
                          "value": "cio.AbstractEventLoop",
                          "children": [
                            {
                              "value": "cio.Abs",
                              "children": []
                            },
                            {
                              "value": "ractEventLoop",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "db: bool = False",
              "children": [
                {
                  "value": "db: bool = False",
                  "children": [
                    {
                      "value": "db: bo",
                      "children": []
                    },
                    {
                      "value": "= F",
                      "children": [
                        {
                          "value": "= F",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "e",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "redis: bool = False",
              "children": [
                {
                  "value": "redis: bool = False",
                  "children": [
                    {
                      "value": "redis: bo",
                      "children": []
                    },
                    {
                      "value": "= F",
                      "children": [
                        {
                          "value": "= F",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "e",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "supabase: bool = False",
              "children": [
                {
                  "value": "supabase: bool = False",
                  "children": [
                    {
                      "value": "supabase: bo",
                      "children": []
                    },
                    {
                      "value": "= F",
                      "children": [
                        {
                          "value": "= F",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "e",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "__init__(self):\n        self.uri = None",
              "children": [
                {
                  "value": "it__(sel",
                  "children": []
                },
                {
                  "value": "f):",
                  "children": [
                    {
                      "value": "):",
                      "children": []
                    }
                  ]
                },
                {
                  "value": ".uri = None",
                  "children": [
                    {
                      "value": ".uri = None",
                      "children": [
                        {
                          "value": ".uri = None",
                          "children": [
                            {
                              "value": ".uri = N",
                              "children": [
                                {
                                  "value": ".uri",
                                  "children": []
                                },
                                {
                                  "value": "= N",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ssmethod\n    @abstractmethod\n    def get_port(cls) -> int:\n        pass",
              "children": [
                {
                  "value": "ssmethod",
                  "children": [
                    {
                      "value": "smethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "tractmethod",
                  "children": [
                    {
                      "value": "ractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "get_port(cls) -> int:\n        pass",
                  "children": [
                    {
                      "value": "port(cls",
                      "children": []
                    },
                    {
                      "value": ") ->",
                      "children": [
                        {
                          "value": "->",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "",
                      "children": [
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "",
                      "children": [
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ssmethod\n    def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)",
              "children": [
                {
                  "value": "ssmethod",
                  "children": [
                    {
                      "value": "smethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)",
                  "children": [
                    {
                      "value": "host(cls",
                      "children": []
                    },
                    {
                      "value": ") ->",
                      "children": [
                        {
                          "value": "->",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "",
                      "children": [
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "rn os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)",
                      "children": [
                        {
                          "value": "rn os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)",
                          "children": [
                            {
                              "value": "nviron.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)",
                              "children": [
                                {
                                  "value": "nviron.get(f\"{",
                                  "children": [
                                    {
                                      "value": "nviron.get",
                                      "children": [
                                        {
                                          "value": "nv",
                                          "children": []
                                        },
                                        {
                                          "value": "ron.get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "f\"{",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "cls.service_name.upper()}_HOST\", config.pyro_host)",
                                  "children": [
                                    {
                                      "value": "ls.service_name.upper()}_HOST\", co",
                                      "children": [
                                        {
                                          "value": "ls",
                                          "children": []
                                        },
                                        {
                                          "value": ".service_name.upper()}_HOS",
                                          "children": [
                                            {
                                              "value": "service_name.upper()}_HO",
                                              "children": [
                                                {
                                                  "value": "service_name.upper()}_",
                                                  "children": [
                                                    {
                                                      "value": "service_name.upp",
                                                      "children": [
                                                        {
                                                          "value": "ser",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ice_name.upp",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "r()}_",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "HO",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "T\", c",
                                          "children": []
                                        },
                                        {
                                          "value": "o",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ig.pyro_host)",
                                      "children": [
                                        {
                                          "value": "ig.pyr",
                                          "children": []
                                        },
                                        {
                                          "value": "_host)",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "run_service(self) -> None:\n        while True:\n            time.sleep(10)",
              "children": [
                {
                  "value": "service(sel",
                  "children": []
                },
                {
                  "value": "f) ->",
                  "children": [
                    {
                      "value": ") ->",
                      "children": []
                    }
                  ]
                },
                {
                  "value": ":",
                  "children": [
                    {
                      "value": ":",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "e True:\n            time.sleep(10)",
                  "children": [
                    {
                      "value": "e True:\n            time.sleep(10)",
                      "children": [
                        {
                          "value": ":",
                          "children": []
                        },
                        {
                          "value": ".sleep(10)",
                          "children": [
                            {
                              "value": ".sleep(10)",
                              "children": [
                                {
                                  "value": ".sleep(10)",
                                  "children": [
                                    {
                                      "value": ".sleep(10)",
                                      "children": [
                                        {
                                          "value": ".sle",
                                          "children": []
                                        },
                                        {
                                          "value": "p(10)",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "__run_async(self, coro: Coroutine[Any, Any, T]):\n        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)",
              "children": [
                {
                  "value": "n_async(sel",
                  "children": []
                },
                {
                  "value": "f, coro: Coroutine[Any, Any, T]):",
                  "children": [
                    {
                      "value": ", co",
                      "children": []
                    },
                    {
                      "value": ": Coroutine[Any, Any, T]):",
                      "children": [
                        {
                          "value": ": Co",
                          "children": []
                        },
                        {
                          "value": "utine[Any, Any, T]):",
                          "children": [
                            {
                              "value": "utine[Any, Any, T]):",
                              "children": [
                                {
                                  "value": "utine[Any",
                                  "children": []
                                },
                                {
                                  "value": ", Any, T]):",
                                  "children": [
                                    {
                                      "value": "An",
                                      "children": [
                                        {
                                          "value": "An",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "T]",
                                      "children": [
                                        {
                                          "value": "T]",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "rn asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)",
                  "children": [
                    {
                      "value": "rn asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)",
                      "children": [
                        {
                          "value": "cio.run_coroutine_threadsafe(coro, self.shared_event_loop)",
                          "children": [
                            {
                              "value": "cio.run_coroutine_threadsafe(cor",
                              "children": [
                                {
                                  "value": "cio.run",
                                  "children": []
                                },
                                {
                                  "value": "coroutine_threadsafe(cor",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "o, self.shared_event_loop)",
                              "children": [
                                {
                                  "value": ", se",
                                  "children": []
                                },
                                {
                                  "value": ".shared_event_loop)",
                                  "children": [
                                    {
                                      "value": ".sha",
                                      "children": []
                                    },
                                    {
                                      "value": "ed_event_loop)",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "run_and_wait(self, coro: Coroutine[Any, Any, T]) -> T:\n        future = self.__run_async(coro)\n        return future.result()",
              "children": [
                {
                  "value": "and_wait(sel",
                  "children": []
                },
                {
                  "value": "f, coro: Coroutine[Any, Any, T]) ->",
                  "children": [
                    {
                      "value": ", co",
                      "children": []
                    },
                    {
                      "value": ": Coroutine[Any, Any, T]) ->",
                      "children": [
                        {
                          "value": ": Co",
                          "children": []
                        },
                        {
                          "value": "utine[Any, Any, T]) ->",
                          "children": [
                            {
                              "value": "utine[Any, Any, T]) ->",
                              "children": [
                                {
                                  "value": "utine[Any",
                                  "children": []
                                },
                                {
                                  "value": ", Any, T]) ->",
                                  "children": [
                                    {
                                      "value": "An",
                                      "children": [
                                        {
                                          "value": "An",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "T]",
                                      "children": [
                                        {
                                          "value": "T]",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "-",
                                      "children": [
                                        {
                                          "value": "-",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "re = self.__run_async(coro)\n        return future.result()",
                  "children": [
                    {
                      "value": "re = self.__run_async(coro)",
                      "children": [
                        {
                          "value": "re = self.__run_async(coro)",
                          "children": [
                            {
                              "value": "re = s",
                              "children": []
                            },
                            {
                              "value": ".__run_async(coro)",
                              "children": [
                                {
                                  "value": ".__run_async(cor",
                                  "children": [
                                    {
                                      "value": ".__r",
                                      "children": []
                                    },
                                    {
                                      "value": "n_async(cor",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "o)",
                                  "children": [
                                    {
                                      "value": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "rn future.result()",
                      "children": [
                        {
                          "value": "re.result()",
                          "children": [
                            {
                              "value": "re.result()",
                              "children": [
                                {
                                  "value": "re.res",
                                  "children": []
                                },
                                {
                                  "value": "lt()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "run(self):\n        self.shared_event_loop = asyncio.get_event_loop()\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n        if self.use_redis:\n            redis.connect()\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()",
              "children": [
                {
                  "value": "sel",
                  "children": []
                },
                {
                  "value": "f):",
                  "children": [
                    {
                      "value": "):",
                      "children": []
                    }
                  ]
                },
                {
                  "value": ".shared_event_loop = asyncio.get_event_loop()\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n        if self.use_redis:\n            redis.connect()\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()",
                  "children": [
                    {
                      "value": ".shared_event_loop = asyncio.get_event_loop()",
                      "children": [
                        {
                          "value": ".shared_event_loop = asyncio.get_event_loop()",
                          "children": [
                            {
                              "value": ".shared_event_loop = a",
                              "children": [
                                {
                                  "value": ".sha",
                                  "children": []
                                },
                                {
                                  "value": "ed_event_loop = a",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "cio.get_event_loop()",
                              "children": [
                                {
                                  "value": "cio.get_event_loop()",
                                  "children": [
                                    {
                                      "value": "cio.get",
                                      "children": []
                                    },
                                    {
                                      "value": "event_loop()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "elf.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())",
                      "children": [
                        {
                          "value": ".use_db:",
                          "children": [
                            {
                              "value": ".use",
                              "children": []
                            },
                            {
                              "value": "db:",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": ".shared_event_loop.run_until_complete(db.connect())",
                          "children": [
                            {
                              "value": ".shared_event_loop.run_until_complete(db.connect())",
                              "children": [
                                {
                                  "value": ".shared_event_loop.run_until_complete(db.connect())",
                                  "children": [
                                    {
                                      "value": ".shared_event_loop.run_until_complete(db.",
                                      "children": [
                                        {
                                          "value": ".shared_event_loop.run",
                                          "children": [
                                            {
                                              "value": ".sha",
                                              "children": []
                                            },
                                            {
                                              "value": "ed_event_loop.run",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "until_complete(db.",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "connect())",
                                      "children": [
                                        {
                                          "value": "onnect())",
                                          "children": [
                                            {
                                              "value": "onnect())",
                                              "children": [
                                                {
                                                  "value": "on",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ect())",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "elf.use_redis:\n            redis.connect()",
                      "children": [
                        {
                          "value": ".use_redis:",
                          "children": [
                            {
                              "value": ".use",
                              "children": []
                            },
                            {
                              "value": "redis:",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "s.connect()",
                          "children": [
                            {
                              "value": "s.connect()",
                              "children": [
                                {
                                  "value": "s.connect()",
                                  "children": [
                                    {
                                      "value": "s.connect()",
                                      "children": [
                                        {
                                          "value": "s.con",
                                          "children": []
                                        },
                                        {
                                          "value": "ect()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "elf.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                      "children": [
                        {
                          "value": ".use_supabase:",
                          "children": [
                            {
                              "value": ".use",
                              "children": []
                            },
                            {
                              "value": "supabase:",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                          "children": [
                            {
                              "value": "supabase import create_client",
                              "children": [
                                {
                                  "value": "base imp",
                                  "children": [
                                    {
                                      "value": "base imp",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "te_client",
                                  "children": [
                                    {
                                      "value": "te_client",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ets = Secrets()",
                              "children": [
                                {
                                  "value": "ets = Secrets()",
                                  "children": [
                                    {
                                      "value": "ets = S",
                                      "children": []
                                    },
                                    {
                                      "value": "ets()",
                                      "children": [
                                        {
                                          "value": "ets()",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": ".supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                              "children": [
                                {
                                  "value": ".supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                                  "children": [
                                    {
                                      "value": ".supabase = c",
                                      "children": [
                                        {
                                          "value": ".sup",
                                          "children": []
                                        },
                                        {
                                          "value": "base = c",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "te_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                                      "children": [
                                        {
                                          "value": "te_client(",
                                          "children": []
                                        },
                                        {
                                          "value": "secrets.supabase_url, secrets.supabase_service_role_key\n            )",
                                          "children": [
                                            {
                                              "value": "ets.supabase_url, se",
                                              "children": [
                                                {
                                                  "value": "ets.sup",
                                                  "children": []
                                                },
                                                {
                                                  "value": "base_url, se",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ets.supabase_service_role_key",
                                              "children": [
                                                {
                                                  "value": "ets.sup",
                                                  "children": []
                                                },
                                                {
                                                  "value": "base_service_role_key",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "itialize the async loop.",
                      "children": []
                    },
                    {
                      "value": "c_thread = threading.Thread(target=self.__start_async_loop)",
                      "children": [
                        {
                          "value": "c_thread = threading.Thread(target=self.__start_async_loop)",
                          "children": [
                            {
                              "value": "c_thread = t",
                              "children": []
                            },
                            {
                              "value": "ading.Thread(target=self.__start_async_loop)",
                              "children": [
                                {
                                  "value": "ading.Thread(tar",
                                  "children": [
                                    {
                                      "value": "ading.Thr",
                                      "children": []
                                    },
                                    {
                                      "value": "ad(tar",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "get=self.__start_async_loop)",
                                  "children": [
                                    {
                                      "value": "et=self.__start_async_loop)",
                                      "children": [
                                        {
                                          "value": "et=sel",
                                          "children": []
                                        },
                                        {
                                          "value": ".__start_async_loop)",
                                          "children": [
                                            {
                                              "value": ".__s",
                                              "children": []
                                            },
                                            {
                                              "value": "art_async_loop)",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "c_thread.daemon = True",
                      "children": [
                        {
                          "value": "c_thread.daemon = True",
                          "children": [
                            {
                              "value": "c_thread.daemon = T",
                              "children": [
                                {
                                  "value": "c_thread.dae",
                                  "children": []
                                },
                                {
                                  "value": "on = T",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "c_thread.start()",
                      "children": [
                        {
                          "value": "c_thread.start()",
                          "children": [
                            {
                              "value": "c_thread.start()",
                              "children": [
                                {
                                  "value": "c_thread.sta",
                                  "children": []
                                },
                                {
                                  "value": "t()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "itialize pyro service",
                      "children": []
                    },
                    {
                      "value": "on_thread = threading.Thread(target=self.__start_pyro)",
                      "children": [
                        {
                          "value": "on_thread = threading.Thread(target=self.__start_pyro)",
                          "children": [
                            {
                              "value": "on_thread = t",
                              "children": []
                            },
                            {
                              "value": "ading.Thread(target=self.__start_pyro)",
                              "children": [
                                {
                                  "value": "ading.Thread(tar",
                                  "children": [
                                    {
                                      "value": "ading.Thr",
                                      "children": []
                                    },
                                    {
                                      "value": "ad(tar",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "get=self.__start_pyro)",
                                  "children": [
                                    {
                                      "value": "et=self.__start_pyro)",
                                      "children": [
                                        {
                                          "value": "et=sel",
                                          "children": []
                                        },
                                        {
                                          "value": ".__start_pyro)",
                                          "children": [
                                            {
                                              "value": ".__s",
                                              "children": []
                                            },
                                            {
                                              "value": "art_pyro)",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "on_thread.daemon = True",
                      "children": [
                        {
                          "value": "on_thread.daemon = True",
                          "children": [
                            {
                              "value": "on_thread.daemon = T",
                              "children": [
                                {
                                  "value": "on_thread.dae",
                                  "children": []
                                },
                                {
                                  "value": "on = T",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "on_thread.start()",
                      "children": [
                        {
                          "value": "on_thread.start()",
                          "children": [
                            {
                              "value": "on_thread.start()",
                              "children": [
                                {
                                  "value": "on_thread.sta",
                                  "children": []
                                },
                                {
                                  "value": "t()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "n the main service (if it's not implemented, just sleep).",
                      "children": []
                    },
                    {
                      "value": ".run_service()",
                      "children": [
                        {
                          "value": ".run_service()",
                          "children": [
                            {
                              "value": ".run_service()",
                              "children": [
                                {
                                  "value": ".run",
                                  "children": []
                                },
                                {
                                  "value": "service()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "cleanup(self):\n        if self.use_db:\n            logger.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())\n        if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting Redis...\")\n            redis.disconnect()\n\n    @c",
              "children": [
                {
                  "value": "nup(sel",
                  "children": []
                },
                {
                  "value": "f):",
                  "children": [
                    {
                      "value": "):",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "elf.use_db:\n            logger.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())\n        if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting Redis...\")\n            redis.disconnect()\n\n    @c",
                  "children": [
                    {
                      "value": "elf.use_db:\n            logger.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())",
                      "children": [
                        {
                          "value": ".use_db:",
                          "children": [
                            {
                              "value": ".use",
                              "children": []
                            },
                            {
                              "value": "db:",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "er.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())",
                          "children": [
                            {
                              "value": "er.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting DB...\")",
                              "children": [
                                {
                                  "value": "er.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting DB...\")",
                                  "children": [
                                    {
                                      "value": "er.info(f\"[",
                                      "children": [
                                        {
                                          "value": "er.inf",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"[",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "{self.__class__.__name__}] \u23f3 Disconnecting DB...\")",
                                      "children": [
                                        {
                                          "value": "self.__class__.__name__}] \u23f3 Disconnecting DB...\")",
                                          "children": [
                                            {
                                              "value": "se",
                                              "children": []
                                            },
                                            {
                                              "value": "l",
                                              "children": []
                                            },
                                            {
                                              "value": "f.__class__.__name__}] \u23f3",
                                              "children": [
                                                {
                                                  "value": ".__class__.__name__}] \u23f3",
                                                  "children": [
                                                    {
                                                      "value": ".__class__.__n",
                                                      "children": [
                                                        {
                                                          "value": ".__c",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ass__.__n",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "me__}] \u23f3",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "Disconnecting DB...\")",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "un_and_wait(db.disconnect())",
                              "children": [
                                {
                                  "value": "un_and_wait(db.disconnect())",
                                  "children": [
                                    {
                                      "value": "un_and_wait(db.di",
                                      "children": [
                                        {
                                          "value": "un_a",
                                          "children": []
                                        },
                                        {
                                          "value": "d_wait(db.di",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "sconnect())",
                                      "children": [
                                        {
                                          "value": "connect())",
                                          "children": [
                                            {
                                              "value": "connect())",
                                              "children": [
                                                {
                                                  "value": "co",
                                                  "children": []
                                                },
                                                {
                                                  "value": "nect())",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "f.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting Redis...\")\n            redis.disconnect()\n\n    @c",
                      "children": [
                        {
                          "value": "se_redis:",
                          "children": [
                            {
                              "value": "se_r",
                              "children": []
                            },
                            {
                              "value": "dis:",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": ".info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting Redis...\")\n            redis.disconnect()\n\n    @c",
                          "children": [
                            {
                              "value": ".info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting Redis...\")",
                              "children": [
                                {
                                  "value": ".info(f\"[{self.__class__.__name__}] \u23f3 Disconnecting Redis...\")",
                                  "children": [
                                    {
                                      "value": ".info(f\"[{s",
                                      "children": [
                                        {
                                          "value": ".info(",
                                          "children": []
                                        },
                                        {
                                          "value": "\"[{s",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "elf.__class__.__name__}] \u23f3 Disconnecting Redis...\")",
                                      "children": [
                                        {
                                          "value": "lf.__class__.__name__}] \u23f3 Disconnecting Redis...\")",
                                          "children": [
                                            {
                                              "value": "lf",
                                              "children": []
                                            },
                                            {
                                              "value": ".",
                                              "children": []
                                            },
                                            {
                                              "value": "__class__.__name__}] \u23f3 Di",
                                              "children": [
                                                {
                                                  "value": "_class__.__name__}] \u23f3 D",
                                                  "children": [
                                                    {
                                                      "value": "_class__.__nam",
                                                      "children": [
                                                        {
                                                          "value": "_cla",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "s__.__nam",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "__}] \u23f3 D",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "sconnecting Redis...\")",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "sconnect()\n\n    @c",
                              "children": [
                                {
                                  "value": "sconnect()\n\n    @c",
                                  "children": [
                                    {
                                      "value": "sconnect()",
                                      "children": [
                                        {
                                          "value": "sconn",
                                          "children": []
                                        },
                                        {
                                          "value": "ct()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "@c",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "try(\"Pyro\", \"Starting Pyro Service\")\n    def __start_pyro(self):\n        maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()\n\n    de",
              "children": [
                {
                  "value": "try(\"Pyro\", \"Starting Pyro Service\")\n    def",
                  "children": [
                    {
                      "value": "ry(\"Pyro\", \"Starting Pyro Service\")\n    def",
                      "children": [
                        {
                          "value": "ry(\"Pyro\",",
                          "children": []
                        },
                        {
                          "value": "\"Starting Pyro Service\")\n    def",
                          "children": [
                            {
                              "value": "\"Start",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "Star",
                                  "children": []
                                },
                                {
                                  "value": "t",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "g Pyro Service\")\n    de",
                              "children": [
                                {
                                  "value": "g",
                                  "children": []
                                },
                                {
                                  "value": "Pyro Service\")\n    d",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "art_pyro(self):\n        maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()\n\n    de",
                  "children": [
                    {
                      "value": "pyro(self):",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": [
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()\n\n    de",
                      "children": [
                        {
                          "value": "connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )",
                          "children": [
                            {
                              "value": "connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )",
                              "children": [
                                {
                                  "value": "connection_thread_count = max(",
                                  "children": []
                                },
                                {
                                  "value": "Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )",
                                      "children": [
                                        {
                                          "value": "nfig.THREADPOOL_SIZE,",
                                          "children": [
                                            {
                                              "value": "nfig.THREADP",
                                              "children": [
                                                {
                                                  "value": "nfig.",
                                                  "children": []
                                                },
                                                {
                                                  "value": "HREADP",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "OL_SIZE,",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "um_node_workers * config.num_graph_workers,",
                                          "children": [
                                            {
                                              "value": "um_node_workers * confi",
                                              "children": [
                                                {
                                                  "value": "um_nod",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_workers * confi",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "um_graph_workers,",
                                              "children": [
                                                {
                                                  "value": "um_gra",
                                                  "children": []
                                                },
                                                {
                                                  "value": "h_workers,",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "nfig.THREADPOOL_SIZE = maximum_connection_thread_count  # type",
                          "children": [
                            {
                              "value": "nfig.THREADPOOL_SIZE = maximum_connection_thread_count  # type",
                              "children": [
                                {
                                  "value": "nfig.THREADPOOL_SIZE = maxim",
                                  "children": [
                                    {
                                      "value": "nfig.THREADP",
                                      "children": [
                                        {
                                          "value": "nfig.",
                                          "children": []
                                        },
                                        {
                                          "value": "HREADP",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "OL_SIZE = maxim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "connection_thread_count  # type",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ignore",
                          "children": []
                        },
                        {
                          "value": "Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())",
                          "children": [
                            {
                              "value": "Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())",
                              "children": [
                                {
                                  "value": "Pyro5",
                                  "children": []
                                },
                                {
                                  "value": "i.Daemon(host=config.pyro_host, port=self.get_port())",
                                  "children": [
                                    {
                                      "value": "i.Daemon(host=co",
                                      "children": [
                                        {
                                          "value": "i.Daemon(",
                                          "children": [
                                            {
                                              "value": "i.Dae",
                                              "children": []
                                            },
                                            {
                                              "value": "on(",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ost=co",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "nfig.pyro_host, port=self.get_port())",
                                      "children": [
                                        {
                                          "value": "fig.pyro_host, port=s",
                                          "children": [
                                            {
                                              "value": "fig.",
                                              "children": []
                                            },
                                            {
                                              "value": "yro_host, port=s",
                                              "children": [
                                                {
                                                  "value": "yro_ho",
                                                  "children": []
                                                },
                                                {
                                                  "value": "t, port=s",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "f.get_port())",
                                          "children": [
                                            {
                                              "value": "f.ge",
                                              "children": []
                                            },
                                            {
                                              "value": "_port())",
                                              "children": [
                                                {
                                                  "value": "_port())",
                                                  "children": [
                                                    {
                                                      "value": "_por",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "())",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "= daemon.register(self, objectId=self.service_name)",
                          "children": [
                            {
                              "value": "= daemon.register(self, objectId=self.service_name)",
                              "children": [
                                {
                                  "value": "= daemo",
                                  "children": [
                                    {
                                      "value": "= d",
                                      "children": []
                                    },
                                    {
                                      "value": "emo",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "egister(self, objectId=self.service_name)",
                                  "children": [
                                    {
                                      "value": "egister(self, o",
                                      "children": [
                                        {
                                          "value": "egiste",
                                          "children": []
                                        },
                                        {
                                          "value": "(self, o",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "bjectId=self.service_name)",
                                      "children": [
                                        {
                                          "value": "ject",
                                          "children": []
                                        },
                                        {
                                          "value": "=self.service_name)",
                                          "children": [
                                            {
                                              "value": "=self.se",
                                              "children": []
                                            },
                                            {
                                              "value": "vice_name)",
                                              "children": [
                                                {
                                                  "value": "vice",
                                                  "children": []
                                                },
                                                {
                                                  "value": "name)",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "nfo(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")",
                          "children": [
                            {
                              "value": "nfo(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")",
                              "children": [
                                {
                                  "value": "nfo(f\"[{sel",
                                  "children": [
                                    {
                                      "value": "nfo(f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "{sel",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "f.service_name}] Connected to Pyro; URI = {self.uri}\")",
                                  "children": [
                                    {
                                      "value": ".service_name}] Connected to Pyro; URI = {self.uri}\")",
                                      "children": [
                                        {
                                          "value": ".s",
                                          "children": []
                                        },
                                        {
                                          "value": "e",
                                          "children": []
                                        },
                                        {
                                          "value": "rvice_name}] Connec",
                                          "children": [
                                            {
                                              "value": "vice_name}] Conne",
                                              "children": [
                                                {
                                                  "value": "vice",
                                                  "children": []
                                                },
                                                {
                                                  "value": "name}] Conne",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ted to Pyro; URI = {self.ur",
                                          "children": []
                                        },
                                        {
                                          "value": "i}\")",
                                          "children": [
                                            {
                                              "value": "}\")",
                                              "children": [
                                                {
                                                  "value": "}\")",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "equestLoop()\n\n    de",
                          "children": [
                            {
                              "value": "equestLoop()\n\n    de",
                              "children": [
                                {
                                  "value": "equestLoop()",
                                  "children": [
                                    {
                                      "value": "equest",
                                      "children": []
                                    },
                                    {
                                      "value": "oop()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "de",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "art_async_loop(self):\n        self.shared_event_loop.run_forever()\n\n\n# ---",
              "children": [
                {
                  "value": "async_loop(self):",
                  "children": []
                },
                {
                  "value": "",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "red_event_loop.run_forever()\n\n\n# ---",
                  "children": [
                    {
                      "value": "red_event_loop.run_forever()\n\n\n# ---",
                      "children": [
                        {
                          "value": "red_event_loop.run_forever()\n\n\n# ---",
                          "children": [
                            {
                              "value": "red_event_loop.run_forever()\n\n\n# -",
                              "children": [
                                {
                                  "value": "red_event_loop.run_for",
                                  "children": [
                                    {
                                      "value": "red_",
                                      "children": []
                                    },
                                    {
                                      "value": "vent_loop.run_for",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ver()\n\n\n# -",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "--",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "--- UTILITIES --------- #\n\n\nAS =",
      "children": []
    },
    {
      "value": "eVar(\"AS\", bound=AppService)\n\n\nclass",
      "children": [
        {
          "value": "eVar(\"AS\", bound=AppService)\n\n\nclass",
          "children": [
            {
              "value": "eV",
              "children": []
            },
            {
              "value": "\"AS\", bound=AppService)\n\n\nclass",
              "children": [
                {
                  "value": "\"AS\", b",
                  "children": []
                },
                {
                  "value": "ound=AppService)\n\n\nclass",
                  "children": [
                    {
                      "value": "und=",
                      "children": [
                        {
                          "value": "u",
                          "children": []
                        },
                        {
                          "value": "nd",
                          "children": []
                        },
                        {
                          "value": "=",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "pService)\n\n\nclas",
                      "children": [
                        {
                          "value": "pServ",
                          "children": []
                        },
                        {
                          "value": "ce)\n\n\nclas",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "roClient:\n    proxy: Pyro5.api.Proxy\n\n\ndef c",
      "children": [
        {
          "value": "nt:\n    pr",
          "children": []
        },
        {
          "value": "yro5.api.Proxy\n\n\ndef c",
          "children": [
            {
              "value": "yro5.api.Proxy\n\n\ndef c",
              "children": [
                {
                  "value": "yro5.api.Proxy\n\n\ndef c",
                  "children": [
                    {
                      "value": "yro5.",
                      "children": []
                    },
                    {
                      "value": "i.Proxy\n\n\ndef c",
                      "children": [
                        {
                          "value": "i.Proxy\n\n\ndef c",
                          "children": [
                            {
                              "value": "i.Proxy",
                              "children": [
                                {
                                  "value": "i.Pro",
                                  "children": []
                                },
                                {
                                  "value": "y",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "def c",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "e_service_client(client: AppService) -> None:\n    if isinstance(client, PyroClient):\n        client.proxy._pyroRelease()\n    else:\n        raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")\n\n\ndef g",
      "children": [
        {
          "value": "rvice_client(client:",
          "children": []
        },
        {
          "value": "AppService) -> None",
          "children": [
            {
              "value": "AppService) -> Non",
              "children": [
                {
                  "value": "AppSer",
                  "children": []
                },
                {
                  "value": "ce) -> Non",
                  "children": [
                    {
                      "value": "ce) -> Non",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "if",
          "children": [
            {
              "value": "if",
              "children": []
            }
          ]
        },
        {
          "value": "tance(client, PyroClient):\n        client.proxy._pyroRelease()\n    else:\n        raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")\n\n\ndef g",
          "children": [
            {
              "value": "tance(client, PyroClient):\n        client.proxy._pyroRelease()\n    else:\n        raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")\n\n\ndef g",
              "children": [
                {
                  "value": "ce(client, PyroClient):",
                  "children": [
                    {
                      "value": "ce(client,",
                      "children": []
                    },
                    {
                      "value": "PyroClient):",
                      "children": [
                        {
                          "value": "PyroCl",
                          "children": []
                        },
                        {
                          "value": "nt):",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "roxy._pyroRelease()\n    els",
                  "children": [
                    {
                      "value": "roxy._pyroRelease()\n    els",
                      "children": [
                        {
                          "value": "roxy._pyroRelease()\n    els",
                          "children": [
                            {
                              "value": "roxy._pyroRelease()\n    e",
                              "children": [
                                {
                                  "value": "roxy._pyroRe",
                                  "children": [
                                    {
                                      "value": "roxy._",
                                      "children": []
                                    },
                                    {
                                      "value": "yroRe",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ease()\n    e",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "ls",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")\n\n\ndef g",
                  "children": [
                    {
                      "value": "ntimeError(f\"Client {client.__class__} is not a Pyro client.\")\n\n\ndef g",
                      "children": [
                        {
                          "value": "ntimeError(f\"Client {client.__class__} is not a Pyro client.\")\n\n\ndef g",
                          "children": [
                            {
                              "value": "rror(f\"Client {client.__class__} is not a Pyro client.\")\n\n\ndef g",
                              "children": [
                                {
                                  "value": "rror(f\"Clien",
                                  "children": []
                                },
                                {
                                  "value": "t {client.__class__} is not a Pyro client.\")\n\n\ndef g",
                                  "children": [
                                    {
                                      "value": "{client.__class__} is not a Pyro client.\")\n\n\ndef",
                                      "children": [
                                        {
                                          "value": "{",
                                          "children": []
                                        },
                                        {
                                          "value": "client.",
                                          "children": []
                                        },
                                        {
                                          "value": "__class__} is not",
                                          "children": [
                                            {
                                              "value": "_class__} is not",
                                              "children": [
                                                {
                                                  "value": "_class",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_} is not",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "a Pyro client.\")\n\n\ndef",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "service_client(service_type: Type[AS]) -> AS:\n    service_name = service_type.service_name\n\n    class DynamicClient(PyroClient):\n        @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")\n\n        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res\n\n    return cast(AS, DynamicClient())\n\n\nbuilt",
      "children": [
        {
          "value": "ice_client(service",
          "children": []
        },
        {
          "value": "_type: Type[AS]) -> AS:",
          "children": [
            {
              "value": "type: Type[AS]) -> AS:",
              "children": [
                {
                  "value": "type: Type[A",
                  "children": []
                },
                {
                  "value": ") -> AS:",
                  "children": [
                    {
                      "value": ") -> AS:",
                      "children": [
                        {
                          "value": ") ->",
                          "children": []
                        },
                        {
                          "value": "AS:",
                          "children": [
                            {
                              "value": "AS",
                              "children": [
                                {
                                  "value": "AS",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "se",
          "children": [
            {
              "value": "se",
              "children": []
            }
          ]
        },
        {
          "value": "name = service_type.service_name\n\n    class DynamicClient(PyroClient):\n        @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")\n\n        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res\n\n    return cast(AS, DynamicClient())\n\n\nbuilt",
          "children": [
            {
              "value": "name = service_type.service_name\n\n    cl",
              "children": [
                {
                  "value": "name = service_type.service_name\n\n    cl",
                  "children": [
                    {
                      "value": "name = servi",
                      "children": []
                    },
                    {
                      "value": "type.service_name\n\n    cl",
                      "children": [
                        {
                          "value": "type.service",
                          "children": []
                        },
                        {
                          "value": "name\n\n    cl",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "namicClient(PyroClient):\n        @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")\n\n        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res\n\n    re",
              "children": [
                {
                  "value": "lient(PyroCli",
                  "children": []
                },
                {
                  "value": "ent):",
                  "children": [
                    {
                      "value": "nt):",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "try(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")\n\n        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res\n\n    re",
                  "children": [
                    {
                      "value": "try(\"Pyro\", f\"Connecting to [{service_name}]\")\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")",
                      "children": [
                        {
                          "value": "try(\"Pyro\", f\"Connecting to [{service_name}]\")",
                          "children": [
                            {
                              "value": "ry(\"Pyro\", f\"Connecting to [{service_name}]\")",
                              "children": [
                                {
                                  "value": "ry(\"Pyro\",",
                                  "children": []
                                },
                                {
                                  "value": "f\"Connecting to [{service_name}]\")",
                                  "children": [
                                    {
                                      "value": "f\"Conn",
                                      "children": [
                                        {
                                          "value": "f",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Con",
                                          "children": []
                                        },
                                        {
                                          "value": "n",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ting to [{service_name}]\")",
                                      "children": [
                                        {
                                          "value": "ti",
                                          "children": []
                                        },
                                        {
                                          "value": "ng to [{service",
                                          "children": []
                                        },
                                        {
                                          "value": "_name}]\")",
                                          "children": [
                                            {
                                              "value": "name}]\")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "it__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")",
                          "children": [
                            {
                              "value": "(self):",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "s.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")",
                              "children": [
                                {
                                  "value": "s.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)",
                                  "children": [
                                    {
                                      "value": "s.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)",
                                      "children": [
                                        {
                                          "value": "s.en",
                                          "children": []
                                        },
                                        {
                                          "value": "on.get(f\"{service_name.upper()}_HOST\", pyro_host)",
                                          "children": [
                                            {
                                              "value": "on.get(f\"{serv",
                                              "children": [
                                                {
                                                  "value": "on.get(f\"{",
                                                  "children": [
                                                    {
                                                      "value": "on",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "get(f\"{",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "erv",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ice_name.upper()}_HOST\", pyro_host)",
                                              "children": [
                                                {
                                                  "value": "ce_name.upper()}_HOST\", pyro_h",
                                                  "children": [
                                                    {
                                                      "value": "ce",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "_name.upper()}_HOST\",",
                                                      "children": [
                                                        {
                                                          "value": "name.upper()}_HOST\",",
                                                          "children": [
                                                            {
                                                              "value": "name.upper()}_HOST",
                                                              "children": [
                                                                {
                                                                  "value": "name.upper()",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "_HOST",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\",",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "pyro_",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "h",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "t)",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"",
                                  "children": [
                                    {
                                      "value": "PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"",
                                      "children": [
                                        {
                                          "value": "PYR",
                                          "children": []
                                        },
                                        {
                                          "value": "service_type.service_name}@{host}:{service_type.get_port()}\"",
                                          "children": [
                                            {
                                              "value": "se",
                                              "children": []
                                            },
                                            {
                                              "value": "rvice",
                                              "children": []
                                            },
                                            {
                                              "value": "_type.service_name}@{host}:",
                                              "children": [
                                                {
                                                  "value": "type.service_name}@{host}",
                                                  "children": [
                                                    {
                                                      "value": "type.service",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "name}@{host}",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{",
                                              "children": []
                                            },
                                            {
                                              "value": "servic",
                                              "children": [
                                                {
                                                  "value": "ervi",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "e",
                                              "children": []
                                            },
                                            {
                                              "value": "_type.get_port()}\"",
                                              "children": [
                                                {
                                                  "value": "type.get_port()}\"",
                                                  "children": [
                                                    {
                                                      "value": "type.get_port()}\"",
                                                      "children": [
                                                        {
                                                          "value": "type.get_por",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "()}\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "ebug(f\"Connecting to service [{service_name}]. URI = {uri}\")",
                                  "children": [
                                    {
                                      "value": "ebug(f\"Connecting to service [{service_name}]. URI = {uri}\")",
                                      "children": [
                                        {
                                          "value": "ebug(f\"Conne",
                                          "children": [
                                            {
                                              "value": "ebug(f",
                                              "children": []
                                            },
                                            {
                                              "value": "Conne",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "cting to service [{service_name}]. URI = {uri}\")",
                                          "children": [
                                            {
                                              "value": "ting to service [{service_name}]. URI = {uri}\")",
                                              "children": [
                                                {
                                                  "value": "ti",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ng to service [{service",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_name}]. URI =",
                                                  "children": [
                                                    {
                                                      "value": "name}]. URI",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "{uri}\")",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "xy = Pyro5.api.Proxy(uri)",
                                  "children": [
                                    {
                                      "value": "xy = Pyro5.api.Proxy(uri)",
                                      "children": [
                                        {
                                          "value": "xy = Pyro5",
                                          "children": [
                                            {
                                              "value": "xy =",
                                              "children": []
                                            },
                                            {
                                              "value": "Pyro5",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "i.Proxy(uri)",
                                          "children": [
                                            {
                                              "value": "i.Proxy(uri)",
                                              "children": [
                                                {
                                                  "value": "i.Proxy(u",
                                                  "children": [
                                                    {
                                                      "value": "i.Pro",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "y(u",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "i)",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "t to bind to ensure the connection is established",
                                  "children": []
                                },
                                {
                                  "value": "xy._pyroBind()",
                                  "children": [
                                    {
                                      "value": "xy._pyroBind()",
                                      "children": [
                                        {
                                          "value": "xy._pyroBind()",
                                          "children": [
                                            {
                                              "value": "xy._pyroBi",
                                              "children": [
                                                {
                                                  "value": "xy._",
                                                  "children": []
                                                },
                                                {
                                                  "value": "yroBi",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "d()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "ebug(f\"Successfully connected to service [{service_name}]\")",
                                  "children": [
                                    {
                                      "value": "ebug(f\"Successfully connected to service [{service_name}]\")",
                                      "children": [
                                        {
                                          "value": "ebug(f\"Succe",
                                          "children": [
                                            {
                                              "value": "ebug(f",
                                              "children": []
                                            },
                                            {
                                              "value": "Succe",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ssfully connected to service [{service_name}]\")",
                                          "children": [
                                            {
                                              "value": "sfully connected to service [{service_name}]\")",
                                              "children": [
                                                {
                                                  "value": "sf",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ully connected to service [{service",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_name}]\")",
                                                  "children": [
                                                    {
                                                      "value": "name}]\")",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "tattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res\n\n    re",
                      "children": [
                        {
                          "value": "r__(self, n",
                          "children": []
                        },
                        {
                          "value": "ame: str) -> Call",
                          "children": [
                            {
                              "value": "me:",
                              "children": []
                            },
                            {
                              "value": "r) -> Cal",
                              "children": [
                                {
                                  "value": "r) -",
                                  "children": []
                                },
                                {
                                  "value": "Cal",
                                  "children": [
                                    {
                                      "value": "Cal",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "[..., Any]:",
                          "children": [
                            {
                              "value": "[..., Any]:",
                              "children": [
                                {
                                  "value": "[..., An",
                                  "children": []
                                },
                                {
                                  "value": "y]:",
                                  "children": [
                                    {
                                      "value": "]:",
                                      "children": [
                                        {
                                          "value": "]:",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "tattr(self.proxy, name)\n            return res\n\n    re",
                          "children": [
                            {
                              "value": "tattr(self.proxy, name)",
                              "children": [
                                {
                                  "value": "tattr(self.proxy, name)",
                                  "children": [
                                    {
                                      "value": "tat",
                                      "children": []
                                    },
                                    {
                                      "value": "self.proxy, name)",
                                      "children": [
                                        {
                                          "value": "self.pr",
                                          "children": []
                                        },
                                        {
                                          "value": "oxy, name)",
                                          "children": [
                                            {
                                              "value": "xy, name)",
                                              "children": [
                                                {
                                                  "value": "xy,",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ame)",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "es\n\n    re",
                              "children": [
                                {
                                  "value": "re",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ast(AS, DynamicClient())\n\n\nbuilt",
              "children": [
                {
                  "value": "DynamicClient())\n\n\nbuilt",
                  "children": [
                    {
                      "value": "Dyn",
                      "children": []
                    },
                    {
                      "value": "amicClient())\n\n\nbuilt",
                      "children": [
                        {
                          "value": "mi",
                          "children": []
                        },
                        {
                          "value": "lient())\n\n\nbuil",
                          "children": [
                            {
                              "value": "lient())\n\n\nbu",
                              "children": []
                            },
                            {
                              "value": "il",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "types = [*vars(builtins).values(), NoneType, Enum]\n\n\ndef _",
      "children": [
        {
          "value": "types = [*vars(builtins).values(), NoneType, Enum]\n\n\ndef _",
          "children": [
            {
              "value": "types = [*var",
              "children": []
            },
            {
              "value": "uiltins).values(), NoneType, Enum]\n\n\ndef _",
              "children": [
                {
                  "value": "iltins).values(), NoneTy",
                  "children": [
                    {
                      "value": "ltins).values(), NoneTy",
                      "children": [
                        {
                          "value": "ltins).values(), None",
                          "children": [
                            {
                              "value": "ltins).values(",
                              "children": [
                                {
                                  "value": "ltin",
                                  "children": []
                                },
                                {
                                  "value": "s).values(",
                                  "children": [
                                    {
                                      "value": ").values",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": ", None",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "Ty",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": ", Enum]",
                  "children": []
                },
                {
                  "value": "def",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "antic_models_from_type_annotation(annotation) -> Iterator[type[BaseModel]]:\n    # Peel Annotated parameters\n    if (origin := get_origin(annotation)) and origin is Annotated:\n        annotation = get_args(annotation)[0]\n\n    origin = get_origin(annotation)\n    args = get_args(annotation)\n\n    if origin in (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):\n        for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)\n    elif origin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)\n    elif origin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)\n    else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
      "children": [
        {
          "value": "c_models_from_type_annotation(annotat",
          "children": []
        },
        {
          "value": "ion) -> Iter",
          "children": [
            {
              "value": "on) -> Ite",
              "children": []
            }
          ]
        },
        {
          "value": "[type[BaseModel]]:\n    #",
          "children": [
            {
              "value": "[type[BaseModel]]:\n    #",
              "children": [
                {
                  "value": "[type[Ba",
                  "children": []
                },
                {
                  "value": "seModel]]:\n    #",
                  "children": [
                    {
                      "value": "eModel]]:\n    #",
                      "children": [
                        {
                          "value": "eModel]]:\n    #",
                          "children": [
                            {
                              "value": "eMod",
                              "children": []
                            },
                            {
                              "value": "el]]:\n    #",
                              "children": [
                                {
                                  "value": "l]]:",
                                  "children": [
                                    {
                                      "value": "l]]:",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "nnotated parameters\n    if",
          "children": []
        },
        {
          "value": "in := get_origin(annotation)) and origin is Annotated:\n        annotation = get_args(annotation)[0]\n\n    origin = get_origin(annotation)\n    args = get_args(annotation)\n\n    if origin in (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):\n        for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)\n    elif origin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)\n    elif origin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)\n    else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
          "children": [
            {
              "value": "in := get_origin(annotation)) and origin is Annotated:\n        annotation = get_args(annotation)[0]\n\n    or",
              "children": [
                {
                  "value": ":= get_origin(annotation)) and origin is Annotated:",
                  "children": [
                    {
                      "value": ":= get_origin(annotation)) and ori",
                      "children": [
                        {
                          "value": "= get_origin(annotation)) and or",
                          "children": [
                            {
                              "value": "= get_",
                              "children": []
                            },
                            {
                              "value": "in(annotation)) and or",
                              "children": [
                                {
                                  "value": "in(annotat",
                                  "children": []
                                },
                                {
                                  "value": "ion)) and or",
                                  "children": [
                                    {
                                      "value": "on)) and o",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "s Annotated:",
                      "children": [
                        {
                          "value": "s Anno",
                          "children": []
                        },
                        {
                          "value": "d:",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "on = get_args(annotation)[0]\n\n    or",
                  "children": [
                    {
                      "value": "on = get_args(annotation)[0]\n\n    or",
                      "children": [
                        {
                          "value": "on = get_args(annotation)[0]\n\n    or",
                          "children": [
                            {
                              "value": "on = get_a",
                              "children": []
                            },
                            {
                              "value": "(annotation)[0]\n\n    or",
                              "children": [
                                {
                                  "value": "(annotation)[0]",
                                  "children": [
                                    {
                                      "value": "(annotat",
                                      "children": []
                                    },
                                    {
                                      "value": "ion)[0]",
                                      "children": [
                                        {
                                          "value": "on)[0]",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "o",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "get_origin(annotation)\n    arg",
              "children": [
                {
                  "value": "get_origin(annotation)\n    arg",
                  "children": [
                    {
                      "value": "get_o",
                      "children": []
                    },
                    {
                      "value": "in(annotation)\n    arg",
                      "children": [
                        {
                          "value": "in(annotat",
                          "children": []
                        },
                        {
                          "value": "ion)\n    arg",
                          "children": [
                            {
                              "value": "on)\n    ar",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "et_args(annotation)\n\n    if",
              "children": [
                {
                  "value": "et_args(annotation)\n\n    if",
                  "children": [
                    {
                      "value": "et_a",
                      "children": []
                    },
                    {
                      "value": "(annotation)\n\n    if",
                      "children": [
                        {
                          "value": "(annotat",
                          "children": []
                        },
                        {
                          "value": "ion)\n\n    if",
                          "children": [
                            {
                              "value": "on)\n\n    i",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "n in (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):\n        for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)\n    elif origin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)\n    elif origin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)\n    else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
              "children": [
                {
                  "value": "n (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):",
                  "children": [
                    {
                      "value": "n (",
                      "children": []
                    },
                    {
                      "value": "Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):",
                      "children": [
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "e,",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "t,",
                          "children": []
                        },
                        {
                          "value": "t,\n    ):",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "in args:\n            yield from _pydantic_models_from_type_annotation(arg)\n    eli",
                  "children": [
                    {
                      "value": "in args:\n            yield from _pydantic_models_from_type_annotation(arg)\n    eli",
                      "children": [
                        {
                          "value": "rgs",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "om _pydantic_models_from_type_annotation(arg)\n    eli",
                          "children": [
                            {
                              "value": "om _pydantic_models_from_type_annotation(arg)\n    eli",
                              "children": [
                                {
                                  "value": "om _pydantic_models_from_type_annotation(arg)\n    eli",
                                  "children": [
                                    {
                                      "value": "c_models_from_type_annotation(arg)\n    eli",
                                      "children": [
                                        {
                                          "value": "c_models_from_type_annotation(arg)",
                                          "children": []
                                        },
                                        {
                                          "value": "eli",
                                          "children": [
                                            {
                                              "value": "el",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "gin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)\n    eli",
                  "children": [
                    {
                      "value": "n (dict, Dict):",
                      "children": [
                        {
                          "value": "n (dic",
                          "children": []
                        },
                        {
                          "value": "ict):",
                          "children": [
                            {
                              "value": "ct):",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": ", value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)\n    eli",
                      "children": [
                        {
                          "value": ", value_type = args",
                          "children": [
                            {
                              "value": ", value_type = args",
                              "children": [
                                {
                                  "value": ", value_type = args",
                                  "children": [
                                    {
                                      "value": ", value_",
                                      "children": []
                                    },
                                    {
                                      "value": "pe = args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "om _pydantic_models_from_type_annotation(key_type)",
                          "children": [
                            {
                              "value": "om _pydantic_models_from_type_annotation(key_type)",
                              "children": [
                                {
                                  "value": "c_models_from_type_annotation(key_type)",
                                  "children": [
                                    {
                                      "value": "c_models_from_type_annotation(key_typ",
                                      "children": []
                                    },
                                    {
                                      "value": "e)",
                                      "children": [
                                        {
                                          "value": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "om _pydantic_models_from_type_annotation(value_type)\n    eli",
                          "children": [
                            {
                              "value": "om _pydantic_models_from_type_annotation(value_type)\n    eli",
                              "children": [
                                {
                                  "value": "c_models_from_type_annotation(value_type)\n    eli",
                                  "children": [
                                    {
                                      "value": "c_models_from_type_annotation(value_t",
                                      "children": []
                                    },
                                    {
                                      "value": "ype)\n    eli",
                                      "children": [
                                        {
                                          "value": "pe)\n    el",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "gin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)\n    els",
                  "children": [
                    {
                      "value": "n (Awaitable, Coroutine):",
                      "children": [
                        {
                          "value": "n (Awa",
                          "children": []
                        },
                        {
                          "value": "le, Coroutine):",
                          "children": [
                            {
                              "value": "e, Corout",
                              "children": []
                            },
                            {
                              "value": "e):",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "routines and awaitables, check the return type",
                      "children": []
                    },
                    {
                      "value": "ype = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)\n    els",
                      "children": [
                        {
                          "value": "ype = args[-1]",
                          "children": [
                            {
                              "value": "ype = args[-1]",
                              "children": [
                                {
                                  "value": "ype = args[",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "om _pydantic_models_from_type_annotation(return_type)\n    els",
                          "children": [
                            {
                              "value": "om _pydantic_models_from_type_annotation(return_type)\n    els",
                              "children": [
                                {
                                  "value": "c_models_from_type_annotation(return_type)\n    els",
                                  "children": [
                                    {
                                      "value": "c_models_from_type_annotation(return_",
                                      "children": []
                                    },
                                    {
                                      "value": "type)\n    els",
                                      "children": [
                                        {
                                          "value": "ype)\n    el",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                  "children": [
                    {
                      "value": "= annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                      "children": [
                        {
                          "value": "= annotation if origin is None else origin",
                          "children": [
                            {
                              "value": "= annotation if origin is None else origin",
                              "children": [
                                {
                                  "value": "= annot",
                                  "children": []
                                },
                                {
                                  "value": "on if origin is None else origin",
                                  "children": [
                                    {
                                      "value": "on if orig",
                                      "children": []
                                    },
                                    {
                                      "value": "s None else or",
                                      "children": [
                                        {
                                          "value": "s None",
                                          "children": []
                                        },
                                        {
                                          "value": "e or",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "e generic types and aliases",
                          "children": []
                        },
                        {
                          "value": "annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n            if issubclass(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                          "children": [
                            {
                              "value": "annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):",
                              "children": [
                                {
                                  "value": "is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)",
                                  "children": [
                                    {
                                      "value": "is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))",
                                      "children": [
                                        {
                                          "value": "is not None",
                                          "children": [
                                            {
                                              "value": "is not",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ttr(typing, getattr(annotype, \"__name__\", \"\"))",
                                          "children": [
                                            {
                                              "value": "typing, getattr(annotype, \"__name__\", \"\"))",
                                              "children": [
                                                {
                                                  "value": "typing,",
                                                  "children": []
                                                },
                                                {
                                                  "value": "getattr(annotype, \"__name__\", \"\"))",
                                                  "children": [
                                                    {
                                                      "value": "getatt",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "annotype, \"__name__\", \"\"))",
                                                      "children": [
                                                        {
                                                          "value": "annotyp",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "e, \"__name__\", \"\"))",
                                                          "children": [
                                                            {
                                                              "value": ", \"__nam",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "_\", \"\"))",
                                                              "children": [
                                                                {
                                                                  "value": "_",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\", \"\"))",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": [
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ce(annotype, type)",
                                      "children": [
                                        {
                                          "value": "ce(annotyp",
                                          "children": []
                                        },
                                        {
                                          "value": "e, type)",
                                          "children": [
                                            {
                                              "value": ", type)",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "class(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                              "children": [
                                {
                                  "value": "class(annotype, BaseModel):\n                yield annotype\n            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                                  "children": [
                                    {
                                      "value": "ss(annotype, BaseModel):",
                                      "children": [
                                        {
                                          "value": "ss(annotyp",
                                          "children": []
                                        },
                                        {
                                          "value": "e, BaseModel):",
                                          "children": [
                                            {
                                              "value": ", BaseMo",
                                              "children": []
                                            },
                                            {
                                              "value": "l):",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "notype",
                                      "children": [
                                        {
                                          "value": "notype",
                                          "children": [
                                            {
                                              "value": "notype",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "otype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")",
                                      "children": [
                                        {
                                          "value": "not in builtin_types and not issubclass(annotype, Enum):",
                                          "children": [
                                            {
                                              "value": "not in builtin_types and not",
                                              "children": [
                                                {
                                                  "value": "not in",
                                                  "children": []
                                                },
                                                {
                                                  "value": "types and not",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "bclass(annotype, Enum):",
                                              "children": [
                                                {
                                                  "value": "ss(annotype, Enum):",
                                                  "children": [
                                                    {
                                                      "value": "ss(annotyp",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "e, Enum):",
                                                      "children": [
                                                        {
                                                          "value": ", Enum):",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "peError(f\"Unsupported type encountered: {annotype}\")",
                                          "children": [
                                            {
                                              "value": "peError(f\"Unsupported type encountered: {annotype}\")",
                                              "children": [
                                                {
                                                  "value": "r(f\"Unsupported type encountered: {annotype}\")",
                                                  "children": [
                                                    {
                                                      "value": "r(f\"Unsup",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ported type encountered: {annotype}\")",
                                                      "children": [
                                                        {
                                                          "value": "orted type encountered: {annotype}\")",
                                                          "children": [
                                                            {
                                                              "value": "or",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "ted type encountered: {annotyp",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "e}\")",
                                                              "children": [
                                                                {
                                                                  "value": "}\")",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}