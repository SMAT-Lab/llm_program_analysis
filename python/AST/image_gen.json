{
  "value": "import io\nimport logging\nfrom enum import Enum\n\nimport replicate\nimport replicate.exceptions\nimport requests\nfrom replicate.helpers import FileOutput\n\nfrom backend.data.graph import Graph\nfrom backend.util.settings import Settings\n\nlogger = logging.getLogger(__name__)\n\n\nclass ImageSize(str, Enum):\n    LANDSCAPE = \"1024x768\"\n\n\nclass ImageStyle(str, Enum):\n    DIGITAL_ART = \"digital art\"\n\n\nasync def generate_agent_image(agent: Graph) -> io.BytesIO:\n    \"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\n    try:\n        settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)\n\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e\n\n    except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
  "children": [
    {
      "value": "import io",
      "children": [
        {
          "value": "io",
          "children": [
            {
              "value": "io",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from enum import Enum",
      "children": [
        {
          "value": "enum",
          "children": [
            {
              "value": "enum",
              "children": []
            }
          ]
        },
        {
          "value": "Enum",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import replicate",
      "children": [
        {
          "value": "replicate",
          "children": [
            {
              "value": "replicate",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import replicate.exceptions",
      "children": [
        {
          "value": "replicate.exceptions",
          "children": [
            {
              "value": "replicate",
              "children": []
            },
            {
              "value": "exceptions",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import requests",
      "children": [
        {
          "value": "requests",
          "children": [
            {
              "value": "requests",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from replicate.helpers import FileOutput",
      "children": [
        {
          "value": "replicate.helpers",
          "children": [
            {
              "value": "replicate",
              "children": []
            },
            {
              "value": "helpers",
              "children": []
            }
          ]
        },
        {
          "value": "FileOutput",
          "children": [
            {
              "value": "FileOutput",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.graph import Graph",
      "children": [
        {
          "value": "backend.data.graph",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "graph",
              "children": []
            }
          ]
        },
        {
          "value": "Graph",
          "children": [
            {
              "value": "Graph",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Settings",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Settings",
          "children": [
            {
              "value": "Settings",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class ImageSize(str, Enum):\n    LANDSCAPE = \"1024x768\"",
      "children": [
        {
          "value": "ImageSize",
          "children": []
        },
        {
          "value": "(str, Enum)",
          "children": [
            {
              "value": "str",
              "children": []
            },
            {
              "value": "Enum",
              "children": []
            }
          ]
        },
        {
          "value": "LANDSCAPE = \"1024x768\"",
          "children": [
            {
              "value": "LANDSCAPE = \"1024x768\"",
              "children": [
                {
                  "value": "LANDSCAPE = \"1024x768\"",
                  "children": [
                    {
                      "value": "LANDSCAPE",
                      "children": []
                    },
                    {
                      "value": "\"1024x768\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "1024x768",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class ImageStyle(str, Enum):\n    DIGITAL_ART = \"digital art\"",
      "children": [
        {
          "value": "ImageStyle",
          "children": []
        },
        {
          "value": "(str, Enum)",
          "children": [
            {
              "value": "str",
              "children": []
            },
            {
              "value": "Enum",
              "children": []
            }
          ]
        },
        {
          "value": "DIGITAL_ART = \"digital art\"",
          "children": [
            {
              "value": "DIGITAL_ART = \"digital art\"",
              "children": [
                {
                  "value": "DIGITAL_ART = \"digital art\"",
                  "children": [
                    {
                      "value": "DIGITAL_ART",
                      "children": []
                    },
                    {
                      "value": "\"digital art\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "digital art",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def generate_agent_image(agent: Graph) -> io.BytesIO:\n    \"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\n    try:\n        settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)\n\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e\n\n    except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
      "children": [
        {
          "value": "generate_agent_image",
          "children": []
        },
        {
          "value": "(agent: Graph)",
          "children": [
            {
              "value": "agent: Graph",
              "children": [
                {
                  "value": "agent",
                  "children": []
                },
                {
                  "value": "Graph",
                  "children": [
                    {
                      "value": "Graph",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "io.BytesIO",
          "children": [
            {
              "value": "io.BytesIO",
              "children": [
                {
                  "value": "io",
                  "children": []
                },
                {
                  "value": "BytesIO",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\n    try:\n        settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)\n\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e\n\n    except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)\n\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e\n\n    except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
              "children": [
                {
                  "value": "settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)\n\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e",
                  "children": [
                    {
                      "value": "settings = Settings()",
                      "children": [
                        {
                          "value": "settings = Settings()",
                          "children": [
                            {
                              "value": "settings",
                              "children": []
                            },
                            {
                              "value": "Settings()",
                              "children": [
                                {
                                  "value": "Settings",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")",
                      "children": [
                        {
                          "value": "not settings.secrets.replicate_api_key",
                          "children": [
                            {
                              "value": "settings.secrets.replicate_api_key",
                              "children": [
                                {
                                  "value": "settings.secrets",
                                  "children": [
                                    {
                                      "value": "settings",
                                      "children": []
                                    },
                                    {
                                      "value": "secrets",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "replicate_api_key",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(\"Missing Replicate API key in settings\")",
                          "children": [
                            {
                              "value": "raise ValueError(\"Missing Replicate API key in settings\")",
                              "children": [
                                {
                                  "value": "ValueError(\"Missing Replicate API key in settings\")",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\"Missing Replicate API key in settings\")",
                                      "children": [
                                        {
                                          "value": "\"Missing Replicate API key in settings\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Missing Replicate API key in settings",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Construct prompt from agent details",
                      "children": []
                    },
                    {
                      "value": "prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"",
                      "children": [
                        {
                          "value": "prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"",
                          "children": [
                            {
                              "value": "prompt",
                              "children": []
                            },
                            {
                              "value": "f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"",
                              "children": [
                                {
                                  "value": "f\"",
                                  "children": []
                                },
                                {
                                  "value": "Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**:",
                                  "children": [
                                    {
                                      "value": "\\n",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "{agent.name}",
                                  "children": [
                                    {
                                      "value": "agent.name",
                                      "children": [
                                        {
                                          "value": "agent",
                                          "children": []
                                        },
                                        {
                                          "value": "name",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\\n- **Description**:",
                                  "children": [
                                    {
                                      "value": "\\n",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "{agent.description}",
                                  "children": [
                                    {
                                      "value": "agent.description",
                                      "children": [
                                        {
                                          "value": "agent",
                                          "children": []
                                        },
                                        {
                                          "value": "description",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\\nFocus on showcasing its core functionality with an appealing design.",
                                  "children": [
                                    {
                                      "value": "\\n",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Set up Replicate client",
                      "children": []
                    },
                    {
                      "value": "client = replicate.Client(api_token=settings.secrets.replicate_api_key)",
                      "children": [
                        {
                          "value": "client = replicate.Client(api_token=settings.secrets.replicate_api_key)",
                          "children": [
                            {
                              "value": "client",
                              "children": []
                            },
                            {
                              "value": "replicate.Client(api_token=settings.secrets.replicate_api_key)",
                              "children": [
                                {
                                  "value": "replicate.Client",
                                  "children": [
                                    {
                                      "value": "replicate",
                                      "children": []
                                    },
                                    {
                                      "value": "Client",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(api_token=settings.secrets.replicate_api_key)",
                                  "children": [
                                    {
                                      "value": "api_token=settings.secrets.replicate_api_key",
                                      "children": [
                                        {
                                          "value": "api_token",
                                          "children": []
                                        },
                                        {
                                          "value": "settings.secrets.replicate_api_key",
                                          "children": [
                                            {
                                              "value": "settings.secrets",
                                              "children": [
                                                {
                                                  "value": "settings",
                                                  "children": []
                                                },
                                                {
                                                  "value": "secrets",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "replicate_api_key",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Model parameters",
                      "children": []
                    },
                    {
                      "value": "input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }",
                      "children": [
                        {
                          "value": "input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "{\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }",
                              "children": [
                                {
                                  "value": "\"prompt\": prompt",
                                  "children": [
                                    {
                                      "value": "\"prompt\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "prompt",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "prompt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"width\": 1024",
                                  "children": [
                                    {
                                      "value": "\"width\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "width",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "1024",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"height\": 768",
                                  "children": [
                                    {
                                      "value": "\"height\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "height",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "768",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"aspect_ratio\": \"4:3\"",
                                  "children": [
                                    {
                                      "value": "\"aspect_ratio\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "aspect_ratio",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"4:3\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "4:3",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"output_format\": \"jpg\"",
                                  "children": [
                                    {
                                      "value": "\"output_format\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "output_format",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"jpg\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "jpg",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"output_quality\": 90",
                                  "children": [
                                    {
                                      "value": "\"output_quality\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "output_quality",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "90",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"num_inference_steps\": 30",
                                  "children": [
                                    {
                                      "value": "\"num_inference_steps\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "num_inference_steps",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "30",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"guidance\": 3.5",
                                  "children": [
                                    {
                                      "value": "\"guidance\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "guidance",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "3.5",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"negative_prompt\": \"blurry, low quality, distorted, deformed\"",
                                  "children": [
                                    {
                                      "value": "\"negative_prompt\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "negative_prompt",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"blurry, low quality, distorted, deformed\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "blurry, low quality, distorted, deformed",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"disable_safety_checker\": True",
                                  "children": [
                                    {
                                      "value": "\"disable_safety_checker\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "disable_safety_checker",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "True",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)\n\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e",
                      "children": [
                        {
                          "value": "# Run model",
                          "children": []
                        },
                        {
                          "value": "output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)",
                          "children": [
                            {
                              "value": "output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)",
                              "children": [
                                {
                                  "value": "output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)",
                                  "children": [
                                    {
                                      "value": "output",
                                      "children": []
                                    },
                                    {
                                      "value": "client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)",
                                      "children": [
                                        {
                                          "value": "client.run",
                                          "children": [
                                            {
                                              "value": "client",
                                              "children": []
                                            },
                                            {
                                              "value": "run",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"black-forest-labs/flux-1.1-pro\", input=input_data)",
                                          "children": [
                                            {
                                              "value": "\"black-forest-labs/flux-1.1-pro\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "black-forest-labs/flux-1.1-pro",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "input=input_data",
                                              "children": [
                                                {
                                                  "value": "input",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# Depending on the model output, extract the image URL or bytes",
                              "children": []
                            },
                            {
                              "value": "# If the output is a list of FileOutput or URLs",
                              "children": []
                            },
                            {
                              "value": "if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")",
                              "children": [
                                {
                                  "value": "isinstance(output, list) and output",
                                  "children": [
                                    {
                                      "value": "isinstance(output, list)",
                                      "children": [
                                        {
                                          "value": "isinstance",
                                          "children": []
                                        },
                                        {
                                          "value": "(output, list)",
                                          "children": [
                                            {
                                              "value": "output",
                                              "children": []
                                            },
                                            {
                                              "value": "list",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "output",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content",
                                  "children": [
                                    {
                                      "value": "if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content",
                                      "children": [
                                        {
                                          "value": "isinstance(output[0], FileOutput)",
                                          "children": [
                                            {
                                              "value": "isinstance",
                                              "children": []
                                            },
                                            {
                                              "value": "(output[0], FileOutput)",
                                              "children": [
                                                {
                                                  "value": "output[0]",
                                                  "children": [
                                                    {
                                                      "value": "output",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "FileOutput",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "image_bytes = output[0].read()",
                                          "children": [
                                            {
                                              "value": "image_bytes = output[0].read()",
                                              "children": [
                                                {
                                                  "value": "image_bytes = output[0].read()",
                                                  "children": [
                                                    {
                                                      "value": "image_bytes",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "output[0].read()",
                                                      "children": [
                                                        {
                                                          "value": "output[0].read",
                                                          "children": [
                                                            {
                                                              "value": "output[0]",
                                                              "children": [
                                                                {
                                                                  "value": "output",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "0",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "read",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "()",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content",
                                          "children": [
                                            {
                                              "value": "# If it's a URL string, fetch the image bytes",
                                              "children": []
                                            },
                                            {
                                              "value": "result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content",
                                              "children": [
                                                {
                                                  "value": "result_url = output[0]",
                                                  "children": [
                                                    {
                                                      "value": "result_url = output[0]",
                                                      "children": [
                                                        {
                                                          "value": "result_url",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "output[0]",
                                                          "children": [
                                                            {
                                                              "value": "output",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "0",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "response = requests.get(result_url)",
                                                  "children": [
                                                    {
                                                      "value": "response = requests.get(result_url)",
                                                      "children": [
                                                        {
                                                          "value": "response",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "requests.get(result_url)",
                                                          "children": [
                                                            {
                                                              "value": "requests.get",
                                                              "children": [
                                                                {
                                                                  "value": "requests",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "get",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(result_url)",
                                                              "children": [
                                                                {
                                                                  "value": "result_url",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "response.raise_for_status()",
                                                  "children": [
                                                    {
                                                      "value": "response.raise_for_status()",
                                                      "children": [
                                                        {
                                                          "value": "response.raise_for_status",
                                                          "children": [
                                                            {
                                                              "value": "response",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "raise_for_status",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "()",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "image_bytes = response.content",
                                                  "children": [
                                                    {
                                                      "value": "image_bytes = response.content",
                                                      "children": [
                                                        {
                                                          "value": "image_bytes",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "response.content",
                                                          "children": [
                                                            {
                                                              "value": "response",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "content",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "elif isinstance(output, FileOutput):\n                image_bytes = output.read()",
                                  "children": [
                                    {
                                      "value": "isinstance(output, FileOutput)",
                                      "children": [
                                        {
                                          "value": "isinstance",
                                          "children": []
                                        },
                                        {
                                          "value": "(output, FileOutput)",
                                          "children": [
                                            {
                                              "value": "output",
                                              "children": []
                                            },
                                            {
                                              "value": "FileOutput",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "image_bytes = output.read()",
                                      "children": [
                                        {
                                          "value": "image_bytes = output.read()",
                                          "children": [
                                            {
                                              "value": "image_bytes = output.read()",
                                              "children": [
                                                {
                                                  "value": "image_bytes",
                                                  "children": []
                                                },
                                                {
                                                  "value": "output.read()",
                                                  "children": [
                                                    {
                                                      "value": "output.read",
                                                      "children": [
                                                        {
                                                          "value": "output",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "read",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content",
                                  "children": [
                                    {
                                      "value": "isinstance(output, str)",
                                      "children": [
                                        {
                                          "value": "isinstance",
                                          "children": []
                                        },
                                        {
                                          "value": "(output, str)",
                                          "children": [
                                            {
                                              "value": "output",
                                              "children": []
                                            },
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# Output is a URL",
                                      "children": []
                                    },
                                    {
                                      "value": "response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content",
                                      "children": [
                                        {
                                          "value": "response = requests.get(output)",
                                          "children": [
                                            {
                                              "value": "response = requests.get(output)",
                                              "children": [
                                                {
                                                  "value": "response",
                                                  "children": []
                                                },
                                                {
                                                  "value": "requests.get(output)",
                                                  "children": [
                                                    {
                                                      "value": "requests.get",
                                                      "children": [
                                                        {
                                                          "value": "requests",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "get",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(output)",
                                                      "children": [
                                                        {
                                                          "value": "output",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "response.raise_for_status()",
                                          "children": [
                                            {
                                              "value": "response.raise_for_status()",
                                              "children": [
                                                {
                                                  "value": "response.raise_for_status",
                                                  "children": [
                                                    {
                                                      "value": "response",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "raise_for_status",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "image_bytes = response.content",
                                          "children": [
                                            {
                                              "value": "image_bytes = response.content",
                                              "children": [
                                                {
                                                  "value": "image_bytes",
                                                  "children": []
                                                },
                                                {
                                                  "value": "response.content",
                                                  "children": [
                                                    {
                                                      "value": "response",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "content",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "else:\n                raise RuntimeError(\"Unexpected output format from the model.\")",
                                  "children": [
                                    {
                                      "value": "raise RuntimeError(\"Unexpected output format from the model.\")",
                                      "children": [
                                        {
                                          "value": "raise RuntimeError(\"Unexpected output format from the model.\")",
                                          "children": [
                                            {
                                              "value": "RuntimeError(\"Unexpected output format from the model.\")",
                                              "children": [
                                                {
                                                  "value": "RuntimeError",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\"Unexpected output format from the model.\")",
                                                  "children": [
                                                    {
                                                      "value": "\"Unexpected output format from the model.\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Unexpected output format from the model.",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "return io.BytesIO(image_bytes)",
                              "children": [
                                {
                                  "value": "io.BytesIO(image_bytes)",
                                  "children": [
                                    {
                                      "value": "io.BytesIO",
                                      "children": [
                                        {
                                          "value": "io",
                                          "children": []
                                        },
                                        {
                                          "value": "BytesIO",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(image_bytes)",
                                      "children": [
                                        {
                                          "value": "image_bytes",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e",
                          "children": [
                            {
                              "value": "replicate.exceptions.ReplicateError as e",
                              "children": [
                                {
                                  "value": "replicate.exceptions.ReplicateError",
                                  "children": [
                                    {
                                      "value": "replicate.exceptions",
                                      "children": [
                                        {
                                          "value": "replicate",
                                          "children": []
                                        },
                                        {
                                          "value": "exceptions",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ReplicateError",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e",
                              "children": [
                                {
                                  "value": "if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e",
                                  "children": [
                                    {
                                      "value": "e.status == 401",
                                      "children": [
                                        {
                                          "value": "e.status",
                                          "children": [
                                            {
                                              "value": "e",
                                              "children": []
                                            },
                                            {
                                              "value": "status",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "401",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "raise RuntimeError(\"Invalid Replicate API token\") from e",
                                      "children": [
                                        {
                                          "value": "raise RuntimeError(\"Invalid Replicate API token\") from e",
                                          "children": [
                                            {
                                              "value": "RuntimeError(\"Invalid Replicate API token\")",
                                              "children": [
                                                {
                                                  "value": "RuntimeError",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\"Invalid Replicate API token\")",
                                                  "children": [
                                                    {
                                                      "value": "\"Invalid Replicate API token\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Invalid Replicate API token",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "e",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise RuntimeError(f\"Replicate API error: {str(e)}\") from e",
                                  "children": [
                                    {
                                      "value": "RuntimeError(f\"Replicate API error: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "RuntimeError",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"Replicate API error: {str(e)}\")",
                                          "children": [
                                            {
                                              "value": "f\"Replicate API error: {str(e)}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Replicate API error:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{str(e)}",
                                                  "children": [
                                                    {
                                                      "value": "str(e)",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(e)",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
                      "children": [
                        {
                          "value": "logger.exception(\"Failed to generate agent image\")",
                          "children": [
                            {
                              "value": "logger.exception(\"Failed to generate agent image\")",
                              "children": [
                                {
                                  "value": "logger.exception",
                                  "children": [
                                    {
                                      "value": "logger",
                                      "children": []
                                    },
                                    {
                                      "value": "exception",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\"Failed to generate agent image\")",
                                  "children": [
                                    {
                                      "value": "\"Failed to generate agent image\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Failed to generate agent image",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise RuntimeError(f\"Image generation failed: {str(e)}\")",
                          "children": [
                            {
                              "value": "RuntimeError(f\"Image generation failed: {str(e)}\")",
                              "children": [
                                {
                                  "value": "RuntimeError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Image generation failed: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Image generation failed: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Image generation failed:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}