{
  "value": "import inspect\nfrom abc import ABC, abstractmethod\nfrom enum import Enum\nfrom typing import (\n    Any,\n    ClassVar,\n    Generator,\n    Generic,\n    Optional,\n    Type,\n    TypeVar,\n    cast,\n    get_origin,\n)\n\nimport jsonref\nimport jsonschema\nfrom prisma.models import AgentBlock\nfrom pydantic import BaseModel\n\nfrom backend.util import json\nfrom backend.util.settings import Config\n\nfrom .model import (\n    CREDENTIALS_FIELD_NAME,\n    ContributorDetails,\n    Credentials,\n    CredentialsMetaInput,\n)\n\napp_config = Config()\n\nBlockData = tuple[str, Any]  # Input & Output data should be a tuple of (name, data).\nBlockInput = dict[str, Any]  # Input: 1 input pin consumes 1 data.\nBlockOutput = Generator[BlockData, None, None]  # Output: 1 output pin produces n data.\nCompletedBlockOutput = dict[str, list[Any]]  # Completed stream, collected as a dict.\n\n\nclass BlockType(Enum):\n    STANDARD = \"Standard\"\n    INPUT = \"Input\"\n    OUTPUT = \"Output\"\n    NOTE = \"Note\"\n    WEBHOOK = \"Webhook\"\n    WEBHOOK_MANUAL = \"Webhook (manual)\"\n    AGENT = \"Agent\"\n\n\nclass BlockCategory(Enum):\n    AI = \"Block that leverages AI to perform a task.\"\n    SOCIAL = \"Block that interacts with social media platforms.\"\n    TEXT = \"Block that processes text data.\"\n    SEARCH = \"Block that searches or extracts information from the internet.\"\n    BASIC = \"Block that performs basic operations.\"\n    INPUT = \"Block that interacts with input of the graph.\"\n    OUTPUT = \"Block that interacts with output of the graph.\"\n    LOGIC = \"Programming logic to control the flow of your agent\"\n    COMMUNICATION = \"Block that interacts with communication platforms.\"\n    DEVELOPER_TOOLS = \"Developer tools such as GitHub blocks.\"\n    DATA = \"Block that interacts with structured data.\"\n    HARDWARE = \"Block that interacts with hardware.\"\n    AGENT = \"Block that interacts with other agents.\"\n    CRM = \"Block that interacts with CRM services.\"\n\n    def dict(self) -> dict[str, str]:\n        return {\"category\": self.name, \"description\": self.value}\n\n\nclass BlockSchema(BaseModel):\n    cached_jsonschema: ClassVar[dict[str, Any]]\n\n    @classmethod\n    def jsonschema(cls) -> dict[str, Any]:\n        if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n\n        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n\n        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n\n        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n\n        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n        return cls.cached_jsonschema\n\n    @classmethod\n    def validate_data(cls, data: BlockInput) -> str | None:\n        return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)\n\n    @classmethod\n    def validate_field(cls, field_name: str, data: BlockInput) -> str | None:\n        \"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n\n        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n\n        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)\n\n    @classmethod\n    def get_fields(cls) -> set[str]:\n        return set(cls.model_fields.keys())\n\n    @classmethod\n    def get_required_fields(cls) -> set[str]:\n        return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }\n\n    @classmethod\n    def __pydantic_init_subclass__(cls, **kwargs):\n        \"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n        super().__pydantic_init_subclass__(**kwargs)\n\n        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n\n        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)\n\n\nBlockSchemaInputType = TypeVar(\"BlockSchemaInputType\", bound=BlockSchema)\nBlockSchemaOutputType = TypeVar(\"BlockSchemaOutputType\", bound=BlockSchema)\n\n\nclass EmptySchema(BlockSchema):\n    pass\n\n\n# --8<-- [start:BlockWebhookConfig]\nclass BlockManualWebhookConfig(BaseModel):\n    \"\"\"\n    Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.\n    \"\"\"\n\n    provider: str\n    \"\"\"The service provider that the webhook connects to\"\"\"\n\n    webhook_type: str\n    \"\"\"\n    Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n\n    event_filter_input: str = \"\"\n    \"\"\"\n    Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.\n    \"\"\"\n\n    event_format: str = \"{event}\"\n    \"\"\"\n    Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`\n    \"\"\"\n\n\nclass BlockWebhookConfig(BlockManualWebhookConfig):\n    \"\"\"\n    Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.\n    \"\"\"\n\n    resource_format: str\n    \"\"\"\n    Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n    # --8<-- [end:BlockWebhookConfig]\n\n\nclass Block(ABC, Generic[BlockSchemaInputType, BlockSchemaOutputType]):\n    def __init__(\n        self,\n        id: str = \"\",\n        description: str = \"\",\n        contributors: list[ContributorDetails] = [],\n        categories: set[BlockCategory] | None = None,\n        input_schema: Type[BlockSchemaInputType] = EmptySchema,\n        output_schema: Type[BlockSchemaOutputType] = EmptySchema,\n        test_input: BlockInput | list[BlockInput] | None = None,\n        test_output: BlockData | list[BlockData] | None = None,\n        test_mock: dict[str, Any] | None = None,\n        test_credentials: Optional[Credentials] = None,\n        disabled: bool = False,\n        static_output: bool = False,\n        block_type: BlockType = BlockType.STANDARD,\n        webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None,\n    ):\n        \"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"\n        self.id = id\n        self.input_schema = input_schema\n        self.output_schema = output_schema\n        self.test_input = test_input\n        self.test_output = test_output\n        self.test_mock = test_mock\n        self.test_credentials = test_credentials\n        self.description = description\n        self.categories = categories or set()\n        self.contributors = contributors or set()\n        self.disabled = disabled\n        self.static_output = static_output\n        self.block_type = block_type\n        self.webhook_config = webhook_config\n        self.execution_stats = {}\n\n        if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True\n\n    @classmethod\n    def create(cls: Type[\"Block\"]) -> \"Block\":\n        return cls()\n\n    @abstractmethod\n    def run(self, input_data: BlockSchemaInputType, **kwargs) -> BlockOutput:\n        \"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass\n\n    def run_once(self, input_data: BlockSchemaInputType, output: str, **kwargs) -> Any:\n        for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data\n        raise ValueError(f\"{self.name} did not produce any output for {output}\")\n\n    def merge_stats(self, stats: dict[str, Any]) -> dict[str, Any]:\n        for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value\n        return self.execution_stats\n\n    @property\n    def name(self):\n        return self.__class__.__name__\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }\n\n    def execute(self, input_data: BlockInput, **kwargs) -> BlockOutput:\n        if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )\n\n        for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data\n\n\n# ======================= Block Helper Functions ======================= #\n\n\ndef get_blocks() -> dict[str, Type[Block]]:\n    from backend.blocks import AVAILABLE_BLOCKS  # noqa: E402\n\n    return AVAILABLE_BLOCKS\n\n\nasync def initialize_blocks() -> None:\n    for cls in get_blocks().values():\n        block = cls()\n        existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )\n        if not existing_block:\n            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue\n\n        input_schema = json.dumps(block.input_schema.jsonschema())\n        output_schema = json.dumps(block.output_schema.jsonschema())\n        if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )\n\n\ndef get_block(block_id: str) -> Block | None:\n    cls = get_blocks().get(block_id)\n    return cls() if cls else None",
  "children": [
    {
      "value": "import inspect",
      "children": [
        {
          "value": "inspect",
          "children": [
            {
              "value": "inspect",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from abc import ABC, abstractmethod",
      "children": [
        {
          "value": "abc",
          "children": [
            {
              "value": "abc",
              "children": []
            }
          ]
        },
        {
          "value": "ABC",
          "children": [
            {
              "value": "ABC",
              "children": []
            }
          ]
        },
        {
          "value": "abstractmethod",
          "children": [
            {
              "value": "abstractmethod",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from enum import Enum",
      "children": [
        {
          "value": "enum",
          "children": [
            {
              "value": "enum",
              "children": []
            }
          ]
        },
        {
          "value": "Enum",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import (\n    Any,\n    ClassVar,\n    Generator,\n    Generic,\n    Optional,\n    Type,\n    TypeVar,\n    cast,\n    get_origin,\n)",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "ClassVar",
          "children": [
            {
              "value": "ClassVar",
              "children": []
            }
          ]
        },
        {
          "value": "Generator",
          "children": [
            {
              "value": "Generator",
              "children": []
            }
          ]
        },
        {
          "value": "Generic",
          "children": [
            {
              "value": "Generic",
              "children": []
            }
          ]
        },
        {
          "value": "Optional",
          "children": [
            {
              "value": "Optional",
              "children": []
            }
          ]
        },
        {
          "value": "Type",
          "children": [
            {
              "value": "Type",
              "children": []
            }
          ]
        },
        {
          "value": "TypeVar",
          "children": [
            {
              "value": "TypeVar",
              "children": []
            }
          ]
        },
        {
          "value": "cast",
          "children": [
            {
              "value": "cast",
              "children": []
            }
          ]
        },
        {
          "value": "get_origin",
          "children": [
            {
              "value": "get_origin",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import jsonref",
      "children": [
        {
          "value": "jsonref",
          "children": [
            {
              "value": "jsonref",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import jsonschema",
      "children": [
        {
          "value": "jsonschema",
          "children": [
            {
              "value": "jsonschema",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from prisma.models import AgentBlock",
      "children": [
        {
          "value": "prisma.models",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "models",
              "children": []
            }
          ]
        },
        {
          "value": "AgentBlock",
          "children": [
            {
              "value": "AgentBlock",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from pydantic import BaseModel",
      "children": [
        {
          "value": "pydantic",
          "children": [
            {
              "value": "pydantic",
              "children": []
            }
          ]
        },
        {
          "value": "BaseModel",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util import json",
      "children": [
        {
          "value": "backend.util",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            }
          ]
        },
        {
          "value": "json",
          "children": [
            {
              "value": "json",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Config",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Config",
          "children": [
            {
              "value": "Config",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from .model import (\n    CREDENTIALS_FIELD_NAME,\n    ContributorDetails,\n    Credentials,\n    CredentialsMetaInput,\n)",
      "children": [
        {
          "value": ".model",
          "children": [
            {
              "value": ".",
              "children": []
            },
            {
              "value": "model",
              "children": [
                {
                  "value": "model",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "CREDENTIALS_FIELD_NAME",
          "children": [
            {
              "value": "CREDENTIALS_FIELD_NAME",
              "children": []
            }
          ]
        },
        {
          "value": "ContributorDetails",
          "children": [
            {
              "value": "ContributorDetails",
              "children": []
            }
          ]
        },
        {
          "value": "Credentials",
          "children": [
            {
              "value": "Credentials",
              "children": []
            }
          ]
        },
        {
          "value": "CredentialsMetaInput",
          "children": [
            {
              "value": "CredentialsMetaInput",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "app_config = Config()",
      "children": [
        {
          "value": "app_config = Config()",
          "children": [
            {
              "value": "app_config",
              "children": []
            },
            {
              "value": "Config()",
              "children": [
                {
                  "value": "Config",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "BlockData = tuple[str, Any]",
      "children": [
        {
          "value": "BlockData = tuple[str, Any]",
          "children": [
            {
              "value": "BlockData",
              "children": []
            },
            {
              "value": "tuple[str, Any]",
              "children": [
                {
                  "value": "tuple",
                  "children": []
                },
                {
                  "value": "str",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# Input & Output data should be a tuple of (name, data).",
      "children": []
    },
    {
      "value": "BlockInput = dict[str, Any]",
      "children": [
        {
          "value": "BlockInput = dict[str, Any]",
          "children": [
            {
              "value": "BlockInput",
              "children": []
            },
            {
              "value": "dict[str, Any]",
              "children": [
                {
                  "value": "dict",
                  "children": []
                },
                {
                  "value": "str",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# Input: 1 input pin consumes 1 data.",
      "children": []
    },
    {
      "value": "BlockOutput = Generator[BlockData, None, None]",
      "children": [
        {
          "value": "BlockOutput = Generator[BlockData, None, None]",
          "children": [
            {
              "value": "BlockOutput",
              "children": []
            },
            {
              "value": "Generator[BlockData, None, None]",
              "children": [
                {
                  "value": "Generator",
                  "children": []
                },
                {
                  "value": "BlockData",
                  "children": []
                },
                {
                  "value": "None",
                  "children": []
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# Output: 1 output pin produces n data.",
      "children": []
    },
    {
      "value": "CompletedBlockOutput = dict[str, list[Any]]",
      "children": [
        {
          "value": "CompletedBlockOutput = dict[str, list[Any]]",
          "children": [
            {
              "value": "CompletedBlockOutput",
              "children": []
            },
            {
              "value": "dict[str, list[Any]]",
              "children": [
                {
                  "value": "dict",
                  "children": []
                },
                {
                  "value": "str",
                  "children": []
                },
                {
                  "value": "list[Any]",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    },
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# Completed stream, collected as a dict.",
      "children": []
    },
    {
      "value": "class BlockType(Enum):\n    STANDARD = \"Standard\"\n    INPUT = \"Input\"\n    OUTPUT = \"Output\"\n    NOTE = \"Note\"\n    WEBHOOK = \"Webhook\"\n    WEBHOOK_MANUAL = \"Webhook (manual)\"\n    AGENT = \"Agent\"",
      "children": [
        {
          "value": "BlockType",
          "children": []
        },
        {
          "value": "(Enum)",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        },
        {
          "value": "STANDARD = \"Standard\"\n    INPUT = \"Input\"\n    OUTPUT = \"Output\"\n    NOTE = \"Note\"\n    WEBHOOK = \"Webhook\"\n    WEBHOOK_MANUAL = \"Webhook (manual)\"\n    AGENT = \"Agent\"",
          "children": [
            {
              "value": "STANDARD = \"Standard\"",
              "children": [
                {
                  "value": "STANDARD = \"Standard\"",
                  "children": [
                    {
                      "value": "STANDARD",
                      "children": []
                    },
                    {
                      "value": "\"Standard\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Standard",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "INPUT = \"Input\"",
              "children": [
                {
                  "value": "INPUT = \"Input\"",
                  "children": [
                    {
                      "value": "INPUT",
                      "children": []
                    },
                    {
                      "value": "\"Input\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "OUTPUT = \"Output\"",
              "children": [
                {
                  "value": "OUTPUT = \"Output\"",
                  "children": [
                    {
                      "value": "OUTPUT",
                      "children": []
                    },
                    {
                      "value": "\"Output\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Output",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "NOTE = \"Note\"",
              "children": [
                {
                  "value": "NOTE = \"Note\"",
                  "children": [
                    {
                      "value": "NOTE",
                      "children": []
                    },
                    {
                      "value": "\"Note\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Note",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "WEBHOOK = \"Webhook\"",
              "children": [
                {
                  "value": "WEBHOOK = \"Webhook\"",
                  "children": [
                    {
                      "value": "WEBHOOK",
                      "children": []
                    },
                    {
                      "value": "\"Webhook\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Webhook",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "WEBHOOK_MANUAL = \"Webhook (manual)\"",
              "children": [
                {
                  "value": "WEBHOOK_MANUAL = \"Webhook (manual)\"",
                  "children": [
                    {
                      "value": "WEBHOOK_MANUAL",
                      "children": []
                    },
                    {
                      "value": "\"Webhook (manual)\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Webhook (manual)",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "AGENT = \"Agent\"",
              "children": [
                {
                  "value": "AGENT = \"Agent\"",
                  "children": [
                    {
                      "value": "AGENT",
                      "children": []
                    },
                    {
                      "value": "\"Agent\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Agent",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class BlockCategory(Enum):\n    AI = \"Block that leverages AI to perform a task.\"\n    SOCIAL = \"Block that interacts with social media platforms.\"\n    TEXT = \"Block that processes text data.\"\n    SEARCH = \"Block that searches or extracts information from the internet.\"\n    BASIC = \"Block that performs basic operations.\"\n    INPUT = \"Block that interacts with input of the graph.\"\n    OUTPUT = \"Block that interacts with output of the graph.\"\n    LOGIC = \"Programming logic to control the flow of your agent\"\n    COMMUNICATION = \"Block that interacts with communication platforms.\"\n    DEVELOPER_TOOLS = \"Developer tools such as GitHub blocks.\"\n    DATA = \"Block that interacts with structured data.\"\n    HARDWARE = \"Block that interacts with hardware.\"\n    AGENT = \"Block that interacts with other agents.\"\n    CRM = \"Block that interacts with CRM services.\"\n\n    def dict(self) -> dict[str, str]:\n        return {\"category\": self.name, \"description\": self.value}",
      "children": [
        {
          "value": "BlockCategory",
          "children": []
        },
        {
          "value": "(Enum)",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        },
        {
          "value": "AI = \"Block that leverages AI to perform a task.\"\n    SOCIAL = \"Block that interacts with social media platforms.\"\n    TEXT = \"Block that processes text data.\"\n    SEARCH = \"Block that searches or extracts information from the internet.\"\n    BASIC = \"Block that performs basic operations.\"\n    INPUT = \"Block that interacts with input of the graph.\"\n    OUTPUT = \"Block that interacts with output of the graph.\"\n    LOGIC = \"Programming logic to control the flow of your agent\"\n    COMMUNICATION = \"Block that interacts with communication platforms.\"\n    DEVELOPER_TOOLS = \"Developer tools such as GitHub blocks.\"\n    DATA = \"Block that interacts with structured data.\"\n    HARDWARE = \"Block that interacts with hardware.\"\n    AGENT = \"Block that interacts with other agents.\"\n    CRM = \"Block that interacts with CRM services.\"\n\n    def dict(self) -> dict[str, str]:\n        return {\"category\": self.name, \"description\": self.value}",
          "children": [
            {
              "value": "AI = \"Block that leverages AI to perform a task.\"",
              "children": [
                {
                  "value": "AI = \"Block that leverages AI to perform a task.\"",
                  "children": [
                    {
                      "value": "AI",
                      "children": []
                    },
                    {
                      "value": "\"Block that leverages AI to perform a task.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Block that leverages AI to perform a task.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "SOCIAL = \"Block that interacts with social media platforms.\"",
              "children": [
                {
                  "value": "SOCIAL = \"Block that interacts with social media platforms.\"",
                  "children": [
                    {
                      "value": "SOCIAL",
                      "children": []
                    },
                    {
                      "value": "\"Block that interacts with social media platforms.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Block that interacts with social media platforms.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "TEXT = \"Block that processes text data.\"",
              "children": [
                {
                  "value": "TEXT = \"Block that processes text data.\"",
                  "children": [
                    {
                      "value": "TEXT",
                      "children": []
                    },
                    {
                      "value": "\"Block that processes text data.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Block that processes text data.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "SEARCH = \"Block that searches or extracts information from the internet.\"",
              "children": [
                {
                  "value": "SEARCH = \"Block that searches or extracts information from the internet.\"",
                  "children": [
                    {
                      "value": "SEARCH",
                      "children": []
                    },
                    {
                      "value": "\"Block that searches or extracts information from the internet.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Block that searches or extracts information from the internet.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "BASIC = \"Block that performs basic operations.\"",
              "children": [
                {
                  "value": "BASIC = \"Block that performs basic operations.\"",
                  "children": [
                    {
                      "value": "BASIC",
                      "children": []
                    },
                    {
                      "value": "\"Block that performs basic operations.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Block that performs basic operations.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "INPUT = \"Block that interacts with input of the graph.\"",
              "children": [
                {
                  "value": "INPUT = \"Block that interacts with input of the graph.\"",
                  "children": [
                    {
                      "value": "INPUT",
                      "children": []
                    },
                    {
                      "value": "\"Block that interacts with input of the graph.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Block that interacts with input of the graph.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "OUTPUT = \"Block that interacts with output of the graph.\"",
              "children": [
                {
                  "value": "OUTPUT = \"Block that interacts with output of the graph.\"",
                  "children": [
                    {
                      "value": "OUTPUT",
                      "children": []
                    },
                    {
                      "value": "\"Block that interacts with output of the graph.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Block that interacts with output of the graph.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "LOGIC = \"Programming logic to control the flow of your agent\"",
              "children": [
                {
                  "value": "LOGIC = \"Programming logic to control the flow of your agent\"",
                  "children": [
                    {
                      "value": "LOGIC",
                      "children": []
                    },
                    {
                      "value": "\"Programming logic to control the flow of your agent\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Programming logic to control the flow of your agent",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "COMMUNICATION = \"Block that interacts with communication platforms.\"",
              "children": [
                {
                  "value": "COMMUNICATION = \"Block that interacts with communication platforms.\"",
                  "children": [
                    {
                      "value": "COMMUNICATION",
                      "children": []
                    },
                    {
                      "value": "\"Block that interacts with communication platforms.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Block that interacts with communication platforms.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "DEVELOPER_TOOLS = \"Developer tools such as GitHub blocks.\"",
              "children": [
                {
                  "value": "DEVELOPER_TOOLS = \"Developer tools such as GitHub blocks.\"",
                  "children": [
                    {
                      "value": "DEVELOPER_TOOLS",
                      "children": []
                    },
                    {
                      "value": "\"Developer tools such as GitHub blocks.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Developer tools such as GitHub blocks.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "DATA = \"Block that interacts with structured data.\"",
              "children": [
                {
                  "value": "DATA = \"Block that interacts with structured data.\"",
                  "children": [
                    {
                      "value": "DATA",
                      "children": []
                    },
                    {
                      "value": "\"Block that interacts with structured data.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Block that interacts with structured data.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "HARDWARE = \"Block that interacts with hardware.\"",
              "children": [
                {
                  "value": "HARDWARE = \"Block that interacts with hardware.\"",
                  "children": [
                    {
                      "value": "HARDWARE",
                      "children": []
                    },
                    {
                      "value": "\"Block that interacts with hardware.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Block that interacts with hardware.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "AGENT = \"Block that interacts with other agents.\"",
              "children": [
                {
                  "value": "AGENT = \"Block that interacts with other agents.\"",
                  "children": [
                    {
                      "value": "AGENT",
                      "children": []
                    },
                    {
                      "value": "\"Block that interacts with other agents.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Block that interacts with other agents.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "CRM = \"Block that interacts with CRM services.\"",
              "children": [
                {
                  "value": "CRM = \"Block that interacts with CRM services.\"",
                  "children": [
                    {
                      "value": "CRM",
                      "children": []
                    },
                    {
                      "value": "\"Block that interacts with CRM services.\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "Block that interacts with CRM services.",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def dict(self) -> dict[str, str]:\n        return {\"category\": self.name, \"description\": self.value}",
              "children": [
                {
                  "value": "dict",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "dict[str, str]",
                  "children": [
                    {
                      "value": "dict[str, str]",
                      "children": [
                        {
                          "value": "dict",
                          "children": []
                        },
                        {
                          "value": "[str, str]",
                          "children": [
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return {\"category\": self.name, \"description\": self.value}",
                  "children": [
                    {
                      "value": "return {\"category\": self.name, \"description\": self.value}",
                      "children": [
                        {
                          "value": "{\"category\": self.name, \"description\": self.value}",
                          "children": [
                            {
                              "value": "\"category\": self.name",
                              "children": [
                                {
                                  "value": "\"category\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "category",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.name",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "name",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"description\": self.value",
                              "children": [
                                {
                                  "value": "\"description\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.value",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "value",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class BlockSchema(BaseModel):\n    cached_jsonschema: ClassVar[dict[str, Any]]\n\n    @classmethod\n    def jsonschema(cls) -> dict[str, Any]:\n        if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n\n        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n\n        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n\n        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n\n        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n        return cls.cached_jsonschema\n\n    @classmethod\n    def validate_data(cls, data: BlockInput) -> str | None:\n        return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)\n\n    @classmethod\n    def validate_field(cls, field_name: str, data: BlockInput) -> str | None:\n        \"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n\n        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n\n        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)\n\n    @classmethod\n    def get_fields(cls) -> set[str]:\n        return set(cls.model_fields.keys())\n\n    @classmethod\n    def get_required_fields(cls) -> set[str]:\n        return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }\n\n    @classmethod\n    def __pydantic_init_subclass__(cls, **kwargs):\n        \"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n        super().__pydantic_init_subclass__(**kwargs)\n\n        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n\n        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
      "children": [
        {
          "value": "BlockSchema",
          "children": []
        },
        {
          "value": "(BaseModel)",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        },
        {
          "value": "cached_jsonschema: ClassVar[dict[str, Any]]\n\n    @classmethod\n    def jsonschema(cls) -> dict[str, Any]:\n        if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n\n        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n\n        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n\n        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n\n        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n        return cls.cached_jsonschema\n\n    @classmethod\n    def validate_data(cls, data: BlockInput) -> str | None:\n        return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)\n\n    @classmethod\n    def validate_field(cls, field_name: str, data: BlockInput) -> str | None:\n        \"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n\n        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n\n        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)\n\n    @classmethod\n    def get_fields(cls) -> set[str]:\n        return set(cls.model_fields.keys())\n\n    @classmethod\n    def get_required_fields(cls) -> set[str]:\n        return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }\n\n    @classmethod\n    def __pydantic_init_subclass__(cls, **kwargs):\n        \"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n        super().__pydantic_init_subclass__(**kwargs)\n\n        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n\n        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
          "children": [
            {
              "value": "cached_jsonschema: ClassVar[dict[str, Any]]",
              "children": [
                {
                  "value": "cached_jsonschema: ClassVar[dict[str, Any]]",
                  "children": [
                    {
                      "value": "cached_jsonschema",
                      "children": []
                    },
                    {
                      "value": "ClassVar[dict[str, Any]]",
                      "children": [
                        {
                          "value": "ClassVar[dict[str, Any]]",
                          "children": [
                            {
                              "value": "ClassVar",
                              "children": []
                            },
                            {
                              "value": "[dict[str, Any]]",
                              "children": [
                                {
                                  "value": "dict[str, Any]",
                                  "children": [
                                    {
                                      "value": "dict[str, Any]",
                                      "children": [
                                        {
                                          "value": "dict",
                                          "children": []
                                        },
                                        {
                                          "value": "[str, Any]",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "Any",
                                              "children": [
                                                {
                                                  "value": "Any",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@classmethod\n    def jsonschema(cls) -> dict[str, Any]:\n        if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n\n        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n\n        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n\n        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n\n        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n        return cls.cached_jsonschema",
              "children": [
                {
                  "value": "@classmethod",
                  "children": [
                    {
                      "value": "classmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def jsonschema(cls) -> dict[str, Any]:\n        if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n\n        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n\n        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n\n        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n\n        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n        return cls.cached_jsonschema",
                  "children": [
                    {
                      "value": "jsonschema",
                      "children": []
                    },
                    {
                      "value": "(cls)",
                      "children": [
                        {
                          "value": "cls",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "dict[str, Any]",
                      "children": [
                        {
                          "value": "dict[str, Any]",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            },
                            {
                              "value": "[str, Any]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Any",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n\n        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n\n        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n\n        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n\n        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n        return cls.cached_jsonschema",
                      "children": [
                        {
                          "value": "if cls.cached_jsonschema:\n            return cls.cached_jsonschema",
                          "children": [
                            {
                              "value": "cls.cached_jsonschema",
                              "children": [
                                {
                                  "value": "cls",
                                  "children": []
                                },
                                {
                                  "value": "cached_jsonschema",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "return cls.cached_jsonschema",
                              "children": [
                                {
                                  "value": "return cls.cached_jsonschema",
                                  "children": [
                                    {
                                      "value": "cls.cached_jsonschema",
                                      "children": [
                                        {
                                          "value": "cls",
                                          "children": []
                                        },
                                        {
                                          "value": "cached_jsonschema",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)",
                          "children": [
                            {
                              "value": "model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)",
                              "children": [
                                {
                                  "value": "model",
                                  "children": []
                                },
                                {
                                  "value": "jsonref.replace_refs(cls.model_json_schema(), merge_props=True)",
                                  "children": [
                                    {
                                      "value": "jsonref.replace_refs",
                                      "children": [
                                        {
                                          "value": "jsonref",
                                          "children": []
                                        },
                                        {
                                          "value": "replace_refs",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(cls.model_json_schema(), merge_props=True)",
                                      "children": [
                                        {
                                          "value": "cls.model_json_schema()",
                                          "children": [
                                            {
                                              "value": "cls.model_json_schema",
                                              "children": [
                                                {
                                                  "value": "cls",
                                                  "children": []
                                                },
                                                {
                                                  "value": "model_json_schema",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "merge_props=True",
                                          "children": [
                                            {
                                              "value": "merge_props",
                                              "children": []
                                            },
                                            {
                                              "value": "True",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj",
                          "children": [
                            {
                              "value": "ref_to_dict",
                              "children": []
                            },
                            {
                              "value": "(obj)",
                              "children": [
                                {
                                  "value": "obj",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj",
                              "children": [
                                {
                                  "value": "if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]",
                                  "children": [
                                    {
                                      "value": "isinstance(obj, dict)",
                                      "children": [
                                        {
                                          "value": "isinstance",
                                          "children": []
                                        },
                                        {
                                          "value": "(obj, dict)",
                                          "children": [
                                            {
                                              "value": "obj",
                                              "children": []
                                            },
                                            {
                                              "value": "dict",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# OpenAPI <3.1 does not support sibling fields that has a $ref key",
                                      "children": []
                                    },
                                    {
                                      "value": "# So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.",
                                      "children": []
                                    },
                                    {
                                      "value": "keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }",
                                      "children": [
                                        {
                                          "value": "keys = {\"allOf\", \"anyOf\", \"oneOf\"}",
                                          "children": [
                                            {
                                              "value": "keys = {\"allOf\", \"anyOf\", \"oneOf\"}",
                                              "children": [
                                                {
                                                  "value": "keys",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{\"allOf\", \"anyOf\", \"oneOf\"}",
                                                  "children": [
                                                    {
                                                      "value": "\"allOf\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "allOf",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"anyOf\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "anyOf",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"oneOf\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "oneOf",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)",
                                          "children": [
                                            {
                                              "value": "one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)",
                                              "children": [
                                                {
                                                  "value": "one_key",
                                                  "children": []
                                                },
                                                {
                                                  "value": "next((k for k in keys if k in obj and len(obj[k]) == 1), None)",
                                                  "children": [
                                                    {
                                                      "value": "next",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "((k for k in keys if k in obj and len(obj[k]) == 1), None)",
                                                      "children": [
                                                        {
                                                          "value": "(k for k in keys if k in obj and len(obj[k]) == 1)",
                                                          "children": [
                                                            {
                                                              "value": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "for k in keys",
                                                              "children": [
                                                                {
                                                                  "value": "k",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "keys",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "if k in obj and len(obj[k]) == 1",
                                                              "children": [
                                                                {
                                                                  "value": "k in obj and len(obj[k]) == 1",
                                                                  "children": [
                                                                    {
                                                                      "value": "k in obj",
                                                                      "children": [
                                                                        {
                                                                          "value": "k",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "obj",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "len(obj[k]) == 1",
                                                                      "children": [
                                                                        {
                                                                          "value": "len(obj[k])",
                                                                          "children": [
                                                                            {
                                                                              "value": "len",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "(obj[k])",
                                                                              "children": [
                                                                                {
                                                                                  "value": "obj[k]",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "obj",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "k",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "1",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "None",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if one_key:\n                    obj.update(obj[one_key][0])",
                                          "children": [
                                            {
                                              "value": "one_key",
                                              "children": []
                                            },
                                            {
                                              "value": "obj.update(obj[one_key][0])",
                                              "children": [
                                                {
                                                  "value": "obj.update(obj[one_key][0])",
                                                  "children": [
                                                    {
                                                      "value": "obj.update(obj[one_key][0])",
                                                      "children": [
                                                        {
                                                          "value": "obj.update",
                                                          "children": [
                                                            {
                                                              "value": "obj",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "update",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(obj[one_key][0])",
                                                          "children": [
                                                            {
                                                              "value": "obj[one_key][0]",
                                                              "children": [
                                                                {
                                                                  "value": "obj[one_key]",
                                                                  "children": [
                                                                    {
                                                                      "value": "obj",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "one_key",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "0",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }",
                                          "children": [
                                            {
                                              "value": "{\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }",
                                              "children": [
                                                {
                                                  "value": "key: ref_to_dict(value)",
                                                  "children": [
                                                    {
                                                      "value": "key",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ref_to_dict(value)",
                                                      "children": [
                                                        {
                                                          "value": "ref_to_dict",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(value)",
                                                          "children": [
                                                            {
                                                              "value": "value",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "for key, value in obj.items()",
                                                  "children": [
                                                    {
                                                      "value": "key, value",
                                                      "children": [
                                                        {
                                                          "value": "key",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "value",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "obj.items()",
                                                      "children": [
                                                        {
                                                          "value": "obj.items",
                                                          "children": [
                                                            {
                                                              "value": "obj",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "items",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "()",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "if not key.startswith(\"$\") and key != one_key",
                                                  "children": [
                                                    {
                                                      "value": "not key.startswith(\"$\") and key != one_key",
                                                      "children": [
                                                        {
                                                          "value": "not key.startswith(\"$\")",
                                                          "children": [
                                                            {
                                                              "value": "key.startswith(\"$\")",
                                                              "children": [
                                                                {
                                                                  "value": "key.startswith",
                                                                  "children": [
                                                                    {
                                                                      "value": "key",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "startswith",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "(\"$\")",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"$\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "$",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "key != one_key",
                                                          "children": [
                                                            {
                                                              "value": "key",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "one_key",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]",
                                      "children": [
                                        {
                                          "value": "isinstance(obj, list)",
                                          "children": [
                                            {
                                              "value": "isinstance",
                                              "children": []
                                            },
                                            {
                                              "value": "(obj, list)",
                                              "children": [
                                                {
                                                  "value": "obj",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "return [ref_to_dict(item) for item in obj]",
                                          "children": [
                                            {
                                              "value": "return [ref_to_dict(item) for item in obj]",
                                              "children": [
                                                {
                                                  "value": "[ref_to_dict(item) for item in obj]",
                                                  "children": [
                                                    {
                                                      "value": "ref_to_dict(item)",
                                                      "children": [
                                                        {
                                                          "value": "ref_to_dict",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(item)",
                                                          "children": [
                                                            {
                                                              "value": "item",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for item in obj",
                                                      "children": [
                                                        {
                                                          "value": "item",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "obj",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return obj",
                                  "children": [
                                    {
                                      "value": "obj",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))",
                          "children": [
                            {
                              "value": "cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))",
                              "children": [
                                {
                                  "value": "cls.cached_jsonschema",
                                  "children": [
                                    {
                                      "value": "cls",
                                      "children": []
                                    },
                                    {
                                      "value": "cached_jsonschema",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "cast(dict[str, Any], ref_to_dict(model))",
                                  "children": [
                                    {
                                      "value": "cast",
                                      "children": []
                                    },
                                    {
                                      "value": "(dict[str, Any], ref_to_dict(model))",
                                      "children": [
                                        {
                                          "value": "dict[str, Any]",
                                          "children": [
                                            {
                                              "value": "dict",
                                              "children": []
                                            },
                                            {
                                              "value": "str",
                                              "children": []
                                            },
                                            {
                                              "value": "Any",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ref_to_dict(model)",
                                          "children": [
                                            {
                                              "value": "ref_to_dict",
                                              "children": []
                                            },
                                            {
                                              "value": "(model)",
                                              "children": [
                                                {
                                                  "value": "model",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# Set default properties values",
                          "children": []
                        },
                        {
                          "value": "for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True",
                          "children": [
                            {
                              "value": "field",
                              "children": []
                            },
                            {
                              "value": "cls.cached_jsonschema.get(\"properties\", {}).values()",
                              "children": [
                                {
                                  "value": "cls.cached_jsonschema.get(\"properties\", {}).values",
                                  "children": [
                                    {
                                      "value": "cls.cached_jsonschema.get(\"properties\", {})",
                                      "children": [
                                        {
                                          "value": "cls.cached_jsonschema.get",
                                          "children": [
                                            {
                                              "value": "cls.cached_jsonschema",
                                              "children": [
                                                {
                                                  "value": "cls",
                                                  "children": []
                                                },
                                                {
                                                  "value": "cached_jsonschema",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"properties\", {})",
                                          "children": [
                                            {
                                              "value": "\"properties\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "properties",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{}",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "values",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True",
                              "children": [
                                {
                                  "value": "if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True",
                                  "children": [
                                    {
                                      "value": "isinstance(field, dict) and \"advanced\" not in field",
                                      "children": [
                                        {
                                          "value": "isinstance(field, dict)",
                                          "children": [
                                            {
                                              "value": "isinstance",
                                              "children": []
                                            },
                                            {
                                              "value": "(field, dict)",
                                              "children": [
                                                {
                                                  "value": "field",
                                                  "children": []
                                                },
                                                {
                                                  "value": "dict",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"advanced\" not in field",
                                          "children": [
                                            {
                                              "value": "\"advanced\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "advanced",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "field",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "field[\"advanced\"] = True",
                                      "children": [
                                        {
                                          "value": "field[\"advanced\"] = True",
                                          "children": [
                                            {
                                              "value": "field[\"advanced\"] = True",
                                              "children": [
                                                {
                                                  "value": "field[\"advanced\"]",
                                                  "children": [
                                                    {
                                                      "value": "field",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"advanced\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "advanced",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "True",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return cls.cached_jsonschema",
                          "children": [
                            {
                              "value": "cls.cached_jsonschema",
                              "children": [
                                {
                                  "value": "cls",
                                  "children": []
                                },
                                {
                                  "value": "cached_jsonschema",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@classmethod\n    def validate_data(cls, data: BlockInput) -> str | None:\n        return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)",
              "children": [
                {
                  "value": "@classmethod",
                  "children": [
                    {
                      "value": "classmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def validate_data(cls, data: BlockInput) -> str | None:\n        return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)",
                  "children": [
                    {
                      "value": "validate_data",
                      "children": []
                    },
                    {
                      "value": "(cls, data: BlockInput)",
                      "children": [
                        {
                          "value": "cls",
                          "children": []
                        },
                        {
                          "value": "data: BlockInput",
                          "children": [
                            {
                              "value": "data",
                              "children": []
                            },
                            {
                              "value": "BlockInput",
                              "children": [
                                {
                                  "value": "BlockInput",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str | None",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)",
                      "children": [
                        {
                          "value": "return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)",
                          "children": [
                            {
                              "value": "json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)",
                              "children": [
                                {
                                  "value": "json.validate_with_jsonschema",
                                  "children": [
                                    {
                                      "value": "json",
                                      "children": []
                                    },
                                    {
                                      "value": "validate_with_jsonschema",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(schema=cls.jsonschema(), data=data)",
                                  "children": [
                                    {
                                      "value": "schema=cls.jsonschema()",
                                      "children": [
                                        {
                                          "value": "schema",
                                          "children": []
                                        },
                                        {
                                          "value": "cls.jsonschema()",
                                          "children": [
                                            {
                                              "value": "cls.jsonschema",
                                              "children": [
                                                {
                                                  "value": "cls",
                                                  "children": []
                                                },
                                                {
                                                  "value": "jsonschema",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "data=data",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "data",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@classmethod\n    def validate_field(cls, field_name: str, data: BlockInput) -> str | None:\n        \"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n\n        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n\n        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)",
              "children": [
                {
                  "value": "@classmethod",
                  "children": [
                    {
                      "value": "classmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def validate_field(cls, field_name: str, data: BlockInput) -> str | None:\n        \"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n\n        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n\n        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)",
                  "children": [
                    {
                      "value": "validate_field",
                      "children": []
                    },
                    {
                      "value": "(cls, field_name: str, data: BlockInput)",
                      "children": [
                        {
                          "value": "cls",
                          "children": []
                        },
                        {
                          "value": "field_name: str",
                          "children": [
                            {
                              "value": "field_name",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "data: BlockInput",
                          "children": [
                            {
                              "value": "data",
                              "children": []
                            },
                            {
                              "value": "BlockInput",
                              "children": [
                                {
                                  "value": "BlockInput",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str | None",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "\"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n\n        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n\n        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)",
                      "children": [
                        {
                          "value": "\"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "model_schema = cls.jsonschema().get(\"properties\", {})",
                          "children": [
                            {
                              "value": "model_schema = cls.jsonschema().get(\"properties\", {})",
                              "children": [
                                {
                                  "value": "model_schema",
                                  "children": []
                                },
                                {
                                  "value": "cls.jsonschema().get(\"properties\", {})",
                                  "children": [
                                    {
                                      "value": "cls.jsonschema().get",
                                      "children": [
                                        {
                                          "value": "cls.jsonschema()",
                                          "children": [
                                            {
                                              "value": "cls.jsonschema",
                                              "children": [
                                                {
                                                  "value": "cls",
                                                  "children": []
                                                },
                                                {
                                                  "value": "jsonschema",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"properties\", {})",
                                      "children": [
                                        {
                                          "value": "\"properties\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "properties",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "{}",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if not model_schema:\n            return f\"Invalid model schema {cls}\"",
                          "children": [
                            {
                              "value": "not model_schema",
                              "children": [
                                {
                                  "value": "model_schema",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "return f\"Invalid model schema {cls}\"",
                              "children": [
                                {
                                  "value": "return f\"Invalid model schema {cls}\"",
                                  "children": [
                                    {
                                      "value": "f\"Invalid model schema {cls}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Invalid model schema",
                                          "children": []
                                        },
                                        {
                                          "value": "{cls}",
                                          "children": [
                                            {
                                              "value": "cls",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "property_schema = model_schema.get(field_name)",
                          "children": [
                            {
                              "value": "property_schema = model_schema.get(field_name)",
                              "children": [
                                {
                                  "value": "property_schema",
                                  "children": []
                                },
                                {
                                  "value": "model_schema.get(field_name)",
                                  "children": [
                                    {
                                      "value": "model_schema.get",
                                      "children": [
                                        {
                                          "value": "model_schema",
                                          "children": []
                                        },
                                        {
                                          "value": "get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(field_name)",
                                      "children": [
                                        {
                                          "value": "field_name",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if not property_schema:\n            return f\"Invalid property name {field_name}\"",
                          "children": [
                            {
                              "value": "not property_schema",
                              "children": [
                                {
                                  "value": "property_schema",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "return f\"Invalid property name {field_name}\"",
                              "children": [
                                {
                                  "value": "return f\"Invalid property name {field_name}\"",
                                  "children": [
                                    {
                                      "value": "f\"Invalid property name {field_name}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Invalid property name",
                                          "children": []
                                        },
                                        {
                                          "value": "{field_name}",
                                          "children": [
                                            {
                                              "value": "field_name",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)",
                          "children": [
                            {
                              "value": "jsonschema.validate(json.to_dict(data), property_schema)\n            return None",
                              "children": [
                                {
                                  "value": "jsonschema.validate(json.to_dict(data), property_schema)",
                                  "children": [
                                    {
                                      "value": "jsonschema.validate(json.to_dict(data), property_schema)",
                                      "children": [
                                        {
                                          "value": "jsonschema.validate",
                                          "children": [
                                            {
                                              "value": "jsonschema",
                                              "children": []
                                            },
                                            {
                                              "value": "validate",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(json.to_dict(data), property_schema)",
                                          "children": [
                                            {
                                              "value": "json.to_dict(data)",
                                              "children": [
                                                {
                                                  "value": "json.to_dict",
                                                  "children": [
                                                    {
                                                      "value": "json",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "to_dict",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(data)",
                                                  "children": [
                                                    {
                                                      "value": "data",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "property_schema",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return None",
                                  "children": [
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "except jsonschema.ValidationError as e:\n            return str(e)",
                              "children": [
                                {
                                  "value": "jsonschema.ValidationError as e",
                                  "children": [
                                    {
                                      "value": "jsonschema.ValidationError",
                                      "children": [
                                        {
                                          "value": "jsonschema",
                                          "children": []
                                        },
                                        {
                                          "value": "ValidationError",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": [
                                        {
                                          "value": "e",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return str(e)",
                                  "children": [
                                    {
                                      "value": "return str(e)",
                                      "children": [
                                        {
                                          "value": "str(e)",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            },
                                            {
                                              "value": "(e)",
                                              "children": [
                                                {
                                                  "value": "e",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@classmethod\n    def get_fields(cls) -> set[str]:\n        return set(cls.model_fields.keys())",
              "children": [
                {
                  "value": "@classmethod",
                  "children": [
                    {
                      "value": "classmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def get_fields(cls) -> set[str]:\n        return set(cls.model_fields.keys())",
                  "children": [
                    {
                      "value": "get_fields",
                      "children": []
                    },
                    {
                      "value": "(cls)",
                      "children": [
                        {
                          "value": "cls",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "set[str]",
                      "children": [
                        {
                          "value": "set[str]",
                          "children": [
                            {
                              "value": "set",
                              "children": []
                            },
                            {
                              "value": "[str]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return set(cls.model_fields.keys())",
                      "children": [
                        {
                          "value": "return set(cls.model_fields.keys())",
                          "children": [
                            {
                              "value": "set(cls.model_fields.keys())",
                              "children": [
                                {
                                  "value": "set",
                                  "children": []
                                },
                                {
                                  "value": "(cls.model_fields.keys())",
                                  "children": [
                                    {
                                      "value": "cls.model_fields.keys()",
                                      "children": [
                                        {
                                          "value": "cls.model_fields.keys",
                                          "children": [
                                            {
                                              "value": "cls.model_fields",
                                              "children": [
                                                {
                                                  "value": "cls",
                                                  "children": []
                                                },
                                                {
                                                  "value": "model_fields",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "keys",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@classmethod\n    def get_required_fields(cls) -> set[str]:\n        return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }",
              "children": [
                {
                  "value": "@classmethod",
                  "children": [
                    {
                      "value": "classmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def get_required_fields(cls) -> set[str]:\n        return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }",
                  "children": [
                    {
                      "value": "get_required_fields",
                      "children": []
                    },
                    {
                      "value": "(cls)",
                      "children": [
                        {
                          "value": "cls",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "set[str]",
                      "children": [
                        {
                          "value": "set[str]",
                          "children": [
                            {
                              "value": "set",
                              "children": []
                            },
                            {
                              "value": "[str]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }",
                      "children": [
                        {
                          "value": "return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }",
                          "children": [
                            {
                              "value": "{\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }",
                              "children": [
                                {
                                  "value": "field",
                                  "children": []
                                },
                                {
                                  "value": "for field, field_info in cls.model_fields.items()",
                                  "children": [
                                    {
                                      "value": "field, field_info",
                                      "children": [
                                        {
                                          "value": "field",
                                          "children": []
                                        },
                                        {
                                          "value": "field_info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "cls.model_fields.items()",
                                      "children": [
                                        {
                                          "value": "cls.model_fields.items",
                                          "children": [
                                            {
                                              "value": "cls.model_fields",
                                              "children": [
                                                {
                                                  "value": "cls",
                                                  "children": []
                                                },
                                                {
                                                  "value": "model_fields",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "items",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "if field_info.is_required()",
                                  "children": [
                                    {
                                      "value": "field_info.is_required()",
                                      "children": [
                                        {
                                          "value": "field_info.is_required",
                                          "children": [
                                            {
                                              "value": "field_info",
                                              "children": []
                                            },
                                            {
                                              "value": "is_required",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@classmethod\n    def __pydantic_init_subclass__(cls, **kwargs):\n        \"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n        super().__pydantic_init_subclass__(**kwargs)\n\n        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n\n        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
              "children": [
                {
                  "value": "@classmethod",
                  "children": [
                    {
                      "value": "classmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def __pydantic_init_subclass__(cls, **kwargs):\n        \"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n        super().__pydantic_init_subclass__(**kwargs)\n\n        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n\n        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
                  "children": [
                    {
                      "value": "__pydantic_init_subclass__",
                      "children": []
                    },
                    {
                      "value": "(cls, **kwargs)",
                      "children": [
                        {
                          "value": "cls",
                          "children": []
                        },
                        {
                          "value": "**kwargs",
                          "children": [
                            {
                              "value": "kwargs",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "\"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n        super().__pydantic_init_subclass__(**kwargs)\n\n        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n\n        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
                      "children": [
                        {
                          "value": "\"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "super().__pydantic_init_subclass__(**kwargs)",
                          "children": [
                            {
                              "value": "super().__pydantic_init_subclass__(**kwargs)",
                              "children": [
                                {
                                  "value": "super().__pydantic_init_subclass__",
                                  "children": [
                                    {
                                      "value": "super()",
                                      "children": [
                                        {
                                          "value": "super",
                                          "children": []
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "__pydantic_init_subclass__",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(**kwargs)",
                                  "children": [
                                    {
                                      "value": "**kwargs",
                                      "children": [
                                        {
                                          "value": "kwargs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# Reset cached JSON schema to prevent inheriting it from parent class",
                          "children": []
                        },
                        {
                          "value": "cls.cached_jsonschema = {}",
                          "children": [
                            {
                              "value": "cls.cached_jsonschema = {}",
                              "children": [
                                {
                                  "value": "cls.cached_jsonschema",
                                  "children": [
                                    {
                                      "value": "cls",
                                      "children": []
                                    },
                                    {
                                      "value": "cached_jsonschema",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "{}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]",
                          "children": [
                            {
                              "value": "credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]",
                              "children": [
                                {
                                  "value": "credentials_fields",
                                  "children": []
                                },
                                {
                                  "value": "[\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]",
                                  "children": [
                                    {
                                      "value": "field_name",
                                      "children": []
                                    },
                                    {
                                      "value": "for field_name, info in cls.model_fields.items()",
                                      "children": [
                                        {
                                          "value": "field_name, info",
                                          "children": [
                                            {
                                              "value": "field_name",
                                              "children": []
                                            },
                                            {
                                              "value": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "cls.model_fields.items()",
                                          "children": [
                                            {
                                              "value": "cls.model_fields.items",
                                              "children": [
                                                {
                                                  "value": "cls.model_fields",
                                                  "children": [
                                                    {
                                                      "value": "cls",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "model_fields",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "items",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )",
                                      "children": [
                                        {
                                          "value": "(\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )",
                                          "children": [
                                            {
                                              "value": "inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )",
                                              "children": [
                                                {
                                                  "value": "inspect.isclass(info.annotation)",
                                                  "children": [
                                                    {
                                                      "value": "inspect.isclass",
                                                      "children": [
                                                        {
                                                          "value": "inspect",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "isclass",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(info.annotation)",
                                                      "children": [
                                                        {
                                                          "value": "info.annotation",
                                                          "children": [
                                                            {
                                                              "value": "info",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "annotation",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )",
                                                  "children": [
                                                    {
                                                      "value": "issubclass",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )",
                                                      "children": [
                                                        {
                                                          "value": "get_origin(info.annotation) or info.annotation",
                                                          "children": [
                                                            {
                                                              "value": "get_origin(info.annotation)",
                                                              "children": [
                                                                {
                                                                  "value": "get_origin",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(info.annotation)",
                                                                  "children": [
                                                                    {
                                                                      "value": "info.annotation",
                                                                      "children": [
                                                                        {
                                                                          "value": "info",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "annotation",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "info.annotation",
                                                              "children": [
                                                                {
                                                                  "value": "info",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "annotation",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "CredentialsMetaInput",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )",
                          "children": [
                            {
                              "value": "len(credentials_fields) > 1",
                              "children": [
                                {
                                  "value": "len(credentials_fields)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(credentials_fields)",
                                      "children": [
                                        {
                                          "value": "credentials_fields",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )",
                              "children": [
                                {
                                  "value": "raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )",
                                  "children": [
                                    {
                                      "value": "ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )",
                                      "children": [
                                        {
                                          "value": "ValueError",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )",
                                          "children": [
                                            {
                                              "value": "f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{cls.__qualname__}",
                                                  "children": [
                                                    {
                                                      "value": "cls.__qualname__",
                                                      "children": [
                                                        {
                                                          "value": "cls",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "__qualname__",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "can only have one CredentialsMetaInput field",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )",
                              "children": [
                                {
                                  "value": "(\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        )",
                                  "children": [
                                    {
                                      "value": "len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME",
                                      "children": [
                                        {
                                          "value": "len(credentials_fields) == 1",
                                          "children": [
                                            {
                                              "value": "len(credentials_fields)",
                                              "children": [
                                                {
                                                  "value": "len",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(credentials_fields)",
                                                  "children": [
                                                    {
                                                      "value": "credentials_fields",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "credentials_fields[0] != CREDENTIALS_FIELD_NAME",
                                          "children": [
                                            {
                                              "value": "credentials_fields[0]",
                                              "children": [
                                                {
                                                  "value": "credentials_fields",
                                                  "children": []
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "CREDENTIALS_FIELD_NAME",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )",
                                  "children": [
                                    {
                                      "value": "raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )",
                                      "children": [
                                        {
                                          "value": "ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )",
                                          "children": [
                                            {
                                              "value": "ValueError",
                                              "children": []
                                            },
                                            {
                                              "value": "(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )",
                                              "children": [
                                                {
                                                  "value": "f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"CredentialsMetaInput field on {cls.__qualname__} \"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "CredentialsMetaInput field on",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{cls.__qualname__}",
                                                          "children": [
                                                            {
                                                              "value": "cls.__qualname__",
                                                              "children": [
                                                                {
                                                                  "value": "cls",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "__qualname__",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"must be named 'credentials'\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "must be named 'credentials'",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )",
                              "children": [
                                {
                                  "value": "(\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        )",
                                  "children": [
                                    {
                                      "value": "len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()",
                                      "children": [
                                        {
                                          "value": "len(credentials_fields) == 0",
                                          "children": [
                                            {
                                              "value": "len(credentials_fields)",
                                              "children": [
                                                {
                                                  "value": "len",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(credentials_fields)",
                                                  "children": [
                                                    {
                                                      "value": "credentials_fields",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "0",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "CREDENTIALS_FIELD_NAME in cls.model_fields.keys()",
                                          "children": [
                                            {
                                              "value": "CREDENTIALS_FIELD_NAME",
                                              "children": []
                                            },
                                            {
                                              "value": "cls.model_fields.keys()",
                                              "children": [
                                                {
                                                  "value": "cls.model_fields.keys",
                                                  "children": [
                                                    {
                                                      "value": "cls.model_fields",
                                                      "children": [
                                                        {
                                                          "value": "cls",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "model_fields",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "keys",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )",
                                  "children": [
                                    {
                                      "value": "raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )",
                                      "children": [
                                        {
                                          "value": "TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )",
                                          "children": [
                                            {
                                              "value": "TypeError",
                                              "children": []
                                            },
                                            {
                                              "value": "(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )",
                                              "children": [
                                                {
                                                  "value": "f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"Field 'credentials' on {cls.__qualname__} \"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Field 'credentials' on",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{cls.__qualname__}",
                                                          "children": [
                                                            {
                                                              "value": "cls.__qualname__",
                                                              "children": [
                                                                {
                                                                  "value": "cls",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "__qualname__",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "f\"must be of type {CredentialsMetaInput.__name__}\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "must be of type",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{CredentialsMetaInput.__name__}",
                                                          "children": [
                                                            {
                                                              "value": "CredentialsMetaInput.__name__",
                                                              "children": [
                                                                {
                                                                  "value": "CredentialsMetaInput",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "__name__",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
                          "children": [
                            {
                              "value": "credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME)",
                              "children": [
                                {
                                  "value": "credentials_field",
                                  "children": []
                                },
                                {
                                  "value": "cls.model_fields.get(CREDENTIALS_FIELD_NAME)",
                                  "children": [
                                    {
                                      "value": "cls.model_fields.get",
                                      "children": [
                                        {
                                          "value": "cls.model_fields",
                                          "children": [
                                            {
                                              "value": "cls",
                                              "children": []
                                            },
                                            {
                                              "value": "model_fields",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(CREDENTIALS_FIELD_NAME)",
                                      "children": [
                                        {
                                          "value": "CREDENTIALS_FIELD_NAME",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)",
                              "children": [
                                {
                                  "value": "credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )",
                                  "children": [
                                    {
                                      "value": "credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )",
                                      "children": [
                                        {
                                          "value": "credentials_input_type",
                                          "children": []
                                        },
                                        {
                                          "value": "cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )",
                                          "children": [
                                            {
                                              "value": "cast",
                                              "children": []
                                            },
                                            {
                                              "value": "(\n                CredentialsMetaInput, credentials_field.annotation\n            )",
                                              "children": [
                                                {
                                                  "value": "CredentialsMetaInput",
                                                  "children": []
                                                },
                                                {
                                                  "value": "credentials_field.annotation",
                                                  "children": [
                                                    {
                                                      "value": "credentials_field",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "annotation",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "credentials_input_type.validate_credentials_field_schema(cls)",
                                  "children": [
                                    {
                                      "value": "credentials_input_type.validate_credentials_field_schema(cls)",
                                      "children": [
                                        {
                                          "value": "credentials_input_type.validate_credentials_field_schema",
                                          "children": [
                                            {
                                              "value": "credentials_input_type",
                                              "children": []
                                            },
                                            {
                                              "value": "validate_credentials_field_schema",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(cls)",
                                          "children": [
                                            {
                                              "value": "cls",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "BlockSchemaInputType = TypeVar(\"BlockSchemaInputType\", bound=BlockSchema)",
      "children": [
        {
          "value": "BlockSchemaInputType = TypeVar(\"BlockSchemaInputType\", bound=BlockSchema)",
          "children": [
            {
              "value": "BlockSchemaInputType",
              "children": []
            },
            {
              "value": "TypeVar(\"BlockSchemaInputType\", bound=BlockSchema)",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"BlockSchemaInputType\", bound=BlockSchema)",
                  "children": [
                    {
                      "value": "\"BlockSchemaInputType\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "BlockSchemaInputType",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "bound=BlockSchema",
                      "children": [
                        {
                          "value": "bound",
                          "children": []
                        },
                        {
                          "value": "BlockSchema",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "BlockSchemaOutputType = TypeVar(\"BlockSchemaOutputType\", bound=BlockSchema)",
      "children": [
        {
          "value": "BlockSchemaOutputType = TypeVar(\"BlockSchemaOutputType\", bound=BlockSchema)",
          "children": [
            {
              "value": "BlockSchemaOutputType",
              "children": []
            },
            {
              "value": "TypeVar(\"BlockSchemaOutputType\", bound=BlockSchema)",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"BlockSchemaOutputType\", bound=BlockSchema)",
                  "children": [
                    {
                      "value": "\"BlockSchemaOutputType\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "BlockSchemaOutputType",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "bound=BlockSchema",
                      "children": [
                        {
                          "value": "bound",
                          "children": []
                        },
                        {
                          "value": "BlockSchema",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class EmptySchema(BlockSchema):\n    pass",
      "children": [
        {
          "value": "EmptySchema",
          "children": []
        },
        {
          "value": "(BlockSchema)",
          "children": [
            {
              "value": "BlockSchema",
              "children": []
            }
          ]
        },
        {
          "value": "pass",
          "children": [
            {
              "value": "pass",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "# --8<-- [start:BlockWebhookConfig]",
      "children": []
    },
    {
      "value": "class BlockManualWebhookConfig(BaseModel):\n    \"\"\"\n    Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.\n    \"\"\"\n\n    provider: str\n    \"\"\"The service provider that the webhook connects to\"\"\"\n\n    webhook_type: str\n    \"\"\"\n    Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n\n    event_filter_input: str = \"\"\n    \"\"\"\n    Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.\n    \"\"\"\n\n    event_format: str = \"{event}\"\n    \"\"\"\n    Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`\n    \"\"\"",
      "children": [
        {
          "value": "BlockManualWebhookConfig",
          "children": []
        },
        {
          "value": "(BaseModel)",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.\n    \"\"\"\n\n    provider: str\n    \"\"\"The service provider that the webhook connects to\"\"\"\n\n    webhook_type: str\n    \"\"\"\n    Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n\n    event_filter_input: str = \"\"\n    \"\"\"\n    Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.\n    \"\"\"\n\n    event_format: str = \"{event}\"\n    \"\"\"\n    Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`\n    \"\"\"",
          "children": [
            {
              "value": "\"\"\"\n    Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "provider: str",
              "children": [
                {
                  "value": "provider: str",
                  "children": [
                    {
                      "value": "provider",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "\"\"\"The service provider that the webhook connects to\"\"\"",
              "children": [
                {
                  "value": "\"\"\"The service provider that the webhook connects to\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "The service provider that the webhook connects to",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "webhook_type: str",
              "children": [
                {
                  "value": "webhook_type: str",
                  "children": [
                    {
                      "value": "webhook_type",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "\"\"\"\n    Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "event_filter_input: str = \"\"",
              "children": [
                {
                  "value": "event_filter_input: str = \"\"",
                  "children": [
                    {
                      "value": "event_filter_input",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "\"\"\"\n    Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "event_format: str = \"{event}\"",
              "children": [
                {
                  "value": "event_format: str = \"{event}\"",
                  "children": [
                    {
                      "value": "event_format",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"{event}\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "{event}",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "\"\"\"\n    Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class BlockWebhookConfig(BlockManualWebhookConfig):\n    \"\"\"\n    Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.\n    \"\"\"\n\n    resource_format: str\n    \"\"\"\n    Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n    # --8<-- [end:BlockWebhookConfig]",
      "children": [
        {
          "value": "BlockWebhookConfig",
          "children": []
        },
        {
          "value": "(BlockManualWebhookConfig)",
          "children": [
            {
              "value": "BlockManualWebhookConfig",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.\n    \"\"\"\n\n    resource_format: str\n    \"\"\"\n    Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n    # --8<-- [end:BlockWebhookConfig]",
          "children": [
            {
              "value": "\"\"\"\n    Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "resource_format: str",
              "children": [
                {
                  "value": "resource_format: str",
                  "children": [
                    {
                      "value": "resource_format",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "\"\"\"\n    Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# --8<-- [end:BlockWebhookConfig]",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class Block(ABC, Generic[BlockSchemaInputType, BlockSchemaOutputType]):\n    def __init__(\n        self,\n        id: str = \"\",\n        description: str = \"\",\n        contributors: list[ContributorDetails] = [],\n        categories: set[BlockCategory] | None = None,\n        input_schema: Type[BlockSchemaInputType] = EmptySchema,\n        output_schema: Type[BlockSchemaOutputType] = EmptySchema,\n        test_input: BlockInput | list[BlockInput] | None = None,\n        test_output: BlockData | list[BlockData] | None = None,\n        test_mock: dict[str, Any] | None = None,\n        test_credentials: Optional[Credentials] = None,\n        disabled: bool = False,\n        static_output: bool = False,\n        block_type: BlockType = BlockType.STANDARD,\n        webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None,\n    ):\n        \"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"\n        self.id = id\n        self.input_schema = input_schema\n        self.output_schema = output_schema\n        self.test_input = test_input\n        self.test_output = test_output\n        self.test_mock = test_mock\n        self.test_credentials = test_credentials\n        self.description = description\n        self.categories = categories or set()\n        self.contributors = contributors or set()\n        self.disabled = disabled\n        self.static_output = static_output\n        self.block_type = block_type\n        self.webhook_config = webhook_config\n        self.execution_stats = {}\n\n        if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True\n\n    @classmethod\n    def create(cls: Type[\"Block\"]) -> \"Block\":\n        return cls()\n\n    @abstractmethod\n    def run(self, input_data: BlockSchemaInputType, **kwargs) -> BlockOutput:\n        \"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass\n\n    def run_once(self, input_data: BlockSchemaInputType, output: str, **kwargs) -> Any:\n        for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data\n        raise ValueError(f\"{self.name} did not produce any output for {output}\")\n\n    def merge_stats(self, stats: dict[str, Any]) -> dict[str, Any]:\n        for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value\n        return self.execution_stats\n\n    @property\n    def name(self):\n        return self.__class__.__name__\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }\n\n    def execute(self, input_data: BlockInput, **kwargs) -> BlockOutput:\n        if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )\n\n        for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data",
      "children": [
        {
          "value": "Block",
          "children": []
        },
        {
          "value": "(ABC, Generic[BlockSchemaInputType, BlockSchemaOutputType])",
          "children": [
            {
              "value": "ABC",
              "children": []
            },
            {
              "value": "Generic[BlockSchemaInputType, BlockSchemaOutputType]",
              "children": [
                {
                  "value": "Generic",
                  "children": []
                },
                {
                  "value": "BlockSchemaInputType",
                  "children": []
                },
                {
                  "value": "BlockSchemaOutputType",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "def __init__(\n        self,\n        id: str = \"\",\n        description: str = \"\",\n        contributors: list[ContributorDetails] = [],\n        categories: set[BlockCategory] | None = None,\n        input_schema: Type[BlockSchemaInputType] = EmptySchema,\n        output_schema: Type[BlockSchemaOutputType] = EmptySchema,\n        test_input: BlockInput | list[BlockInput] | None = None,\n        test_output: BlockData | list[BlockData] | None = None,\n        test_mock: dict[str, Any] | None = None,\n        test_credentials: Optional[Credentials] = None,\n        disabled: bool = False,\n        static_output: bool = False,\n        block_type: BlockType = BlockType.STANDARD,\n        webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None,\n    ):\n        \"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"\n        self.id = id\n        self.input_schema = input_schema\n        self.output_schema = output_schema\n        self.test_input = test_input\n        self.test_output = test_output\n        self.test_mock = test_mock\n        self.test_credentials = test_credentials\n        self.description = description\n        self.categories = categories or set()\n        self.contributors = contributors or set()\n        self.disabled = disabled\n        self.static_output = static_output\n        self.block_type = block_type\n        self.webhook_config = webhook_config\n        self.execution_stats = {}\n\n        if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True\n\n    @classmethod\n    def create(cls: Type[\"Block\"]) -> \"Block\":\n        return cls()\n\n    @abstractmethod\n    def run(self, input_data: BlockSchemaInputType, **kwargs) -> BlockOutput:\n        \"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass\n\n    def run_once(self, input_data: BlockSchemaInputType, output: str, **kwargs) -> Any:\n        for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data\n        raise ValueError(f\"{self.name} did not produce any output for {output}\")\n\n    def merge_stats(self, stats: dict[str, Any]) -> dict[str, Any]:\n        for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value\n        return self.execution_stats\n\n    @property\n    def name(self):\n        return self.__class__.__name__\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }\n\n    def execute(self, input_data: BlockInput, **kwargs) -> BlockOutput:\n        if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )\n\n        for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data",
          "children": [
            {
              "value": "def __init__(\n        self,\n        id: str = \"\",\n        description: str = \"\",\n        contributors: list[ContributorDetails] = [],\n        categories: set[BlockCategory] | None = None,\n        input_schema: Type[BlockSchemaInputType] = EmptySchema,\n        output_schema: Type[BlockSchemaOutputType] = EmptySchema,\n        test_input: BlockInput | list[BlockInput] | None = None,\n        test_output: BlockData | list[BlockData] | None = None,\n        test_mock: dict[str, Any] | None = None,\n        test_credentials: Optional[Credentials] = None,\n        disabled: bool = False,\n        static_output: bool = False,\n        block_type: BlockType = BlockType.STANDARD,\n        webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None,\n    ):\n        \"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"\n        self.id = id\n        self.input_schema = input_schema\n        self.output_schema = output_schema\n        self.test_input = test_input\n        self.test_output = test_output\n        self.test_mock = test_mock\n        self.test_credentials = test_credentials\n        self.description = description\n        self.categories = categories or set()\n        self.contributors = contributors or set()\n        self.disabled = disabled\n        self.static_output = static_output\n        self.block_type = block_type\n        self.webhook_config = webhook_config\n        self.execution_stats = {}\n\n        if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(\n        self,\n        id: str = \"\",\n        description: str = \"\",\n        contributors: list[ContributorDetails] = [],\n        categories: set[BlockCategory] | None = None,\n        input_schema: Type[BlockSchemaInputType] = EmptySchema,\n        output_schema: Type[BlockSchemaOutputType] = EmptySchema,\n        test_input: BlockInput | list[BlockInput] | None = None,\n        test_output: BlockData | list[BlockData] | None = None,\n        test_mock: dict[str, Any] | None = None,\n        test_credentials: Optional[Credentials] = None,\n        disabled: bool = False,\n        static_output: bool = False,\n        block_type: BlockType = BlockType.STANDARD,\n        webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None,\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "id: str = \"\"",
                      "children": [
                        {
                          "value": "id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "\"\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "description: str = \"\"",
                      "children": [
                        {
                          "value": "description",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "\"\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "contributors: list[ContributorDetails] = []",
                      "children": [
                        {
                          "value": "contributors",
                          "children": []
                        },
                        {
                          "value": "list[ContributorDetails]",
                          "children": [
                            {
                              "value": "list[ContributorDetails]",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "[ContributorDetails]",
                                  "children": [
                                    {
                                      "value": "ContributorDetails",
                                      "children": [
                                        {
                                          "value": "ContributorDetails",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "[]",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "categories: set[BlockCategory] | None = None",
                      "children": [
                        {
                          "value": "categories",
                          "children": []
                        },
                        {
                          "value": "set[BlockCategory] | None",
                          "children": [
                            {
                              "value": "set[BlockCategory] | None",
                              "children": [
                                {
                                  "value": "set[BlockCategory]",
                                  "children": [
                                    {
                                      "value": "set[BlockCategory]",
                                      "children": [
                                        {
                                          "value": "set",
                                          "children": []
                                        },
                                        {
                                          "value": "[BlockCategory]",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": [
                                                {
                                                  "value": "BlockCategory",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "None",
                                  "children": [
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "input_schema: Type[BlockSchemaInputType] = EmptySchema",
                      "children": [
                        {
                          "value": "input_schema",
                          "children": []
                        },
                        {
                          "value": "Type[BlockSchemaInputType]",
                          "children": [
                            {
                              "value": "Type[BlockSchemaInputType]",
                              "children": [
                                {
                                  "value": "Type",
                                  "children": []
                                },
                                {
                                  "value": "[BlockSchemaInputType]",
                                  "children": [
                                    {
                                      "value": "BlockSchemaInputType",
                                      "children": [
                                        {
                                          "value": "BlockSchemaInputType",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "EmptySchema",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "output_schema: Type[BlockSchemaOutputType] = EmptySchema",
                      "children": [
                        {
                          "value": "output_schema",
                          "children": []
                        },
                        {
                          "value": "Type[BlockSchemaOutputType]",
                          "children": [
                            {
                              "value": "Type[BlockSchemaOutputType]",
                              "children": [
                                {
                                  "value": "Type",
                                  "children": []
                                },
                                {
                                  "value": "[BlockSchemaOutputType]",
                                  "children": [
                                    {
                                      "value": "BlockSchemaOutputType",
                                      "children": [
                                        {
                                          "value": "BlockSchemaOutputType",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "EmptySchema",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "test_input: BlockInput | list[BlockInput] | None = None",
                      "children": [
                        {
                          "value": "test_input",
                          "children": []
                        },
                        {
                          "value": "BlockInput | list[BlockInput] | None",
                          "children": [
                            {
                              "value": "BlockInput | list[BlockInput] | None",
                              "children": [
                                {
                                  "value": "BlockInput | list[BlockInput]",
                                  "children": [
                                    {
                                      "value": "BlockInput",
                                      "children": []
                                    },
                                    {
                                      "value": "list[BlockInput]",
                                      "children": [
                                        {
                                          "value": "list",
                                          "children": []
                                        },
                                        {
                                          "value": "BlockInput",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "test_output: BlockData | list[BlockData] | None = None",
                      "children": [
                        {
                          "value": "test_output",
                          "children": []
                        },
                        {
                          "value": "BlockData | list[BlockData] | None",
                          "children": [
                            {
                              "value": "BlockData | list[BlockData] | None",
                              "children": [
                                {
                                  "value": "BlockData | list[BlockData]",
                                  "children": [
                                    {
                                      "value": "BlockData",
                                      "children": []
                                    },
                                    {
                                      "value": "list[BlockData]",
                                      "children": [
                                        {
                                          "value": "list",
                                          "children": []
                                        },
                                        {
                                          "value": "BlockData",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "test_mock: dict[str, Any] | None = None",
                      "children": [
                        {
                          "value": "test_mock",
                          "children": []
                        },
                        {
                          "value": "dict[str, Any] | None",
                          "children": [
                            {
                              "value": "dict[str, Any] | None",
                              "children": [
                                {
                                  "value": "dict[str, Any]",
                                  "children": [
                                    {
                                      "value": "dict[str, Any]",
                                      "children": [
                                        {
                                          "value": "dict",
                                          "children": []
                                        },
                                        {
                                          "value": "[str, Any]",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "Any",
                                              "children": [
                                                {
                                                  "value": "Any",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "None",
                                  "children": [
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "test_credentials: Optional[Credentials] = None",
                      "children": [
                        {
                          "value": "test_credentials",
                          "children": []
                        },
                        {
                          "value": "Optional[Credentials]",
                          "children": [
                            {
                              "value": "Optional[Credentials]",
                              "children": [
                                {
                                  "value": "Optional",
                                  "children": []
                                },
                                {
                                  "value": "[Credentials]",
                                  "children": [
                                    {
                                      "value": "Credentials",
                                      "children": [
                                        {
                                          "value": "Credentials",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "disabled: bool = False",
                      "children": [
                        {
                          "value": "disabled",
                          "children": []
                        },
                        {
                          "value": "bool",
                          "children": [
                            {
                              "value": "bool",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "False",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "static_output: bool = False",
                      "children": [
                        {
                          "value": "static_output",
                          "children": []
                        },
                        {
                          "value": "bool",
                          "children": [
                            {
                              "value": "bool",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "False",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "block_type: BlockType = BlockType.STANDARD",
                      "children": [
                        {
                          "value": "block_type",
                          "children": []
                        },
                        {
                          "value": "BlockType",
                          "children": [
                            {
                              "value": "BlockType",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "BlockType.STANDARD",
                          "children": [
                            {
                              "value": "BlockType",
                              "children": []
                            },
                            {
                              "value": "STANDARD",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None",
                      "children": [
                        {
                          "value": "webhook_config",
                          "children": []
                        },
                        {
                          "value": "Optional[BlockWebhookConfig | BlockManualWebhookConfig]",
                          "children": [
                            {
                              "value": "Optional[BlockWebhookConfig | BlockManualWebhookConfig]",
                              "children": [
                                {
                                  "value": "Optional",
                                  "children": []
                                },
                                {
                                  "value": "[BlockWebhookConfig | BlockManualWebhookConfig]",
                                  "children": [
                                    {
                                      "value": "BlockWebhookConfig | BlockManualWebhookConfig",
                                      "children": [
                                        {
                                          "value": "BlockWebhookConfig | BlockManualWebhookConfig",
                                          "children": [
                                            {
                                              "value": "BlockWebhookConfig",
                                              "children": []
                                            },
                                            {
                                              "value": "BlockManualWebhookConfig",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"\n        self.id = id\n        self.input_schema = input_schema\n        self.output_schema = output_schema\n        self.test_input = test_input\n        self.test_output = test_output\n        self.test_mock = test_mock\n        self.test_credentials = test_credentials\n        self.description = description\n        self.categories = categories or set()\n        self.contributors = contributors or set()\n        self.disabled = disabled\n        self.static_output = static_output\n        self.block_type = block_type\n        self.webhook_config = webhook_config\n        self.execution_stats = {}\n\n        if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True",
                  "children": [
                    {
                      "value": "\"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.id = id",
                      "children": [
                        {
                          "value": "self.id = id",
                          "children": [
                            {
                              "value": "self.id",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "id",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.input_schema = input_schema",
                      "children": [
                        {
                          "value": "self.input_schema = input_schema",
                          "children": [
                            {
                              "value": "self.input_schema",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "input_schema",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "input_schema",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.output_schema = output_schema",
                      "children": [
                        {
                          "value": "self.output_schema = output_schema",
                          "children": [
                            {
                              "value": "self.output_schema",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "output_schema",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "output_schema",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.test_input = test_input",
                      "children": [
                        {
                          "value": "self.test_input = test_input",
                          "children": [
                            {
                              "value": "self.test_input",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "test_input",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "test_input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.test_output = test_output",
                      "children": [
                        {
                          "value": "self.test_output = test_output",
                          "children": [
                            {
                              "value": "self.test_output",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "test_output",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "test_output",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.test_mock = test_mock",
                      "children": [
                        {
                          "value": "self.test_mock = test_mock",
                          "children": [
                            {
                              "value": "self.test_mock",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "test_mock",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "test_mock",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.test_credentials = test_credentials",
                      "children": [
                        {
                          "value": "self.test_credentials = test_credentials",
                          "children": [
                            {
                              "value": "self.test_credentials",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "test_credentials",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "test_credentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.description = description",
                      "children": [
                        {
                          "value": "self.description = description",
                          "children": [
                            {
                              "value": "self.description",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "description",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "description",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.categories = categories or set()",
                      "children": [
                        {
                          "value": "self.categories = categories or set()",
                          "children": [
                            {
                              "value": "self.categories",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "categories",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "categories or set()",
                              "children": [
                                {
                                  "value": "categories",
                                  "children": []
                                },
                                {
                                  "value": "set()",
                                  "children": [
                                    {
                                      "value": "set",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.contributors = contributors or set()",
                      "children": [
                        {
                          "value": "self.contributors = contributors or set()",
                          "children": [
                            {
                              "value": "self.contributors",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "contributors",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "contributors or set()",
                              "children": [
                                {
                                  "value": "contributors",
                                  "children": []
                                },
                                {
                                  "value": "set()",
                                  "children": [
                                    {
                                      "value": "set",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.disabled = disabled",
                      "children": [
                        {
                          "value": "self.disabled = disabled",
                          "children": [
                            {
                              "value": "self.disabled",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "disabled",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "disabled",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.static_output = static_output",
                      "children": [
                        {
                          "value": "self.static_output = static_output",
                          "children": [
                            {
                              "value": "self.static_output",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "static_output",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "static_output",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.block_type = block_type",
                      "children": [
                        {
                          "value": "self.block_type = block_type",
                          "children": [
                            {
                              "value": "self.block_type",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "block_type",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "block_type",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.webhook_config = webhook_config",
                      "children": [
                        {
                          "value": "self.webhook_config = webhook_config",
                          "children": [
                            {
                              "value": "self.webhook_config",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "webhook_config",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "webhook_config",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.execution_stats = {}",
                      "children": [
                        {
                          "value": "self.execution_stats = {}",
                          "children": [
                            {
                              "value": "self.execution_stats",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "execution_stats",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "{}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True",
                      "children": [
                        {
                          "value": "self.webhook_config",
                          "children": [
                            {
                              "value": "self",
                              "children": []
                            },
                            {
                              "value": "webhook_config",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n\n            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n\n            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n\n            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True",
                          "children": [
                            {
                              "value": "if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK\n            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL",
                              "children": [
                                {
                                  "value": "isinstance(self.webhook_config, BlockWebhookConfig)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(self.webhook_config, BlockWebhookConfig)",
                                      "children": [
                                        {
                                          "value": "self.webhook_config",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "webhook_config",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "BlockWebhookConfig",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Enforce presence of credentials field on auto-setup webhook blocks",
                                  "children": []
                                },
                                {
                                  "value": "if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n                self.block_type = BlockType.WEBHOOK",
                                  "children": [
                                    {
                                      "value": "if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )",
                                      "children": [
                                        {
                                          "value": "CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields",
                                          "children": [
                                            {
                                              "value": "CREDENTIALS_FIELD_NAME",
                                              "children": []
                                            },
                                            {
                                              "value": "self.input_schema.model_fields",
                                              "children": [
                                                {
                                                  "value": "self.input_schema",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "input_schema",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "model_fields",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )",
                                          "children": [
                                            {
                                              "value": "raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "TypeError",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "\"credentials field is required on auto-setup webhook blocks\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "credentials field is required on auto-setup webhook blocks",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.block_type = BlockType.WEBHOOK",
                                      "children": [
                                        {
                                          "value": "self.block_type = BlockType.WEBHOOK",
                                          "children": [
                                            {
                                              "value": "self.block_type",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "block_type",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "BlockType.WEBHOOK",
                                              "children": [
                                                {
                                                  "value": "BlockType",
                                                  "children": []
                                                },
                                                {
                                                  "value": "WEBHOOK",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "else:\n                self.block_type = BlockType.WEBHOOK_MANUAL",
                                  "children": [
                                    {
                                      "value": "self.block_type = BlockType.WEBHOOK_MANUAL",
                                      "children": [
                                        {
                                          "value": "self.block_type = BlockType.WEBHOOK_MANUAL",
                                          "children": [
                                            {
                                              "value": "self.block_type = BlockType.WEBHOOK_MANUAL",
                                              "children": [
                                                {
                                                  "value": "self.block_type",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "block_type",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "BlockType.WEBHOOK_MANUAL",
                                                  "children": [
                                                    {
                                                      "value": "BlockType",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "WEBHOOK_MANUAL",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# Enforce shape of webhook event filter, if present",
                              "children": []
                            },
                            {
                              "value": "if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                              "children": [
                                {
                                  "value": "self.webhook_config.event_filter_input",
                                  "children": [
                                    {
                                      "value": "self.webhook_config",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "webhook_config",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "event_filter_input",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                  "children": [
                                    {
                                      "value": "event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]",
                                      "children": [
                                        {
                                          "value": "event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]",
                                          "children": [
                                            {
                                              "value": "event_filter_field",
                                              "children": []
                                            },
                                            {
                                              "value": "self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]",
                                              "children": [
                                                {
                                                  "value": "self.input_schema.model_fields",
                                                  "children": [
                                                    {
                                                      "value": "self.input_schema",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_schema",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "model_fields",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "self.webhook_config.event_filter_input",
                                                  "children": [
                                                    {
                                                      "value": "self.webhook_config",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "webhook_config",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "event_filter_input",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                      "children": [
                                        {
                                          "value": "not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                )",
                                          "children": [
                                            {
                                              "value": "(\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                )",
                                              "children": [
                                                {
                                                  "value": "isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)",
                                                      "children": [
                                                        {
                                                          "value": "isinstance(event_filter_field.annotation, type)",
                                                          "children": [
                                                            {
                                                              "value": "isinstance",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(event_filter_field.annotation, type)",
                                                              "children": [
                                                                {
                                                                  "value": "event_filter_field.annotation",
                                                                  "children": [
                                                                    {
                                                                      "value": "event_filter_field",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "annotation",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "type",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "issubclass(event_filter_field.annotation, BaseModel)",
                                                          "children": [
                                                            {
                                                              "value": "issubclass",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(event_filter_field.annotation, BaseModel)",
                                                              "children": [
                                                                {
                                                                  "value": "event_filter_field.annotation",
                                                                  "children": [
                                                                    {
                                                                      "value": "event_filter_field",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "annotation",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "BaseModel",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "all",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "field.annotation is bool",
                                                              "children": [
                                                                {
                                                                  "value": "field.annotation",
                                                                  "children": [
                                                                    {
                                                                      "value": "field",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "annotation",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "bool",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "for field in event_filter_field.annotation.model_fields.values()",
                                                              "children": [
                                                                {
                                                                  "value": "field",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "event_filter_field.annotation.model_fields.values()",
                                                                  "children": [
                                                                    {
                                                                      "value": "event_filter_field.annotation.model_fields.values",
                                                                      "children": [
                                                                        {
                                                                          "value": "event_filter_field.annotation.model_fields",
                                                                          "children": [
                                                                            {
                                                                              "value": "event_filter_field.annotation",
                                                                              "children": [
                                                                                {
                                                                                  "value": "event_filter_field",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "annotation",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "model_fields",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "values",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "()",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                          "children": [
                                            {
                                              "value": "raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "NotImplementedError",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"{self.name} has an invalid webhook event selector: \"",
                                                              "children": [
                                                                {
                                                                  "value": "f\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{self.name}",
                                                                  "children": [
                                                                    {
                                                                      "value": "self.name",
                                                                      "children": [
                                                                        {
                                                                          "value": "self",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "name",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "has an invalid webhook event selector:",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"field must be a BaseModel and all its fields must be boolean\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "field must be a BaseModel and all its fields must be boolean",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# Enforce presence of 'payload' input",
                              "children": []
                            },
                            {
                              "value": "if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )",
                              "children": [
                                {
                                  "value": "\"payload\" not in self.input_schema.model_fields",
                                  "children": [
                                    {
                                      "value": "\"payload\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "payload",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.input_schema.model_fields",
                                      "children": [
                                        {
                                          "value": "self.input_schema",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "input_schema",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "model_fields",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )",
                                  "children": [
                                    {
                                      "value": "raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )",
                                      "children": [
                                        {
                                          "value": "TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )",
                                          "children": [
                                            {
                                              "value": "TypeError",
                                              "children": []
                                            },
                                            {
                                              "value": "(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )",
                                              "children": [
                                                {
                                                  "value": "f\"{self.name} is webhook-triggered but has no 'payload' input\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{self.name}",
                                                      "children": [
                                                        {
                                                          "value": "self.name",
                                                          "children": [
                                                            {
                                                              "value": "self",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "name",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "is webhook-triggered but has no 'payload' input",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# Disable webhook-triggered block if webhook functionality not available",
                              "children": []
                            },
                            {
                              "value": "if not app_config.platform_base_url:\n                self.disabled = True",
                              "children": [
                                {
                                  "value": "not app_config.platform_base_url",
                                  "children": [
                                    {
                                      "value": "app_config.platform_base_url",
                                      "children": [
                                        {
                                          "value": "app_config",
                                          "children": []
                                        },
                                        {
                                          "value": "platform_base_url",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.disabled = True",
                                  "children": [
                                    {
                                      "value": "self.disabled = True",
                                      "children": [
                                        {
                                          "value": "self.disabled = True",
                                          "children": [
                                            {
                                              "value": "self.disabled",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "disabled",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "True",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@classmethod\n    def create(cls: Type[\"Block\"]) -> \"Block\":\n        return cls()",
              "children": [
                {
                  "value": "@classmethod",
                  "children": [
                    {
                      "value": "classmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def create(cls: Type[\"Block\"]) -> \"Block\":\n        return cls()",
                  "children": [
                    {
                      "value": "create",
                      "children": []
                    },
                    {
                      "value": "(cls: Type[\"Block\"])",
                      "children": [
                        {
                          "value": "cls: Type[\"Block\"]",
                          "children": [
                            {
                              "value": "cls",
                              "children": []
                            },
                            {
                              "value": "Type[\"Block\"]",
                              "children": [
                                {
                                  "value": "Type[\"Block\"]",
                                  "children": [
                                    {
                                      "value": "Type",
                                      "children": []
                                    },
                                    {
                                      "value": "[\"Block\"]",
                                      "children": [
                                        {
                                          "value": "\"Block\"",
                                          "children": [
                                            {
                                              "value": "\"Block\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Block",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "\"Block\"",
                      "children": [
                        {
                          "value": "\"Block\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Block",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return cls()",
                      "children": [
                        {
                          "value": "return cls()",
                          "children": [
                            {
                              "value": "cls()",
                              "children": [
                                {
                                  "value": "cls",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@abstractmethod\n    def run(self, input_data: BlockSchemaInputType, **kwargs) -> BlockOutput:\n        \"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass",
              "children": [
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def run(self, input_data: BlockSchemaInputType, **kwargs) -> BlockOutput:\n        \"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass",
                  "children": [
                    {
                      "value": "run",
                      "children": []
                    },
                    {
                      "value": "(self, input_data: BlockSchemaInputType, **kwargs)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "input_data: BlockSchemaInputType",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "BlockSchemaInputType",
                              "children": [
                                {
                                  "value": "BlockSchemaInputType",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "**kwargs",
                          "children": [
                            {
                              "value": "kwargs",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "BlockOutput",
                      "children": [
                        {
                          "value": "BlockOutput",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass",
                      "children": [
                        {
                          "value": "\"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "pass",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run_once(self, input_data: BlockSchemaInputType, output: str, **kwargs) -> Any:\n        for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data\n        raise ValueError(f\"{self.name} did not produce any output for {output}\")",
              "children": [
                {
                  "value": "run_once",
                  "children": []
                },
                {
                  "value": "(self, input_data: BlockSchemaInputType, output: str, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: BlockSchemaInputType",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "BlockSchemaInputType",
                          "children": [
                            {
                              "value": "BlockSchemaInputType",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "output: str",
                      "children": [
                        {
                          "value": "output",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data\n        raise ValueError(f\"{self.name} did not produce any output for {output}\")",
                  "children": [
                    {
                      "value": "for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data",
                      "children": [
                        {
                          "value": "name, data",
                          "children": [
                            {
                              "value": "name",
                              "children": []
                            },
                            {
                              "value": "data",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "self.run(input_data, **kwargs)",
                          "children": [
                            {
                              "value": "self.run",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "run",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(input_data, **kwargs)",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "**kwargs",
                                  "children": [
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if name == output:\n                return data",
                          "children": [
                            {
                              "value": "if name == output:\n                return data",
                              "children": [
                                {
                                  "value": "name == output",
                                  "children": [
                                    {
                                      "value": "name",
                                      "children": []
                                    },
                                    {
                                      "value": "output",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "return data",
                                  "children": [
                                    {
                                      "value": "return data",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise ValueError(f\"{self.name} did not produce any output for {output}\")",
                      "children": [
                        {
                          "value": "ValueError(f\"{self.name} did not produce any output for {output}\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(f\"{self.name} did not produce any output for {output}\")",
                              "children": [
                                {
                                  "value": "f\"{self.name} did not produce any output for {output}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "{self.name}",
                                      "children": [
                                        {
                                          "value": "self.name",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "did not produce any output for",
                                      "children": []
                                    },
                                    {
                                      "value": "{output}",
                                      "children": [
                                        {
                                          "value": "output",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def merge_stats(self, stats: dict[str, Any]) -> dict[str, Any]:\n        for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value\n        return self.execution_stats",
              "children": [
                {
                  "value": "merge_stats",
                  "children": []
                },
                {
                  "value": "(self, stats: dict[str, Any])",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "stats: dict[str, Any]",
                      "children": [
                        {
                          "value": "stats",
                          "children": []
                        },
                        {
                          "value": "dict[str, Any]",
                          "children": [
                            {
                              "value": "dict[str, Any]",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                },
                                {
                                  "value": "[str, Any]",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "Any",
                                      "children": [
                                        {
                                          "value": "Any",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "dict[str, Any]",
                  "children": [
                    {
                      "value": "dict[str, Any]",
                      "children": [
                        {
                          "value": "dict",
                          "children": []
                        },
                        {
                          "value": "[str, Any]",
                          "children": [
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Any",
                              "children": [
                                {
                                  "value": "Any",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value\n        return self.execution_stats",
                  "children": [
                    {
                      "value": "for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value",
                      "children": [
                        {
                          "value": "key, value",
                          "children": [
                            {
                              "value": "key",
                              "children": []
                            },
                            {
                              "value": "value",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "stats.items()",
                          "children": [
                            {
                              "value": "stats.items",
                              "children": [
                                {
                                  "value": "stats",
                                  "children": []
                                },
                                {
                                  "value": "items",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value",
                          "children": [
                            {
                              "value": "if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value",
                              "children": [
                                {
                                  "value": "isinstance(value, dict)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(value, dict)",
                                      "children": [
                                        {
                                          "value": "value",
                                          "children": []
                                        },
                                        {
                                          "value": "dict",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.execution_stats.setdefault(key, {}).update(value)",
                                  "children": [
                                    {
                                      "value": "self.execution_stats.setdefault(key, {}).update(value)",
                                      "children": [
                                        {
                                          "value": "self.execution_stats.setdefault(key, {}).update(value)",
                                          "children": [
                                            {
                                              "value": "self.execution_stats.setdefault(key, {}).update",
                                              "children": [
                                                {
                                                  "value": "self.execution_stats.setdefault(key, {})",
                                                  "children": [
                                                    {
                                                      "value": "self.execution_stats.setdefault",
                                                      "children": [
                                                        {
                                                          "value": "self.execution_stats",
                                                          "children": [
                                                            {
                                                              "value": "self",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "execution_stats",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "setdefault",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(key, {})",
                                                      "children": [
                                                        {
                                                          "value": "key",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{}",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "update",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(value)",
                                              "children": [
                                                {
                                                  "value": "value",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value",
                                  "children": [
                                    {
                                      "value": "isinstance(value, (int, float))",
                                      "children": [
                                        {
                                          "value": "isinstance",
                                          "children": []
                                        },
                                        {
                                          "value": "(value, (int, float))",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            },
                                            {
                                              "value": "(int, float)",
                                              "children": [
                                                {
                                                  "value": "int",
                                                  "children": []
                                                },
                                                {
                                                  "value": "float",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value",
                                      "children": [
                                        {
                                          "value": "self.execution_stats.setdefault(key, 0)",
                                          "children": [
                                            {
                                              "value": "self.execution_stats.setdefault(key, 0)",
                                              "children": [
                                                {
                                                  "value": "self.execution_stats.setdefault",
                                                  "children": [
                                                    {
                                                      "value": "self.execution_stats",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "execution_stats",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "setdefault",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(key, 0)",
                                                  "children": [
                                                    {
                                                      "value": "key",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "self.execution_stats[key] += value",
                                          "children": [
                                            {
                                              "value": "self.execution_stats[key] += value",
                                              "children": [
                                                {
                                                  "value": "self.execution_stats[key]",
                                                  "children": [
                                                    {
                                                      "value": "self.execution_stats",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "execution_stats",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "key",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "value",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)",
                                  "children": [
                                    {
                                      "value": "isinstance(value, list)",
                                      "children": [
                                        {
                                          "value": "isinstance",
                                          "children": []
                                        },
                                        {
                                          "value": "(value, list)",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            },
                                            {
                                              "value": "list",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)",
                                      "children": [
                                        {
                                          "value": "self.execution_stats.setdefault(key, [])",
                                          "children": [
                                            {
                                              "value": "self.execution_stats.setdefault(key, [])",
                                              "children": [
                                                {
                                                  "value": "self.execution_stats.setdefault",
                                                  "children": [
                                                    {
                                                      "value": "self.execution_stats",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "execution_stats",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "setdefault",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(key, [])",
                                                  "children": [
                                                    {
                                                      "value": "key",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "[]",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "self.execution_stats[key].extend(value)",
                                          "children": [
                                            {
                                              "value": "self.execution_stats[key].extend(value)",
                                              "children": [
                                                {
                                                  "value": "self.execution_stats[key].extend",
                                                  "children": [
                                                    {
                                                      "value": "self.execution_stats[key]",
                                                      "children": [
                                                        {
                                                          "value": "self.execution_stats",
                                                          "children": [
                                                            {
                                                              "value": "self",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "execution_stats",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "key",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "extend",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(value)",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "else:\n                self.execution_stats[key] = value",
                                  "children": [
                                    {
                                      "value": "self.execution_stats[key] = value",
                                      "children": [
                                        {
                                          "value": "self.execution_stats[key] = value",
                                          "children": [
                                            {
                                              "value": "self.execution_stats[key] = value",
                                              "children": [
                                                {
                                                  "value": "self.execution_stats[key]",
                                                  "children": [
                                                    {
                                                      "value": "self.execution_stats",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "execution_stats",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "key",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "value",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return self.execution_stats",
                      "children": [
                        {
                          "value": "self.execution_stats",
                          "children": [
                            {
                              "value": "self",
                              "children": []
                            },
                            {
                              "value": "execution_stats",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@property\n    def name(self):\n        return self.__class__.__name__",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def name(self):\n        return self.__class__.__name__",
                  "children": [
                    {
                      "value": "name",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return self.__class__.__name__",
                      "children": [
                        {
                          "value": "return self.__class__.__name__",
                          "children": [
                            {
                              "value": "self.__class__.__name__",
                              "children": [
                                {
                                  "value": "self.__class__",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "__class__",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__name__",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }",
              "children": [
                {
                  "value": "to_dict",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }",
                  "children": [
                    {
                      "value": "return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }",
                      "children": [
                        {
                          "value": "{\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }",
                          "children": [
                            {
                              "value": "\"id\": self.id",
                              "children": [
                                {
                                  "value": "\"id\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.id",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"name\": self.name",
                              "children": [
                                {
                                  "value": "\"name\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "name",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.name",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "name",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"inputSchema\": self.input_schema.jsonschema()",
                              "children": [
                                {
                                  "value": "\"inputSchema\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "inputSchema",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.input_schema.jsonschema()",
                                  "children": [
                                    {
                                      "value": "self.input_schema.jsonschema",
                                      "children": [
                                        {
                                          "value": "self.input_schema",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "input_schema",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "jsonschema",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"outputSchema\": self.output_schema.jsonschema()",
                              "children": [
                                {
                                  "value": "\"outputSchema\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "outputSchema",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.output_schema.jsonschema()",
                                  "children": [
                                    {
                                      "value": "self.output_schema.jsonschema",
                                      "children": [
                                        {
                                          "value": "self.output_schema",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "output_schema",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "jsonschema",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"description\": self.description",
                              "children": [
                                {
                                  "value": "\"description\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.description",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "description",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"categories\": [category.dict() for category in self.categories]",
                              "children": [
                                {
                                  "value": "\"categories\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "[category.dict() for category in self.categories]",
                                  "children": [
                                    {
                                      "value": "category.dict()",
                                      "children": [
                                        {
                                          "value": "category.dict",
                                          "children": [
                                            {
                                              "value": "category",
                                              "children": []
                                            },
                                            {
                                              "value": "dict",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for category in self.categories",
                                      "children": [
                                        {
                                          "value": "category",
                                          "children": []
                                        },
                                        {
                                          "value": "self.categories",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "categories",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ]",
                              "children": [
                                {
                                  "value": "\"contributors\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "contributors",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "[\n                contributor.model_dump() for contributor in self.contributors\n            ]",
                                  "children": [
                                    {
                                      "value": "contributor.model_dump()",
                                      "children": [
                                        {
                                          "value": "contributor.model_dump",
                                          "children": [
                                            {
                                              "value": "contributor",
                                              "children": []
                                            },
                                            {
                                              "value": "model_dump",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for contributor in self.contributors",
                                      "children": [
                                        {
                                          "value": "contributor",
                                          "children": []
                                        },
                                        {
                                          "value": "self.contributors",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "contributors",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"staticOutput\": self.static_output",
                              "children": [
                                {
                                  "value": "\"staticOutput\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "staticOutput",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.static_output",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "static_output",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"uiType\": self.block_type.value",
                              "children": [
                                {
                                  "value": "\"uiType\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "uiType",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "self.block_type.value",
                                  "children": [
                                    {
                                      "value": "self.block_type",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "block_type",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "value",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def execute(self, input_data: BlockInput, **kwargs) -> BlockOutput:\n        if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )\n\n        for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data",
              "children": [
                {
                  "value": "execute",
                  "children": []
                },
                {
                  "value": "(self, input_data: BlockInput, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: BlockInput",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "BlockInput",
                          "children": [
                            {
                              "value": "BlockInput",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )\n\n        for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data",
                  "children": [
                    {
                      "value": "if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )",
                      "children": [
                        {
                          "value": "error := self.input_schema.validate_data(input_data)",
                          "children": [
                            {
                              "value": "error",
                              "children": []
                            },
                            {
                              "value": "self.input_schema.validate_data(input_data)",
                              "children": [
                                {
                                  "value": "self.input_schema.validate_data",
                                  "children": [
                                    {
                                      "value": "self.input_schema",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "input_schema",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "validate_data",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(input_data)",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )",
                          "children": [
                            {
                              "value": "raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )",
                              "children": [
                                {
                                  "value": "ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )",
                                      "children": [
                                        {
                                          "value": "f\"Unable to execute block with invalid input data: {error}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Unable to execute block with invalid input data:",
                                              "children": []
                                            },
                                            {
                                              "value": "{error}",
                                              "children": [
                                                {
                                                  "value": "error",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data",
                      "children": [
                        {
                          "value": "output_name, output_data",
                          "children": [
                            {
                              "value": "output_name",
                              "children": []
                            },
                            {
                              "value": "output_data",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "self.run(\n            self.input_schema(**input_data), **kwargs\n        )",
                          "children": [
                            {
                              "value": "self.run",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "run",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            self.input_schema(**input_data), **kwargs\n        )",
                              "children": [
                                {
                                  "value": "self.input_schema(**input_data)",
                                  "children": [
                                    {
                                      "value": "self.input_schema",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "input_schema",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(**input_data)",
                                      "children": [
                                        {
                                          "value": "**input_data",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs",
                                  "children": [
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data",
                          "children": [
                            {
                              "value": "if output_name == \"error\":\n                raise RuntimeError(output_data)",
                              "children": [
                                {
                                  "value": "output_name == \"error\"",
                                  "children": [
                                    {
                                      "value": "output_name",
                                      "children": []
                                    },
                                    {
                                      "value": "\"error\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "error",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise RuntimeError(output_data)",
                                  "children": [
                                    {
                                      "value": "raise RuntimeError(output_data)",
                                      "children": [
                                        {
                                          "value": "RuntimeError(output_data)",
                                          "children": [
                                            {
                                              "value": "RuntimeError",
                                              "children": []
                                            },
                                            {
                                              "value": "(output_data)",
                                              "children": [
                                                {
                                                  "value": "output_data",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")",
                              "children": [
                                {
                                  "value": "self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            )",
                                  "children": [
                                    {
                                      "value": "self.block_type == BlockType.STANDARD",
                                      "children": [
                                        {
                                          "value": "self.block_type",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "block_type",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "BlockType.STANDARD",
                                          "children": [
                                            {
                                              "value": "BlockType",
                                              "children": []
                                            },
                                            {
                                              "value": "STANDARD",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n                error := self.output_schema.validate_field(output_name, output_data)\n            )",
                                      "children": [
                                        {
                                          "value": "error := self.output_schema.validate_field(output_name, output_data)",
                                          "children": [
                                            {
                                              "value": "error",
                                              "children": []
                                            },
                                            {
                                              "value": "self.output_schema.validate_field(output_name, output_data)",
                                              "children": [
                                                {
                                                  "value": "self.output_schema.validate_field",
                                                  "children": [
                                                    {
                                                      "value": "self.output_schema",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "output_schema",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "validate_field",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(output_name, output_data)",
                                                  "children": [
                                                    {
                                                      "value": "output_name",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "output_data",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise ValueError(f\"Block produced an invalid output data: {error}\")",
                                  "children": [
                                    {
                                      "value": "raise ValueError(f\"Block produced an invalid output data: {error}\")",
                                      "children": [
                                        {
                                          "value": "ValueError(f\"Block produced an invalid output data: {error}\")",
                                          "children": [
                                            {
                                              "value": "ValueError",
                                              "children": []
                                            },
                                            {
                                              "value": "(f\"Block produced an invalid output data: {error}\")",
                                              "children": [
                                                {
                                                  "value": "f\"Block produced an invalid output data: {error}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Block produced an invalid output data:",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{error}",
                                                      "children": [
                                                        {
                                                          "value": "error",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "yield output_name, output_data",
                              "children": [
                                {
                                  "value": "yield output_name, output_data",
                                  "children": [
                                    {
                                      "value": "output_name, output_data",
                                      "children": [
                                        {
                                          "value": "output_name",
                                          "children": []
                                        },
                                        {
                                          "value": "output_data",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# ======================= Block Helper Functions ======================= #",
      "children": []
    },
    {
      "value": "def get_blocks() -> dict[str, Type[Block]]:\n    from backend.blocks import AVAILABLE_BLOCKS  # noqa: E402\n\n    return AVAILABLE_BLOCKS",
      "children": [
        {
          "value": "get_blocks",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "dict[str, Type[Block]]",
          "children": [
            {
              "value": "dict[str, Type[Block]]",
              "children": [
                {
                  "value": "dict",
                  "children": []
                },
                {
                  "value": "[str, Type[Block]]",
                  "children": [
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "Type[Block]",
                      "children": [
                        {
                          "value": "Type[Block]",
                          "children": [
                            {
                              "value": "Type",
                              "children": []
                            },
                            {
                              "value": "[Block]",
                              "children": [
                                {
                                  "value": "Block",
                                  "children": [
                                    {
                                      "value": "Block",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "from backend.blocks import AVAILABLE_BLOCKS  # noqa: E402\n\n    return AVAILABLE_BLOCKS",
          "children": [
            {
              "value": "from backend.blocks import AVAILABLE_BLOCKS",
              "children": [
                {
                  "value": "backend.blocks",
                  "children": [
                    {
                      "value": "backend",
                      "children": []
                    },
                    {
                      "value": "blocks",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "AVAILABLE_BLOCKS",
                  "children": [
                    {
                      "value": "AVAILABLE_BLOCKS",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# noqa: E402",
              "children": []
            },
            {
              "value": "return AVAILABLE_BLOCKS",
              "children": [
                {
                  "value": "AVAILABLE_BLOCKS",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def initialize_blocks() -> None:\n    for cls in get_blocks().values():\n        block = cls()\n        existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )\n        if not existing_block:\n            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue\n\n        input_schema = json.dumps(block.input_schema.jsonschema())\n        output_schema = json.dumps(block.output_schema.jsonschema())\n        if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
      "children": [
        {
          "value": "initialize_blocks",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "for cls in get_blocks().values():\n        block = cls()\n        existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )\n        if not existing_block:\n            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue\n\n        input_schema = json.dumps(block.input_schema.jsonschema())\n        output_schema = json.dumps(block.output_schema.jsonschema())\n        if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
          "children": [
            {
              "value": "for cls in get_blocks().values():\n        block = cls()\n        existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )\n        if not existing_block:\n            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue\n\n        input_schema = json.dumps(block.input_schema.jsonschema())\n        output_schema = json.dumps(block.output_schema.jsonschema())\n        if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
              "children": [
                {
                  "value": "cls",
                  "children": []
                },
                {
                  "value": "get_blocks().values()",
                  "children": [
                    {
                      "value": "get_blocks().values",
                      "children": [
                        {
                          "value": "get_blocks()",
                          "children": [
                            {
                              "value": "get_blocks",
                              "children": []
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "values",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "block = cls()\n        existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )\n        if not existing_block:\n            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue\n\n        input_schema = json.dumps(block.input_schema.jsonschema())\n        output_schema = json.dumps(block.output_schema.jsonschema())\n        if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                  "children": [
                    {
                      "value": "block = cls()",
                      "children": [
                        {
                          "value": "block = cls()",
                          "children": [
                            {
                              "value": "block",
                              "children": []
                            },
                            {
                              "value": "cls()",
                              "children": [
                                {
                                  "value": "cls",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )",
                      "children": [
                        {
                          "value": "existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )",
                          "children": [
                            {
                              "value": "existing_block",
                              "children": []
                            },
                            {
                              "value": "await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )",
                              "children": [
                                {
                                  "value": "AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )",
                                  "children": [
                                    {
                                      "value": "AgentBlock.prisma().find_first",
                                      "children": [
                                        {
                                          "value": "AgentBlock.prisma()",
                                          "children": [
                                            {
                                              "value": "AgentBlock.prisma",
                                              "children": [
                                                {
                                                  "value": "AgentBlock",
                                                  "children": []
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "find_first",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )",
                                      "children": [
                                        {
                                          "value": "where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}",
                                          "children": [
                                            {
                                              "value": "where",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}",
                                              "children": [
                                                {
                                                  "value": "\"OR\": [{\"id\": block.id}, {\"name\": block.name}]",
                                                  "children": [
                                                    {
                                                      "value": "\"OR\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "OR",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "[{\"id\": block.id}, {\"name\": block.name}]",
                                                      "children": [
                                                        {
                                                          "value": "{\"id\": block.id}",
                                                          "children": [
                                                            {
                                                              "value": "\"id\": block.id",
                                                              "children": [
                                                                {
                                                                  "value": "\"id\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "id",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "block.id",
                                                                  "children": [
                                                                    {
                                                                      "value": "block",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "id",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "{\"name\": block.name}",
                                                          "children": [
                                                            {
                                                              "value": "\"name\": block.name",
                                                              "children": [
                                                                {
                                                                  "value": "\"name\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "name",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "block.name",
                                                                  "children": [
                                                                    {
                                                                      "value": "block",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "name",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not existing_block:\n            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue",
                      "children": [
                        {
                          "value": "not existing_block",
                          "children": [
                            {
                              "value": "existing_block",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n            continue",
                          "children": [
                            {
                              "value": "await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )",
                              "children": [
                                {
                                  "value": "await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )",
                                  "children": [
                                    {
                                      "value": "AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )",
                                      "children": [
                                        {
                                          "value": "AgentBlock.prisma().create",
                                          "children": [
                                            {
                                              "value": "AgentBlock.prisma()",
                                              "children": [
                                                {
                                                  "value": "AgentBlock.prisma",
                                                  "children": [
                                                    {
                                                      "value": "AgentBlock",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "prisma",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "create",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )",
                                          "children": [
                                            {
                                              "value": "data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }",
                                              "children": [
                                                {
                                                  "value": "data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }",
                                                  "children": [
                                                    {
                                                      "value": "\"id\": block.id",
                                                      "children": [
                                                        {
                                                          "value": "\"id\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "id",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "block.id",
                                                          "children": [
                                                            {
                                                              "value": "block",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "id",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"name\": block.name",
                                                      "children": [
                                                        {
                                                          "value": "\"name\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "name",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "block.name",
                                                          "children": [
                                                            {
                                                              "value": "block",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "name",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"inputSchema\": json.dumps(block.input_schema.jsonschema())",
                                                      "children": [
                                                        {
                                                          "value": "\"inputSchema\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "inputSchema",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "json.dumps(block.input_schema.jsonschema())",
                                                          "children": [
                                                            {
                                                              "value": "json.dumps",
                                                              "children": [
                                                                {
                                                                  "value": "json",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "dumps",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(block.input_schema.jsonschema())",
                                                              "children": [
                                                                {
                                                                  "value": "block.input_schema.jsonschema()",
                                                                  "children": [
                                                                    {
                                                                      "value": "block.input_schema.jsonschema",
                                                                      "children": [
                                                                        {
                                                                          "value": "block.input_schema",
                                                                          "children": [
                                                                            {
                                                                              "value": "block",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "input_schema",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "jsonschema",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "()",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"outputSchema\": json.dumps(block.output_schema.jsonschema())",
                                                      "children": [
                                                        {
                                                          "value": "\"outputSchema\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "outputSchema",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "json.dumps(block.output_schema.jsonschema())",
                                                          "children": [
                                                            {
                                                              "value": "json.dumps",
                                                              "children": [
                                                                {
                                                                  "value": "json",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "dumps",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(block.output_schema.jsonschema())",
                                                              "children": [
                                                                {
                                                                  "value": "block.output_schema.jsonschema()",
                                                                  "children": [
                                                                    {
                                                                      "value": "block.output_schema.jsonschema",
                                                                      "children": [
                                                                        {
                                                                          "value": "block.output_schema",
                                                                          "children": [
                                                                            {
                                                                              "value": "block",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "output_schema",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "jsonschema",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "()",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "continue",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "input_schema = json.dumps(block.input_schema.jsonschema())",
                      "children": [
                        {
                          "value": "input_schema = json.dumps(block.input_schema.jsonschema())",
                          "children": [
                            {
                              "value": "input_schema",
                              "children": []
                            },
                            {
                              "value": "json.dumps(block.input_schema.jsonschema())",
                              "children": [
                                {
                                  "value": "json.dumps",
                                  "children": [
                                    {
                                      "value": "json",
                                      "children": []
                                    },
                                    {
                                      "value": "dumps",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(block.input_schema.jsonschema())",
                                  "children": [
                                    {
                                      "value": "block.input_schema.jsonschema()",
                                      "children": [
                                        {
                                          "value": "block.input_schema.jsonschema",
                                          "children": [
                                            {
                                              "value": "block.input_schema",
                                              "children": [
                                                {
                                                  "value": "block",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_schema",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "jsonschema",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "output_schema = json.dumps(block.output_schema.jsonschema())",
                      "children": [
                        {
                          "value": "output_schema = json.dumps(block.output_schema.jsonschema())",
                          "children": [
                            {
                              "value": "output_schema",
                              "children": []
                            },
                            {
                              "value": "json.dumps(block.output_schema.jsonschema())",
                              "children": [
                                {
                                  "value": "json.dumps",
                                  "children": [
                                    {
                                      "value": "json",
                                      "children": []
                                    },
                                    {
                                      "value": "dumps",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(block.output_schema.jsonschema())",
                                  "children": [
                                    {
                                      "value": "block.output_schema.jsonschema()",
                                      "children": [
                                        {
                                          "value": "block.output_schema.jsonschema",
                                          "children": [
                                            {
                                              "value": "block.output_schema",
                                              "children": [
                                                {
                                                  "value": "block",
                                                  "children": []
                                                },
                                                {
                                                  "value": "output_schema",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "jsonschema",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                      "children": [
                        {
                          "value": "(\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        )",
                          "children": [
                            {
                              "value": "block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema",
                              "children": [
                                {
                                  "value": "block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema",
                                  "children": [
                                    {
                                      "value": "block.id != existing_block.id\n            or block.name != existing_block.name",
                                      "children": [
                                        {
                                          "value": "block.id != existing_block.id",
                                          "children": [
                                            {
                                              "value": "block.id",
                                              "children": [
                                                {
                                                  "value": "block",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "existing_block.id",
                                              "children": [
                                                {
                                                  "value": "existing_block",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "block.name != existing_block.name",
                                          "children": [
                                            {
                                              "value": "block.name",
                                              "children": [
                                                {
                                                  "value": "block",
                                                  "children": []
                                                },
                                                {
                                                  "value": "name",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "existing_block.name",
                                              "children": [
                                                {
                                                  "value": "existing_block",
                                                  "children": []
                                                },
                                                {
                                                  "value": "name",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "input_schema != existing_block.inputSchema",
                                      "children": [
                                        {
                                          "value": "input_schema",
                                          "children": []
                                        },
                                        {
                                          "value": "existing_block.inputSchema",
                                          "children": [
                                            {
                                              "value": "existing_block",
                                              "children": []
                                            },
                                            {
                                              "value": "inputSchema",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema != existing_block.outputSchema",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "existing_block.outputSchema",
                                      "children": [
                                        {
                                          "value": "existing_block",
                                          "children": []
                                        },
                                        {
                                          "value": "outputSchema",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                          "children": [
                            {
                              "value": "await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                              "children": [
                                {
                                  "value": "await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                                  "children": [
                                    {
                                      "value": "AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                                      "children": [
                                        {
                                          "value": "AgentBlock.prisma().update",
                                          "children": [
                                            {
                                              "value": "AgentBlock.prisma()",
                                              "children": [
                                                {
                                                  "value": "AgentBlock.prisma",
                                                  "children": [
                                                    {
                                                      "value": "AgentBlock",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "prisma",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "update",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )",
                                          "children": [
                                            {
                                              "value": "where={\"id\": existing_block.id}",
                                              "children": [
                                                {
                                                  "value": "where",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{\"id\": existing_block.id}",
                                                  "children": [
                                                    {
                                                      "value": "\"id\": existing_block.id",
                                                      "children": [
                                                        {
                                                          "value": "\"id\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "id",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "existing_block.id",
                                                          "children": [
                                                            {
                                                              "value": "existing_block",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "id",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                }",
                                              "children": [
                                                {
                                                  "value": "data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                }",
                                                  "children": [
                                                    {
                                                      "value": "\"id\": block.id",
                                                      "children": [
                                                        {
                                                          "value": "\"id\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "id",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "block.id",
                                                          "children": [
                                                            {
                                                              "value": "block",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "id",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"name\": block.name",
                                                      "children": [
                                                        {
                                                          "value": "\"name\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "name",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "block.name",
                                                          "children": [
                                                            {
                                                              "value": "block",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "name",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"inputSchema\": input_schema",
                                                      "children": [
                                                        {
                                                          "value": "\"inputSchema\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "inputSchema",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "input_schema",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"outputSchema\": output_schema",
                                                      "children": [
                                                        {
                                                          "value": "\"outputSchema\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "outputSchema",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "output_schema",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def get_block(block_id: str) -> Block | None:\n    cls = get_blocks().get(block_id)\n    return cls() if cls else None",
      "children": [
        {
          "value": "get_block",
          "children": []
        },
        {
          "value": "(block_id: str)",
          "children": [
            {
              "value": "block_id: str",
              "children": [
                {
                  "value": "block_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Block | None",
          "children": [
            {
              "value": "Block | None",
              "children": [
                {
                  "value": "Block",
                  "children": []
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "cls = get_blocks().get(block_id)\n    return cls() if cls else None",
          "children": [
            {
              "value": "cls = get_blocks().get(block_id)",
              "children": [
                {
                  "value": "cls = get_blocks().get(block_id)",
                  "children": [
                    {
                      "value": "cls",
                      "children": []
                    },
                    {
                      "value": "get_blocks().get(block_id)",
                      "children": [
                        {
                          "value": "get_blocks().get",
                          "children": [
                            {
                              "value": "get_blocks()",
                              "children": [
                                {
                                  "value": "get_blocks",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "get",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(block_id)",
                          "children": [
                            {
                              "value": "block_id",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return cls() if cls else None",
              "children": [
                {
                  "value": "cls() if cls else None",
                  "children": [
                    {
                      "value": "cls()",
                      "children": [
                        {
                          "value": "cls",
                          "children": []
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "cls",
                      "children": []
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}