{
  "value": "# -*- coding: utf-8 -*-\n\nimport unittest\n\nfrom validate.format import error_message\nfrom validate.format import get_categories_content\nfrom validate.format import check_alphabetical_order\nfrom validate.format import check_title\nfrom validate.format import check_description, max_description_length\nfrom validate.format import check_auth, auth_keys\nfrom validate.format import check_https, https_keys\nfrom validate.format import check_cors, cors_keys\nfrom validate.format import check_entry\nfrom validate.format import check_file_format, min_entries_per_category, num_segments\n\n\nclass TestValidadeFormat(unittest.TestCase):\n    \n    def test_error_message_return_and_return_type(self):\n        line_num_unity = 1\n        line_num_ten = 10\n        line_num_hundred = 100\n        line_num_thousand = 1000\n\n        msg = 'This is a unit test'\n\n        err_msg_unity = error_message(line_num_unity, msg)\n        err_msg_ten = error_message(line_num_ten, msg)\n        err_msg_hundred = error_message(line_num_hundred, msg)\n        err_msg_thousand = error_message(line_num_thousand, msg)\n\n        self.assertIsInstance(err_msg_unity, str)\n        self.assertIsInstance(err_msg_ten, str)\n        self.assertIsInstance(err_msg_hundred, str)\n        self.assertIsInstance(err_msg_thousand, str)\n\n        self.assertEqual(err_msg_unity, '(L002) This is a unit test')\n        self.assertEqual(err_msg_ten, '(L011) This is a unit test')\n        self.assertEqual(err_msg_hundred, '(L101) This is a unit test')\n        self.assertEqual(err_msg_thousand, '(L1001) This is a unit test')\n\n    def test_if_get_categories_content_return_correct_data_of_categories(self):\n        fake_contents = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        result = get_categories_content(fake_contents)\n        self.assertIsInstance(result, tuple)\n\n        categories, category_line_num = result\n        self.assertIsInstance(categories, dict)\n        self.assertIsInstance(category_line_num, dict)\n\n        expected_result = ({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})\n\n        for res, ex_res in zip(result, expected_result):\n\n            with self.subTest():\n                self.assertEqual(res, ex_res)\n\n    def test_if_check_alphabetical_order_return_correct_msg_error(self):\n        correct_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        incorrect_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n\n        err_msgs_1 = check_alphabetical_order(correct_lines)\n        err_msgs_2 = check_alphabetical_order(incorrect_lines)\n\n        self.assertIsInstance(err_msgs_1, list)\n        self.assertIsInstance(err_msgs_2, list)\n\n        self.assertEqual(len(err_msgs_1), 0)\n        self.assertEqual(len(err_msgs_2), 2)\n\n        expected_err_msgs = [\n            '(L001) A category is not alphabetical order',\n            '(L007) B category is not alphabetical order'\n        ]\n\n        for err_msg, ex_err_msg in zip(err_msgs_2, expected_err_msgs):\n\n            with self.subTest():\n                self.assertEqual(err_msg, ex_err_msg)\n    \n    def test_check_title_with_correct_title(self):\n        raw_title = '[A](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n\n    def test_check_title_with_markdown_syntax_incorrect(self):\n        raw_title = '[A(https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'\n\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_title_with_api_at_the_end_of_the_title(self):\n        raw_title = '[A API](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title should not end with \"... API\". Every entry is an API here!'\n\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_description_with_correct_description(self):\n        desc = 'This is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n    \n    def test_check_description_with_first_char_is_not_capitalized(self):\n        desc = 'this is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) first character of description is not capitalized'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)\n    \n    def test_check_description_with_punctuation_in_the_end(self):\n        base_desc = 'This is a fake description'\n        punctuation = r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\"\n        desc_with_punc = [base_desc + punc for punc in punctuation]\n        \n        for desc in desc_with_punc:\n\n            with self.subTest():\n                err_msgs = check_description(0, desc)\n\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_description_that_exceeds_the_character_limit(self):\n        long_desc = 'Desc' * max_description_length\n        long_desc_length = len(long_desc)\n\n        err_msgs = check_description(0, long_desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n\n        err_msg = err_msgs[0]\n        expected_err_msg = f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_auth_with_valid_auth(self):\n        auth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']\n        auth_valid.append('No')\n\n        for auth in auth_valid:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n\n    def test_check_auth_without_backtick(self):\n        auth_without_backtick = [auth for auth in auth_keys if auth != 'No']\n\n        for auth in auth_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_auth_with_invalid_auth(self):\n        auth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']\n        auth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']\n\n        for auth in auth_invalid_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n\n                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n\n                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)\n\n        for auth in auth_invalid_with_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_https_with_valid_https(self):\n        for https in https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n\n    def test_check_https_with_invalid_https(self):\n        invalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']\n\n        for https in invalid_https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_cors_with_valid_cors(self):\n        for cors in cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n\n    def test_check_cors_with_invalid_cors(self):\n        invalid_cors_keys = ['yes', 'no', 'unknown', 'cors']\n\n        for cors in invalid_cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {cors} is not a valid CORS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_entry_with_correct_segments(self):\n        correct_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']\n\n        err_msgs = check_entry(0, correct_segments)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n\n    def test_check_entry_with_incorrect_segments(self):\n        incorrect_segments = ['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes', 'yes']\n\n        err_msgs = check_entry(0, incorrect_segments)\n        expected_err_msgs = [\n            '(L001) Title should not end with \"... API\". Every entry is an API here!',\n            '(L001) first character of description is not capitalized',\n            '(L001) description should not end with .',\n            '(L001) auth value is not enclosed with `backticks`',\n            '(L001) yes is not a valid Auth option',\n            '(L001) yes is not a valid HTTPS option',\n            '(L001) yes is not a valid CORS option'\n        ]\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 7)\n        for err_msg in err_msgs:\n            with self.subTest():\n                self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msgs, expected_err_msgs)\n\n    def test_check_file_format_with_correct_format(self):\n        correct_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        err_msgs = check_file_format(lines=correct_format)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n\n    def test_check_file_format_with_category_header_not_added_to_index(self):\n        incorrect_format = [\n            '## Index',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = '(L003) category header (A) not added to Index section'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_file_format_with_category_without_min_entries(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        category_with_err = 'A'\n        num_in_category = 1\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_file_format_entry_without_all_necessary_columns(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        current_segments_num = 3\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_file_format_without_1_space_between_the_segments(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L007) each segment must start and end with exactly 1 space'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
  "children": [
    {
      "value": "# -*- coding: utf-8 -*-",
      "children": []
    },
    {
      "value": "import unittest",
      "children": [
        {
          "value": "unittest",
          "children": [
            {
              "value": "unittest",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.format import error_message",
      "children": [
        {
          "value": "validate.format",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "format",
              "children": []
            }
          ]
        },
        {
          "value": "error_message",
          "children": [
            {
              "value": "error_message",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.format import get_categories_content",
      "children": [
        {
          "value": "validate.format",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "format",
              "children": []
            }
          ]
        },
        {
          "value": "get_categories_content",
          "children": [
            {
              "value": "get_categories_content",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.format import check_alphabetical_order",
      "children": [
        {
          "value": "validate.format",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "format",
              "children": []
            }
          ]
        },
        {
          "value": "check_alphabetical_order",
          "children": [
            {
              "value": "check_alphabetical_order",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.format import check_title",
      "children": [
        {
          "value": "validate.format",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "format",
              "children": []
            }
          ]
        },
        {
          "value": "check_title",
          "children": [
            {
              "value": "check_title",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.format import check_description, max_description_length",
      "children": [
        {
          "value": "validate.format",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "format",
              "children": []
            }
          ]
        },
        {
          "value": "check_description",
          "children": [
            {
              "value": "check_description",
              "children": []
            }
          ]
        },
        {
          "value": "max_description_length",
          "children": [
            {
              "value": "max_description_length",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.format import check_auth, auth_keys",
      "children": [
        {
          "value": "validate.format",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "format",
              "children": []
            }
          ]
        },
        {
          "value": "check_auth",
          "children": [
            {
              "value": "check_auth",
              "children": []
            }
          ]
        },
        {
          "value": "auth_keys",
          "children": [
            {
              "value": "auth_keys",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.format import check_https, https_keys",
      "children": [
        {
          "value": "validate.format",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "format",
              "children": []
            }
          ]
        },
        {
          "value": "check_https",
          "children": [
            {
              "value": "check_https",
              "children": []
            }
          ]
        },
        {
          "value": "https_keys",
          "children": [
            {
              "value": "https_keys",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.format import check_cors, cors_keys",
      "children": [
        {
          "value": "validate.format",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "format",
              "children": []
            }
          ]
        },
        {
          "value": "check_cors",
          "children": [
            {
              "value": "check_cors",
              "children": []
            }
          ]
        },
        {
          "value": "cors_keys",
          "children": [
            {
              "value": "cors_keys",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.format import check_entry",
      "children": [
        {
          "value": "validate.format",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "format",
              "children": []
            }
          ]
        },
        {
          "value": "check_entry",
          "children": [
            {
              "value": "check_entry",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from validate.format import check_file_format, min_entries_per_category, num_segments",
      "children": [
        {
          "value": "validate.format",
          "children": [
            {
              "value": "validate",
              "children": []
            },
            {
              "value": "format",
              "children": []
            }
          ]
        },
        {
          "value": "check_file_format",
          "children": [
            {
              "value": "check_file_format",
              "children": []
            }
          ]
        },
        {
          "value": "min_entries_per_category",
          "children": [
            {
              "value": "min_entries_per_category",
              "children": []
            }
          ]
        },
        {
          "value": "num_segments",
          "children": [
            {
              "value": "num_segments",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class TestValidadeFormat(unittest.TestCase):\n    \n    def test_error_message_return_and_return_type(self):\n        line_num_unity = 1\n        line_num_ten = 10\n        line_num_hundred = 100\n        line_num_thousand = 1000\n\n        msg = 'This is a unit test'\n\n        err_msg_unity = error_message(line_num_unity, msg)\n        err_msg_ten = error_message(line_num_ten, msg)\n        err_msg_hundred = error_message(line_num_hundred, msg)\n        err_msg_thousand = error_message(line_num_thousand, msg)\n\n        self.assertIsInstance(err_msg_unity, str)\n        self.assertIsInstance(err_msg_ten, str)\n        self.assertIsInstance(err_msg_hundred, str)\n        self.assertIsInstance(err_msg_thousand, str)\n\n        self.assertEqual(err_msg_unity, '(L002) This is a unit test')\n        self.assertEqual(err_msg_ten, '(L011) This is a unit test')\n        self.assertEqual(err_msg_hundred, '(L101) This is a unit test')\n        self.assertEqual(err_msg_thousand, '(L1001) This is a unit test')\n\n    def test_if_get_categories_content_return_correct_data_of_categories(self):\n        fake_contents = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        result = get_categories_content(fake_contents)\n        self.assertIsInstance(result, tuple)\n\n        categories, category_line_num = result\n        self.assertIsInstance(categories, dict)\n        self.assertIsInstance(category_line_num, dict)\n\n        expected_result = ({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})\n\n        for res, ex_res in zip(result, expected_result):\n\n            with self.subTest():\n                self.assertEqual(res, ex_res)\n\n    def test_if_check_alphabetical_order_return_correct_msg_error(self):\n        correct_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        incorrect_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n\n        err_msgs_1 = check_alphabetical_order(correct_lines)\n        err_msgs_2 = check_alphabetical_order(incorrect_lines)\n\n        self.assertIsInstance(err_msgs_1, list)\n        self.assertIsInstance(err_msgs_2, list)\n\n        self.assertEqual(len(err_msgs_1), 0)\n        self.assertEqual(len(err_msgs_2), 2)\n\n        expected_err_msgs = [\n            '(L001) A category is not alphabetical order',\n            '(L007) B category is not alphabetical order'\n        ]\n\n        for err_msg, ex_err_msg in zip(err_msgs_2, expected_err_msgs):\n\n            with self.subTest():\n                self.assertEqual(err_msg, ex_err_msg)\n    \n    def test_check_title_with_correct_title(self):\n        raw_title = '[A](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n\n    def test_check_title_with_markdown_syntax_incorrect(self):\n        raw_title = '[A(https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'\n\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_title_with_api_at_the_end_of_the_title(self):\n        raw_title = '[A API](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title should not end with \"... API\". Every entry is an API here!'\n\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_description_with_correct_description(self):\n        desc = 'This is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n    \n    def test_check_description_with_first_char_is_not_capitalized(self):\n        desc = 'this is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) first character of description is not capitalized'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)\n    \n    def test_check_description_with_punctuation_in_the_end(self):\n        base_desc = 'This is a fake description'\n        punctuation = r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\"\n        desc_with_punc = [base_desc + punc for punc in punctuation]\n        \n        for desc in desc_with_punc:\n\n            with self.subTest():\n                err_msgs = check_description(0, desc)\n\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_description_that_exceeds_the_character_limit(self):\n        long_desc = 'Desc' * max_description_length\n        long_desc_length = len(long_desc)\n\n        err_msgs = check_description(0, long_desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n\n        err_msg = err_msgs[0]\n        expected_err_msg = f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_auth_with_valid_auth(self):\n        auth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']\n        auth_valid.append('No')\n\n        for auth in auth_valid:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n\n    def test_check_auth_without_backtick(self):\n        auth_without_backtick = [auth for auth in auth_keys if auth != 'No']\n\n        for auth in auth_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_auth_with_invalid_auth(self):\n        auth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']\n        auth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']\n\n        for auth in auth_invalid_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n\n                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n\n                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)\n\n        for auth in auth_invalid_with_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_https_with_valid_https(self):\n        for https in https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n\n    def test_check_https_with_invalid_https(self):\n        invalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']\n\n        for https in invalid_https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_cors_with_valid_cors(self):\n        for cors in cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n\n    def test_check_cors_with_invalid_cors(self):\n        invalid_cors_keys = ['yes', 'no', 'unknown', 'cors']\n\n        for cors in invalid_cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {cors} is not a valid CORS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_entry_with_correct_segments(self):\n        correct_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']\n\n        err_msgs = check_entry(0, correct_segments)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n\n    def test_check_entry_with_incorrect_segments(self):\n        incorrect_segments = ['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes', 'yes']\n\n        err_msgs = check_entry(0, incorrect_segments)\n        expected_err_msgs = [\n            '(L001) Title should not end with \"... API\". Every entry is an API here!',\n            '(L001) first character of description is not capitalized',\n            '(L001) description should not end with .',\n            '(L001) auth value is not enclosed with `backticks`',\n            '(L001) yes is not a valid Auth option',\n            '(L001) yes is not a valid HTTPS option',\n            '(L001) yes is not a valid CORS option'\n        ]\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 7)\n        for err_msg in err_msgs:\n            with self.subTest():\n                self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msgs, expected_err_msgs)\n\n    def test_check_file_format_with_correct_format(self):\n        correct_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        err_msgs = check_file_format(lines=correct_format)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n\n    def test_check_file_format_with_category_header_not_added_to_index(self):\n        incorrect_format = [\n            '## Index',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = '(L003) category header (A) not added to Index section'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_file_format_with_category_without_min_entries(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        category_with_err = 'A'\n        num_in_category = 1\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_file_format_entry_without_all_necessary_columns(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        current_segments_num = 3\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_file_format_without_1_space_between_the_segments(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L007) each segment must start and end with exactly 1 space'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
      "children": [
        {
          "value": "TestValidadeFormat",
          "children": []
        },
        {
          "value": "(unittest.TestCase)",
          "children": [
            {
              "value": "unittest.TestCase",
              "children": [
                {
                  "value": "unittest",
                  "children": []
                },
                {
                  "value": "TestCase",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "def test_error_message_return_and_return_type(self):\n        line_num_unity = 1\n        line_num_ten = 10\n        line_num_hundred = 100\n        line_num_thousand = 1000\n\n        msg = 'This is a unit test'\n\n        err_msg_unity = error_message(line_num_unity, msg)\n        err_msg_ten = error_message(line_num_ten, msg)\n        err_msg_hundred = error_message(line_num_hundred, msg)\n        err_msg_thousand = error_message(line_num_thousand, msg)\n\n        self.assertIsInstance(err_msg_unity, str)\n        self.assertIsInstance(err_msg_ten, str)\n        self.assertIsInstance(err_msg_hundred, str)\n        self.assertIsInstance(err_msg_thousand, str)\n\n        self.assertEqual(err_msg_unity, '(L002) This is a unit test')\n        self.assertEqual(err_msg_ten, '(L011) This is a unit test')\n        self.assertEqual(err_msg_hundred, '(L101) This is a unit test')\n        self.assertEqual(err_msg_thousand, '(L1001) This is a unit test')\n\n    def test_if_get_categories_content_return_correct_data_of_categories(self):\n        fake_contents = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        result = get_categories_content(fake_contents)\n        self.assertIsInstance(result, tuple)\n\n        categories, category_line_num = result\n        self.assertIsInstance(categories, dict)\n        self.assertIsInstance(category_line_num, dict)\n\n        expected_result = ({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})\n\n        for res, ex_res in zip(result, expected_result):\n\n            with self.subTest():\n                self.assertEqual(res, ex_res)\n\n    def test_if_check_alphabetical_order_return_correct_msg_error(self):\n        correct_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        incorrect_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n\n        err_msgs_1 = check_alphabetical_order(correct_lines)\n        err_msgs_2 = check_alphabetical_order(incorrect_lines)\n\n        self.assertIsInstance(err_msgs_1, list)\n        self.assertIsInstance(err_msgs_2, list)\n\n        self.assertEqual(len(err_msgs_1), 0)\n        self.assertEqual(len(err_msgs_2), 2)\n\n        expected_err_msgs = [\n            '(L001) A category is not alphabetical order',\n            '(L007) B category is not alphabetical order'\n        ]\n\n        for err_msg, ex_err_msg in zip(err_msgs_2, expected_err_msgs):\n\n            with self.subTest():\n                self.assertEqual(err_msg, ex_err_msg)\n    \n    def test_check_title_with_correct_title(self):\n        raw_title = '[A](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n\n    def test_check_title_with_markdown_syntax_incorrect(self):\n        raw_title = '[A(https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'\n\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_title_with_api_at_the_end_of_the_title(self):\n        raw_title = '[A API](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title should not end with \"... API\". Every entry is an API here!'\n\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_description_with_correct_description(self):\n        desc = 'This is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n    \n    def test_check_description_with_first_char_is_not_capitalized(self):\n        desc = 'this is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) first character of description is not capitalized'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)\n    \n    def test_check_description_with_punctuation_in_the_end(self):\n        base_desc = 'This is a fake description'\n        punctuation = r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\"\n        desc_with_punc = [base_desc + punc for punc in punctuation]\n        \n        for desc in desc_with_punc:\n\n            with self.subTest():\n                err_msgs = check_description(0, desc)\n\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_description_that_exceeds_the_character_limit(self):\n        long_desc = 'Desc' * max_description_length\n        long_desc_length = len(long_desc)\n\n        err_msgs = check_description(0, long_desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n\n        err_msg = err_msgs[0]\n        expected_err_msg = f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_auth_with_valid_auth(self):\n        auth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']\n        auth_valid.append('No')\n\n        for auth in auth_valid:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n\n    def test_check_auth_without_backtick(self):\n        auth_without_backtick = [auth for auth in auth_keys if auth != 'No']\n\n        for auth in auth_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_auth_with_invalid_auth(self):\n        auth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']\n        auth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']\n\n        for auth in auth_invalid_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n\n                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n\n                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)\n\n        for auth in auth_invalid_with_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_https_with_valid_https(self):\n        for https in https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n\n    def test_check_https_with_invalid_https(self):\n        invalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']\n\n        for https in invalid_https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_cors_with_valid_cors(self):\n        for cors in cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n\n    def test_check_cors_with_invalid_cors(self):\n        invalid_cors_keys = ['yes', 'no', 'unknown', 'cors']\n\n        for cors in invalid_cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {cors} is not a valid CORS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_entry_with_correct_segments(self):\n        correct_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']\n\n        err_msgs = check_entry(0, correct_segments)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n\n    def test_check_entry_with_incorrect_segments(self):\n        incorrect_segments = ['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes', 'yes']\n\n        err_msgs = check_entry(0, incorrect_segments)\n        expected_err_msgs = [\n            '(L001) Title should not end with \"... API\". Every entry is an API here!',\n            '(L001) first character of description is not capitalized',\n            '(L001) description should not end with .',\n            '(L001) auth value is not enclosed with `backticks`',\n            '(L001) yes is not a valid Auth option',\n            '(L001) yes is not a valid HTTPS option',\n            '(L001) yes is not a valid CORS option'\n        ]\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 7)\n        for err_msg in err_msgs:\n            with self.subTest():\n                self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msgs, expected_err_msgs)\n\n    def test_check_file_format_with_correct_format(self):\n        correct_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        err_msgs = check_file_format(lines=correct_format)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n\n    def test_check_file_format_with_category_header_not_added_to_index(self):\n        incorrect_format = [\n            '## Index',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = '(L003) category header (A) not added to Index section'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_file_format_with_category_without_min_entries(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        category_with_err = 'A'\n        num_in_category = 1\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_file_format_entry_without_all_necessary_columns(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        current_segments_num = 3\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n\n    def test_check_file_format_without_1_space_between_the_segments(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L007) each segment must start and end with exactly 1 space'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
          "children": [
            {
              "value": "def test_error_message_return_and_return_type(self):\n        line_num_unity = 1\n        line_num_ten = 10\n        line_num_hundred = 100\n        line_num_thousand = 1000\n\n        msg = 'This is a unit test'\n\n        err_msg_unity = error_message(line_num_unity, msg)\n        err_msg_ten = error_message(line_num_ten, msg)\n        err_msg_hundred = error_message(line_num_hundred, msg)\n        err_msg_thousand = error_message(line_num_thousand, msg)\n\n        self.assertIsInstance(err_msg_unity, str)\n        self.assertIsInstance(err_msg_ten, str)\n        self.assertIsInstance(err_msg_hundred, str)\n        self.assertIsInstance(err_msg_thousand, str)\n\n        self.assertEqual(err_msg_unity, '(L002) This is a unit test')\n        self.assertEqual(err_msg_ten, '(L011) This is a unit test')\n        self.assertEqual(err_msg_hundred, '(L101) This is a unit test')\n        self.assertEqual(err_msg_thousand, '(L1001) This is a unit test')",
              "children": [
                {
                  "value": "test_error_message_return_and_return_type",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "line_num_unity = 1\n        line_num_ten = 10\n        line_num_hundred = 100\n        line_num_thousand = 1000\n\n        msg = 'This is a unit test'\n\n        err_msg_unity = error_message(line_num_unity, msg)\n        err_msg_ten = error_message(line_num_ten, msg)\n        err_msg_hundred = error_message(line_num_hundred, msg)\n        err_msg_thousand = error_message(line_num_thousand, msg)\n\n        self.assertIsInstance(err_msg_unity, str)\n        self.assertIsInstance(err_msg_ten, str)\n        self.assertIsInstance(err_msg_hundred, str)\n        self.assertIsInstance(err_msg_thousand, str)\n\n        self.assertEqual(err_msg_unity, '(L002) This is a unit test')\n        self.assertEqual(err_msg_ten, '(L011) This is a unit test')\n        self.assertEqual(err_msg_hundred, '(L101) This is a unit test')\n        self.assertEqual(err_msg_thousand, '(L1001) This is a unit test')",
                  "children": [
                    {
                      "value": "line_num_unity = 1",
                      "children": [
                        {
                          "value": "line_num_unity = 1",
                          "children": [
                            {
                              "value": "line_num_unity",
                              "children": []
                            },
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "line_num_ten = 10",
                      "children": [
                        {
                          "value": "line_num_ten = 10",
                          "children": [
                            {
                              "value": "line_num_ten",
                              "children": []
                            },
                            {
                              "value": "10",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "line_num_hundred = 100",
                      "children": [
                        {
                          "value": "line_num_hundred = 100",
                          "children": [
                            {
                              "value": "line_num_hundred",
                              "children": []
                            },
                            {
                              "value": "100",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "line_num_thousand = 1000",
                      "children": [
                        {
                          "value": "line_num_thousand = 1000",
                          "children": [
                            {
                              "value": "line_num_thousand",
                              "children": []
                            },
                            {
                              "value": "1000",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "msg = 'This is a unit test'",
                      "children": [
                        {
                          "value": "msg = 'This is a unit test'",
                          "children": [
                            {
                              "value": "msg",
                              "children": []
                            },
                            {
                              "value": "'This is a unit test'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "This is a unit test",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msg_unity = error_message(line_num_unity, msg)",
                      "children": [
                        {
                          "value": "err_msg_unity = error_message(line_num_unity, msg)",
                          "children": [
                            {
                              "value": "err_msg_unity",
                              "children": []
                            },
                            {
                              "value": "error_message(line_num_unity, msg)",
                              "children": [
                                {
                                  "value": "error_message",
                                  "children": []
                                },
                                {
                                  "value": "(line_num_unity, msg)",
                                  "children": [
                                    {
                                      "value": "line_num_unity",
                                      "children": []
                                    },
                                    {
                                      "value": "msg",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msg_ten = error_message(line_num_ten, msg)",
                      "children": [
                        {
                          "value": "err_msg_ten = error_message(line_num_ten, msg)",
                          "children": [
                            {
                              "value": "err_msg_ten",
                              "children": []
                            },
                            {
                              "value": "error_message(line_num_ten, msg)",
                              "children": [
                                {
                                  "value": "error_message",
                                  "children": []
                                },
                                {
                                  "value": "(line_num_ten, msg)",
                                  "children": [
                                    {
                                      "value": "line_num_ten",
                                      "children": []
                                    },
                                    {
                                      "value": "msg",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msg_hundred = error_message(line_num_hundred, msg)",
                      "children": [
                        {
                          "value": "err_msg_hundred = error_message(line_num_hundred, msg)",
                          "children": [
                            {
                              "value": "err_msg_hundred",
                              "children": []
                            },
                            {
                              "value": "error_message(line_num_hundred, msg)",
                              "children": [
                                {
                                  "value": "error_message",
                                  "children": []
                                },
                                {
                                  "value": "(line_num_hundred, msg)",
                                  "children": [
                                    {
                                      "value": "line_num_hundred",
                                      "children": []
                                    },
                                    {
                                      "value": "msg",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msg_thousand = error_message(line_num_thousand, msg)",
                      "children": [
                        {
                          "value": "err_msg_thousand = error_message(line_num_thousand, msg)",
                          "children": [
                            {
                              "value": "err_msg_thousand",
                              "children": []
                            },
                            {
                              "value": "error_message(line_num_thousand, msg)",
                              "children": [
                                {
                                  "value": "error_message",
                                  "children": []
                                },
                                {
                                  "value": "(line_num_thousand, msg)",
                                  "children": [
                                    {
                                      "value": "line_num_thousand",
                                      "children": []
                                    },
                                    {
                                      "value": "msg",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msg_unity, str)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msg_unity, str)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg_unity, str)",
                              "children": [
                                {
                                  "value": "err_msg_unity",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msg_ten, str)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msg_ten, str)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg_ten, str)",
                              "children": [
                                {
                                  "value": "err_msg_ten",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msg_hundred, str)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msg_hundred, str)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg_hundred, str)",
                              "children": [
                                {
                                  "value": "err_msg_hundred",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msg_thousand, str)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msg_thousand, str)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg_thousand, str)",
                              "children": [
                                {
                                  "value": "err_msg_thousand",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msg_unity, '(L002) This is a unit test')",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msg_unity, '(L002) This is a unit test')",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg_unity, '(L002) This is a unit test')",
                              "children": [
                                {
                                  "value": "err_msg_unity",
                                  "children": []
                                },
                                {
                                  "value": "'(L002) This is a unit test'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L002) This is a unit test",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msg_ten, '(L011) This is a unit test')",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msg_ten, '(L011) This is a unit test')",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg_ten, '(L011) This is a unit test')",
                              "children": [
                                {
                                  "value": "err_msg_ten",
                                  "children": []
                                },
                                {
                                  "value": "'(L011) This is a unit test'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L011) This is a unit test",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msg_hundred, '(L101) This is a unit test')",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msg_hundred, '(L101) This is a unit test')",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg_hundred, '(L101) This is a unit test')",
                              "children": [
                                {
                                  "value": "err_msg_hundred",
                                  "children": []
                                },
                                {
                                  "value": "'(L101) This is a unit test'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L101) This is a unit test",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msg_thousand, '(L1001) This is a unit test')",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msg_thousand, '(L1001) This is a unit test')",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg_thousand, '(L1001) This is a unit test')",
                              "children": [
                                {
                                  "value": "err_msg_thousand",
                                  "children": []
                                },
                                {
                                  "value": "'(L1001) This is a unit test'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L1001) This is a unit test",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_if_get_categories_content_return_correct_data_of_categories(self):\n        fake_contents = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        result = get_categories_content(fake_contents)\n        self.assertIsInstance(result, tuple)\n\n        categories, category_line_num = result\n        self.assertIsInstance(categories, dict)\n        self.assertIsInstance(category_line_num, dict)\n\n        expected_result = ({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})\n\n        for res, ex_res in zip(result, expected_result):\n\n            with self.subTest():\n                self.assertEqual(res, ex_res)",
              "children": [
                {
                  "value": "test_if_get_categories_content_return_correct_data_of_categories",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "fake_contents = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        result = get_categories_content(fake_contents)\n        self.assertIsInstance(result, tuple)\n\n        categories, category_line_num = result\n        self.assertIsInstance(categories, dict)\n        self.assertIsInstance(category_line_num, dict)\n\n        expected_result = ({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})\n\n        for res, ex_res in zip(result, expected_result):\n\n            with self.subTest():\n                self.assertEqual(res, ex_res)",
                  "children": [
                    {
                      "value": "fake_contents = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                      "children": [
                        {
                          "value": "fake_contents = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                          "children": [
                            {
                              "value": "fake_contents",
                              "children": []
                            },
                            {
                              "value": "[\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                              "children": [
                                {
                                  "value": "'### A'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### A",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "''",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'### B'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### B",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "result = get_categories_content(fake_contents)",
                      "children": [
                        {
                          "value": "result = get_categories_content(fake_contents)",
                          "children": [
                            {
                              "value": "result",
                              "children": []
                            },
                            {
                              "value": "get_categories_content(fake_contents)",
                              "children": [
                                {
                                  "value": "get_categories_content",
                                  "children": []
                                },
                                {
                                  "value": "(fake_contents)",
                                  "children": [
                                    {
                                      "value": "fake_contents",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(result, tuple)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(result, tuple)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(result, tuple)",
                              "children": [
                                {
                                  "value": "result",
                                  "children": []
                                },
                                {
                                  "value": "tuple",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "categories, category_line_num = result",
                      "children": [
                        {
                          "value": "categories, category_line_num = result",
                          "children": [
                            {
                              "value": "categories, category_line_num",
                              "children": [
                                {
                                  "value": "categories",
                                  "children": []
                                },
                                {
                                  "value": "category_line_num",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "result",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(categories, dict)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(categories, dict)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(categories, dict)",
                              "children": [
                                {
                                  "value": "categories",
                                  "children": []
                                },
                                {
                                  "value": "dict",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(category_line_num, dict)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(category_line_num, dict)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(category_line_num, dict)",
                              "children": [
                                {
                                  "value": "category_line_num",
                                  "children": []
                                },
                                {
                                  "value": "dict",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expected_result = ({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})",
                      "children": [
                        {
                          "value": "expected_result = ({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})",
                          "children": [
                            {
                              "value": "expected_result",
                              "children": []
                            },
                            {
                              "value": "({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})",
                              "children": [
                                {
                                  "value": "{'A': ['AA', 'AB'], 'B': ['BA', 'BB']}",
                                  "children": [
                                    {
                                      "value": "'A': ['AA', 'AB']",
                                      "children": [
                                        {
                                          "value": "'A'",
                                          "children": [
                                            {
                                              "value": "'",
                                              "children": []
                                            },
                                            {
                                              "value": "A",
                                              "children": []
                                            },
                                            {
                                              "value": "'",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "['AA', 'AB']",
                                          "children": [
                                            {
                                              "value": "'AA'",
                                              "children": [
                                                {
                                                  "value": "'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "AA",
                                                  "children": []
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "'AB'",
                                              "children": [
                                                {
                                                  "value": "'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "AB",
                                                  "children": []
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "'B': ['BA', 'BB']",
                                      "children": [
                                        {
                                          "value": "'B'",
                                          "children": [
                                            {
                                              "value": "'",
                                              "children": []
                                            },
                                            {
                                              "value": "B",
                                              "children": []
                                            },
                                            {
                                              "value": "'",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "['BA', 'BB']",
                                          "children": [
                                            {
                                              "value": "'BA'",
                                              "children": [
                                                {
                                                  "value": "'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "BA",
                                                  "children": []
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "'BB'",
                                              "children": [
                                                {
                                                  "value": "'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "BB",
                                                  "children": []
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "{'A': 0, 'B': 6}",
                                  "children": [
                                    {
                                      "value": "'A': 0",
                                      "children": [
                                        {
                                          "value": "'A'",
                                          "children": [
                                            {
                                              "value": "'",
                                              "children": []
                                            },
                                            {
                                              "value": "A",
                                              "children": []
                                            },
                                            {
                                              "value": "'",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "'B': 6",
                                      "children": [
                                        {
                                          "value": "'B'",
                                          "children": [
                                            {
                                              "value": "'",
                                              "children": []
                                            },
                                            {
                                              "value": "B",
                                              "children": []
                                            },
                                            {
                                              "value": "'",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "6",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for res, ex_res in zip(result, expected_result):\n\n            with self.subTest():\n                self.assertEqual(res, ex_res)",
                      "children": [
                        {
                          "value": "res, ex_res",
                          "children": [
                            {
                              "value": "res",
                              "children": []
                            },
                            {
                              "value": "ex_res",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "zip(result, expected_result)",
                          "children": [
                            {
                              "value": "zip",
                              "children": []
                            },
                            {
                              "value": "(result, expected_result)",
                              "children": [
                                {
                                  "value": "result",
                                  "children": []
                                },
                                {
                                  "value": "expected_result",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "with self.subTest():\n                self.assertEqual(res, ex_res)",
                          "children": [
                            {
                              "value": "with self.subTest():\n                self.assertEqual(res, ex_res)",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.assertEqual(res, ex_res)",
                                  "children": [
                                    {
                                      "value": "self.assertEqual(res, ex_res)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(res, ex_res)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(res, ex_res)",
                                              "children": [
                                                {
                                                  "value": "res",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ex_res",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_if_check_alphabetical_order_return_correct_msg_error(self):\n        correct_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        incorrect_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n\n        err_msgs_1 = check_alphabetical_order(correct_lines)\n        err_msgs_2 = check_alphabetical_order(incorrect_lines)\n\n        self.assertIsInstance(err_msgs_1, list)\n        self.assertIsInstance(err_msgs_2, list)\n\n        self.assertEqual(len(err_msgs_1), 0)\n        self.assertEqual(len(err_msgs_2), 2)\n\n        expected_err_msgs = [\n            '(L001) A category is not alphabetical order',\n            '(L007) B category is not alphabetical order'\n        ]\n\n        for err_msg, ex_err_msg in zip(err_msgs_2, expected_err_msgs):\n\n            with self.subTest():\n                self.assertEqual(err_msg, ex_err_msg)",
              "children": [
                {
                  "value": "test_if_check_alphabetical_order_return_correct_msg_error",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "correct_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        incorrect_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n\n        err_msgs_1 = check_alphabetical_order(correct_lines)\n        err_msgs_2 = check_alphabetical_order(incorrect_lines)\n\n        self.assertIsInstance(err_msgs_1, list)\n        self.assertIsInstance(err_msgs_2, list)\n\n        self.assertEqual(len(err_msgs_1), 0)\n        self.assertEqual(len(err_msgs_2), 2)\n\n        expected_err_msgs = [\n            '(L001) A category is not alphabetical order',\n            '(L007) B category is not alphabetical order'\n        ]\n\n        for err_msg, ex_err_msg in zip(err_msgs_2, expected_err_msgs):\n\n            with self.subTest():\n                self.assertEqual(err_msg, ex_err_msg)",
                  "children": [
                    {
                      "value": "correct_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                      "children": [
                        {
                          "value": "correct_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                          "children": [
                            {
                              "value": "correct_lines",
                              "children": []
                            },
                            {
                              "value": "[\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                              "children": [
                                {
                                  "value": "'### A'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### A",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "''",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'### B'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### B",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "incorrect_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                      "children": [
                        {
                          "value": "incorrect_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                          "children": [
                            {
                              "value": "incorrect_lines",
                              "children": []
                            },
                            {
                              "value": "[\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                              "children": [
                                {
                                  "value": "'### A'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### A",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "''",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'### B'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### B",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs_1 = check_alphabetical_order(correct_lines)",
                      "children": [
                        {
                          "value": "err_msgs_1 = check_alphabetical_order(correct_lines)",
                          "children": [
                            {
                              "value": "err_msgs_1",
                              "children": []
                            },
                            {
                              "value": "check_alphabetical_order(correct_lines)",
                              "children": [
                                {
                                  "value": "check_alphabetical_order",
                                  "children": []
                                },
                                {
                                  "value": "(correct_lines)",
                                  "children": [
                                    {
                                      "value": "correct_lines",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs_2 = check_alphabetical_order(incorrect_lines)",
                      "children": [
                        {
                          "value": "err_msgs_2 = check_alphabetical_order(incorrect_lines)",
                          "children": [
                            {
                              "value": "err_msgs_2",
                              "children": []
                            },
                            {
                              "value": "check_alphabetical_order(incorrect_lines)",
                              "children": [
                                {
                                  "value": "check_alphabetical_order",
                                  "children": []
                                },
                                {
                                  "value": "(incorrect_lines)",
                                  "children": [
                                    {
                                      "value": "incorrect_lines",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs_1, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs_1, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs_1, list)",
                              "children": [
                                {
                                  "value": "err_msgs_1",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs_2, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs_2, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs_2, list)",
                              "children": [
                                {
                                  "value": "err_msgs_2",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs_1), 0)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs_1), 0)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs_1), 0)",
                              "children": [
                                {
                                  "value": "len(err_msgs_1)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs_1)",
                                      "children": [
                                        {
                                          "value": "err_msgs_1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs_2), 2)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs_2), 2)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs_2), 2)",
                              "children": [
                                {
                                  "value": "len(err_msgs_2)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs_2)",
                                      "children": [
                                        {
                                          "value": "err_msgs_2",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expected_err_msgs = [\n            '(L001) A category is not alphabetical order',\n            '(L007) B category is not alphabetical order'\n        ]",
                      "children": [
                        {
                          "value": "expected_err_msgs = [\n            '(L001) A category is not alphabetical order',\n            '(L007) B category is not alphabetical order'\n        ]",
                          "children": [
                            {
                              "value": "expected_err_msgs",
                              "children": []
                            },
                            {
                              "value": "[\n            '(L001) A category is not alphabetical order',\n            '(L007) B category is not alphabetical order'\n        ]",
                              "children": [
                                {
                                  "value": "'(L001) A category is not alphabetical order'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L001) A category is not alphabetical order",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'(L007) B category is not alphabetical order'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L007) B category is not alphabetical order",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for err_msg, ex_err_msg in zip(err_msgs_2, expected_err_msgs):\n\n            with self.subTest():\n                self.assertEqual(err_msg, ex_err_msg)",
                      "children": [
                        {
                          "value": "err_msg, ex_err_msg",
                          "children": [
                            {
                              "value": "err_msg",
                              "children": []
                            },
                            {
                              "value": "ex_err_msg",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "zip(err_msgs_2, expected_err_msgs)",
                          "children": [
                            {
                              "value": "zip",
                              "children": []
                            },
                            {
                              "value": "(err_msgs_2, expected_err_msgs)",
                              "children": [
                                {
                                  "value": "err_msgs_2",
                                  "children": []
                                },
                                {
                                  "value": "expected_err_msgs",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "with self.subTest():\n                self.assertEqual(err_msg, ex_err_msg)",
                          "children": [
                            {
                              "value": "with self.subTest():\n                self.assertEqual(err_msg, ex_err_msg)",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.assertEqual(err_msg, ex_err_msg)",
                                  "children": [
                                    {
                                      "value": "self.assertEqual(err_msg, ex_err_msg)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(err_msg, ex_err_msg)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg, ex_err_msg)",
                                              "children": [
                                                {
                                                  "value": "err_msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ex_err_msg",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_title_with_correct_title(self):\n        raw_title = '[A](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
              "children": [
                {
                  "value": "test_check_title_with_correct_title",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raw_title = '[A](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
                  "children": [
                    {
                      "value": "raw_title = '[A](https://www.ex.com)'",
                      "children": [
                        {
                          "value": "raw_title = '[A](https://www.ex.com)'",
                          "children": [
                            {
                              "value": "raw_title",
                              "children": []
                            },
                            {
                              "value": "'[A](https://www.ex.com)'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "[A](https://www.ex.com)",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_title(0, raw_title)",
                      "children": [
                        {
                          "value": "err_msgs = check_title(0, raw_title)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_title(0, raw_title)",
                              "children": [
                                {
                                  "value": "check_title",
                                  "children": []
                                },
                                {
                                  "value": "(0, raw_title)",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    },
                                    {
                                      "value": "raw_title",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 0)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 0)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 0)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msgs, [])",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msgs, [])",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, [])",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "[]",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_title_with_markdown_syntax_incorrect(self):\n        raw_title = '[A(https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'\n\n        self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_title_with_markdown_syntax_incorrect",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raw_title = '[A(https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'\n\n        self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "raw_title = '[A(https://www.ex.com)'",
                      "children": [
                        {
                          "value": "raw_title = '[A(https://www.ex.com)'",
                          "children": [
                            {
                              "value": "raw_title",
                              "children": []
                            },
                            {
                              "value": "'[A(https://www.ex.com)'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "[A(https://www.ex.com)",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_title(0, raw_title)",
                      "children": [
                        {
                          "value": "err_msgs = check_title(0, raw_title)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_title(0, raw_title)",
                              "children": [
                                {
                                  "value": "check_title",
                                  "children": []
                                },
                                {
                                  "value": "(0, raw_title)",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    },
                                    {
                                      "value": "raw_title",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 1)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 1)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 1)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msg = err_msgs[0]",
                      "children": [
                        {
                          "value": "err_msg = err_msgs[0]",
                          "children": [
                            {
                              "value": "err_msg",
                              "children": []
                            },
                            {
                              "value": "err_msgs[0]",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'",
                      "children": [
                        {
                          "value": "expected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'",
                          "children": [
                            {
                              "value": "expected_err_msg",
                              "children": []
                            },
                            {
                              "value": "'(L001) Title syntax should be \"[TITLE](LINK)\"'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "(L001) Title syntax should be \"[TITLE](LINK)\"",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "err_msg",
                                  "children": []
                                },
                                {
                                  "value": "expected_err_msg",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_title_with_api_at_the_end_of_the_title(self):\n        raw_title = '[A API](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title should not end with \"... API\". Every entry is an API here!'\n\n        self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_title_with_api_at_the_end_of_the_title",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raw_title = '[A API](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title should not end with \"... API\". Every entry is an API here!'\n\n        self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "raw_title = '[A API](https://www.ex.com)'",
                      "children": [
                        {
                          "value": "raw_title = '[A API](https://www.ex.com)'",
                          "children": [
                            {
                              "value": "raw_title",
                              "children": []
                            },
                            {
                              "value": "'[A API](https://www.ex.com)'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "[A API](https://www.ex.com)",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_title(0, raw_title)",
                      "children": [
                        {
                          "value": "err_msgs = check_title(0, raw_title)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_title(0, raw_title)",
                              "children": [
                                {
                                  "value": "check_title",
                                  "children": []
                                },
                                {
                                  "value": "(0, raw_title)",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    },
                                    {
                                      "value": "raw_title",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 1)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 1)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 1)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msg = err_msgs[0]",
                      "children": [
                        {
                          "value": "err_msg = err_msgs[0]",
                          "children": [
                            {
                              "value": "err_msg",
                              "children": []
                            },
                            {
                              "value": "err_msgs[0]",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expected_err_msg = '(L001) Title should not end with \"... API\". Every entry is an API here!'",
                      "children": [
                        {
                          "value": "expected_err_msg = '(L001) Title should not end with \"... API\". Every entry is an API here!'",
                          "children": [
                            {
                              "value": "expected_err_msg",
                              "children": []
                            },
                            {
                              "value": "'(L001) Title should not end with \"... API\". Every entry is an API here!'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "(L001) Title should not end with \"... API\". Every entry is an API here!",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "err_msg",
                                  "children": []
                                },
                                {
                                  "value": "expected_err_msg",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_description_with_correct_description(self):\n        desc = 'This is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
              "children": [
                {
                  "value": "test_check_description_with_correct_description",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "desc = 'This is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
                  "children": [
                    {
                      "value": "desc = 'This is a fake description'",
                      "children": [
                        {
                          "value": "desc = 'This is a fake description'",
                          "children": [
                            {
                              "value": "desc",
                              "children": []
                            },
                            {
                              "value": "'This is a fake description'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "This is a fake description",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_description(0, desc)",
                      "children": [
                        {
                          "value": "err_msgs = check_description(0, desc)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_description(0, desc)",
                              "children": [
                                {
                                  "value": "check_description",
                                  "children": []
                                },
                                {
                                  "value": "(0, desc)",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    },
                                    {
                                      "value": "desc",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 0)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 0)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 0)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msgs, [])",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msgs, [])",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, [])",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "[]",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_description_with_first_char_is_not_capitalized(self):\n        desc = 'this is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) first character of description is not capitalized'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_description_with_first_char_is_not_capitalized",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "desc = 'this is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) first character of description is not capitalized'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "desc = 'this is a fake description'",
                      "children": [
                        {
                          "value": "desc = 'this is a fake description'",
                          "children": [
                            {
                              "value": "desc",
                              "children": []
                            },
                            {
                              "value": "'this is a fake description'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "this is a fake description",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_description(0, desc)",
                      "children": [
                        {
                          "value": "err_msgs = check_description(0, desc)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_description(0, desc)",
                              "children": [
                                {
                                  "value": "check_description",
                                  "children": []
                                },
                                {
                                  "value": "(0, desc)",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    },
                                    {
                                      "value": "desc",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 1)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 1)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 1)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msg = err_msgs[0]",
                      "children": [
                        {
                          "value": "err_msg = err_msgs[0]",
                          "children": [
                            {
                              "value": "err_msg",
                              "children": []
                            },
                            {
                              "value": "err_msgs[0]",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expected_err_msg = '(L001) first character of description is not capitalized'",
                      "children": [
                        {
                          "value": "expected_err_msg = '(L001) first character of description is not capitalized'",
                          "children": [
                            {
                              "value": "expected_err_msg",
                              "children": []
                            },
                            {
                              "value": "'(L001) first character of description is not capitalized'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "(L001) first character of description is not capitalized",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msg, str)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msg, str)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg, str)",
                              "children": [
                                {
                                  "value": "err_msg",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "err_msg",
                                  "children": []
                                },
                                {
                                  "value": "expected_err_msg",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_description_with_punctuation_in_the_end(self):\n        base_desc = 'This is a fake description'\n        punctuation = r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\"\n        desc_with_punc = [base_desc + punc for punc in punctuation]\n        \n        for desc in desc_with_punc:\n\n            with self.subTest():\n                err_msgs = check_description(0, desc)\n\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_description_with_punctuation_in_the_end",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "base_desc = 'This is a fake description'\n        punctuation = r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\"\n        desc_with_punc = [base_desc + punc for punc in punctuation]\n        \n        for desc in desc_with_punc:\n\n            with self.subTest():\n                err_msgs = check_description(0, desc)\n\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "base_desc = 'This is a fake description'",
                      "children": [
                        {
                          "value": "base_desc = 'This is a fake description'",
                          "children": [
                            {
                              "value": "base_desc",
                              "children": []
                            },
                            {
                              "value": "'This is a fake description'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "This is a fake description",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "punctuation = r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\"",
                      "children": [
                        {
                          "value": "punctuation = r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\"",
                          "children": [
                            {
                              "value": "punctuation",
                              "children": []
                            },
                            {
                              "value": "r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\"",
                              "children": [
                                {
                                  "value": "r\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "desc_with_punc = [base_desc + punc for punc in punctuation]",
                      "children": [
                        {
                          "value": "desc_with_punc = [base_desc + punc for punc in punctuation]",
                          "children": [
                            {
                              "value": "desc_with_punc",
                              "children": []
                            },
                            {
                              "value": "[base_desc + punc for punc in punctuation]",
                              "children": [
                                {
                                  "value": "base_desc + punc",
                                  "children": [
                                    {
                                      "value": "base_desc",
                                      "children": []
                                    },
                                    {
                                      "value": "punc",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "for punc in punctuation",
                                  "children": [
                                    {
                                      "value": "punc",
                                      "children": []
                                    },
                                    {
                                      "value": "punctuation",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for desc in desc_with_punc:\n\n            with self.subTest():\n                err_msgs = check_description(0, desc)\n\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "desc",
                          "children": []
                        },
                        {
                          "value": "desc_with_punc",
                          "children": []
                        },
                        {
                          "value": "with self.subTest():\n                err_msgs = check_description(0, desc)\n\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "with self.subTest():\n                err_msgs = check_description(0, desc)\n\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "err_msgs = check_description(0, desc)\n\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                                  "children": [
                                    {
                                      "value": "err_msgs = check_description(0, desc)",
                                      "children": [
                                        {
                                          "value": "err_msgs = check_description(0, desc)",
                                          "children": [
                                            {
                                              "value": "err_msgs",
                                              "children": []
                                            },
                                            {
                                              "value": "check_description(0, desc)",
                                              "children": [
                                                {
                                                  "value": "check_description",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(0, desc)",
                                                  "children": [
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "desc",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msgs, list)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msgs, list)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msgs, list)",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(len(err_msgs), 1)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(len(err_msgs), 1)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(len(err_msgs), 1)",
                                              "children": [
                                                {
                                                  "value": "len(err_msgs)",
                                                  "children": [
                                                    {
                                                      "value": "len",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(err_msgs)",
                                                      "children": [
                                                        {
                                                          "value": "err_msgs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "err_msg = err_msgs[0]",
                                      "children": [
                                        {
                                          "value": "err_msg = err_msgs[0]",
                                          "children": [
                                            {
                                              "value": "err_msg",
                                              "children": []
                                            },
                                            {
                                              "value": "err_msgs[0]",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "expected_err_msg = f'(L001) description should not end with {desc[-1]}'",
                                      "children": [
                                        {
                                          "value": "expected_err_msg = f'(L001) description should not end with {desc[-1]}'",
                                          "children": [
                                            {
                                              "value": "expected_err_msg",
                                              "children": []
                                            },
                                            {
                                              "value": "f'(L001) description should not end with {desc[-1]}'",
                                              "children": [
                                                {
                                                  "value": "f'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(L001) description should not end with",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{desc[-1]}",
                                                  "children": [
                                                    {
                                                      "value": "desc[-1]",
                                                      "children": [
                                                        {
                                                          "value": "desc",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "-1",
                                                          "children": [
                                                            {
                                                              "value": "1",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msg, str)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msg, str)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg, str)",
                                              "children": [
                                                {
                                                  "value": "err_msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg, expected_err_msg)",
                                              "children": [
                                                {
                                                  "value": "err_msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "expected_err_msg",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_description_that_exceeds_the_character_limit(self):\n        long_desc = 'Desc' * max_description_length\n        long_desc_length = len(long_desc)\n\n        err_msgs = check_description(0, long_desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n\n        err_msg = err_msgs[0]\n        expected_err_msg = f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_description_that_exceeds_the_character_limit",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "long_desc = 'Desc' * max_description_length\n        long_desc_length = len(long_desc)\n\n        err_msgs = check_description(0, long_desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n\n        err_msg = err_msgs[0]\n        expected_err_msg = f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "long_desc = 'Desc' * max_description_length",
                      "children": [
                        {
                          "value": "long_desc = 'Desc' * max_description_length",
                          "children": [
                            {
                              "value": "long_desc",
                              "children": []
                            },
                            {
                              "value": "'Desc' * max_description_length",
                              "children": [
                                {
                                  "value": "'Desc'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "Desc",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "max_description_length",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "long_desc_length = len(long_desc)",
                      "children": [
                        {
                          "value": "long_desc_length = len(long_desc)",
                          "children": [
                            {
                              "value": "long_desc_length",
                              "children": []
                            },
                            {
                              "value": "len(long_desc)",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(long_desc)",
                                  "children": [
                                    {
                                      "value": "long_desc",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_description(0, long_desc)",
                      "children": [
                        {
                          "value": "err_msgs = check_description(0, long_desc)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_description(0, long_desc)",
                              "children": [
                                {
                                  "value": "check_description",
                                  "children": []
                                },
                                {
                                  "value": "(0, long_desc)",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    },
                                    {
                                      "value": "long_desc",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 1)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 1)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 1)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msg = err_msgs[0]",
                      "children": [
                        {
                          "value": "err_msg = err_msgs[0]",
                          "children": [
                            {
                              "value": "err_msg",
                              "children": []
                            },
                            {
                              "value": "err_msgs[0]",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expected_err_msg = f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'",
                      "children": [
                        {
                          "value": "expected_err_msg = f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'",
                          "children": [
                            {
                              "value": "expected_err_msg",
                              "children": []
                            },
                            {
                              "value": "f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'",
                              "children": [
                                {
                                  "value": "f'",
                                  "children": []
                                },
                                {
                                  "value": "(L001) description should not exceed",
                                  "children": []
                                },
                                {
                                  "value": "{max_description_length}",
                                  "children": [
                                    {
                                      "value": "max_description_length",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "characters (currently",
                                  "children": []
                                },
                                {
                                  "value": "{long_desc_length}",
                                  "children": [
                                    {
                                      "value": "long_desc_length",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": ")",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msg, str)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msg, str)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg, str)",
                              "children": [
                                {
                                  "value": "err_msg",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "err_msg",
                                  "children": []
                                },
                                {
                                  "value": "expected_err_msg",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_auth_with_valid_auth(self):\n        auth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']\n        auth_valid.append('No')\n\n        for auth in auth_valid:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
              "children": [
                {
                  "value": "test_check_auth_with_valid_auth",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "auth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']\n        auth_valid.append('No')\n\n        for auth in auth_valid:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                  "children": [
                    {
                      "value": "auth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']",
                      "children": [
                        {
                          "value": "auth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']",
                          "children": [
                            {
                              "value": "auth_valid",
                              "children": []
                            },
                            {
                              "value": "[f'`{auth}`' for auth in auth_keys if auth != 'No']",
                              "children": [
                                {
                                  "value": "f'`{auth}`'",
                                  "children": [
                                    {
                                      "value": "f'",
                                      "children": []
                                    },
                                    {
                                      "value": "`",
                                      "children": []
                                    },
                                    {
                                      "value": "{auth}",
                                      "children": [
                                        {
                                          "value": "auth",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "`",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "for auth in auth_keys",
                                  "children": [
                                    {
                                      "value": "auth",
                                      "children": []
                                    },
                                    {
                                      "value": "auth_keys",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "if auth != 'No'",
                                  "children": [
                                    {
                                      "value": "auth != 'No'",
                                      "children": [
                                        {
                                          "value": "auth",
                                          "children": []
                                        },
                                        {
                                          "value": "'No'",
                                          "children": [
                                            {
                                              "value": "'",
                                              "children": []
                                            },
                                            {
                                              "value": "No",
                                              "children": []
                                            },
                                            {
                                              "value": "'",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "auth_valid.append('No')",
                      "children": [
                        {
                          "value": "auth_valid.append('No')",
                          "children": [
                            {
                              "value": "auth_valid.append",
                              "children": [
                                {
                                  "value": "auth_valid",
                                  "children": []
                                },
                                {
                                  "value": "append",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "('No')",
                              "children": [
                                {
                                  "value": "'No'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "No",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for auth in auth_valid:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                      "children": [
                        {
                          "value": "auth",
                          "children": []
                        },
                        {
                          "value": "auth_valid",
                          "children": []
                        },
                        {
                          "value": "with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                          "children": [
                            {
                              "value": "with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                                  "children": [
                                    {
                                      "value": "err_msgs = check_auth(0, auth)",
                                      "children": [
                                        {
                                          "value": "err_msgs = check_auth(0, auth)",
                                          "children": [
                                            {
                                              "value": "err_msgs",
                                              "children": []
                                            },
                                            {
                                              "value": "check_auth(0, auth)",
                                              "children": [
                                                {
                                                  "value": "check_auth",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(0, auth)",
                                                  "children": [
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "auth",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msgs, list)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msgs, list)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msgs, list)",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(len(err_msgs), 0)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(len(err_msgs), 0)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(len(err_msgs), 0)",
                                              "children": [
                                                {
                                                  "value": "len(err_msgs)",
                                                  "children": [
                                                    {
                                                      "value": "len",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(err_msgs)",
                                                      "children": [
                                                        {
                                                          "value": "err_msgs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(err_msgs, [])",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(err_msgs, [])",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msgs, [])",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[]",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_auth_without_backtick(self):\n        auth_without_backtick = [auth for auth in auth_keys if auth != 'No']\n\n        for auth in auth_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_auth_without_backtick",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "auth_without_backtick = [auth for auth in auth_keys if auth != 'No']\n\n        for auth in auth_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "auth_without_backtick = [auth for auth in auth_keys if auth != 'No']",
                      "children": [
                        {
                          "value": "auth_without_backtick = [auth for auth in auth_keys if auth != 'No']",
                          "children": [
                            {
                              "value": "auth_without_backtick",
                              "children": []
                            },
                            {
                              "value": "[auth for auth in auth_keys if auth != 'No']",
                              "children": [
                                {
                                  "value": "auth",
                                  "children": []
                                },
                                {
                                  "value": "for auth in auth_keys",
                                  "children": [
                                    {
                                      "value": "auth",
                                      "children": []
                                    },
                                    {
                                      "value": "auth_keys",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "if auth != 'No'",
                                  "children": [
                                    {
                                      "value": "auth != 'No'",
                                      "children": [
                                        {
                                          "value": "auth",
                                          "children": []
                                        },
                                        {
                                          "value": "'No'",
                                          "children": [
                                            {
                                              "value": "'",
                                              "children": []
                                            },
                                            {
                                              "value": "No",
                                              "children": []
                                            },
                                            {
                                              "value": "'",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for auth in auth_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "auth",
                          "children": []
                        },
                        {
                          "value": "auth_without_backtick",
                          "children": []
                        },
                        {
                          "value": "with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                                  "children": [
                                    {
                                      "value": "err_msgs = check_auth(0, auth)",
                                      "children": [
                                        {
                                          "value": "err_msgs = check_auth(0, auth)",
                                          "children": [
                                            {
                                              "value": "err_msgs",
                                              "children": []
                                            },
                                            {
                                              "value": "check_auth(0, auth)",
                                              "children": [
                                                {
                                                  "value": "check_auth",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(0, auth)",
                                                  "children": [
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "auth",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msgs, list)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msgs, list)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msgs, list)",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(len(err_msgs), 1)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(len(err_msgs), 1)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(len(err_msgs), 1)",
                                              "children": [
                                                {
                                                  "value": "len(err_msgs)",
                                                  "children": [
                                                    {
                                                      "value": "len",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(err_msgs)",
                                                      "children": [
                                                        {
                                                          "value": "err_msgs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "err_msg = err_msgs[0]",
                                      "children": [
                                        {
                                          "value": "err_msg = err_msgs[0]",
                                          "children": [
                                            {
                                              "value": "err_msg",
                                              "children": []
                                            },
                                            {
                                              "value": "err_msgs[0]",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "expected_err_msg = '(L001) auth value is not enclosed with `backticks`'",
                                      "children": [
                                        {
                                          "value": "expected_err_msg = '(L001) auth value is not enclosed with `backticks`'",
                                          "children": [
                                            {
                                              "value": "expected_err_msg",
                                              "children": []
                                            },
                                            {
                                              "value": "'(L001) auth value is not enclosed with `backticks`'",
                                              "children": [
                                                {
                                                  "value": "'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(L001) auth value is not enclosed with `backticks`",
                                                  "children": []
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msg, str)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msg, str)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg, str)",
                                              "children": [
                                                {
                                                  "value": "err_msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg, expected_err_msg)",
                                              "children": [
                                                {
                                                  "value": "err_msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "expected_err_msg",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_auth_with_invalid_auth(self):\n        auth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']\n        auth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']\n\n        for auth in auth_invalid_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n\n                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n\n                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)\n\n        for auth in auth_invalid_with_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_auth_with_invalid_auth",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "auth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']\n        auth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']\n\n        for auth in auth_invalid_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n\n                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n\n                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)\n\n        for auth in auth_invalid_with_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "auth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']",
                      "children": [
                        {
                          "value": "auth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']",
                          "children": [
                            {
                              "value": "auth_invalid_without_backtick",
                              "children": []
                            },
                            {
                              "value": "['Yes', 'yes', 'no', 'random', 'Unknown']",
                              "children": [
                                {
                                  "value": "'Yes'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "Yes",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'yes'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "yes",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'no'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "no",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'random'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "random",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'Unknown'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "Unknown",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "auth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']",
                      "children": [
                        {
                          "value": "auth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']",
                          "children": [
                            {
                              "value": "auth_invalid_with_backtick",
                              "children": []
                            },
                            {
                              "value": "['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']",
                              "children": [
                                {
                                  "value": "'`Yes`'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "`Yes`",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'`yes`'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "`yes`",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'`no`'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "`no`",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'`random`'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "`random`",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'`Unknown`'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "`Unknown`",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for auth in auth_invalid_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n\n                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n\n                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)",
                      "children": [
                        {
                          "value": "auth",
                          "children": []
                        },
                        {
                          "value": "auth_invalid_without_backtick",
                          "children": []
                        },
                        {
                          "value": "with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n\n                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n\n                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)",
                          "children": [
                            {
                              "value": "with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n\n                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n\n                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n\n                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n\n                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)",
                                  "children": [
                                    {
                                      "value": "err_msgs = check_auth(0, auth)",
                                      "children": [
                                        {
                                          "value": "err_msgs = check_auth(0, auth)",
                                          "children": [
                                            {
                                              "value": "err_msgs",
                                              "children": []
                                            },
                                            {
                                              "value": "check_auth(0, auth)",
                                              "children": [
                                                {
                                                  "value": "check_auth",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(0, auth)",
                                                  "children": [
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "auth",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msgs, list)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msgs, list)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msgs, list)",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(len(err_msgs), 2)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(len(err_msgs), 2)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(len(err_msgs), 2)",
                                              "children": [
                                                {
                                                  "value": "len(err_msgs)",
                                                  "children": [
                                                    {
                                                      "value": "len",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(err_msgs)",
                                                      "children": [
                                                        {
                                                          "value": "err_msgs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "2",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "err_msg_1 = err_msgs[0]",
                                      "children": [
                                        {
                                          "value": "err_msg_1 = err_msgs[0]",
                                          "children": [
                                            {
                                              "value": "err_msg_1",
                                              "children": []
                                            },
                                            {
                                              "value": "err_msgs[0]",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "err_msg_2 = err_msgs[1]",
                                      "children": [
                                        {
                                          "value": "err_msg_2 = err_msgs[1]",
                                          "children": [
                                            {
                                              "value": "err_msg_2",
                                              "children": []
                                            },
                                            {
                                              "value": "err_msgs[1]",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'",
                                      "children": [
                                        {
                                          "value": "expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'",
                                          "children": [
                                            {
                                              "value": "expected_err_msg_1",
                                              "children": []
                                            },
                                            {
                                              "value": "f'(L001) auth value is not enclosed with `backticks`'",
                                              "children": [
                                                {
                                                  "value": "f'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(L001) auth value is not enclosed with `backticks`",
                                                  "children": []
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'",
                                      "children": [
                                        {
                                          "value": "expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'",
                                          "children": [
                                            {
                                              "value": "expected_err_msg_2",
                                              "children": []
                                            },
                                            {
                                              "value": "f'(L001) {auth} is not a valid Auth option'",
                                              "children": [
                                                {
                                                  "value": "f'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(L001)",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{auth}",
                                                  "children": [
                                                    {
                                                      "value": "auth",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "is not a valid Auth option",
                                                  "children": []
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msg_1, str)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msg_1, str)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg_1, str)",
                                              "children": [
                                                {
                                                  "value": "err_msg_1",
                                                  "children": []
                                                },
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msg_2, str)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msg_2, str)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg_2, str)",
                                              "children": [
                                                {
                                                  "value": "err_msg_2",
                                                  "children": []
                                                },
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(err_msg_1, expected_err_msg_1)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(err_msg_1, expected_err_msg_1)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg_1, expected_err_msg_1)",
                                              "children": [
                                                {
                                                  "value": "err_msg_1",
                                                  "children": []
                                                },
                                                {
                                                  "value": "expected_err_msg_1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(err_msg_2, expected_err_msg_2)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(err_msg_2, expected_err_msg_2)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg_2, expected_err_msg_2)",
                                              "children": [
                                                {
                                                  "value": "err_msg_2",
                                                  "children": []
                                                },
                                                {
                                                  "value": "expected_err_msg_2",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for auth in auth_invalid_with_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "auth",
                          "children": []
                        },
                        {
                          "value": "auth_invalid_with_backtick",
                          "children": []
                        },
                        {
                          "value": "with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                                  "children": [
                                    {
                                      "value": "err_msgs = check_auth(0, auth)",
                                      "children": [
                                        {
                                          "value": "err_msgs = check_auth(0, auth)",
                                          "children": [
                                            {
                                              "value": "err_msgs",
                                              "children": []
                                            },
                                            {
                                              "value": "check_auth(0, auth)",
                                              "children": [
                                                {
                                                  "value": "check_auth",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(0, auth)",
                                                  "children": [
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "auth",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msgs, list)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msgs, list)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msgs, list)",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(len(err_msgs), 1)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(len(err_msgs), 1)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(len(err_msgs), 1)",
                                              "children": [
                                                {
                                                  "value": "len(err_msgs)",
                                                  "children": [
                                                    {
                                                      "value": "len",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(err_msgs)",
                                                      "children": [
                                                        {
                                                          "value": "err_msgs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "err_msg = err_msgs[0]",
                                      "children": [
                                        {
                                          "value": "err_msg = err_msgs[0]",
                                          "children": [
                                            {
                                              "value": "err_msg",
                                              "children": []
                                            },
                                            {
                                              "value": "err_msgs[0]",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "expected_err_msg = f'(L001) {auth} is not a valid Auth option'",
                                      "children": [
                                        {
                                          "value": "expected_err_msg = f'(L001) {auth} is not a valid Auth option'",
                                          "children": [
                                            {
                                              "value": "expected_err_msg",
                                              "children": []
                                            },
                                            {
                                              "value": "f'(L001) {auth} is not a valid Auth option'",
                                              "children": [
                                                {
                                                  "value": "f'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(L001)",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{auth}",
                                                  "children": [
                                                    {
                                                      "value": "auth",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "is not a valid Auth option",
                                                  "children": []
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msg, str)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msg, str)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg, str)",
                                              "children": [
                                                {
                                                  "value": "err_msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg, expected_err_msg)",
                                              "children": [
                                                {
                                                  "value": "err_msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "expected_err_msg",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_https_with_valid_https(self):\n        for https in https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
              "children": [
                {
                  "value": "test_check_https_with_valid_https",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "for https in https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                  "children": [
                    {
                      "value": "for https in https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                      "children": [
                        {
                          "value": "https",
                          "children": []
                        },
                        {
                          "value": "https_keys",
                          "children": []
                        },
                        {
                          "value": "with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                          "children": [
                            {
                              "value": "with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                                  "children": [
                                    {
                                      "value": "err_msgs = check_https(0, https)",
                                      "children": [
                                        {
                                          "value": "err_msgs = check_https(0, https)",
                                          "children": [
                                            {
                                              "value": "err_msgs",
                                              "children": []
                                            },
                                            {
                                              "value": "check_https(0, https)",
                                              "children": [
                                                {
                                                  "value": "check_https",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(0, https)",
                                                  "children": [
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "https",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msgs, list)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msgs, list)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msgs, list)",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(len(err_msgs), 0)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(len(err_msgs), 0)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(len(err_msgs), 0)",
                                              "children": [
                                                {
                                                  "value": "len(err_msgs)",
                                                  "children": [
                                                    {
                                                      "value": "len",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(err_msgs)",
                                                      "children": [
                                                        {
                                                          "value": "err_msgs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(err_msgs, [])",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(err_msgs, [])",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msgs, [])",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[]",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_https_with_invalid_https(self):\n        invalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']\n\n        for https in invalid_https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_https_with_invalid_https",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "invalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']\n\n        for https in invalid_https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "invalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']",
                      "children": [
                        {
                          "value": "invalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']",
                          "children": [
                            {
                              "value": "invalid_https_keys",
                              "children": []
                            },
                            {
                              "value": "['yes', 'no', 'Unknown', 'https', 'http']",
                              "children": [
                                {
                                  "value": "'yes'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "yes",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'no'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "no",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'Unknown'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "Unknown",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'https'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "https",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'http'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "http",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for https in invalid_https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "https",
                          "children": []
                        },
                        {
                          "value": "invalid_https_keys",
                          "children": []
                        },
                        {
                          "value": "with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                                  "children": [
                                    {
                                      "value": "err_msgs = check_https(0, https)",
                                      "children": [
                                        {
                                          "value": "err_msgs = check_https(0, https)",
                                          "children": [
                                            {
                                              "value": "err_msgs",
                                              "children": []
                                            },
                                            {
                                              "value": "check_https(0, https)",
                                              "children": [
                                                {
                                                  "value": "check_https",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(0, https)",
                                                  "children": [
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "https",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msgs, list)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msgs, list)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msgs, list)",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(len(err_msgs), 1)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(len(err_msgs), 1)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(len(err_msgs), 1)",
                                              "children": [
                                                {
                                                  "value": "len(err_msgs)",
                                                  "children": [
                                                    {
                                                      "value": "len",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(err_msgs)",
                                                      "children": [
                                                        {
                                                          "value": "err_msgs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "err_msg = err_msgs[0]",
                                      "children": [
                                        {
                                          "value": "err_msg = err_msgs[0]",
                                          "children": [
                                            {
                                              "value": "err_msg",
                                              "children": []
                                            },
                                            {
                                              "value": "err_msgs[0]",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "expected_err_msg = f'(L001) {https} is not a valid HTTPS option'",
                                      "children": [
                                        {
                                          "value": "expected_err_msg = f'(L001) {https} is not a valid HTTPS option'",
                                          "children": [
                                            {
                                              "value": "expected_err_msg",
                                              "children": []
                                            },
                                            {
                                              "value": "f'(L001) {https} is not a valid HTTPS option'",
                                              "children": [
                                                {
                                                  "value": "f'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(L001)",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{https}",
                                                  "children": [
                                                    {
                                                      "value": "https",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "is not a valid HTTPS option",
                                                  "children": []
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msg, str)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msg, str)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg, str)",
                                              "children": [
                                                {
                                                  "value": "err_msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg, expected_err_msg)",
                                              "children": [
                                                {
                                                  "value": "err_msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "expected_err_msg",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_cors_with_valid_cors(self):\n        for cors in cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
              "children": [
                {
                  "value": "test_check_cors_with_valid_cors",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "for cors in cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                  "children": [
                    {
                      "value": "for cors in cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                      "children": [
                        {
                          "value": "cors",
                          "children": []
                        },
                        {
                          "value": "cors_keys",
                          "children": []
                        },
                        {
                          "value": "with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                          "children": [
                            {
                              "value": "with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                                  "children": [
                                    {
                                      "value": "err_msgs = check_cors(0, cors)",
                                      "children": [
                                        {
                                          "value": "err_msgs = check_cors(0, cors)",
                                          "children": [
                                            {
                                              "value": "err_msgs",
                                              "children": []
                                            },
                                            {
                                              "value": "check_cors(0, cors)",
                                              "children": [
                                                {
                                                  "value": "check_cors",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(0, cors)",
                                                  "children": [
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "cors",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msgs, list)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msgs, list)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msgs, list)",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(len(err_msgs), 0)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(len(err_msgs), 0)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(len(err_msgs), 0)",
                                              "children": [
                                                {
                                                  "value": "len(err_msgs)",
                                                  "children": [
                                                    {
                                                      "value": "len",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(err_msgs)",
                                                      "children": [
                                                        {
                                                          "value": "err_msgs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(err_msgs, [])",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(err_msgs, [])",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msgs, [])",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[]",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_cors_with_invalid_cors(self):\n        invalid_cors_keys = ['yes', 'no', 'unknown', 'cors']\n\n        for cors in invalid_cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {cors} is not a valid CORS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_cors_with_invalid_cors",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "invalid_cors_keys = ['yes', 'no', 'unknown', 'cors']\n\n        for cors in invalid_cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {cors} is not a valid CORS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "invalid_cors_keys = ['yes', 'no', 'unknown', 'cors']",
                      "children": [
                        {
                          "value": "invalid_cors_keys = ['yes', 'no', 'unknown', 'cors']",
                          "children": [
                            {
                              "value": "invalid_cors_keys",
                              "children": []
                            },
                            {
                              "value": "['yes', 'no', 'unknown', 'cors']",
                              "children": [
                                {
                                  "value": "'yes'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "yes",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'no'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "no",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'unknown'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "unknown",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'cors'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "cors",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for cors in invalid_cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {cors} is not a valid CORS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "cors",
                          "children": []
                        },
                        {
                          "value": "invalid_cors_keys",
                          "children": []
                        },
                        {
                          "value": "with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {cors} is not a valid CORS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {cors} is not a valid CORS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {cors} is not a valid CORS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                                  "children": [
                                    {
                                      "value": "err_msgs = check_cors(0, cors)",
                                      "children": [
                                        {
                                          "value": "err_msgs = check_cors(0, cors)",
                                          "children": [
                                            {
                                              "value": "err_msgs",
                                              "children": []
                                            },
                                            {
                                              "value": "check_cors(0, cors)",
                                              "children": [
                                                {
                                                  "value": "check_cors",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(0, cors)",
                                                  "children": [
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "cors",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msgs, list)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msgs, list)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msgs, list)",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(len(err_msgs), 1)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(len(err_msgs), 1)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(len(err_msgs), 1)",
                                              "children": [
                                                {
                                                  "value": "len(err_msgs)",
                                                  "children": [
                                                    {
                                                      "value": "len",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(err_msgs)",
                                                      "children": [
                                                        {
                                                          "value": "err_msgs",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "err_msg = err_msgs[0]",
                                      "children": [
                                        {
                                          "value": "err_msg = err_msgs[0]",
                                          "children": [
                                            {
                                              "value": "err_msg",
                                              "children": []
                                            },
                                            {
                                              "value": "err_msgs[0]",
                                              "children": [
                                                {
                                                  "value": "err_msgs",
                                                  "children": []
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "expected_err_msg = f'(L001) {cors} is not a valid CORS option'",
                                      "children": [
                                        {
                                          "value": "expected_err_msg = f'(L001) {cors} is not a valid CORS option'",
                                          "children": [
                                            {
                                              "value": "expected_err_msg",
                                              "children": []
                                            },
                                            {
                                              "value": "f'(L001) {cors} is not a valid CORS option'",
                                              "children": [
                                                {
                                                  "value": "f'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(L001)",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{cors}",
                                                  "children": [
                                                    {
                                                      "value": "cors",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "is not a valid CORS option",
                                                  "children": []
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertIsInstance(err_msg, str)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msg, str)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg, str)",
                                              "children": [
                                                {
                                                  "value": "err_msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                                      "children": [
                                        {
                                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                                          "children": [
                                            {
                                              "value": "self.assertEqual",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertEqual",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg, expected_err_msg)",
                                              "children": [
                                                {
                                                  "value": "err_msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "expected_err_msg",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_entry_with_correct_segments(self):\n        correct_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']\n\n        err_msgs = check_entry(0, correct_segments)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
              "children": [
                {
                  "value": "test_check_entry_with_correct_segments",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "correct_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']\n\n        err_msgs = check_entry(0, correct_segments)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
                  "children": [
                    {
                      "value": "correct_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']",
                      "children": [
                        {
                          "value": "correct_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']",
                          "children": [
                            {
                              "value": "correct_segments",
                              "children": []
                            },
                            {
                              "value": "['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']",
                              "children": [
                                {
                                  "value": "'[A](https://www.ex.com)'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "[A](https://www.ex.com)",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'Desc'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "Desc",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'`apiKey`'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "`apiKey`",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'Yes'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "Yes",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'Yes'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "Yes",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_entry(0, correct_segments)",
                      "children": [
                        {
                          "value": "err_msgs = check_entry(0, correct_segments)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_entry(0, correct_segments)",
                              "children": [
                                {
                                  "value": "check_entry",
                                  "children": []
                                },
                                {
                                  "value": "(0, correct_segments)",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    },
                                    {
                                      "value": "correct_segments",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 0)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 0)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 0)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msgs, [])",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msgs, [])",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, [])",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "[]",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_entry_with_incorrect_segments(self):\n        incorrect_segments = ['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes', 'yes']\n\n        err_msgs = check_entry(0, incorrect_segments)\n        expected_err_msgs = [\n            '(L001) Title should not end with \"... API\". Every entry is an API here!',\n            '(L001) first character of description is not capitalized',\n            '(L001) description should not end with .',\n            '(L001) auth value is not enclosed with `backticks`',\n            '(L001) yes is not a valid Auth option',\n            '(L001) yes is not a valid HTTPS option',\n            '(L001) yes is not a valid CORS option'\n        ]\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 7)\n        for err_msg in err_msgs:\n            with self.subTest():\n                self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msgs, expected_err_msgs)",
              "children": [
                {
                  "value": "test_check_entry_with_incorrect_segments",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "incorrect_segments = ['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes', 'yes']\n\n        err_msgs = check_entry(0, incorrect_segments)\n        expected_err_msgs = [\n            '(L001) Title should not end with \"... API\". Every entry is an API here!',\n            '(L001) first character of description is not capitalized',\n            '(L001) description should not end with .',\n            '(L001) auth value is not enclosed with `backticks`',\n            '(L001) yes is not a valid Auth option',\n            '(L001) yes is not a valid HTTPS option',\n            '(L001) yes is not a valid CORS option'\n        ]\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 7)\n        for err_msg in err_msgs:\n            with self.subTest():\n                self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msgs, expected_err_msgs)",
                  "children": [
                    {
                      "value": "incorrect_segments = ['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes', 'yes']",
                      "children": [
                        {
                          "value": "incorrect_segments = ['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes', 'yes']",
                          "children": [
                            {
                              "value": "incorrect_segments",
                              "children": []
                            },
                            {
                              "value": "['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes', 'yes']",
                              "children": [
                                {
                                  "value": "'[A API](https://www.ex.com)'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "[A API](https://www.ex.com)",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'desc.'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "desc.",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'yes'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "yes",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'yes'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "yes",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'yes'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "yes",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_entry(0, incorrect_segments)",
                      "children": [
                        {
                          "value": "err_msgs = check_entry(0, incorrect_segments)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_entry(0, incorrect_segments)",
                              "children": [
                                {
                                  "value": "check_entry",
                                  "children": []
                                },
                                {
                                  "value": "(0, incorrect_segments)",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    },
                                    {
                                      "value": "incorrect_segments",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expected_err_msgs = [\n            '(L001) Title should not end with \"... API\". Every entry is an API here!',\n            '(L001) first character of description is not capitalized',\n            '(L001) description should not end with .',\n            '(L001) auth value is not enclosed with `backticks`',\n            '(L001) yes is not a valid Auth option',\n            '(L001) yes is not a valid HTTPS option',\n            '(L001) yes is not a valid CORS option'\n        ]",
                      "children": [
                        {
                          "value": "expected_err_msgs = [\n            '(L001) Title should not end with \"... API\". Every entry is an API here!',\n            '(L001) first character of description is not capitalized',\n            '(L001) description should not end with .',\n            '(L001) auth value is not enclosed with `backticks`',\n            '(L001) yes is not a valid Auth option',\n            '(L001) yes is not a valid HTTPS option',\n            '(L001) yes is not a valid CORS option'\n        ]",
                          "children": [
                            {
                              "value": "expected_err_msgs",
                              "children": []
                            },
                            {
                              "value": "[\n            '(L001) Title should not end with \"... API\". Every entry is an API here!',\n            '(L001) first character of description is not capitalized',\n            '(L001) description should not end with .',\n            '(L001) auth value is not enclosed with `backticks`',\n            '(L001) yes is not a valid Auth option',\n            '(L001) yes is not a valid HTTPS option',\n            '(L001) yes is not a valid CORS option'\n        ]",
                              "children": [
                                {
                                  "value": "'(L001) Title should not end with \"... API\". Every entry is an API here!'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L001) Title should not end with \"... API\". Every entry is an API here!",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'(L001) first character of description is not capitalized'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L001) first character of description is not capitalized",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'(L001) description should not end with .'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L001) description should not end with .",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'(L001) auth value is not enclosed with `backticks`'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L001) auth value is not enclosed with `backticks`",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'(L001) yes is not a valid Auth option'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L001) yes is not a valid Auth option",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'(L001) yes is not a valid HTTPS option'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L001) yes is not a valid HTTPS option",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'(L001) yes is not a valid CORS option'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "(L001) yes is not a valid CORS option",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 7)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 7)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 7)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "7",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for err_msg in err_msgs:\n            with self.subTest():\n                self.assertIsInstance(err_msg, str)",
                      "children": [
                        {
                          "value": "err_msg",
                          "children": []
                        },
                        {
                          "value": "err_msgs",
                          "children": []
                        },
                        {
                          "value": "with self.subTest():\n                self.assertIsInstance(err_msg, str)",
                          "children": [
                            {
                              "value": "with self.subTest():\n                self.assertIsInstance(err_msg, str)",
                              "children": [
                                {
                                  "value": "self.subTest()",
                                  "children": [
                                    {
                                      "value": "self.subTest()",
                                      "children": [
                                        {
                                          "value": "self.subTest()",
                                          "children": [
                                            {
                                              "value": "self.subTest",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subTest",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.assertIsInstance(err_msg, str)",
                                  "children": [
                                    {
                                      "value": "self.assertIsInstance(err_msg, str)",
                                      "children": [
                                        {
                                          "value": "self.assertIsInstance(err_msg, str)",
                                          "children": [
                                            {
                                              "value": "self.assertIsInstance",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "assertIsInstance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(err_msg, str)",
                                              "children": [
                                                {
                                                  "value": "err_msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msgs, expected_err_msgs)",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msgs, expected_err_msgs)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, expected_err_msgs)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "expected_err_msgs",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_file_format_with_correct_format(self):\n        correct_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        err_msgs = check_file_format(lines=correct_format)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
              "children": [
                {
                  "value": "test_check_file_format_with_correct_format",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "correct_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        err_msgs = check_file_format(lines=correct_format)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
                  "children": [
                    {
                      "value": "correct_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                      "children": [
                        {
                          "value": "correct_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                          "children": [
                            {
                              "value": "correct_format",
                              "children": []
                            },
                            {
                              "value": "[\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                              "children": [
                                {
                                  "value": "'## Index'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "## Index",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'* [A](#a)'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "* [A](#a)",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'* [B](#b)'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "* [B](#b)",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "''",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'### A'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### A",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "''",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'### B'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### B",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_file_format(lines=correct_format)",
                      "children": [
                        {
                          "value": "err_msgs = check_file_format(lines=correct_format)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_file_format(lines=correct_format)",
                              "children": [
                                {
                                  "value": "check_file_format",
                                  "children": []
                                },
                                {
                                  "value": "(lines=correct_format)",
                                  "children": [
                                    {
                                      "value": "lines=correct_format",
                                      "children": [
                                        {
                                          "value": "lines",
                                          "children": []
                                        },
                                        {
                                          "value": "correct_format",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 0)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 0)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 0)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msgs, [])",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msgs, [])",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, [])",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "[]",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_file_format_with_category_header_not_added_to_index(self):\n        incorrect_format = [\n            '## Index',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = '(L003) category header (A) not added to Index section'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_file_format_with_category_header_not_added_to_index",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "incorrect_format = [\n            '## Index',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = '(L003) category header (A) not added to Index section'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "incorrect_format = [\n            '## Index',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]",
                      "children": [
                        {
                          "value": "incorrect_format = [\n            '## Index',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]",
                          "children": [
                            {
                              "value": "incorrect_format",
                              "children": []
                            },
                            {
                              "value": "[\n            '## Index',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]",
                              "children": [
                                {
                                  "value": "'## Index'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "## Index",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "''",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'### A'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### A",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_file_format(lines=incorrect_format)",
                      "children": [
                        {
                          "value": "err_msgs = check_file_format(lines=incorrect_format)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_file_format(lines=incorrect_format)",
                              "children": [
                                {
                                  "value": "check_file_format",
                                  "children": []
                                },
                                {
                                  "value": "(lines=incorrect_format)",
                                  "children": [
                                    {
                                      "value": "lines=incorrect_format",
                                      "children": [
                                        {
                                          "value": "lines",
                                          "children": []
                                        },
                                        {
                                          "value": "incorrect_format",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expected_err_msg = '(L003) category header (A) not added to Index section'",
                      "children": [
                        {
                          "value": "expected_err_msg = '(L003) category header (A) not added to Index section'",
                          "children": [
                            {
                              "value": "expected_err_msg",
                              "children": []
                            },
                            {
                              "value": "'(L003) category header (A) not added to Index section'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "(L003) category header (A) not added to Index section",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 1)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 1)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 1)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msg = err_msgs[0]",
                      "children": [
                        {
                          "value": "err_msg = err_msgs[0]",
                          "children": [
                            {
                              "value": "err_msg",
                              "children": []
                            },
                            {
                              "value": "err_msgs[0]",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "err_msg",
                                  "children": []
                                },
                                {
                                  "value": "expected_err_msg",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_file_format_with_category_without_min_entries(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        category_with_err = 'A'\n        num_in_category = 1\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_file_format_with_category_without_min_entries",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        category_with_err = 'A'\n        num_in_category = 1\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                      "children": [
                        {
                          "value": "incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                          "children": [
                            {
                              "value": "incorrect_format",
                              "children": []
                            },
                            {
                              "value": "[\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
                              "children": [
                                {
                                  "value": "'## Index'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "## Index",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'* [A](#a)'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "* [A](#a)",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'* [B](#b)'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "* [B](#b)",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "''",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'### A'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### A",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "''",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'### B'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### B",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "category_with_err = 'A'",
                      "children": [
                        {
                          "value": "category_with_err = 'A'",
                          "children": [
                            {
                              "value": "category_with_err",
                              "children": []
                            },
                            {
                              "value": "'A'",
                              "children": [
                                {
                                  "value": "'",
                                  "children": []
                                },
                                {
                                  "value": "A",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "num_in_category = 1",
                      "children": [
                        {
                          "value": "num_in_category = 1",
                          "children": [
                            {
                              "value": "num_in_category",
                              "children": []
                            },
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_file_format(lines=incorrect_format)",
                      "children": [
                        {
                          "value": "err_msgs = check_file_format(lines=incorrect_format)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_file_format(lines=incorrect_format)",
                              "children": [
                                {
                                  "value": "check_file_format",
                                  "children": []
                                },
                                {
                                  "value": "(lines=incorrect_format)",
                                  "children": [
                                    {
                                      "value": "lines=incorrect_format",
                                      "children": [
                                        {
                                          "value": "lines",
                                          "children": []
                                        },
                                        {
                                          "value": "incorrect_format",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expected_err_msg = f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'",
                      "children": [
                        {
                          "value": "expected_err_msg = f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'",
                          "children": [
                            {
                              "value": "expected_err_msg",
                              "children": []
                            },
                            {
                              "value": "f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'",
                              "children": [
                                {
                                  "value": "f'",
                                  "children": []
                                },
                                {
                                  "value": "(L005)",
                                  "children": []
                                },
                                {
                                  "value": "{category_with_err}",
                                  "children": [
                                    {
                                      "value": "category_with_err",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "category does not have the minimum",
                                  "children": []
                                },
                                {
                                  "value": "{min_entries_per_category}",
                                  "children": [
                                    {
                                      "value": "min_entries_per_category",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "entries (only has",
                                  "children": []
                                },
                                {
                                  "value": "{num_in_category}",
                                  "children": [
                                    {
                                      "value": "num_in_category",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": ")",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 1)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 1)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 1)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msg = err_msgs[0]",
                      "children": [
                        {
                          "value": "err_msg = err_msgs[0]",
                          "children": [
                            {
                              "value": "err_msg",
                              "children": []
                            },
                            {
                              "value": "err_msgs[0]",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "err_msg",
                                  "children": []
                                },
                                {
                                  "value": "expected_err_msg",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_file_format_entry_without_all_necessary_columns(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        current_segments_num = 3\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_file_format_entry_without_all_necessary_columns",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        current_segments_num = 3\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]",
                      "children": [
                        {
                          "value": "incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]",
                          "children": [
                            {
                              "value": "incorrect_format",
                              "children": []
                            },
                            {
                              "value": "[\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]",
                              "children": [
                                {
                                  "value": "'## Index'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "## Index",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'* [A](#a)'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "* [A](#a)",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "''",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'### A'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### A",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AB](https://www.ex.com) | Desc | `apiKey` |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AB](https://www.ex.com) | Desc | `apiKey` |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "# missing https and cors",
                                  "children": []
                                },
                                {
                                  "value": "'| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "current_segments_num = 3",
                      "children": [
                        {
                          "value": "current_segments_num = 3",
                          "children": [
                            {
                              "value": "current_segments_num",
                              "children": []
                            },
                            {
                              "value": "3",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_file_format(lines=incorrect_format)",
                      "children": [
                        {
                          "value": "err_msgs = check_file_format(lines=incorrect_format)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_file_format(lines=incorrect_format)",
                              "children": [
                                {
                                  "value": "check_file_format",
                                  "children": []
                                },
                                {
                                  "value": "(lines=incorrect_format)",
                                  "children": [
                                    {
                                      "value": "lines=incorrect_format",
                                      "children": [
                                        {
                                          "value": "lines",
                                          "children": []
                                        },
                                        {
                                          "value": "incorrect_format",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expected_err_msg = f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'",
                      "children": [
                        {
                          "value": "expected_err_msg = f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'",
                          "children": [
                            {
                              "value": "expected_err_msg",
                              "children": []
                            },
                            {
                              "value": "f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'",
                              "children": [
                                {
                                  "value": "f'",
                                  "children": []
                                },
                                {
                                  "value": "(L008) entry does not have all the required columns (have",
                                  "children": []
                                },
                                {
                                  "value": "{current_segments_num}",
                                  "children": [
                                    {
                                      "value": "current_segments_num",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": ", need",
                                  "children": []
                                },
                                {
                                  "value": "{num_segments}",
                                  "children": [
                                    {
                                      "value": "num_segments",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": ")",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 1)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 1)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 1)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msg = err_msgs[0]",
                      "children": [
                        {
                          "value": "err_msg = err_msgs[0]",
                          "children": [
                            {
                              "value": "err_msg",
                              "children": []
                            },
                            {
                              "value": "err_msgs[0]",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "err_msg",
                                  "children": []
                                },
                                {
                                  "value": "expected_err_msg",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def test_check_file_format_without_1_space_between_the_segments(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L007) each segment must start and end with exactly 1 space'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
              "children": [
                {
                  "value": "test_check_file_format_without_1_space_between_the_segments",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L007) each segment must start and end with exactly 1 space'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
                  "children": [
                    {
                      "value": "incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]",
                      "children": [
                        {
                          "value": "incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]",
                          "children": [
                            {
                              "value": "incorrect_format",
                              "children": []
                            },
                            {
                              "value": "[\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]",
                              "children": [
                                {
                                  "value": "'## Index'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "## Index",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'* [A](#a)'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "* [A](#a)",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "''",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'### A'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "### A",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'API | Description | Auth | HTTPS | CORS |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "API | Description | Auth | HTTPS | CORS |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'|---|---|---|---|---|'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "|---|---|---|---|---|",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "# space between segment of auth column missing",
                                  "children": []
                                },
                                {
                                  "value": "'| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "'| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'",
                                  "children": [
                                    {
                                      "value": "'",
                                      "children": []
                                    },
                                    {
                                      "value": "| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |",
                                      "children": []
                                    },
                                    {
                                      "value": "'",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msgs = check_file_format(lines=incorrect_format)",
                      "children": [
                        {
                          "value": "err_msgs = check_file_format(lines=incorrect_format)",
                          "children": [
                            {
                              "value": "err_msgs",
                              "children": []
                            },
                            {
                              "value": "check_file_format(lines=incorrect_format)",
                              "children": [
                                {
                                  "value": "check_file_format",
                                  "children": []
                                },
                                {
                                  "value": "(lines=incorrect_format)",
                                  "children": [
                                    {
                                      "value": "lines=incorrect_format",
                                      "children": [
                                        {
                                          "value": "lines",
                                          "children": []
                                        },
                                        {
                                          "value": "incorrect_format",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "expected_err_msg = f'(L007) each segment must start and end with exactly 1 space'",
                      "children": [
                        {
                          "value": "expected_err_msg = f'(L007) each segment must start and end with exactly 1 space'",
                          "children": [
                            {
                              "value": "expected_err_msg",
                              "children": []
                            },
                            {
                              "value": "f'(L007) each segment must start and end with exactly 1 space'",
                              "children": [
                                {
                                  "value": "f'",
                                  "children": []
                                },
                                {
                                  "value": "(L007) each segment must start and end with exactly 1 space",
                                  "children": []
                                },
                                {
                                  "value": "'",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertIsInstance(err_msgs, list)",
                      "children": [
                        {
                          "value": "self.assertIsInstance(err_msgs, list)",
                          "children": [
                            {
                              "value": "self.assertIsInstance",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertIsInstance",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msgs, list)",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(len(err_msgs), 1)",
                      "children": [
                        {
                          "value": "self.assertEqual(len(err_msgs), 1)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(len(err_msgs), 1)",
                              "children": [
                                {
                                  "value": "len(err_msgs)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(err_msgs)",
                                      "children": [
                                        {
                                          "value": "err_msgs",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "err_msg = err_msgs[0]",
                      "children": [
                        {
                          "value": "err_msg = err_msgs[0]",
                          "children": [
                            {
                              "value": "err_msg",
                              "children": []
                            },
                            {
                              "value": "err_msgs[0]",
                              "children": [
                                {
                                  "value": "err_msgs",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.assertEqual(err_msg, expected_err_msg)",
                      "children": [
                        {
                          "value": "self.assertEqual(err_msg, expected_err_msg)",
                          "children": [
                            {
                              "value": "self.assertEqual",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "assertEqual",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(err_msg, expected_err_msg)",
                              "children": [
                                {
                                  "value": "err_msg",
                                  "children": []
                                },
                                {
                                  "value": "expected_err_msg",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}