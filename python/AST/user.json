{
  "value": "import logging\nfrom typing import Optional, cast\n\nfrom autogpt_libs.auth.models import DEFAULT_USER_ID\nfrom fastapi import HTTPException\nfrom prisma import Json\nfrom prisma.models import User\n\nfrom backend.data.db import prisma\nfrom backend.data.model import UserIntegrations, UserMetadata, UserMetadataRaw\nfrom backend.util.encryption import JSONCryptor\n\nlogger = logging.getLogger(__name__)\n\n\nasync def get_or_create_user(user_data: dict) -> User:\n    user_id = user_data.get(\"sub\")\n    if not user_id:\n        raise HTTPException(status_code=401, detail=\"User ID not found in token\")\n\n    user_email = user_data.get(\"email\")\n    if not user_email:\n        raise HTTPException(status_code=401, detail=\"Email not found in token\")\n\n    user = await prisma.user.find_unique(where={\"id\": user_id})\n    if not user:\n        user = await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )\n    return User.model_validate(user)\n\n\nasync def get_user_by_id(user_id: str) -> Optional[User]:\n    user = await prisma.user.find_unique(where={\"id\": user_id})\n    return User.model_validate(user) if user else None\n\n\nasync def create_default_user() -> Optional[User]:\n    user = await prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})\n    if not user:\n        user = await prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )\n    return User.model_validate(user)\n\n\nasync def get_user_metadata(user_id: str) -> UserMetadata:\n    user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )\n\n    metadata = cast(UserMetadataRaw, user.metadata)\n    return UserMetadata.model_validate(metadata)\n\n\nasync def update_user_metadata(user_id: str, metadata: UserMetadata):\n    await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"metadata\": Json(metadata.model_dump())},\n    )\n\n\nasync def get_user_integrations(user_id: str) -> UserIntegrations:\n    user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )\n\n    encrypted_integrations = user.integrations\n    if not encrypted_integrations:\n        return UserIntegrations()\n    else:\n        return UserIntegrations.model_validate(\n            JSONCryptor().decrypt(encrypted_integrations)\n        )\n\n\nasync def update_user_integrations(user_id: str, data: UserIntegrations):\n    encrypted_data = JSONCryptor().encrypt(data.model_dump())\n    await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"integrations\": encrypted_data},\n    )\n\n\nasync def migrate_and_encrypt_user_integrations():\n    \"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\"\n    users = await User.prisma().find_many(\n        where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }\n    )\n    logger.info(f\"Migrating integration credentials for {len(users)} users\")\n\n    for user in users:\n        raw_metadata = cast(UserMetadataRaw, user.metadata)\n        metadata = UserMetadata.model_validate(raw_metadata)\n\n        # Get existing integrations data\n        integrations = await get_user_integrations(user_id=user.id)\n\n        # Copy credentials and oauth states from metadata if they exist\n        if metadata.integration_credentials and not integrations.credentials:\n            integrations.credentials = metadata.integration_credentials\n        if metadata.integration_oauth_states:\n            integrations.oauth_states = metadata.integration_oauth_states\n\n        # Save to integrations column\n        await update_user_integrations(user_id=user.id, data=integrations)\n\n        # Remove from metadata\n        raw_metadata = dict(raw_metadata)\n        raw_metadata.pop(\"integration_credentials\", None)\n        raw_metadata.pop(\"integration_oauth_states\", None)\n\n        # Update metadata without integration data\n        await User.prisma().update(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},\n        )",
  "children": [
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Optional, cast",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Optional",
          "children": [
            {
              "value": "Optional",
              "children": []
            }
          ]
        },
        {
          "value": "cast",
          "children": [
            {
              "value": "cast",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from autogpt_libs.auth.models import DEFAULT_USER_ID",
      "children": [
        {
          "value": "autogpt_libs.auth.models",
          "children": [
            {
              "value": "autogpt_libs",
              "children": []
            },
            {
              "value": "auth",
              "children": []
            },
            {
              "value": "models",
              "children": []
            }
          ]
        },
        {
          "value": "DEFAULT_USER_ID",
          "children": [
            {
              "value": "DEFAULT_USER_ID",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from fastapi import HTTPException",
      "children": [
        {
          "value": "fastapi",
          "children": [
            {
              "value": "fastapi",
              "children": []
            }
          ]
        },
        {
          "value": "HTTPException",
          "children": [
            {
              "value": "HTTPException",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from prisma import Json",
      "children": [
        {
          "value": "prisma",
          "children": [
            {
              "value": "prisma",
              "children": []
            }
          ]
        },
        {
          "value": "Json",
          "children": [
            {
              "value": "Json",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from prisma.models import User",
      "children": [
        {
          "value": "prisma.models",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "models",
              "children": []
            }
          ]
        },
        {
          "value": "User",
          "children": [
            {
              "value": "User",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.db import prisma",
      "children": [
        {
          "value": "backend.data.db",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "db",
              "children": []
            }
          ]
        },
        {
          "value": "prisma",
          "children": [
            {
              "value": "prisma",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import UserIntegrations, UserMetadata, UserMetadataRaw",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "UserIntegrations",
          "children": [
            {
              "value": "UserIntegrations",
              "children": []
            }
          ]
        },
        {
          "value": "UserMetadata",
          "children": [
            {
              "value": "UserMetadata",
              "children": []
            }
          ]
        },
        {
          "value": "UserMetadataRaw",
          "children": [
            {
              "value": "UserMetadataRaw",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.encryption import JSONCryptor",
      "children": [
        {
          "value": "backend.util.encryption",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "encryption",
              "children": []
            }
          ]
        },
        {
          "value": "JSONCryptor",
          "children": [
            {
              "value": "JSONCryptor",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_or_create_user(user_data: dict) -> User:\n    user_id = user_data.get(\"sub\")\n    if not user_id:\n        raise HTTPException(status_code=401, detail=\"User ID not found in token\")\n\n    user_email = user_data.get(\"email\")\n    if not user_email:\n        raise HTTPException(status_code=401, detail=\"Email not found in token\")\n\n    user = await prisma.user.find_unique(where={\"id\": user_id})\n    if not user:\n        user = await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )\n    return User.model_validate(user)",
      "children": [
        {
          "value": "get_or_create_user",
          "children": []
        },
        {
          "value": "(user_data: dict)",
          "children": [
            {
              "value": "user_data: dict",
              "children": [
                {
                  "value": "user_data",
                  "children": []
                },
                {
                  "value": "dict",
                  "children": [
                    {
                      "value": "dict",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "User",
          "children": [
            {
              "value": "User",
              "children": []
            }
          ]
        },
        {
          "value": "user_id = user_data.get(\"sub\")\n    if not user_id:\n        raise HTTPException(status_code=401, detail=\"User ID not found in token\")\n\n    user_email = user_data.get(\"email\")\n    if not user_email:\n        raise HTTPException(status_code=401, detail=\"Email not found in token\")\n\n    user = await prisma.user.find_unique(where={\"id\": user_id})\n    if not user:\n        user = await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )\n    return User.model_validate(user)",
          "children": [
            {
              "value": "user_id = user_data.get(\"sub\")",
              "children": [
                {
                  "value": "user_id = user_data.get(\"sub\")",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "user_data.get(\"sub\")",
                      "children": [
                        {
                          "value": "user_data.get",
                          "children": [
                            {
                              "value": "user_data",
                              "children": []
                            },
                            {
                              "value": "get",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\"sub\")",
                          "children": [
                            {
                              "value": "\"sub\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "sub",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not user_id:\n        raise HTTPException(status_code=401, detail=\"User ID not found in token\")",
              "children": [
                {
                  "value": "not user_id",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise HTTPException(status_code=401, detail=\"User ID not found in token\")",
                  "children": [
                    {
                      "value": "raise HTTPException(status_code=401, detail=\"User ID not found in token\")",
                      "children": [
                        {
                          "value": "HTTPException(status_code=401, detail=\"User ID not found in token\")",
                          "children": [
                            {
                              "value": "HTTPException",
                              "children": []
                            },
                            {
                              "value": "(status_code=401, detail=\"User ID not found in token\")",
                              "children": [
                                {
                                  "value": "status_code=401",
                                  "children": [
                                    {
                                      "value": "status_code",
                                      "children": []
                                    },
                                    {
                                      "value": "401",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "detail=\"User ID not found in token\"",
                                  "children": [
                                    {
                                      "value": "detail",
                                      "children": []
                                    },
                                    {
                                      "value": "\"User ID not found in token\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "User ID not found in token",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "user_email = user_data.get(\"email\")",
              "children": [
                {
                  "value": "user_email = user_data.get(\"email\")",
                  "children": [
                    {
                      "value": "user_email",
                      "children": []
                    },
                    {
                      "value": "user_data.get(\"email\")",
                      "children": [
                        {
                          "value": "user_data.get",
                          "children": [
                            {
                              "value": "user_data",
                              "children": []
                            },
                            {
                              "value": "get",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\"email\")",
                          "children": [
                            {
                              "value": "\"email\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "email",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not user_email:\n        raise HTTPException(status_code=401, detail=\"Email not found in token\")",
              "children": [
                {
                  "value": "not user_email",
                  "children": [
                    {
                      "value": "user_email",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise HTTPException(status_code=401, detail=\"Email not found in token\")",
                  "children": [
                    {
                      "value": "raise HTTPException(status_code=401, detail=\"Email not found in token\")",
                      "children": [
                        {
                          "value": "HTTPException(status_code=401, detail=\"Email not found in token\")",
                          "children": [
                            {
                              "value": "HTTPException",
                              "children": []
                            },
                            {
                              "value": "(status_code=401, detail=\"Email not found in token\")",
                              "children": [
                                {
                                  "value": "status_code=401",
                                  "children": [
                                    {
                                      "value": "status_code",
                                      "children": []
                                    },
                                    {
                                      "value": "401",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "detail=\"Email not found in token\"",
                                  "children": [
                                    {
                                      "value": "detail",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Email not found in token\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Email not found in token",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "user = await prisma.user.find_unique(where={\"id\": user_id})",
              "children": [
                {
                  "value": "user = await prisma.user.find_unique(where={\"id\": user_id})",
                  "children": [
                    {
                      "value": "user",
                      "children": []
                    },
                    {
                      "value": "await prisma.user.find_unique(where={\"id\": user_id})",
                      "children": [
                        {
                          "value": "prisma.user.find_unique(where={\"id\": user_id})",
                          "children": [
                            {
                              "value": "prisma.user.find_unique",
                              "children": [
                                {
                                  "value": "prisma.user",
                                  "children": [
                                    {
                                      "value": "prisma",
                                      "children": []
                                    },
                                    {
                                      "value": "user",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_unique",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(where={\"id\": user_id})",
                              "children": [
                                {
                                  "value": "where={\"id\": user_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"id\": user_id}",
                                      "children": [
                                        {
                                          "value": "\"id\": user_id",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not user:\n        user = await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )",
              "children": [
                {
                  "value": "not user",
                  "children": [
                    {
                      "value": "user",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "user = await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )",
                  "children": [
                    {
                      "value": "user = await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )",
                      "children": [
                        {
                          "value": "user = await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )",
                          "children": [
                            {
                              "value": "user",
                              "children": []
                            },
                            {
                              "value": "await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )",
                              "children": [
                                {
                                  "value": "prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.user.create",
                                      "children": [
                                        {
                                          "value": "prisma.user",
                                          "children": [
                                            {
                                              "value": "prisma",
                                              "children": []
                                            },
                                            {
                                              "value": "user",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "create",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )",
                                      "children": [
                                        {
                                          "value": "data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }",
                                          "children": [
                                            {
                                              "value": "data",
                                              "children": []
                                            },
                                            {
                                              "value": "{\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }",
                                              "children": [
                                                {
                                                  "value": "\"id\": user_id",
                                                  "children": [
                                                    {
                                                      "value": "\"id\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "user_id",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"email\": user_email",
                                                  "children": [
                                                    {
                                                      "value": "\"email\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "email",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "user_email",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"name\": user_data.get(\"user_metadata\", {}).get(\"name\")",
                                                  "children": [
                                                    {
                                                      "value": "\"name\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "name",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "user_data.get(\"user_metadata\", {}).get(\"name\")",
                                                      "children": [
                                                        {
                                                          "value": "user_data.get(\"user_metadata\", {}).get",
                                                          "children": [
                                                            {
                                                              "value": "user_data.get(\"user_metadata\", {})",
                                                              "children": [
                                                                {
                                                                  "value": "user_data.get",
                                                                  "children": [
                                                                    {
                                                                      "value": "user_data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "get",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "(\"user_metadata\", {})",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"user_metadata\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "user_metadata",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "{}",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "get",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(\"name\")",
                                                          "children": [
                                                            {
                                                              "value": "\"name\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "name",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return User.model_validate(user)",
              "children": [
                {
                  "value": "User.model_validate(user)",
                  "children": [
                    {
                      "value": "User.model_validate",
                      "children": [
                        {
                          "value": "User",
                          "children": []
                        },
                        {
                          "value": "model_validate",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(user)",
                      "children": [
                        {
                          "value": "user",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_user_by_id(user_id: str) -> Optional[User]:\n    user = await prisma.user.find_unique(where={\"id\": user_id})\n    return User.model_validate(user) if user else None",
      "children": [
        {
          "value": "get_user_by_id",
          "children": []
        },
        {
          "value": "(user_id: str)",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Optional[User]",
          "children": [
            {
              "value": "Optional[User]",
              "children": [
                {
                  "value": "Optional",
                  "children": []
                },
                {
                  "value": "[User]",
                  "children": [
                    {
                      "value": "User",
                      "children": [
                        {
                          "value": "User",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "user = await prisma.user.find_unique(where={\"id\": user_id})\n    return User.model_validate(user) if user else None",
          "children": [
            {
              "value": "user = await prisma.user.find_unique(where={\"id\": user_id})",
              "children": [
                {
                  "value": "user = await prisma.user.find_unique(where={\"id\": user_id})",
                  "children": [
                    {
                      "value": "user",
                      "children": []
                    },
                    {
                      "value": "await prisma.user.find_unique(where={\"id\": user_id})",
                      "children": [
                        {
                          "value": "prisma.user.find_unique(where={\"id\": user_id})",
                          "children": [
                            {
                              "value": "prisma.user.find_unique",
                              "children": [
                                {
                                  "value": "prisma.user",
                                  "children": [
                                    {
                                      "value": "prisma",
                                      "children": []
                                    },
                                    {
                                      "value": "user",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_unique",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(where={\"id\": user_id})",
                              "children": [
                                {
                                  "value": "where={\"id\": user_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"id\": user_id}",
                                      "children": [
                                        {
                                          "value": "\"id\": user_id",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return User.model_validate(user) if user else None",
              "children": [
                {
                  "value": "User.model_validate(user) if user else None",
                  "children": [
                    {
                      "value": "User.model_validate(user)",
                      "children": [
                        {
                          "value": "User.model_validate",
                          "children": [
                            {
                              "value": "User",
                              "children": []
                            },
                            {
                              "value": "model_validate",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(user)",
                          "children": [
                            {
                              "value": "user",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "user",
                      "children": []
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def create_default_user() -> Optional[User]:\n    user = await prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})\n    if not user:\n        user = await prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )\n    return User.model_validate(user)",
      "children": [
        {
          "value": "create_default_user",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "Optional[User]",
          "children": [
            {
              "value": "Optional[User]",
              "children": [
                {
                  "value": "Optional",
                  "children": []
                },
                {
                  "value": "[User]",
                  "children": [
                    {
                      "value": "User",
                      "children": [
                        {
                          "value": "User",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "user = await prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})\n    if not user:\n        user = await prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )\n    return User.model_validate(user)",
          "children": [
            {
              "value": "user = await prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})",
              "children": [
                {
                  "value": "user = await prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})",
                  "children": [
                    {
                      "value": "user",
                      "children": []
                    },
                    {
                      "value": "await prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})",
                      "children": [
                        {
                          "value": "prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})",
                          "children": [
                            {
                              "value": "prisma.user.find_unique",
                              "children": [
                                {
                                  "value": "prisma.user",
                                  "children": [
                                    {
                                      "value": "prisma",
                                      "children": []
                                    },
                                    {
                                      "value": "user",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_unique",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(where={\"id\": DEFAULT_USER_ID})",
                              "children": [
                                {
                                  "value": "where={\"id\": DEFAULT_USER_ID}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"id\": DEFAULT_USER_ID}",
                                      "children": [
                                        {
                                          "value": "\"id\": DEFAULT_USER_ID",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "DEFAULT_USER_ID",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not user:\n        user = await prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )",
              "children": [
                {
                  "value": "not user",
                  "children": [
                    {
                      "value": "user",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "user = await prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )",
                  "children": [
                    {
                      "value": "user = await prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )",
                      "children": [
                        {
                          "value": "user = await prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )",
                          "children": [
                            {
                              "value": "user",
                              "children": []
                            },
                            {
                              "value": "await prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )",
                              "children": [
                                {
                                  "value": "prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )",
                                  "children": [
                                    {
                                      "value": "prisma.user.create",
                                      "children": [
                                        {
                                          "value": "prisma.user",
                                          "children": [
                                            {
                                              "value": "prisma",
                                              "children": []
                                            },
                                            {
                                              "value": "user",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "create",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )",
                                      "children": [
                                        {
                                          "value": "data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }",
                                          "children": [
                                            {
                                              "value": "data",
                                              "children": []
                                            },
                                            {
                                              "value": "{\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }",
                                              "children": [
                                                {
                                                  "value": "\"id\": DEFAULT_USER_ID",
                                                  "children": [
                                                    {
                                                      "value": "\"id\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "DEFAULT_USER_ID",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"email\": \"default@example.com\"",
                                                  "children": [
                                                    {
                                                      "value": "\"email\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "email",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"default@example.com\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "default@example.com",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"name\": \"Default User\"",
                                                  "children": [
                                                    {
                                                      "value": "\"name\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "name",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"Default User\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Default User",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return User.model_validate(user)",
              "children": [
                {
                  "value": "User.model_validate(user)",
                  "children": [
                    {
                      "value": "User.model_validate",
                      "children": [
                        {
                          "value": "User",
                          "children": []
                        },
                        {
                          "value": "model_validate",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(user)",
                      "children": [
                        {
                          "value": "user",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_user_metadata(user_id: str) -> UserMetadata:\n    user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )\n\n    metadata = cast(UserMetadataRaw, user.metadata)\n    return UserMetadata.model_validate(metadata)",
      "children": [
        {
          "value": "get_user_metadata",
          "children": []
        },
        {
          "value": "(user_id: str)",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "UserMetadata",
          "children": [
            {
              "value": "UserMetadata",
              "children": []
            }
          ]
        },
        {
          "value": "user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )\n\n    metadata = cast(UserMetadataRaw, user.metadata)\n    return UserMetadata.model_validate(metadata)",
          "children": [
            {
              "value": "user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )",
              "children": [
                {
                  "value": "user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )",
                  "children": [
                    {
                      "value": "user",
                      "children": []
                    },
                    {
                      "value": "await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )",
                      "children": [
                        {
                          "value": "User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )",
                          "children": [
                            {
                              "value": "User.prisma().find_unique_or_raise",
                              "children": [
                                {
                                  "value": "User.prisma()",
                                  "children": [
                                    {
                                      "value": "User.prisma",
                                      "children": [
                                        {
                                          "value": "User",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_unique_or_raise",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\"id\": user_id},\n    )",
                              "children": [
                                {
                                  "value": "where={\"id\": user_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"id\": user_id}",
                                      "children": [
                                        {
                                          "value": "\"id\": user_id",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "metadata = cast(UserMetadataRaw, user.metadata)",
              "children": [
                {
                  "value": "metadata = cast(UserMetadataRaw, user.metadata)",
                  "children": [
                    {
                      "value": "metadata",
                      "children": []
                    },
                    {
                      "value": "cast(UserMetadataRaw, user.metadata)",
                      "children": [
                        {
                          "value": "cast",
                          "children": []
                        },
                        {
                          "value": "(UserMetadataRaw, user.metadata)",
                          "children": [
                            {
                              "value": "UserMetadataRaw",
                              "children": []
                            },
                            {
                              "value": "user.metadata",
                              "children": [
                                {
                                  "value": "user",
                                  "children": []
                                },
                                {
                                  "value": "metadata",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return UserMetadata.model_validate(metadata)",
              "children": [
                {
                  "value": "UserMetadata.model_validate(metadata)",
                  "children": [
                    {
                      "value": "UserMetadata.model_validate",
                      "children": [
                        {
                          "value": "UserMetadata",
                          "children": []
                        },
                        {
                          "value": "model_validate",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(metadata)",
                      "children": [
                        {
                          "value": "metadata",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def update_user_metadata(user_id: str, metadata: UserMetadata):\n    await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"metadata\": Json(metadata.model_dump())},\n    )",
      "children": [
        {
          "value": "update_user_metadata",
          "children": []
        },
        {
          "value": "(user_id: str, metadata: UserMetadata)",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "metadata: UserMetadata",
              "children": [
                {
                  "value": "metadata",
                  "children": []
                },
                {
                  "value": "UserMetadata",
                  "children": [
                    {
                      "value": "UserMetadata",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"metadata\": Json(metadata.model_dump())},\n    )",
          "children": [
            {
              "value": "await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"metadata\": Json(metadata.model_dump())},\n    )",
              "children": [
                {
                  "value": "await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"metadata\": Json(metadata.model_dump())},\n    )",
                  "children": [
                    {
                      "value": "User.prisma().update(\n        where={\"id\": user_id},\n        data={\"metadata\": Json(metadata.model_dump())},\n    )",
                      "children": [
                        {
                          "value": "User.prisma().update",
                          "children": [
                            {
                              "value": "User.prisma()",
                              "children": [
                                {
                                  "value": "User.prisma",
                                  "children": [
                                    {
                                      "value": "User",
                                      "children": []
                                    },
                                    {
                                      "value": "prisma",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "update",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\n        where={\"id\": user_id},\n        data={\"metadata\": Json(metadata.model_dump())},\n    )",
                          "children": [
                            {
                              "value": "where={\"id\": user_id}",
                              "children": [
                                {
                                  "value": "where",
                                  "children": []
                                },
                                {
                                  "value": "{\"id\": user_id}",
                                  "children": [
                                    {
                                      "value": "\"id\": user_id",
                                      "children": [
                                        {
                                          "value": "\"id\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "data={\"metadata\": Json(metadata.model_dump())}",
                              "children": [
                                {
                                  "value": "data",
                                  "children": []
                                },
                                {
                                  "value": "{\"metadata\": Json(metadata.model_dump())}",
                                  "children": [
                                    {
                                      "value": "\"metadata\": Json(metadata.model_dump())",
                                      "children": [
                                        {
                                          "value": "\"metadata\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "metadata",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "Json(metadata.model_dump())",
                                          "children": [
                                            {
                                              "value": "Json",
                                              "children": []
                                            },
                                            {
                                              "value": "(metadata.model_dump())",
                                              "children": [
                                                {
                                                  "value": "metadata.model_dump()",
                                                  "children": [
                                                    {
                                                      "value": "metadata.model_dump",
                                                      "children": [
                                                        {
                                                          "value": "metadata",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "model_dump",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_user_integrations(user_id: str) -> UserIntegrations:\n    user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )\n\n    encrypted_integrations = user.integrations\n    if not encrypted_integrations:\n        return UserIntegrations()\n    else:\n        return UserIntegrations.model_validate(\n            JSONCryptor().decrypt(encrypted_integrations)\n        )",
      "children": [
        {
          "value": "get_user_integrations",
          "children": []
        },
        {
          "value": "(user_id: str)",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "UserIntegrations",
          "children": [
            {
              "value": "UserIntegrations",
              "children": []
            }
          ]
        },
        {
          "value": "user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )\n\n    encrypted_integrations = user.integrations\n    if not encrypted_integrations:\n        return UserIntegrations()\n    else:\n        return UserIntegrations.model_validate(\n            JSONCryptor().decrypt(encrypted_integrations)\n        )",
          "children": [
            {
              "value": "user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )",
              "children": [
                {
                  "value": "user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )",
                  "children": [
                    {
                      "value": "user",
                      "children": []
                    },
                    {
                      "value": "await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )",
                      "children": [
                        {
                          "value": "User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )",
                          "children": [
                            {
                              "value": "User.prisma().find_unique_or_raise",
                              "children": [
                                {
                                  "value": "User.prisma()",
                                  "children": [
                                    {
                                      "value": "User.prisma",
                                      "children": [
                                        {
                                          "value": "User",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_unique_or_raise",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\"id\": user_id},\n    )",
                              "children": [
                                {
                                  "value": "where={\"id\": user_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"id\": user_id}",
                                      "children": [
                                        {
                                          "value": "\"id\": user_id",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "encrypted_integrations = user.integrations",
              "children": [
                {
                  "value": "encrypted_integrations = user.integrations",
                  "children": [
                    {
                      "value": "encrypted_integrations",
                      "children": []
                    },
                    {
                      "value": "user.integrations",
                      "children": [
                        {
                          "value": "user",
                          "children": []
                        },
                        {
                          "value": "integrations",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not encrypted_integrations:\n        return UserIntegrations()\n    else:\n        return UserIntegrations.model_validate(\n            JSONCryptor().decrypt(encrypted_integrations)\n        )",
              "children": [
                {
                  "value": "not encrypted_integrations",
                  "children": [
                    {
                      "value": "encrypted_integrations",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return UserIntegrations()",
                  "children": [
                    {
                      "value": "return UserIntegrations()",
                      "children": [
                        {
                          "value": "UserIntegrations()",
                          "children": [
                            {
                              "value": "UserIntegrations",
                              "children": []
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        return UserIntegrations.model_validate(\n            JSONCryptor().decrypt(encrypted_integrations)\n        )",
                  "children": [
                    {
                      "value": "return UserIntegrations.model_validate(\n            JSONCryptor().decrypt(encrypted_integrations)\n        )",
                      "children": [
                        {
                          "value": "return UserIntegrations.model_validate(\n            JSONCryptor().decrypt(encrypted_integrations)\n        )",
                          "children": [
                            {
                              "value": "UserIntegrations.model_validate(\n            JSONCryptor().decrypt(encrypted_integrations)\n        )",
                              "children": [
                                {
                                  "value": "UserIntegrations.model_validate",
                                  "children": [
                                    {
                                      "value": "UserIntegrations",
                                      "children": []
                                    },
                                    {
                                      "value": "model_validate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            JSONCryptor().decrypt(encrypted_integrations)\n        )",
                                  "children": [
                                    {
                                      "value": "JSONCryptor().decrypt(encrypted_integrations)",
                                      "children": [
                                        {
                                          "value": "JSONCryptor().decrypt",
                                          "children": [
                                            {
                                              "value": "JSONCryptor()",
                                              "children": [
                                                {
                                                  "value": "JSONCryptor",
                                                  "children": []
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "decrypt",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(encrypted_integrations)",
                                          "children": [
                                            {
                                              "value": "encrypted_integrations",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def update_user_integrations(user_id: str, data: UserIntegrations):\n    encrypted_data = JSONCryptor().encrypt(data.model_dump())\n    await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"integrations\": encrypted_data},\n    )",
      "children": [
        {
          "value": "update_user_integrations",
          "children": []
        },
        {
          "value": "(user_id: str, data: UserIntegrations)",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "data: UserIntegrations",
              "children": [
                {
                  "value": "data",
                  "children": []
                },
                {
                  "value": "UserIntegrations",
                  "children": [
                    {
                      "value": "UserIntegrations",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "encrypted_data = JSONCryptor().encrypt(data.model_dump())\n    await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"integrations\": encrypted_data},\n    )",
          "children": [
            {
              "value": "encrypted_data = JSONCryptor().encrypt(data.model_dump())",
              "children": [
                {
                  "value": "encrypted_data = JSONCryptor().encrypt(data.model_dump())",
                  "children": [
                    {
                      "value": "encrypted_data",
                      "children": []
                    },
                    {
                      "value": "JSONCryptor().encrypt(data.model_dump())",
                      "children": [
                        {
                          "value": "JSONCryptor().encrypt",
                          "children": [
                            {
                              "value": "JSONCryptor()",
                              "children": [
                                {
                                  "value": "JSONCryptor",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "encrypt",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(data.model_dump())",
                          "children": [
                            {
                              "value": "data.model_dump()",
                              "children": [
                                {
                                  "value": "data.model_dump",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "model_dump",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"integrations\": encrypted_data},\n    )",
              "children": [
                {
                  "value": "await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"integrations\": encrypted_data},\n    )",
                  "children": [
                    {
                      "value": "User.prisma().update(\n        where={\"id\": user_id},\n        data={\"integrations\": encrypted_data},\n    )",
                      "children": [
                        {
                          "value": "User.prisma().update",
                          "children": [
                            {
                              "value": "User.prisma()",
                              "children": [
                                {
                                  "value": "User.prisma",
                                  "children": [
                                    {
                                      "value": "User",
                                      "children": []
                                    },
                                    {
                                      "value": "prisma",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "update",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\n        where={\"id\": user_id},\n        data={\"integrations\": encrypted_data},\n    )",
                          "children": [
                            {
                              "value": "where={\"id\": user_id}",
                              "children": [
                                {
                                  "value": "where",
                                  "children": []
                                },
                                {
                                  "value": "{\"id\": user_id}",
                                  "children": [
                                    {
                                      "value": "\"id\": user_id",
                                      "children": [
                                        {
                                          "value": "\"id\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "data={\"integrations\": encrypted_data}",
                              "children": [
                                {
                                  "value": "data",
                                  "children": []
                                },
                                {
                                  "value": "{\"integrations\": encrypted_data}",
                                  "children": [
                                    {
                                      "value": "\"integrations\": encrypted_data",
                                      "children": [
                                        {
                                          "value": "\"integrations\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "integrations",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "encrypted_data",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def migrate_and_encrypt_user_integrations():\n    \"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\"\n    users = await User.prisma().find_many(\n        where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }\n    )\n    logger.info(f\"Migrating integration credentials for {len(users)} users\")\n\n    for user in users:\n        raw_metadata = cast(UserMetadataRaw, user.metadata)\n        metadata = UserMetadata.model_validate(raw_metadata)\n\n        # Get existing integrations data\n        integrations = await get_user_integrations(user_id=user.id)\n\n        # Copy credentials and oauth states from metadata if they exist\n        if metadata.integration_credentials and not integrations.credentials:\n            integrations.credentials = metadata.integration_credentials\n        if metadata.integration_oauth_states:\n            integrations.oauth_states = metadata.integration_oauth_states\n\n        # Save to integrations column\n        await update_user_integrations(user_id=user.id, data=integrations)\n\n        # Remove from metadata\n        raw_metadata = dict(raw_metadata)\n        raw_metadata.pop(\"integration_credentials\", None)\n        raw_metadata.pop(\"integration_oauth_states\", None)\n\n        # Update metadata without integration data\n        await User.prisma().update(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},\n        )",
      "children": [
        {
          "value": "migrate_and_encrypt_user_integrations",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "\"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\"\n    users = await User.prisma().find_many(\n        where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }\n    )\n    logger.info(f\"Migrating integration credentials for {len(users)} users\")\n\n    for user in users:\n        raw_metadata = cast(UserMetadataRaw, user.metadata)\n        metadata = UserMetadata.model_validate(raw_metadata)\n\n        # Get existing integrations data\n        integrations = await get_user_integrations(user_id=user.id)\n\n        # Copy credentials and oauth states from metadata if they exist\n        if metadata.integration_credentials and not integrations.credentials:\n            integrations.credentials = metadata.integration_credentials\n        if metadata.integration_oauth_states:\n            integrations.oauth_states = metadata.integration_oauth_states\n\n        # Save to integrations column\n        await update_user_integrations(user_id=user.id, data=integrations)\n\n        # Remove from metadata\n        raw_metadata = dict(raw_metadata)\n        raw_metadata.pop(\"integration_credentials\", None)\n        raw_metadata.pop(\"integration_oauth_states\", None)\n\n        # Update metadata without integration data\n        await User.prisma().update(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},\n        )",
          "children": [
            {
              "value": "\"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\"",
              "children": [
                {
                  "value": "\"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Migrate integration credentials and OAuth states from metadata to integrations column.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "users = await User.prisma().find_many(\n        where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }\n    )",
              "children": [
                {
                  "value": "users = await User.prisma().find_many(\n        where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }\n    )",
                  "children": [
                    {
                      "value": "users",
                      "children": []
                    },
                    {
                      "value": "await User.prisma().find_many(\n        where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }\n    )",
                      "children": [
                        {
                          "value": "User.prisma().find_many(\n        where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }\n    )",
                          "children": [
                            {
                              "value": "User.prisma().find_many",
                              "children": [
                                {
                                  "value": "User.prisma()",
                                  "children": [
                                    {
                                      "value": "User.prisma",
                                      "children": [
                                        {
                                          "value": "User",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_many",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }\n    )",
                              "children": [
                                {
                                  "value": "where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }",
                                      "children": [
                                        {
                                          "value": "\"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }",
                                          "children": [
                                            {
                                              "value": "\"metadata\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "metadata",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }",
                                              "children": [
                                                {
                                                  "value": "\"path\": [\"integration_credentials\"]",
                                                  "children": [
                                                    {
                                                      "value": "\"path\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "path",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "[\"integration_credentials\"]",
                                                      "children": [
                                                        {
                                                          "value": "\"integration_credentials\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "integration_credentials",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"not\": Json({\"a\": \"yolo\"})",
                                                  "children": [
                                                    {
                                                      "value": "\"not\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "not",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "Json({\"a\": \"yolo\"})",
                                                      "children": [
                                                        {
                                                          "value": "Json",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "({\"a\": \"yolo\"})",
                                                          "children": [
                                                            {
                                                              "value": "{\"a\": \"yolo\"}",
                                                              "children": [
                                                                {
                                                                  "value": "\"a\": \"yolo\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"a\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "a",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "\"yolo\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "yolo",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "# bogus value works to check if key exists",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "# type: ignore",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "logger.info(f\"Migrating integration credentials for {len(users)} users\")",
              "children": [
                {
                  "value": "logger.info(f\"Migrating integration credentials for {len(users)} users\")",
                  "children": [
                    {
                      "value": "logger.info",
                      "children": [
                        {
                          "value": "logger",
                          "children": []
                        },
                        {
                          "value": "info",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(f\"Migrating integration credentials for {len(users)} users\")",
                      "children": [
                        {
                          "value": "f\"Migrating integration credentials for {len(users)} users\"",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "Migrating integration credentials for",
                              "children": []
                            },
                            {
                              "value": "{len(users)}",
                              "children": [
                                {
                                  "value": "len(users)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(users)",
                                      "children": [
                                        {
                                          "value": "users",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "users",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for user in users:\n        raw_metadata = cast(UserMetadataRaw, user.metadata)\n        metadata = UserMetadata.model_validate(raw_metadata)\n\n        # Get existing integrations data\n        integrations = await get_user_integrations(user_id=user.id)\n\n        # Copy credentials and oauth states from metadata if they exist\n        if metadata.integration_credentials and not integrations.credentials:\n            integrations.credentials = metadata.integration_credentials\n        if metadata.integration_oauth_states:\n            integrations.oauth_states = metadata.integration_oauth_states\n\n        # Save to integrations column\n        await update_user_integrations(user_id=user.id, data=integrations)\n\n        # Remove from metadata\n        raw_metadata = dict(raw_metadata)\n        raw_metadata.pop(\"integration_credentials\", None)\n        raw_metadata.pop(\"integration_oauth_states\", None)\n\n        # Update metadata without integration data\n        await User.prisma().update(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},\n        )",
              "children": [
                {
                  "value": "user",
                  "children": []
                },
                {
                  "value": "users",
                  "children": []
                },
                {
                  "value": "raw_metadata = cast(UserMetadataRaw, user.metadata)\n        metadata = UserMetadata.model_validate(raw_metadata)\n\n        # Get existing integrations data\n        integrations = await get_user_integrations(user_id=user.id)\n\n        # Copy credentials and oauth states from metadata if they exist\n        if metadata.integration_credentials and not integrations.credentials:\n            integrations.credentials = metadata.integration_credentials\n        if metadata.integration_oauth_states:\n            integrations.oauth_states = metadata.integration_oauth_states\n\n        # Save to integrations column\n        await update_user_integrations(user_id=user.id, data=integrations)\n\n        # Remove from metadata\n        raw_metadata = dict(raw_metadata)\n        raw_metadata.pop(\"integration_credentials\", None)\n        raw_metadata.pop(\"integration_oauth_states\", None)\n\n        # Update metadata without integration data\n        await User.prisma().update(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},\n        )",
                  "children": [
                    {
                      "value": "raw_metadata = cast(UserMetadataRaw, user.metadata)",
                      "children": [
                        {
                          "value": "raw_metadata = cast(UserMetadataRaw, user.metadata)",
                          "children": [
                            {
                              "value": "raw_metadata",
                              "children": []
                            },
                            {
                              "value": "cast(UserMetadataRaw, user.metadata)",
                              "children": [
                                {
                                  "value": "cast",
                                  "children": []
                                },
                                {
                                  "value": "(UserMetadataRaw, user.metadata)",
                                  "children": [
                                    {
                                      "value": "UserMetadataRaw",
                                      "children": []
                                    },
                                    {
                                      "value": "user.metadata",
                                      "children": [
                                        {
                                          "value": "user",
                                          "children": []
                                        },
                                        {
                                          "value": "metadata",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "metadata = UserMetadata.model_validate(raw_metadata)",
                      "children": [
                        {
                          "value": "metadata = UserMetadata.model_validate(raw_metadata)",
                          "children": [
                            {
                              "value": "metadata",
                              "children": []
                            },
                            {
                              "value": "UserMetadata.model_validate(raw_metadata)",
                              "children": [
                                {
                                  "value": "UserMetadata.model_validate",
                                  "children": [
                                    {
                                      "value": "UserMetadata",
                                      "children": []
                                    },
                                    {
                                      "value": "model_validate",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(raw_metadata)",
                                  "children": [
                                    {
                                      "value": "raw_metadata",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Get existing integrations data",
                      "children": []
                    },
                    {
                      "value": "integrations = await get_user_integrations(user_id=user.id)",
                      "children": [
                        {
                          "value": "integrations = await get_user_integrations(user_id=user.id)",
                          "children": [
                            {
                              "value": "integrations",
                              "children": []
                            },
                            {
                              "value": "await get_user_integrations(user_id=user.id)",
                              "children": [
                                {
                                  "value": "get_user_integrations(user_id=user.id)",
                                  "children": [
                                    {
                                      "value": "get_user_integrations",
                                      "children": []
                                    },
                                    {
                                      "value": "(user_id=user.id)",
                                      "children": [
                                        {
                                          "value": "user_id=user.id",
                                          "children": [
                                            {
                                              "value": "user_id",
                                              "children": []
                                            },
                                            {
                                              "value": "user.id",
                                              "children": [
                                                {
                                                  "value": "user",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Copy credentials and oauth states from metadata if they exist",
                      "children": []
                    },
                    {
                      "value": "if metadata.integration_credentials and not integrations.credentials:\n            integrations.credentials = metadata.integration_credentials",
                      "children": [
                        {
                          "value": "metadata.integration_credentials and not integrations.credentials",
                          "children": [
                            {
                              "value": "metadata.integration_credentials",
                              "children": [
                                {
                                  "value": "metadata",
                                  "children": []
                                },
                                {
                                  "value": "integration_credentials",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "not integrations.credentials",
                              "children": [
                                {
                                  "value": "integrations.credentials",
                                  "children": [
                                    {
                                      "value": "integrations",
                                      "children": []
                                    },
                                    {
                                      "value": "credentials",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "integrations.credentials = metadata.integration_credentials",
                          "children": [
                            {
                              "value": "integrations.credentials = metadata.integration_credentials",
                              "children": [
                                {
                                  "value": "integrations.credentials = metadata.integration_credentials",
                                  "children": [
                                    {
                                      "value": "integrations.credentials",
                                      "children": [
                                        {
                                          "value": "integrations",
                                          "children": []
                                        },
                                        {
                                          "value": "credentials",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "metadata.integration_credentials",
                                      "children": [
                                        {
                                          "value": "metadata",
                                          "children": []
                                        },
                                        {
                                          "value": "integration_credentials",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if metadata.integration_oauth_states:\n            integrations.oauth_states = metadata.integration_oauth_states",
                      "children": [
                        {
                          "value": "metadata.integration_oauth_states",
                          "children": [
                            {
                              "value": "metadata",
                              "children": []
                            },
                            {
                              "value": "integration_oauth_states",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "integrations.oauth_states = metadata.integration_oauth_states",
                          "children": [
                            {
                              "value": "integrations.oauth_states = metadata.integration_oauth_states",
                              "children": [
                                {
                                  "value": "integrations.oauth_states = metadata.integration_oauth_states",
                                  "children": [
                                    {
                                      "value": "integrations.oauth_states",
                                      "children": [
                                        {
                                          "value": "integrations",
                                          "children": []
                                        },
                                        {
                                          "value": "oauth_states",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "metadata.integration_oauth_states",
                                      "children": [
                                        {
                                          "value": "metadata",
                                          "children": []
                                        },
                                        {
                                          "value": "integration_oauth_states",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Save to integrations column",
                      "children": []
                    },
                    {
                      "value": "await update_user_integrations(user_id=user.id, data=integrations)",
                      "children": [
                        {
                          "value": "await update_user_integrations(user_id=user.id, data=integrations)",
                          "children": [
                            {
                              "value": "update_user_integrations(user_id=user.id, data=integrations)",
                              "children": [
                                {
                                  "value": "update_user_integrations",
                                  "children": []
                                },
                                {
                                  "value": "(user_id=user.id, data=integrations)",
                                  "children": [
                                    {
                                      "value": "user_id=user.id",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "user.id",
                                          "children": [
                                            {
                                              "value": "user",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "data=integrations",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "integrations",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Remove from metadata",
                      "children": []
                    },
                    {
                      "value": "raw_metadata = dict(raw_metadata)",
                      "children": [
                        {
                          "value": "raw_metadata = dict(raw_metadata)",
                          "children": [
                            {
                              "value": "raw_metadata",
                              "children": []
                            },
                            {
                              "value": "dict(raw_metadata)",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                },
                                {
                                  "value": "(raw_metadata)",
                                  "children": [
                                    {
                                      "value": "raw_metadata",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raw_metadata.pop(\"integration_credentials\", None)",
                      "children": [
                        {
                          "value": "raw_metadata.pop(\"integration_credentials\", None)",
                          "children": [
                            {
                              "value": "raw_metadata.pop",
                              "children": [
                                {
                                  "value": "raw_metadata",
                                  "children": []
                                },
                                {
                                  "value": "pop",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"integration_credentials\", None)",
                              "children": [
                                {
                                  "value": "\"integration_credentials\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "integration_credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raw_metadata.pop(\"integration_oauth_states\", None)",
                      "children": [
                        {
                          "value": "raw_metadata.pop(\"integration_oauth_states\", None)",
                          "children": [
                            {
                              "value": "raw_metadata.pop",
                              "children": [
                                {
                                  "value": "raw_metadata",
                                  "children": []
                                },
                                {
                                  "value": "pop",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"integration_oauth_states\", None)",
                              "children": [
                                {
                                  "value": "\"integration_oauth_states\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "integration_oauth_states",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Update metadata without integration data",
                      "children": []
                    },
                    {
                      "value": "await User.prisma().update(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},\n        )",
                      "children": [
                        {
                          "value": "await User.prisma().update(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},\n        )",
                          "children": [
                            {
                              "value": "User.prisma().update(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},\n        )",
                              "children": [
                                {
                                  "value": "User.prisma().update",
                                  "children": [
                                    {
                                      "value": "User.prisma()",
                                      "children": [
                                        {
                                          "value": "User.prisma",
                                          "children": [
                                            {
                                              "value": "User",
                                              "children": []
                                            },
                                            {
                                              "value": "prisma",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "update",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},\n        )",
                                  "children": [
                                    {
                                      "value": "where={\"id\": user.id}",
                                      "children": [
                                        {
                                          "value": "where",
                                          "children": []
                                        },
                                        {
                                          "value": "{\"id\": user.id}",
                                          "children": [
                                            {
                                              "value": "\"id\": user.id",
                                              "children": [
                                                {
                                                  "value": "\"id\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "id",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "user.id",
                                                  "children": [
                                                    {
                                                      "value": "user",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "data={\"metadata\": Json(raw_metadata)}",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "{\"metadata\": Json(raw_metadata)}",
                                          "children": [
                                            {
                                              "value": "\"metadata\": Json(raw_metadata)",
                                              "children": [
                                                {
                                                  "value": "\"metadata\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "metadata",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "Json(raw_metadata)",
                                                  "children": [
                                                    {
                                                      "value": "Json",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(raw_metadata)",
                                                      "children": [
                                                        {
                                                          "value": "raw_metadata",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}