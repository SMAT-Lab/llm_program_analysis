{
  "value": "\"\"\"\nMinimax helps to achieve maximum score in a game by checking all possible moves\ndepth is current depth in game tree.\n\nnodeIndex is index of current node in scores[].\nif move is of maximizer return true else false\nleaves of game tree is stored in scores[]\nheight is maximum height of Game tree\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\n\n\ndef minimax(\n    depth: int, node_index: int, is_max: bool, scores: list[int], height: float\n) -> int:\n    \"\"\"\n    This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12\n    \"\"\"\n\n    if depth < 0:\n        raise ValueError(\"Depth cannot be less than 0\")\n    if len(scores) == 0:\n        raise ValueError(\"Scores cannot be empty\")\n\n    # Base case: If the current depth equals the height of the tree,\n    # return the score of the current node.\n    if depth == height:\n        return scores[node_index]\n\n    # If it's the maximizer's turn, choose the maximum score\n    # between the two possible moves.\n    if is_max:\n        return max(\n            minimax(depth + 1, node_index * 2, False, scores, height),\n            minimax(depth + 1, node_index * 2 + 1, False, scores, height),\n        )\n\n    # If it's the minimizer's turn, choose the minimum score\n    # between the two possible moves.\n    return min(\n        minimax(depth + 1, node_index * 2, True, scores, height),\n        minimax(depth + 1, node_index * 2 + 1, True, scores, height),\n    )\n\n\ndef main() -> None:\n    # Sample scores and height calculation\n    scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    height = math.log(len(scores), 2)\n\n    # Calculate and print the optimal value using the minimax algorithm\n    print(\"Optimal value : \", end=\"\")\n    print(minimax(0, 0, True, scores, height))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()",
  "children": [
    {
      "value": "\"\"\"\nMinimax helps to achieve maximum score in a game by checking all possible moves\ndepth is current depth in game tree.\n\nnodeIndex is index of current node in scores[].\nif move is of maximizer return true else false\nleaves of game tree is stored in scores[]\nheight is maximum height of Game tree\n\"\"\"",
      "children": [
        {
          "value": "\"\"\"\nMinimax helps to achieve maximum score in a game by checking all possible moves\ndepth is current depth in game tree.\n\nnodeIndex is index of current node in scores[].\nif move is of maximizer return true else false\nleaves of game tree is stored in scores[]\nheight is maximum height of Game tree\n\"\"\"",
          "children": [
            {
              "value": "\"\"\"",
              "children": []
            },
            {
              "value": "Minimax helps to achieve maximum score in a game by checking all possible moves\ndepth is current depth in game tree.\n\nnodeIndex is index of current node in scores[].\nif move is of maximizer return true else false\nleaves of game tree is stored in scores[]\nheight is maximum height of Game tree",
              "children": []
            },
            {
              "value": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from __future__ import annotations",
      "children": [
        {
          "value": "annotations",
          "children": [
            {
              "value": "annotations",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import math",
      "children": [
        {
          "value": "math",
          "children": [
            {
              "value": "math",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def minimax(\n    depth: int, node_index: int, is_max: bool, scores: list[int], height: float\n) -> int:\n    \"\"\"\n    This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12\n    \"\"\"\n\n    if depth < 0:\n        raise ValueError(\"Depth cannot be less than 0\")\n    if len(scores) == 0:\n        raise ValueError(\"Scores cannot be empty\")\n\n    # Base case: If the current depth equals the height of the tree,\n    # return the score of the current node.\n    if depth == height:\n        return scores[node_index]\n\n    # If it's the maximizer's turn, choose the maximum score\n    # between the two possible moves.\n    if is_max:\n        return max(\n            minimax(depth + 1, node_index * 2, False, scores, height),\n            minimax(depth + 1, node_index * 2 + 1, False, scores, height),\n        )\n\n    # If it's the minimizer's turn, choose the minimum score\n    # between the two possible moves.\n    return min(\n        minimax(depth + 1, node_index * 2, True, scores, height),\n        minimax(depth + 1, node_index * 2 + 1, True, scores, height),\n    )",
      "children": [
        {
          "value": "minimax",
          "children": []
        },
        {
          "value": "(\n    depth: int, node_index: int, is_max: bool, scores: list[int], height: float\n)",
          "children": [
            {
              "value": "depth: int",
              "children": [
                {
                  "value": "depth",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "node_index: int",
              "children": [
                {
                  "value": "node_index",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "is_max: bool",
              "children": [
                {
                  "value": "is_max",
                  "children": []
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "scores: list[int]",
              "children": [
                {
                  "value": "scores",
                  "children": []
                },
                {
                  "value": "list[int]",
                  "children": [
                    {
                      "value": "list[int]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[int]",
                          "children": [
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "height: float",
              "children": [
                {
                  "value": "height",
                  "children": []
                },
                {
                  "value": "float",
                  "children": [
                    {
                      "value": "float",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "int",
          "children": [
            {
              "value": "int",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12\n    \"\"\"\n\n    if depth < 0:\n        raise ValueError(\"Depth cannot be less than 0\")\n    if len(scores) == 0:\n        raise ValueError(\"Scores cannot be empty\")\n\n    # Base case: If the current depth equals the height of the tree,\n    # return the score of the current node.\n    if depth == height:\n        return scores[node_index]\n\n    # If it's the maximizer's turn, choose the maximum score\n    # between the two possible moves.\n    if is_max:\n        return max(\n            minimax(depth + 1, node_index * 2, False, scores, height),\n            minimax(depth + 1, node_index * 2 + 1, False, scores, height),\n        )\n\n    # If it's the minimizer's turn, choose the minimum score\n    # between the two possible moves.\n    return min(\n        minimax(depth + 1, node_index * 2, True, scores, height),\n        minimax(depth + 1, node_index * 2 + 1, True, scores, height),\n    )",
          "children": [
            {
              "value": "\"\"\"\n    This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if depth < 0:\n        raise ValueError(\"Depth cannot be less than 0\")",
              "children": [
                {
                  "value": "depth < 0",
                  "children": [
                    {
                      "value": "depth",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"Depth cannot be less than 0\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"Depth cannot be less than 0\")",
                      "children": [
                        {
                          "value": "ValueError(\"Depth cannot be less than 0\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"Depth cannot be less than 0\")",
                              "children": [
                                {
                                  "value": "\"Depth cannot be less than 0\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Depth cannot be less than 0",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if len(scores) == 0:\n        raise ValueError(\"Scores cannot be empty\")",
              "children": [
                {
                  "value": "len(scores) == 0",
                  "children": [
                    {
                      "value": "len(scores)",
                      "children": [
                        {
                          "value": "len",
                          "children": []
                        },
                        {
                          "value": "(scores)",
                          "children": [
                            {
                              "value": "scores",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"Scores cannot be empty\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"Scores cannot be empty\")",
                      "children": [
                        {
                          "value": "ValueError(\"Scores cannot be empty\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"Scores cannot be empty\")",
                              "children": [
                                {
                                  "value": "\"Scores cannot be empty\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Scores cannot be empty",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Base case: If the current depth equals the height of the tree,",
              "children": []
            },
            {
              "value": "# return the score of the current node.",
              "children": []
            },
            {
              "value": "if depth == height:\n        return scores[node_index]",
              "children": [
                {
                  "value": "depth == height",
                  "children": [
                    {
                      "value": "depth",
                      "children": []
                    },
                    {
                      "value": "height",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return scores[node_index]",
                  "children": [
                    {
                      "value": "return scores[node_index]",
                      "children": [
                        {
                          "value": "scores[node_index]",
                          "children": [
                            {
                              "value": "scores",
                              "children": []
                            },
                            {
                              "value": "node_index",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# If it's the maximizer's turn, choose the maximum score",
              "children": []
            },
            {
              "value": "# between the two possible moves.",
              "children": []
            },
            {
              "value": "if is_max:\n        return max(\n            minimax(depth + 1, node_index * 2, False, scores, height),\n            minimax(depth + 1, node_index * 2 + 1, False, scores, height),\n        )",
              "children": [
                {
                  "value": "is_max",
                  "children": []
                },
                {
                  "value": "return max(\n            minimax(depth + 1, node_index * 2, False, scores, height),\n            minimax(depth + 1, node_index * 2 + 1, False, scores, height),\n        )",
                  "children": [
                    {
                      "value": "return max(\n            minimax(depth + 1, node_index * 2, False, scores, height),\n            minimax(depth + 1, node_index * 2 + 1, False, scores, height),\n        )",
                      "children": [
                        {
                          "value": "max(\n            minimax(depth + 1, node_index * 2, False, scores, height),\n            minimax(depth + 1, node_index * 2 + 1, False, scores, height),\n        )",
                          "children": [
                            {
                              "value": "max",
                              "children": []
                            },
                            {
                              "value": "(\n            minimax(depth + 1, node_index * 2, False, scores, height),\n            minimax(depth + 1, node_index * 2 + 1, False, scores, height),\n        )",
                              "children": [
                                {
                                  "value": "minimax(depth + 1, node_index * 2, False, scores, height)",
                                  "children": [
                                    {
                                      "value": "minimax",
                                      "children": []
                                    },
                                    {
                                      "value": "(depth + 1, node_index * 2, False, scores, height)",
                                      "children": [
                                        {
                                          "value": "depth + 1",
                                          "children": [
                                            {
                                              "value": "depth",
                                              "children": []
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "node_index * 2",
                                          "children": [
                                            {
                                              "value": "node_index",
                                              "children": []
                                            },
                                            {
                                              "value": "2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "False",
                                          "children": []
                                        },
                                        {
                                          "value": "scores",
                                          "children": []
                                        },
                                        {
                                          "value": "height",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "minimax(depth + 1, node_index * 2 + 1, False, scores, height)",
                                  "children": [
                                    {
                                      "value": "minimax",
                                      "children": []
                                    },
                                    {
                                      "value": "(depth + 1, node_index * 2 + 1, False, scores, height)",
                                      "children": [
                                        {
                                          "value": "depth + 1",
                                          "children": [
                                            {
                                              "value": "depth",
                                              "children": []
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "node_index * 2 + 1",
                                          "children": [
                                            {
                                              "value": "node_index * 2",
                                              "children": [
                                                {
                                                  "value": "node_index",
                                                  "children": []
                                                },
                                                {
                                                  "value": "2",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "False",
                                          "children": []
                                        },
                                        {
                                          "value": "scores",
                                          "children": []
                                        },
                                        {
                                          "value": "height",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# If it's the minimizer's turn, choose the minimum score",
              "children": []
            },
            {
              "value": "# between the two possible moves.",
              "children": []
            },
            {
              "value": "return min(\n        minimax(depth + 1, node_index * 2, True, scores, height),\n        minimax(depth + 1, node_index * 2 + 1, True, scores, height),\n    )",
              "children": [
                {
                  "value": "min(\n        minimax(depth + 1, node_index * 2, True, scores, height),\n        minimax(depth + 1, node_index * 2 + 1, True, scores, height),\n    )",
                  "children": [
                    {
                      "value": "min",
                      "children": []
                    },
                    {
                      "value": "(\n        minimax(depth + 1, node_index * 2, True, scores, height),\n        minimax(depth + 1, node_index * 2 + 1, True, scores, height),\n    )",
                      "children": [
                        {
                          "value": "minimax(depth + 1, node_index * 2, True, scores, height)",
                          "children": [
                            {
                              "value": "minimax",
                              "children": []
                            },
                            {
                              "value": "(depth + 1, node_index * 2, True, scores, height)",
                              "children": [
                                {
                                  "value": "depth + 1",
                                  "children": [
                                    {
                                      "value": "depth",
                                      "children": []
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "node_index * 2",
                                  "children": [
                                    {
                                      "value": "node_index",
                                      "children": []
                                    },
                                    {
                                      "value": "2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "True",
                                  "children": []
                                },
                                {
                                  "value": "scores",
                                  "children": []
                                },
                                {
                                  "value": "height",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "minimax(depth + 1, node_index * 2 + 1, True, scores, height)",
                          "children": [
                            {
                              "value": "minimax",
                              "children": []
                            },
                            {
                              "value": "(depth + 1, node_index * 2 + 1, True, scores, height)",
                              "children": [
                                {
                                  "value": "depth + 1",
                                  "children": [
                                    {
                                      "value": "depth",
                                      "children": []
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "node_index * 2 + 1",
                                  "children": [
                                    {
                                      "value": "node_index * 2",
                                      "children": [
                                        {
                                          "value": "node_index",
                                          "children": []
                                        },
                                        {
                                          "value": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "True",
                                  "children": []
                                },
                                {
                                  "value": "scores",
                                  "children": []
                                },
                                {
                                  "value": "height",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def main() -> None:\n    # Sample scores and height calculation\n    scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    height = math.log(len(scores), 2)\n\n    # Calculate and print the optimal value using the minimax algorithm\n    print(\"Optimal value : \", end=\"\")\n    print(minimax(0, 0, True, scores, height))",
      "children": [
        {
          "value": "main",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "# Sample scores and height calculation",
          "children": []
        },
        {
          "value": "scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    height = math.log(len(scores), 2)\n\n    # Calculate and print the optimal value using the minimax algorithm\n    print(\"Optimal value : \", end=\"\")\n    print(minimax(0, 0, True, scores, height))",
          "children": [
            {
              "value": "scores = [90, 23, 6, 33, 21, 65, 123, 34423]",
              "children": [
                {
                  "value": "scores = [90, 23, 6, 33, 21, 65, 123, 34423]",
                  "children": [
                    {
                      "value": "scores",
                      "children": []
                    },
                    {
                      "value": "[90, 23, 6, 33, 21, 65, 123, 34423]",
                      "children": [
                        {
                          "value": "90",
                          "children": []
                        },
                        {
                          "value": "23",
                          "children": []
                        },
                        {
                          "value": "6",
                          "children": []
                        },
                        {
                          "value": "33",
                          "children": []
                        },
                        {
                          "value": "21",
                          "children": []
                        },
                        {
                          "value": "65",
                          "children": []
                        },
                        {
                          "value": "123",
                          "children": []
                        },
                        {
                          "value": "34423",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "height = math.log(len(scores), 2)",
              "children": [
                {
                  "value": "height = math.log(len(scores), 2)",
                  "children": [
                    {
                      "value": "height",
                      "children": []
                    },
                    {
                      "value": "math.log(len(scores), 2)",
                      "children": [
                        {
                          "value": "math.log",
                          "children": [
                            {
                              "value": "math",
                              "children": []
                            },
                            {
                              "value": "log",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(len(scores), 2)",
                          "children": [
                            {
                              "value": "len(scores)",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(scores)",
                                  "children": [
                                    {
                                      "value": "scores",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "2",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Calculate and print the optimal value using the minimax algorithm",
              "children": []
            },
            {
              "value": "print(\"Optimal value : \", end=\"\")",
              "children": [
                {
                  "value": "print(\"Optimal value : \", end=\"\")",
                  "children": [
                    {
                      "value": "print",
                      "children": []
                    },
                    {
                      "value": "(\"Optimal value : \", end=\"\")",
                      "children": [
                        {
                          "value": "\"Optimal value : \"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Optimal value :",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "end=\"\"",
                          "children": [
                            {
                              "value": "end",
                              "children": []
                            },
                            {
                              "value": "\"\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "print(minimax(0, 0, True, scores, height))",
              "children": [
                {
                  "value": "print(minimax(0, 0, True, scores, height))",
                  "children": [
                    {
                      "value": "print",
                      "children": []
                    },
                    {
                      "value": "(minimax(0, 0, True, scores, height))",
                      "children": [
                        {
                          "value": "minimax(0, 0, True, scores, height)",
                          "children": [
                            {
                              "value": "minimax",
                              "children": []
                            },
                            {
                              "value": "(0, 0, True, scores, height)",
                              "children": [
                                {
                                  "value": "0",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                },
                                {
                                  "value": "True",
                                  "children": []
                                },
                                {
                                  "value": "scores",
                                  "children": []
                                },
                                {
                                  "value": "height",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()",
      "children": [
        {
          "value": "__name__ == \"__main__\"",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "\"__main__\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "import doctest\n\n    doctest.testmod()\n    main()",
          "children": [
            {
              "value": "import doctest",
              "children": [
                {
                  "value": "doctest",
                  "children": [
                    {
                      "value": "doctest",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "doctest.testmod()",
              "children": [
                {
                  "value": "doctest.testmod()",
                  "children": [
                    {
                      "value": "doctest.testmod",
                      "children": [
                        {
                          "value": "doctest",
                          "children": []
                        },
                        {
                          "value": "testmod",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "main()",
              "children": [
                {
                  "value": "main()",
                  "children": [
                    {
                      "value": "main",
                      "children": []
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}