{
  "value": "\"\"\"\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\nWe need to find all the combinations whose sum equals to target given.\nWe can use an element more than one.\n\nTime complexity(Average Case): O(n!)\n\nConstraints:\n1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 40\n\"\"\"\n\n\ndef backtrack(\n    candidates: list, path: list, answer: list, target: int, previous_index: int\n) -> None:\n    \"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"\n    if target == 0:\n        answer.append(path.copy())\n    else:\n        for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)\n\n\ndef combination_sum(candidates: list, target: int) -> list:\n    \"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"\n    path = []  # type: list[int]\n    answer = []  # type: list[int]\n    backtrack(candidates, path, answer, target, 0)\n    return answer\n\n\ndef main() -> None:\n    print(combination_sum([-8, 2.3, 0], 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()",
  "children": [
    {
      "value": "\"\"\"\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\nWe need to find all the combinations whose sum equals to target given.\nWe can use an element more than one.\n\nTime complexity(Average Case): O(n!)\n\nConstraints:\n1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 40\n\"\"\"",
      "children": [
        {
          "value": "\"\"\"\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\nWe need to find all the combinations whose sum equals to target given.\nWe can use an element more than one.\n\nTime complexity(Average Case): O(n!)\n\nConstraints:\n1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 40\n\"\"\"",
          "children": [
            {
              "value": "\"\"\"",
              "children": []
            },
            {
              "value": "In the Combination Sum problem, we are given a list consisting of distinct integers.\nWe need to find all the combinations whose sum equals to target given.\nWe can use an element more than one.\n\nTime complexity(Average Case): O(n!)\n\nConstraints:\n1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 40",
              "children": []
            },
            {
              "value": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def backtrack(\n    candidates: list, path: list, answer: list, target: int, previous_index: int\n) -> None:\n    \"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"\n    if target == 0:\n        answer.append(path.copy())\n    else:\n        for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
      "children": [
        {
          "value": "backtrack",
          "children": []
        },
        {
          "value": "(\n    candidates: list, path: list, answer: list, target: int, previous_index: int\n)",
          "children": [
            {
              "value": "candidates: list",
              "children": [
                {
                  "value": "candidates",
                  "children": []
                },
                {
                  "value": "list",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "path: list",
              "children": [
                {
                  "value": "path",
                  "children": []
                },
                {
                  "value": "list",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "answer: list",
              "children": [
                {
                  "value": "answer",
                  "children": []
                },
                {
                  "value": "list",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "target: int",
              "children": [
                {
                  "value": "target",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "previous_index: int",
              "children": [
                {
                  "value": "previous_index",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"\n    if target == 0:\n        answer.append(path.copy())\n    else:\n        for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
          "children": [
            {
              "value": "\"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if target == 0:\n        answer.append(path.copy())\n    else:\n        for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
              "children": [
                {
                  "value": "target == 0",
                  "children": [
                    {
                      "value": "target",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "answer.append(path.copy())",
                  "children": [
                    {
                      "value": "answer.append(path.copy())",
                      "children": [
                        {
                          "value": "answer.append(path.copy())",
                          "children": [
                            {
                              "value": "answer.append",
                              "children": [
                                {
                                  "value": "answer",
                                  "children": []
                                },
                                {
                                  "value": "append",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(path.copy())",
                              "children": [
                                {
                                  "value": "path.copy()",
                                  "children": [
                                    {
                                      "value": "path.copy",
                                      "children": [
                                        {
                                          "value": "path",
                                          "children": []
                                        },
                                        {
                                          "value": "copy",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
                  "children": [
                    {
                      "value": "for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
                      "children": [
                        {
                          "value": "for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
                          "children": [
                            {
                              "value": "index",
                              "children": []
                            },
                            {
                              "value": "range(previous_index, len(candidates))",
                              "children": [
                                {
                                  "value": "range",
                                  "children": []
                                },
                                {
                                  "value": "(previous_index, len(candidates))",
                                  "children": [
                                    {
                                      "value": "previous_index",
                                      "children": []
                                    },
                                    {
                                      "value": "len(candidates)",
                                      "children": [
                                        {
                                          "value": "len",
                                          "children": []
                                        },
                                        {
                                          "value": "(candidates)",
                                          "children": [
                                            {
                                              "value": "candidates",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
                              "children": [
                                {
                                  "value": "if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
                                  "children": [
                                    {
                                      "value": "target >= candidates[index]",
                                      "children": [
                                        {
                                          "value": "target",
                                          "children": []
                                        },
                                        {
                                          "value": "candidates[index]",
                                          "children": [
                                            {
                                              "value": "candidates",
                                              "children": []
                                            },
                                            {
                                              "value": "index",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
                                      "children": [
                                        {
                                          "value": "path.append(candidates[index])",
                                          "children": [
                                            {
                                              "value": "path.append(candidates[index])",
                                              "children": [
                                                {
                                                  "value": "path.append",
                                                  "children": [
                                                    {
                                                      "value": "path",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "append",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(candidates[index])",
                                                  "children": [
                                                    {
                                                      "value": "candidates[index]",
                                                      "children": [
                                                        {
                                                          "value": "candidates",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "index",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "backtrack(candidates, path, answer, target - candidates[index], index)",
                                          "children": [
                                            {
                                              "value": "backtrack(candidates, path, answer, target - candidates[index], index)",
                                              "children": [
                                                {
                                                  "value": "backtrack",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(candidates, path, answer, target - candidates[index], index)",
                                                  "children": [
                                                    {
                                                      "value": "candidates",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "path",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "answer",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "target - candidates[index]",
                                                      "children": [
                                                        {
                                                          "value": "target",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "candidates[index]",
                                                          "children": [
                                                            {
                                                              "value": "candidates",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "index",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "index",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "path.pop(len(path) - 1)",
                                          "children": [
                                            {
                                              "value": "path.pop(len(path) - 1)",
                                              "children": [
                                                {
                                                  "value": "path.pop",
                                                  "children": [
                                                    {
                                                      "value": "path",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "pop",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(len(path) - 1)",
                                                  "children": [
                                                    {
                                                      "value": "len(path) - 1",
                                                      "children": [
                                                        {
                                                          "value": "len(path)",
                                                          "children": [
                                                            {
                                                              "value": "len",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(path)",
                                                              "children": [
                                                                {
                                                                  "value": "path",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def combination_sum(candidates: list, target: int) -> list:\n    \"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"\n    path = []  # type: list[int]\n    answer = []  # type: list[int]\n    backtrack(candidates, path, answer, target, 0)\n    return answer",
      "children": [
        {
          "value": "combination_sum",
          "children": []
        },
        {
          "value": "(candidates: list, target: int)",
          "children": [
            {
              "value": "candidates: list",
              "children": [
                {
                  "value": "candidates",
                  "children": []
                },
                {
                  "value": "list",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "target: int",
              "children": [
                {
                  "value": "target",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "list",
          "children": [
            {
              "value": "list",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"\n    path = []  # type: list[int]\n    answer = []  # type: list[int]\n    backtrack(candidates, path, answer, target, 0)\n    return answer",
          "children": [
            {
              "value": "\"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": ">>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "path = []",
              "children": [
                {
                  "value": "path = []",
                  "children": [
                    {
                      "value": "path",
                      "children": []
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# type: list[int]",
              "children": []
            },
            {
              "value": "answer = []",
              "children": [
                {
                  "value": "answer = []",
                  "children": [
                    {
                      "value": "answer",
                      "children": []
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# type: list[int]",
              "children": []
            },
            {
              "value": "backtrack(candidates, path, answer, target, 0)",
              "children": [
                {
                  "value": "backtrack(candidates, path, answer, target, 0)",
                  "children": [
                    {
                      "value": "backtrack",
                      "children": []
                    },
                    {
                      "value": "(candidates, path, answer, target, 0)",
                      "children": [
                        {
                          "value": "candidates",
                          "children": []
                        },
                        {
                          "value": "path",
                          "children": []
                        },
                        {
                          "value": "answer",
                          "children": []
                        },
                        {
                          "value": "target",
                          "children": []
                        },
                        {
                          "value": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return answer",
              "children": [
                {
                  "value": "answer",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def main() -> None:\n    print(combination_sum([-8, 2.3, 0], 1))",
      "children": [
        {
          "value": "main",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "print(combination_sum([-8, 2.3, 0], 1))",
          "children": [
            {
              "value": "print(combination_sum([-8, 2.3, 0], 1))",
              "children": [
                {
                  "value": "print(combination_sum([-8, 2.3, 0], 1))",
                  "children": [
                    {
                      "value": "print",
                      "children": []
                    },
                    {
                      "value": "(combination_sum([-8, 2.3, 0], 1))",
                      "children": [
                        {
                          "value": "combination_sum([-8, 2.3, 0], 1)",
                          "children": [
                            {
                              "value": "combination_sum",
                              "children": []
                            },
                            {
                              "value": "([-8, 2.3, 0], 1)",
                              "children": [
                                {
                                  "value": "[-8, 2.3, 0]",
                                  "children": [
                                    {
                                      "value": "-8",
                                      "children": [
                                        {
                                          "value": "8",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "2.3",
                                      "children": []
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()",
      "children": [
        {
          "value": "__name__ == \"__main__\"",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "\"__main__\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "import doctest\n\n    doctest.testmod()\n    main()",
          "children": [
            {
              "value": "import doctest",
              "children": [
                {
                  "value": "doctest",
                  "children": [
                    {
                      "value": "doctest",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "doctest.testmod()",
              "children": [
                {
                  "value": "doctest.testmod()",
                  "children": [
                    {
                      "value": "doctest.testmod",
                      "children": [
                        {
                          "value": "doctest",
                          "children": []
                        },
                        {
                          "value": "testmod",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "main()",
              "children": [
                {
                  "value": "main()",
                  "children": [
                    {
                      "value": "main",
                      "children": []
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}