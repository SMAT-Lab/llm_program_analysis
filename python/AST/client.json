{
  "value": "import asyncio\nimport contextlib\nimport logging\nfrom functools import wraps\nfrom typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast\n\nimport ldclient\nfrom fastapi import HTTPException\nfrom ldclient import Context, LDClient\nfrom ldclient.config import Config\nfrom typing_extensions import ParamSpec\n\nfrom .config import SETTINGS\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.DEBUG)\n\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n\n\ndef get_client() -> LDClient:\n    \"\"\"Get the LaunchDarkly client singleton.\"\"\"\n    return ldclient.get()\n\n\ndef initialize_launchdarkly() -> None:\n    sdk_key = SETTINGS.launch_darkly_sdk_key\n    logger.debug(\n        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )\n\n    if not sdk_key:\n        logger.warning(\"LaunchDarkly SDK key not configured\")\n        return\n\n    config = Config(sdk_key)\n    ldclient.set_config(config)\n\n    if ldclient.get().is_initialized():\n        logger.info(\"LaunchDarkly client initialized successfully\")\n    else:\n        logger.error(\"LaunchDarkly client failed to initialize\")\n\n\ndef shutdown_launchdarkly() -> None:\n    \"\"\"Shutdown the LaunchDarkly client.\"\"\"\n    if ldclient.get().is_initialized():\n        ldclient.get().close()\n        logger.info(\"LaunchDarkly client closed successfully\")\n\n\ndef create_context(\n    user_id: str, additional_attributes: Optional[Dict[str, Any]] = None\n) -> Context:\n    \"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\n    builder = Context.builder(str(user_id)).kind(\"user\")\n    if additional_attributes:\n        for key, value in additional_attributes.items():\n            builder.set(key, value)\n    return builder.build()\n\n\ndef feature_flag(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"\n\n    def decorator(\n        func: Callable[P, Union[T, Awaitable[T]]],\n    ) -> Callable[P, Union[T, Awaitable[T]]]:\n        @wraps(func)\n        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n\n        @wraps(func)\n        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n\n        return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )\n\n    return decorator\n\n\ndef percentage_rollout(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"Decorator for percentage-based rollouts.\"\"\"\n    return feature_flag(flag_key, default)\n\n\ndef beta_feature(\n    flag_key: Optional[str] = None,\n    unauthorized_response: Any = {\"message\": \"Not available in beta\"},\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"Decorator for beta features.\"\"\"\n    actual_key = f\"beta-{flag_key}\" if flag_key else \"beta\"\n    return feature_flag(actual_key, False)\n\n\n@contextlib.contextmanager\ndef mock_flag_variation(flag_key: str, return_value: Any):\n    \"\"\"Context manager for testing feature flags.\"\"\"\n    original_variation = get_client().variation\n    get_client().variation = lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )\n    try:\n        yield\n    finally:\n        get_client().variation = original_variation",
  "children": [
    {
      "value": "import asyncio",
      "children": [
        {
          "value": "asyncio",
          "children": [
            {
              "value": "asyncio",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import contextlib",
      "children": [
        {
          "value": "contextlib",
          "children": [
            {
              "value": "contextlib",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from functools import wraps",
      "children": [
        {
          "value": "functools",
          "children": [
            {
              "value": "functools",
              "children": []
            }
          ]
        },
        {
          "value": "wraps",
          "children": [
            {
              "value": "wraps",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "Awaitable",
          "children": [
            {
              "value": "Awaitable",
              "children": []
            }
          ]
        },
        {
          "value": "Callable",
          "children": [
            {
              "value": "Callable",
              "children": []
            }
          ]
        },
        {
          "value": "Dict",
          "children": [
            {
              "value": "Dict",
              "children": []
            }
          ]
        },
        {
          "value": "Optional",
          "children": [
            {
              "value": "Optional",
              "children": []
            }
          ]
        },
        {
          "value": "TypeVar",
          "children": [
            {
              "value": "TypeVar",
              "children": []
            }
          ]
        },
        {
          "value": "Union",
          "children": [
            {
              "value": "Union",
              "children": []
            }
          ]
        },
        {
          "value": "cast",
          "children": [
            {
              "value": "cast",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import ldclient",
      "children": [
        {
          "value": "ldclient",
          "children": [
            {
              "value": "ldclient",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from fastapi import HTTPException",
      "children": [
        {
          "value": "fastapi",
          "children": [
            {
              "value": "fastapi",
              "children": []
            }
          ]
        },
        {
          "value": "HTTPException",
          "children": [
            {
              "value": "HTTPException",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from ldclient import Context, LDClient",
      "children": [
        {
          "value": "ldclient",
          "children": [
            {
              "value": "ldclient",
              "children": []
            }
          ]
        },
        {
          "value": "Context",
          "children": [
            {
              "value": "Context",
              "children": []
            }
          ]
        },
        {
          "value": "LDClient",
          "children": [
            {
              "value": "LDClient",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from ldclient.config import Config",
      "children": [
        {
          "value": "ldclient.config",
          "children": [
            {
              "value": "ldclient",
              "children": []
            },
            {
              "value": "config",
              "children": []
            }
          ]
        },
        {
          "value": "Config",
          "children": [
            {
              "value": "Config",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing_extensions import ParamSpec",
      "children": [
        {
          "value": "typing_extensions",
          "children": [
            {
              "value": "typing_extensions",
              "children": []
            }
          ]
        },
        {
          "value": "ParamSpec",
          "children": [
            {
              "value": "ParamSpec",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from .config import SETTINGS",
      "children": [
        {
          "value": ".config",
          "children": [
            {
              "value": ".",
              "children": []
            },
            {
              "value": "config",
              "children": [
                {
                  "value": "config",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "SETTINGS",
          "children": [
            {
              "value": "SETTINGS",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "logging.basicConfig(level=logging.DEBUG)",
      "children": [
        {
          "value": "logging.basicConfig(level=logging.DEBUG)",
          "children": [
            {
              "value": "logging.basicConfig",
              "children": [
                {
                  "value": "logging",
                  "children": []
                },
                {
                  "value": "basicConfig",
                  "children": []
                }
              ]
            },
            {
              "value": "(level=logging.DEBUG)",
              "children": [
                {
                  "value": "level=logging.DEBUG",
                  "children": [
                    {
                      "value": "level",
                      "children": []
                    },
                    {
                      "value": "logging.DEBUG",
                      "children": [
                        {
                          "value": "logging",
                          "children": []
                        },
                        {
                          "value": "DEBUG",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "P = ParamSpec(\"P\")",
      "children": [
        {
          "value": "P = ParamSpec(\"P\")",
          "children": [
            {
              "value": "P",
              "children": []
            },
            {
              "value": "ParamSpec(\"P\")",
              "children": [
                {
                  "value": "ParamSpec",
                  "children": []
                },
                {
                  "value": "(\"P\")",
                  "children": [
                    {
                      "value": "\"P\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "P",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "T = TypeVar(\"T\")",
      "children": [
        {
          "value": "T = TypeVar(\"T\")",
          "children": [
            {
              "value": "T",
              "children": []
            },
            {
              "value": "TypeVar(\"T\")",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"T\")",
                  "children": [
                    {
                      "value": "\"T\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "T",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def get_client() -> LDClient:\n    \"\"\"Get the LaunchDarkly client singleton.\"\"\"\n    return ldclient.get()",
      "children": [
        {
          "value": "get_client",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "LDClient",
          "children": [
            {
              "value": "LDClient",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"Get the LaunchDarkly client singleton.\"\"\"\n    return ldclient.get()",
          "children": [
            {
              "value": "\"\"\"Get the LaunchDarkly client singleton.\"\"\"",
              "children": [
                {
                  "value": "\"\"\"Get the LaunchDarkly client singleton.\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Get the LaunchDarkly client singleton.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "return ldclient.get()",
              "children": [
                {
                  "value": "ldclient.get()",
                  "children": [
                    {
                      "value": "ldclient.get",
                      "children": [
                        {
                          "value": "ldclient",
                          "children": []
                        },
                        {
                          "value": "get",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def initialize_launchdarkly() -> None:\n    sdk_key = SETTINGS.launch_darkly_sdk_key\n    logger.debug(\n        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )\n\n    if not sdk_key:\n        logger.warning(\"LaunchDarkly SDK key not configured\")\n        return\n\n    config = Config(sdk_key)\n    ldclient.set_config(config)\n\n    if ldclient.get().is_initialized():\n        logger.info(\"LaunchDarkly client initialized successfully\")\n    else:\n        logger.error(\"LaunchDarkly client failed to initialize\")",
      "children": [
        {
          "value": "initialize_launchdarkly",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "sdk_key = SETTINGS.launch_darkly_sdk_key\n    logger.debug(\n        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )\n\n    if not sdk_key:\n        logger.warning(\"LaunchDarkly SDK key not configured\")\n        return\n\n    config = Config(sdk_key)\n    ldclient.set_config(config)\n\n    if ldclient.get().is_initialized():\n        logger.info(\"LaunchDarkly client initialized successfully\")\n    else:\n        logger.error(\"LaunchDarkly client failed to initialize\")",
          "children": [
            {
              "value": "sdk_key = SETTINGS.launch_darkly_sdk_key",
              "children": [
                {
                  "value": "sdk_key = SETTINGS.launch_darkly_sdk_key",
                  "children": [
                    {
                      "value": "sdk_key",
                      "children": []
                    },
                    {
                      "value": "SETTINGS.launch_darkly_sdk_key",
                      "children": [
                        {
                          "value": "SETTINGS",
                          "children": []
                        },
                        {
                          "value": "launch_darkly_sdk_key",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "logger.debug(\n        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )",
              "children": [
                {
                  "value": "logger.debug(\n        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )",
                  "children": [
                    {
                      "value": "logger.debug",
                      "children": [
                        {
                          "value": "logger",
                          "children": []
                        },
                        {
                          "value": "debug",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\n        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )",
                      "children": [
                        {
                          "value": "f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "Initializing LaunchDarkly with SDK key:",
                              "children": []
                            },
                            {
                              "value": "{'present' if sdk_key else 'missing'}",
                              "children": [
                                {
                                  "value": "'present' if sdk_key else 'missing'",
                                  "children": [
                                    {
                                      "value": "'present'",
                                      "children": [
                                        {
                                          "value": "'",
                                          "children": []
                                        },
                                        {
                                          "value": "present",
                                          "children": []
                                        },
                                        {
                                          "value": "'",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "sdk_key",
                                      "children": []
                                    },
                                    {
                                      "value": "'missing'",
                                      "children": [
                                        {
                                          "value": "'",
                                          "children": []
                                        },
                                        {
                                          "value": "missing",
                                          "children": []
                                        },
                                        {
                                          "value": "'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not sdk_key:\n        logger.warning(\"LaunchDarkly SDK key not configured\")\n        return",
              "children": [
                {
                  "value": "not sdk_key",
                  "children": [
                    {
                      "value": "sdk_key",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "logger.warning(\"LaunchDarkly SDK key not configured\")\n        return",
                  "children": [
                    {
                      "value": "logger.warning(\"LaunchDarkly SDK key not configured\")",
                      "children": [
                        {
                          "value": "logger.warning(\"LaunchDarkly SDK key not configured\")",
                          "children": [
                            {
                              "value": "logger.warning",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "warning",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"LaunchDarkly SDK key not configured\")",
                              "children": [
                                {
                                  "value": "\"LaunchDarkly SDK key not configured\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "LaunchDarkly SDK key not configured",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "config = Config(sdk_key)",
              "children": [
                {
                  "value": "config = Config(sdk_key)",
                  "children": [
                    {
                      "value": "config",
                      "children": []
                    },
                    {
                      "value": "Config(sdk_key)",
                      "children": [
                        {
                          "value": "Config",
                          "children": []
                        },
                        {
                          "value": "(sdk_key)",
                          "children": [
                            {
                              "value": "sdk_key",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ldclient.set_config(config)",
              "children": [
                {
                  "value": "ldclient.set_config(config)",
                  "children": [
                    {
                      "value": "ldclient.set_config",
                      "children": [
                        {
                          "value": "ldclient",
                          "children": []
                        },
                        {
                          "value": "set_config",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(config)",
                      "children": [
                        {
                          "value": "config",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if ldclient.get().is_initialized():\n        logger.info(\"LaunchDarkly client initialized successfully\")\n    else:\n        logger.error(\"LaunchDarkly client failed to initialize\")",
              "children": [
                {
                  "value": "ldclient.get().is_initialized()",
                  "children": [
                    {
                      "value": "ldclient.get().is_initialized",
                      "children": [
                        {
                          "value": "ldclient.get()",
                          "children": [
                            {
                              "value": "ldclient.get",
                              "children": [
                                {
                                  "value": "ldclient",
                                  "children": []
                                },
                                {
                                  "value": "get",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "is_initialized",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "logger.info(\"LaunchDarkly client initialized successfully\")",
                  "children": [
                    {
                      "value": "logger.info(\"LaunchDarkly client initialized successfully\")",
                      "children": [
                        {
                          "value": "logger.info(\"LaunchDarkly client initialized successfully\")",
                          "children": [
                            {
                              "value": "logger.info",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "info",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"LaunchDarkly client initialized successfully\")",
                              "children": [
                                {
                                  "value": "\"LaunchDarkly client initialized successfully\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "LaunchDarkly client initialized successfully",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        logger.error(\"LaunchDarkly client failed to initialize\")",
                  "children": [
                    {
                      "value": "logger.error(\"LaunchDarkly client failed to initialize\")",
                      "children": [
                        {
                          "value": "logger.error(\"LaunchDarkly client failed to initialize\")",
                          "children": [
                            {
                              "value": "logger.error(\"LaunchDarkly client failed to initialize\")",
                              "children": [
                                {
                                  "value": "logger.error",
                                  "children": [
                                    {
                                      "value": "logger",
                                      "children": []
                                    },
                                    {
                                      "value": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\"LaunchDarkly client failed to initialize\")",
                                  "children": [
                                    {
                                      "value": "\"LaunchDarkly client failed to initialize\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "LaunchDarkly client failed to initialize",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def shutdown_launchdarkly() -> None:\n    \"\"\"Shutdown the LaunchDarkly client.\"\"\"\n    if ldclient.get().is_initialized():\n        ldclient.get().close()\n        logger.info(\"LaunchDarkly client closed successfully\")",
      "children": [
        {
          "value": "shutdown_launchdarkly",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"Shutdown the LaunchDarkly client.\"\"\"\n    if ldclient.get().is_initialized():\n        ldclient.get().close()\n        logger.info(\"LaunchDarkly client closed successfully\")",
          "children": [
            {
              "value": "\"\"\"Shutdown the LaunchDarkly client.\"\"\"",
              "children": [
                {
                  "value": "\"\"\"Shutdown the LaunchDarkly client.\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Shutdown the LaunchDarkly client.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if ldclient.get().is_initialized():\n        ldclient.get().close()\n        logger.info(\"LaunchDarkly client closed successfully\")",
              "children": [
                {
                  "value": "ldclient.get().is_initialized()",
                  "children": [
                    {
                      "value": "ldclient.get().is_initialized",
                      "children": [
                        {
                          "value": "ldclient.get()",
                          "children": [
                            {
                              "value": "ldclient.get",
                              "children": [
                                {
                                  "value": "ldclient",
                                  "children": []
                                },
                                {
                                  "value": "get",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "is_initialized",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "ldclient.get().close()\n        logger.info(\"LaunchDarkly client closed successfully\")",
                  "children": [
                    {
                      "value": "ldclient.get().close()",
                      "children": [
                        {
                          "value": "ldclient.get().close()",
                          "children": [
                            {
                              "value": "ldclient.get().close",
                              "children": [
                                {
                                  "value": "ldclient.get()",
                                  "children": [
                                    {
                                      "value": "ldclient.get",
                                      "children": [
                                        {
                                          "value": "ldclient",
                                          "children": []
                                        },
                                        {
                                          "value": "get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "close",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.info(\"LaunchDarkly client closed successfully\")",
                      "children": [
                        {
                          "value": "logger.info(\"LaunchDarkly client closed successfully\")",
                          "children": [
                            {
                              "value": "logger.info",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "info",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"LaunchDarkly client closed successfully\")",
                              "children": [
                                {
                                  "value": "\"LaunchDarkly client closed successfully\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "LaunchDarkly client closed successfully",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def create_context(\n    user_id: str, additional_attributes: Optional[Dict[str, Any]] = None\n) -> Context:\n    \"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\n    builder = Context.builder(str(user_id)).kind(\"user\")\n    if additional_attributes:\n        for key, value in additional_attributes.items():\n            builder.set(key, value)\n    return builder.build()",
      "children": [
        {
          "value": "create_context",
          "children": []
        },
        {
          "value": "(\n    user_id: str, additional_attributes: Optional[Dict[str, Any]] = None\n)",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "additional_attributes: Optional[Dict[str, Any]] = None",
              "children": [
                {
                  "value": "additional_attributes",
                  "children": []
                },
                {
                  "value": "Optional[Dict[str, Any]]",
                  "children": [
                    {
                      "value": "Optional[Dict[str, Any]]",
                      "children": [
                        {
                          "value": "Optional",
                          "children": []
                        },
                        {
                          "value": "[Dict[str, Any]]",
                          "children": [
                            {
                              "value": "Dict[str, Any]",
                              "children": [
                                {
                                  "value": "Dict[str, Any]",
                                  "children": [
                                    {
                                      "value": "Dict",
                                      "children": []
                                    },
                                    {
                                      "value": "[str, Any]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "Any",
                                          "children": [
                                            {
                                              "value": "Any",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "Context",
          "children": [
            {
              "value": "Context",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\n    builder = Context.builder(str(user_id)).kind(\"user\")\n    if additional_attributes:\n        for key, value in additional_attributes.items():\n            builder.set(key, value)\n    return builder.build()",
          "children": [
            {
              "value": "\"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"",
              "children": [
                {
                  "value": "\"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Create LaunchDarkly context with optional additional attributes.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "builder = Context.builder(str(user_id)).kind(\"user\")",
              "children": [
                {
                  "value": "builder = Context.builder(str(user_id)).kind(\"user\")",
                  "children": [
                    {
                      "value": "builder",
                      "children": []
                    },
                    {
                      "value": "Context.builder(str(user_id)).kind(\"user\")",
                      "children": [
                        {
                          "value": "Context.builder(str(user_id)).kind",
                          "children": [
                            {
                              "value": "Context.builder(str(user_id))",
                              "children": [
                                {
                                  "value": "Context.builder",
                                  "children": [
                                    {
                                      "value": "Context",
                                      "children": []
                                    },
                                    {
                                      "value": "builder",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(str(user_id))",
                                  "children": [
                                    {
                                      "value": "str(user_id)",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": []
                                        },
                                        {
                                          "value": "(user_id)",
                                          "children": [
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "kind",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\"user\")",
                          "children": [
                            {
                              "value": "\"user\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "user",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if additional_attributes:\n        for key, value in additional_attributes.items():\n            builder.set(key, value)",
              "children": [
                {
                  "value": "additional_attributes",
                  "children": []
                },
                {
                  "value": "for key, value in additional_attributes.items():\n            builder.set(key, value)",
                  "children": [
                    {
                      "value": "for key, value in additional_attributes.items():\n            builder.set(key, value)",
                      "children": [
                        {
                          "value": "key, value",
                          "children": [
                            {
                              "value": "key",
                              "children": []
                            },
                            {
                              "value": "value",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "additional_attributes.items()",
                          "children": [
                            {
                              "value": "additional_attributes.items",
                              "children": [
                                {
                                  "value": "additional_attributes",
                                  "children": []
                                },
                                {
                                  "value": "items",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "builder.set(key, value)",
                          "children": [
                            {
                              "value": "builder.set(key, value)",
                              "children": [
                                {
                                  "value": "builder.set(key, value)",
                                  "children": [
                                    {
                                      "value": "builder.set",
                                      "children": [
                                        {
                                          "value": "builder",
                                          "children": []
                                        },
                                        {
                                          "value": "set",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(key, value)",
                                      "children": [
                                        {
                                          "value": "key",
                                          "children": []
                                        },
                                        {
                                          "value": "value",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return builder.build()",
              "children": [
                {
                  "value": "builder.build()",
                  "children": [
                    {
                      "value": "builder.build",
                      "children": [
                        {
                          "value": "builder",
                          "children": []
                        },
                        {
                          "value": "build",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def feature_flag(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"\n\n    def decorator(\n        func: Callable[P, Union[T, Awaitable[T]]],\n    ) -> Callable[P, Union[T, Awaitable[T]]]:\n        @wraps(func)\n        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n\n        @wraps(func)\n        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n\n        return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )\n\n    return decorator",
      "children": [
        {
          "value": "feature_flag",
          "children": []
        },
        {
          "value": "(\n    flag_key: str,\n    default: bool = False,\n)",
          "children": [
            {
              "value": "flag_key: str",
              "children": [
                {
                  "value": "flag_key",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "default: bool = False",
              "children": [
                {
                  "value": "default",
                  "children": []
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "False",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]",
          "children": [
            {
              "value": "Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]",
              "children": [
                {
                  "value": "Callable",
                  "children": []
                },
                {
                  "value": "[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]",
                  "children": [
                    {
                      "value": "[Callable[P, Union[T, Awaitable[T]]]]",
                      "children": [
                        {
                          "value": "[Callable[P, Union[T, Awaitable[T]]]]",
                          "children": [
                            {
                              "value": "Callable[P, Union[T, Awaitable[T]]]",
                              "children": [
                                {
                                  "value": "Callable",
                                  "children": []
                                },
                                {
                                  "value": "P",
                                  "children": []
                                },
                                {
                                  "value": "Union[T, Awaitable[T]]",
                                  "children": [
                                    {
                                      "value": "Union",
                                      "children": []
                                    },
                                    {
                                      "value": "T",
                                      "children": []
                                    },
                                    {
                                      "value": "Awaitable[T]",
                                      "children": [
                                        {
                                          "value": "Awaitable",
                                          "children": []
                                        },
                                        {
                                          "value": "T",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "Callable[P, Union[T, Awaitable[T]]]",
                      "children": [
                        {
                          "value": "Callable[P, Union[T, Awaitable[T]]]",
                          "children": [
                            {
                              "value": "Callable",
                              "children": []
                            },
                            {
                              "value": "[P, Union[T, Awaitable[T]]]",
                              "children": [
                                {
                                  "value": "P",
                                  "children": [
                                    {
                                      "value": "P",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Union[T, Awaitable[T]]",
                                  "children": [
                                    {
                                      "value": "Union[T, Awaitable[T]]",
                                      "children": [
                                        {
                                          "value": "Union",
                                          "children": []
                                        },
                                        {
                                          "value": "[T, Awaitable[T]]",
                                          "children": [
                                            {
                                              "value": "T",
                                              "children": [
                                                {
                                                  "value": "T",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "Awaitable[T]",
                                              "children": [
                                                {
                                                  "value": "Awaitable[T]",
                                                  "children": [
                                                    {
                                                      "value": "Awaitable",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "[T]",
                                                      "children": [
                                                        {
                                                          "value": "T",
                                                          "children": [
                                                            {
                                                              "value": "T",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"\n\n    def decorator(\n        func: Callable[P, Union[T, Awaitable[T]]],\n    ) -> Callable[P, Union[T, Awaitable[T]]]:\n        @wraps(func)\n        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n\n        @wraps(func)\n        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n\n        return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )\n\n    return decorator",
          "children": [
            {
              "value": "\"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Decorator for feature flag protected endpoints.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def decorator(\n        func: Callable[P, Union[T, Awaitable[T]]],\n    ) -> Callable[P, Union[T, Awaitable[T]]]:\n        @wraps(func)\n        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n\n        @wraps(func)\n        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n\n        return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )",
              "children": [
                {
                  "value": "decorator",
                  "children": []
                },
                {
                  "value": "(\n        func: Callable[P, Union[T, Awaitable[T]]],\n    )",
                  "children": [
                    {
                      "value": "func: Callable[P, Union[T, Awaitable[T]]]",
                      "children": [
                        {
                          "value": "func",
                          "children": []
                        },
                        {
                          "value": "Callable[P, Union[T, Awaitable[T]]]",
                          "children": [
                            {
                              "value": "Callable[P, Union[T, Awaitable[T]]]",
                              "children": [
                                {
                                  "value": "Callable",
                                  "children": []
                                },
                                {
                                  "value": "[P, Union[T, Awaitable[T]]]",
                                  "children": [
                                    {
                                      "value": "P",
                                      "children": [
                                        {
                                          "value": "P",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "Union[T, Awaitable[T]]",
                                      "children": [
                                        {
                                          "value": "Union[T, Awaitable[T]]",
                                          "children": [
                                            {
                                              "value": "Union",
                                              "children": []
                                            },
                                            {
                                              "value": "[T, Awaitable[T]]",
                                              "children": [
                                                {
                                                  "value": "T",
                                                  "children": [
                                                    {
                                                      "value": "T",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "Awaitable[T]",
                                                  "children": [
                                                    {
                                                      "value": "Awaitable[T]",
                                                      "children": [
                                                        {
                                                          "value": "Awaitable",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "[T]",
                                                          "children": [
                                                            {
                                                              "value": "T",
                                                              "children": [
                                                                {
                                                                  "value": "T",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "Callable[P, Union[T, Awaitable[T]]]",
                  "children": [
                    {
                      "value": "Callable[P, Union[T, Awaitable[T]]]",
                      "children": [
                        {
                          "value": "Callable",
                          "children": []
                        },
                        {
                          "value": "[P, Union[T, Awaitable[T]]]",
                          "children": [
                            {
                              "value": "P",
                              "children": [
                                {
                                  "value": "P",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Union[T, Awaitable[T]]",
                              "children": [
                                {
                                  "value": "Union[T, Awaitable[T]]",
                                  "children": [
                                    {
                                      "value": "Union",
                                      "children": []
                                    },
                                    {
                                      "value": "[T, Awaitable[T]]",
                                      "children": [
                                        {
                                          "value": "T",
                                          "children": [
                                            {
                                              "value": "T",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "Awaitable[T]",
                                          "children": [
                                            {
                                              "value": "Awaitable[T]",
                                              "children": [
                                                {
                                                  "value": "Awaitable",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[T]",
                                                  "children": [
                                                    {
                                                      "value": "T",
                                                      "children": [
                                                        {
                                                          "value": "T",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "@wraps(func)\n        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n\n        @wraps(func)\n        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n\n        return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )",
                  "children": [
                    {
                      "value": "@wraps(func)\n        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                      "children": [
                        {
                          "value": "@wraps(func)",
                          "children": [
                            {
                              "value": "wraps(func)",
                              "children": [
                                {
                                  "value": "wraps",
                                  "children": []
                                },
                                {
                                  "value": "(func)",
                                  "children": [
                                    {
                                      "value": "func",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                          "children": [
                            {
                              "value": "async_wrapper",
                              "children": []
                            },
                            {
                              "value": "(*args: P.args, **kwargs: P.kwargs)",
                              "children": [
                                {
                                  "value": "*args: P.args",
                                  "children": [
                                    {
                                      "value": "*args",
                                      "children": [
                                        {
                                          "value": "args",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "P.args",
                                      "children": [
                                        {
                                          "value": "P.args",
                                          "children": [
                                            {
                                              "value": "P",
                                              "children": []
                                            },
                                            {
                                              "value": "args",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs: P.kwargs",
                                  "children": [
                                    {
                                      "value": "**kwargs",
                                      "children": [
                                        {
                                          "value": "kwargs",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "P.kwargs",
                                      "children": [
                                        {
                                          "value": "P.kwargs",
                                          "children": [
                                            {
                                              "value": "P",
                                              "children": []
                                            },
                                            {
                                              "value": "kwargs",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "T",
                              "children": [
                                {
                                  "value": "T",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                              "children": [
                                {
                                  "value": "try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                                  "children": [
                                    {
                                      "value": "user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)",
                                      "children": [
                                        {
                                          "value": "user_id = kwargs.get(\"user_id\")",
                                          "children": [
                                            {
                                              "value": "user_id = kwargs.get(\"user_id\")",
                                              "children": [
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "kwargs.get(\"user_id\")",
                                                  "children": [
                                                    {
                                                      "value": "kwargs.get",
                                                      "children": [
                                                        {
                                                          "value": "kwargs",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "get",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\"user_id\")",
                                                      "children": [
                                                        {
                                                          "value": "\"user_id\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "user_id",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if not user_id:\n                    raise ValueError(\"user_id is required\")",
                                          "children": [
                                            {
                                              "value": "not user_id",
                                              "children": [
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise ValueError(\"user_id is required\")",
                                              "children": [
                                                {
                                                  "value": "raise ValueError(\"user_id is required\")",
                                                  "children": [
                                                    {
                                                      "value": "ValueError(\"user_id is required\")",
                                                      "children": [
                                                        {
                                                          "value": "ValueError",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(\"user_id is required\")",
                                                          "children": [
                                                            {
                                                              "value": "\"user_id is required\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "user_id is required",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)",
                                          "children": [
                                            {
                                              "value": "not get_client().is_initialized()",
                                              "children": [
                                                {
                                                  "value": "get_client().is_initialized()",
                                                  "children": [
                                                    {
                                                      "value": "get_client().is_initialized",
                                                      "children": [
                                                        {
                                                          "value": "get_client()",
                                                          "children": [
                                                            {
                                                              "value": "get_client",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "is_initialized",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default",
                                              "children": [
                                                {
                                                  "value": "logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "logger.warning",
                                                          "children": [
                                                            {
                                                              "value": "logger",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "warning",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "f\"LaunchDarkly not initialized, using default={default}\"",
                                                              "children": [
                                                                {
                                                                  "value": "f\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "LaunchDarkly not initialized, using default=",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{default}",
                                                                  "children": [
                                                                    {
                                                                      "value": "default",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "is_enabled = default",
                                                  "children": [
                                                    {
                                                      "value": "is_enabled = default",
                                                      "children": [
                                                        {
                                                          "value": "is_enabled",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "default",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)",
                                              "children": [
                                                {
                                                  "value": "context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)",
                                                  "children": [
                                                    {
                                                      "value": "context = create_context(str(user_id))",
                                                      "children": [
                                                        {
                                                          "value": "context = create_context(str(user_id))",
                                                          "children": [
                                                            {
                                                              "value": "context",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "create_context(str(user_id))",
                                                              "children": [
                                                                {
                                                                  "value": "create_context",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(str(user_id))",
                                                                  "children": [
                                                                    {
                                                                      "value": "str(user_id)",
                                                                      "children": [
                                                                        {
                                                                          "value": "str",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "(user_id)",
                                                                          "children": [
                                                                            {
                                                                              "value": "user_id",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "is_enabled = get_client().variation(flag_key, context, default)",
                                                      "children": [
                                                        {
                                                          "value": "is_enabled = get_client().variation(flag_key, context, default)",
                                                          "children": [
                                                            {
                                                              "value": "is_enabled",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "get_client().variation(flag_key, context, default)",
                                                              "children": [
                                                                {
                                                                  "value": "get_client().variation",
                                                                  "children": [
                                                                    {
                                                                      "value": "get_client()",
                                                                      "children": [
                                                                        {
                                                                          "value": "get_client",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "()",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "variation",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "(flag_key, context, default)",
                                                                  "children": [
                                                                    {
                                                                      "value": "flag_key",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "context",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "default",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")",
                                          "children": [
                                            {
                                              "value": "not is_enabled",
                                              "children": [
                                                {
                                                  "value": "is_enabled",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise HTTPException(status_code=404, detail=\"Feature not available\")",
                                              "children": [
                                                {
                                                  "value": "raise HTTPException(status_code=404, detail=\"Feature not available\")",
                                                  "children": [
                                                    {
                                                      "value": "HTTPException(status_code=404, detail=\"Feature not available\")",
                                                      "children": [
                                                        {
                                                          "value": "HTTPException",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(status_code=404, detail=\"Feature not available\")",
                                                          "children": [
                                                            {
                                                              "value": "status_code=404",
                                                              "children": [
                                                                {
                                                                  "value": "status_code",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "404",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "detail=\"Feature not available\"",
                                                              "children": [
                                                                {
                                                                  "value": "detail",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"Feature not available\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "Feature not available",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "result = func(*args, **kwargs)",
                                          "children": [
                                            {
                                              "value": "result = func(*args, **kwargs)",
                                              "children": [
                                                {
                                                  "value": "result",
                                                  "children": []
                                                },
                                                {
                                                  "value": "func(*args, **kwargs)",
                                                  "children": [
                                                    {
                                                      "value": "func",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(*args, **kwargs)",
                                                      "children": [
                                                        {
                                                          "value": "*args",
                                                          "children": [
                                                            {
                                                              "value": "args",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "**kwargs",
                                                          "children": [
                                                            {
                                                              "value": "kwargs",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if asyncio.iscoroutine(result):\n                    return await result",
                                          "children": [
                                            {
                                              "value": "asyncio.iscoroutine(result)",
                                              "children": [
                                                {
                                                  "value": "asyncio.iscoroutine",
                                                  "children": [
                                                    {
                                                      "value": "asyncio",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "iscoroutine",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(result)",
                                                  "children": [
                                                    {
                                                      "value": "result",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "return await result",
                                              "children": [
                                                {
                                                  "value": "return await result",
                                                  "children": [
                                                    {
                                                      "value": "await result",
                                                      "children": [
                                                        {
                                                          "value": "result",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "return cast(T, result)",
                                          "children": [
                                            {
                                              "value": "cast(T, result)",
                                              "children": [
                                                {
                                                  "value": "cast",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(T, result)",
                                                  "children": [
                                                    {
                                                      "value": "T",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "result",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                                      "children": [
                                        {
                                          "value": "Exception as e",
                                          "children": [
                                            {
                                              "value": "Exception",
                                              "children": []
                                            },
                                            {
                                              "value": "e",
                                              "children": [
                                                {
                                                  "value": "e",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                                          "children": [
                                            {
                                              "value": "logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")",
                                              "children": [
                                                {
                                                  "value": "logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")",
                                                  "children": [
                                                    {
                                                      "value": "logger.error",
                                                      "children": [
                                                        {
                                                          "value": "logger",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "error",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(f\"Error evaluating feature flag {flag_key}: {e}\")",
                                                      "children": [
                                                        {
                                                          "value": "f\"Error evaluating feature flag {flag_key}: {e}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Error evaluating feature flag",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{flag_key}",
                                                              "children": [
                                                                {
                                                                  "value": "flag_key",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": ":",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{e}",
                                                              "children": [
                                                                {
                                                                  "value": "e",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "@wraps(func)\n        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                      "children": [
                        {
                          "value": "@wraps(func)",
                          "children": [
                            {
                              "value": "wraps(func)",
                              "children": [
                                {
                                  "value": "wraps",
                                  "children": []
                                },
                                {
                                  "value": "(func)",
                                  "children": [
                                    {
                                      "value": "func",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                          "children": [
                            {
                              "value": "sync_wrapper",
                              "children": []
                            },
                            {
                              "value": "(*args: P.args, **kwargs: P.kwargs)",
                              "children": [
                                {
                                  "value": "*args: P.args",
                                  "children": [
                                    {
                                      "value": "*args",
                                      "children": [
                                        {
                                          "value": "args",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "P.args",
                                      "children": [
                                        {
                                          "value": "P.args",
                                          "children": [
                                            {
                                              "value": "P",
                                              "children": []
                                            },
                                            {
                                              "value": "args",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs: P.kwargs",
                                  "children": [
                                    {
                                      "value": "**kwargs",
                                      "children": [
                                        {
                                          "value": "kwargs",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "P.kwargs",
                                      "children": [
                                        {
                                          "value": "P.kwargs",
                                          "children": [
                                            {
                                              "value": "P",
                                              "children": []
                                            },
                                            {
                                              "value": "kwargs",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "T",
                              "children": [
                                {
                                  "value": "T",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                              "children": [
                                {
                                  "value": "try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                                  "children": [
                                    {
                                      "value": "user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))",
                                      "children": [
                                        {
                                          "value": "user_id = kwargs.get(\"user_id\")",
                                          "children": [
                                            {
                                              "value": "user_id = kwargs.get(\"user_id\")",
                                              "children": [
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "kwargs.get(\"user_id\")",
                                                  "children": [
                                                    {
                                                      "value": "kwargs.get",
                                                      "children": [
                                                        {
                                                          "value": "kwargs",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "get",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\"user_id\")",
                                                      "children": [
                                                        {
                                                          "value": "\"user_id\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "user_id",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if not user_id:\n                    raise ValueError(\"user_id is required\")",
                                          "children": [
                                            {
                                              "value": "not user_id",
                                              "children": [
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise ValueError(\"user_id is required\")",
                                              "children": [
                                                {
                                                  "value": "raise ValueError(\"user_id is required\")",
                                                  "children": [
                                                    {
                                                      "value": "ValueError(\"user_id is required\")",
                                                      "children": [
                                                        {
                                                          "value": "ValueError",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(\"user_id is required\")",
                                                          "children": [
                                                            {
                                                              "value": "\"user_id is required\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "user_id is required",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)",
                                          "children": [
                                            {
                                              "value": "not get_client().is_initialized()",
                                              "children": [
                                                {
                                                  "value": "get_client().is_initialized()",
                                                  "children": [
                                                    {
                                                      "value": "get_client().is_initialized",
                                                      "children": [
                                                        {
                                                          "value": "get_client()",
                                                          "children": [
                                                            {
                                                              "value": "get_client",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "is_initialized",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default",
                                              "children": [
                                                {
                                                  "value": "logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "logger.warning",
                                                          "children": [
                                                            {
                                                              "value": "logger",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "warning",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "f\"LaunchDarkly not initialized, using default={default}\"",
                                                              "children": [
                                                                {
                                                                  "value": "f\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "LaunchDarkly not initialized, using default=",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{default}",
                                                                  "children": [
                                                                    {
                                                                      "value": "default",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "is_enabled = default",
                                                  "children": [
                                                    {
                                                      "value": "is_enabled = default",
                                                      "children": [
                                                        {
                                                          "value": "is_enabled",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "default",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)",
                                              "children": [
                                                {
                                                  "value": "context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)",
                                                  "children": [
                                                    {
                                                      "value": "context = create_context(str(user_id))",
                                                      "children": [
                                                        {
                                                          "value": "context = create_context(str(user_id))",
                                                          "children": [
                                                            {
                                                              "value": "context",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "create_context(str(user_id))",
                                                              "children": [
                                                                {
                                                                  "value": "create_context",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(str(user_id))",
                                                                  "children": [
                                                                    {
                                                                      "value": "str(user_id)",
                                                                      "children": [
                                                                        {
                                                                          "value": "str",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "(user_id)",
                                                                          "children": [
                                                                            {
                                                                              "value": "user_id",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "is_enabled = get_client().variation(flag_key, context, default)",
                                                      "children": [
                                                        {
                                                          "value": "is_enabled = get_client().variation(flag_key, context, default)",
                                                          "children": [
                                                            {
                                                              "value": "is_enabled",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "get_client().variation(flag_key, context, default)",
                                                              "children": [
                                                                {
                                                                  "value": "get_client().variation",
                                                                  "children": [
                                                                    {
                                                                      "value": "get_client()",
                                                                      "children": [
                                                                        {
                                                                          "value": "get_client",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "()",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "variation",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "(flag_key, context, default)",
                                                                  "children": [
                                                                    {
                                                                      "value": "flag_key",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "context",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "default",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")",
                                          "children": [
                                            {
                                              "value": "not is_enabled",
                                              "children": [
                                                {
                                                  "value": "is_enabled",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise HTTPException(status_code=404, detail=\"Feature not available\")",
                                              "children": [
                                                {
                                                  "value": "raise HTTPException(status_code=404, detail=\"Feature not available\")",
                                                  "children": [
                                                    {
                                                      "value": "HTTPException(status_code=404, detail=\"Feature not available\")",
                                                      "children": [
                                                        {
                                                          "value": "HTTPException",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(status_code=404, detail=\"Feature not available\")",
                                                          "children": [
                                                            {
                                                              "value": "status_code=404",
                                                              "children": [
                                                                {
                                                                  "value": "status_code",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "404",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "detail=\"Feature not available\"",
                                                              "children": [
                                                                {
                                                                  "value": "detail",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"Feature not available\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "Feature not available",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "return cast(T, func(*args, **kwargs))",
                                          "children": [
                                            {
                                              "value": "cast(T, func(*args, **kwargs))",
                                              "children": [
                                                {
                                                  "value": "cast",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(T, func(*args, **kwargs))",
                                                  "children": [
                                                    {
                                                      "value": "T",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "func(*args, **kwargs)",
                                                      "children": [
                                                        {
                                                          "value": "func",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(*args, **kwargs)",
                                                          "children": [
                                                            {
                                                              "value": "*args",
                                                              "children": [
                                                                {
                                                                  "value": "args",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "**kwargs",
                                                              "children": [
                                                                {
                                                                  "value": "kwargs",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                                      "children": [
                                        {
                                          "value": "Exception as e",
                                          "children": [
                                            {
                                              "value": "Exception",
                                              "children": []
                                            },
                                            {
                                              "value": "e",
                                              "children": [
                                                {
                                                  "value": "e",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                                          "children": [
                                            {
                                              "value": "logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")",
                                              "children": [
                                                {
                                                  "value": "logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")",
                                                  "children": [
                                                    {
                                                      "value": "logger.error",
                                                      "children": [
                                                        {
                                                          "value": "logger",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "error",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(f\"Error evaluating feature flag {flag_key}: {e}\")",
                                                      "children": [
                                                        {
                                                          "value": "f\"Error evaluating feature flag {flag_key}: {e}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Error evaluating feature flag",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{flag_key}",
                                                              "children": [
                                                                {
                                                                  "value": "flag_key",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": ":",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{e}",
                                                              "children": [
                                                                {
                                                                  "value": "e",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )",
                      "children": [
                        {
                          "value": "cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )",
                          "children": [
                            {
                              "value": "cast",
                              "children": []
                            },
                            {
                              "value": "(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )",
                              "children": [
                                {
                                  "value": "Callable[P, Union[T, Awaitable[T]]]",
                                  "children": [
                                    {
                                      "value": "Callable",
                                      "children": []
                                    },
                                    {
                                      "value": "P",
                                      "children": []
                                    },
                                    {
                                      "value": "Union[T, Awaitable[T]]",
                                      "children": [
                                        {
                                          "value": "Union",
                                          "children": []
                                        },
                                        {
                                          "value": "T",
                                          "children": []
                                        },
                                        {
                                          "value": "Awaitable[T]",
                                          "children": [
                                            {
                                              "value": "Awaitable",
                                              "children": []
                                            },
                                            {
                                              "value": "T",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper",
                                  "children": [
                                    {
                                      "value": "async_wrapper",
                                      "children": []
                                    },
                                    {
                                      "value": "asyncio.iscoroutinefunction(func)",
                                      "children": [
                                        {
                                          "value": "asyncio.iscoroutinefunction",
                                          "children": [
                                            {
                                              "value": "asyncio",
                                              "children": []
                                            },
                                            {
                                              "value": "iscoroutinefunction",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(func)",
                                          "children": [
                                            {
                                              "value": "func",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "sync_wrapper",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return decorator",
              "children": [
                {
                  "value": "decorator",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def percentage_rollout(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"Decorator for percentage-based rollouts.\"\"\"\n    return feature_flag(flag_key, default)",
      "children": [
        {
          "value": "percentage_rollout",
          "children": []
        },
        {
          "value": "(\n    flag_key: str,\n    default: bool = False,\n)",
          "children": [
            {
              "value": "flag_key: str",
              "children": [
                {
                  "value": "flag_key",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "default: bool = False",
              "children": [
                {
                  "value": "default",
                  "children": []
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "False",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]",
          "children": [
            {
              "value": "Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]",
              "children": [
                {
                  "value": "Callable",
                  "children": []
                },
                {
                  "value": "[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]",
                  "children": [
                    {
                      "value": "[Callable[P, Union[T, Awaitable[T]]]]",
                      "children": [
                        {
                          "value": "[Callable[P, Union[T, Awaitable[T]]]]",
                          "children": [
                            {
                              "value": "Callable[P, Union[T, Awaitable[T]]]",
                              "children": [
                                {
                                  "value": "Callable",
                                  "children": []
                                },
                                {
                                  "value": "P",
                                  "children": []
                                },
                                {
                                  "value": "Union[T, Awaitable[T]]",
                                  "children": [
                                    {
                                      "value": "Union",
                                      "children": []
                                    },
                                    {
                                      "value": "T",
                                      "children": []
                                    },
                                    {
                                      "value": "Awaitable[T]",
                                      "children": [
                                        {
                                          "value": "Awaitable",
                                          "children": []
                                        },
                                        {
                                          "value": "T",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "Callable[P, Union[T, Awaitable[T]]]",
                      "children": [
                        {
                          "value": "Callable[P, Union[T, Awaitable[T]]]",
                          "children": [
                            {
                              "value": "Callable",
                              "children": []
                            },
                            {
                              "value": "[P, Union[T, Awaitable[T]]]",
                              "children": [
                                {
                                  "value": "P",
                                  "children": [
                                    {
                                      "value": "P",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Union[T, Awaitable[T]]",
                                  "children": [
                                    {
                                      "value": "Union[T, Awaitable[T]]",
                                      "children": [
                                        {
                                          "value": "Union",
                                          "children": []
                                        },
                                        {
                                          "value": "[T, Awaitable[T]]",
                                          "children": [
                                            {
                                              "value": "T",
                                              "children": [
                                                {
                                                  "value": "T",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "Awaitable[T]",
                                              "children": [
                                                {
                                                  "value": "Awaitable[T]",
                                                  "children": [
                                                    {
                                                      "value": "Awaitable",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "[T]",
                                                      "children": [
                                                        {
                                                          "value": "T",
                                                          "children": [
                                                            {
                                                              "value": "T",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"Decorator for percentage-based rollouts.\"\"\"\n    return feature_flag(flag_key, default)",
          "children": [
            {
              "value": "\"\"\"Decorator for percentage-based rollouts.\"\"\"",
              "children": [
                {
                  "value": "\"\"\"Decorator for percentage-based rollouts.\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Decorator for percentage-based rollouts.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "return feature_flag(flag_key, default)",
              "children": [
                {
                  "value": "feature_flag(flag_key, default)",
                  "children": [
                    {
                      "value": "feature_flag",
                      "children": []
                    },
                    {
                      "value": "(flag_key, default)",
                      "children": [
                        {
                          "value": "flag_key",
                          "children": []
                        },
                        {
                          "value": "default",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def beta_feature(\n    flag_key: Optional[str] = None,\n    unauthorized_response: Any = {\"message\": \"Not available in beta\"},\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"Decorator for beta features.\"\"\"\n    actual_key = f\"beta-{flag_key}\" if flag_key else \"beta\"\n    return feature_flag(actual_key, False)",
      "children": [
        {
          "value": "beta_feature",
          "children": []
        },
        {
          "value": "(\n    flag_key: Optional[str] = None,\n    unauthorized_response: Any = {\"message\": \"Not available in beta\"},\n)",
          "children": [
            {
              "value": "flag_key: Optional[str] = None",
              "children": [
                {
                  "value": "flag_key",
                  "children": []
                },
                {
                  "value": "Optional[str]",
                  "children": [
                    {
                      "value": "Optional[str]",
                      "children": [
                        {
                          "value": "Optional",
                          "children": []
                        },
                        {
                          "value": "[str]",
                          "children": [
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "unauthorized_response: Any = {\"message\": \"Not available in beta\"}",
              "children": [
                {
                  "value": "unauthorized_response",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "{\"message\": \"Not available in beta\"}",
                  "children": [
                    {
                      "value": "\"message\": \"Not available in beta\"",
                      "children": [
                        {
                          "value": "\"message\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "message",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "\"Not available in beta\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Not available in beta",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]",
          "children": [
            {
              "value": "Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]",
              "children": [
                {
                  "value": "Callable",
                  "children": []
                },
                {
                  "value": "[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]",
                  "children": [
                    {
                      "value": "[Callable[P, Union[T, Awaitable[T]]]]",
                      "children": [
                        {
                          "value": "[Callable[P, Union[T, Awaitable[T]]]]",
                          "children": [
                            {
                              "value": "Callable[P, Union[T, Awaitable[T]]]",
                              "children": [
                                {
                                  "value": "Callable",
                                  "children": []
                                },
                                {
                                  "value": "P",
                                  "children": []
                                },
                                {
                                  "value": "Union[T, Awaitable[T]]",
                                  "children": [
                                    {
                                      "value": "Union",
                                      "children": []
                                    },
                                    {
                                      "value": "T",
                                      "children": []
                                    },
                                    {
                                      "value": "Awaitable[T]",
                                      "children": [
                                        {
                                          "value": "Awaitable",
                                          "children": []
                                        },
                                        {
                                          "value": "T",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "Callable[P, Union[T, Awaitable[T]]]",
                      "children": [
                        {
                          "value": "Callable[P, Union[T, Awaitable[T]]]",
                          "children": [
                            {
                              "value": "Callable",
                              "children": []
                            },
                            {
                              "value": "[P, Union[T, Awaitable[T]]]",
                              "children": [
                                {
                                  "value": "P",
                                  "children": [
                                    {
                                      "value": "P",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Union[T, Awaitable[T]]",
                                  "children": [
                                    {
                                      "value": "Union[T, Awaitable[T]]",
                                      "children": [
                                        {
                                          "value": "Union",
                                          "children": []
                                        },
                                        {
                                          "value": "[T, Awaitable[T]]",
                                          "children": [
                                            {
                                              "value": "T",
                                              "children": [
                                                {
                                                  "value": "T",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "Awaitable[T]",
                                              "children": [
                                                {
                                                  "value": "Awaitable[T]",
                                                  "children": [
                                                    {
                                                      "value": "Awaitable",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "[T]",
                                                      "children": [
                                                        {
                                                          "value": "T",
                                                          "children": [
                                                            {
                                                              "value": "T",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"Decorator for beta features.\"\"\"\n    actual_key = f\"beta-{flag_key}\" if flag_key else \"beta\"\n    return feature_flag(actual_key, False)",
          "children": [
            {
              "value": "\"\"\"Decorator for beta features.\"\"\"",
              "children": [
                {
                  "value": "\"\"\"Decorator for beta features.\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Decorator for beta features.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "actual_key = f\"beta-{flag_key}\" if flag_key else \"beta\"",
              "children": [
                {
                  "value": "actual_key = f\"beta-{flag_key}\" if flag_key else \"beta\"",
                  "children": [
                    {
                      "value": "actual_key",
                      "children": []
                    },
                    {
                      "value": "f\"beta-{flag_key}\" if flag_key else \"beta\"",
                      "children": [
                        {
                          "value": "f\"beta-{flag_key}\"",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "beta-",
                              "children": []
                            },
                            {
                              "value": "{flag_key}",
                              "children": [
                                {
                                  "value": "flag_key",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "flag_key",
                          "children": []
                        },
                        {
                          "value": "\"beta\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "beta",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return feature_flag(actual_key, False)",
              "children": [
                {
                  "value": "feature_flag(actual_key, False)",
                  "children": [
                    {
                      "value": "feature_flag",
                      "children": []
                    },
                    {
                      "value": "(actual_key, False)",
                      "children": [
                        {
                          "value": "actual_key",
                          "children": []
                        },
                        {
                          "value": "False",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@contextlib.contextmanager\ndef mock_flag_variation(flag_key: str, return_value: Any):\n    \"\"\"Context manager for testing feature flags.\"\"\"\n    original_variation = get_client().variation\n    get_client().variation = lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )\n    try:\n        yield\n    finally:\n        get_client().variation = original_variation",
      "children": [
        {
          "value": "@contextlib.contextmanager",
          "children": [
            {
              "value": "contextlib.contextmanager",
              "children": [
                {
                  "value": "contextlib",
                  "children": []
                },
                {
                  "value": "contextmanager",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "def mock_flag_variation(flag_key: str, return_value: Any):\n    \"\"\"Context manager for testing feature flags.\"\"\"\n    original_variation = get_client().variation\n    get_client().variation = lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )\n    try:\n        yield\n    finally:\n        get_client().variation = original_variation",
          "children": [
            {
              "value": "mock_flag_variation",
              "children": []
            },
            {
              "value": "(flag_key: str, return_value: Any)",
              "children": [
                {
                  "value": "flag_key: str",
                  "children": [
                    {
                      "value": "flag_key",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return_value: Any",
                  "children": [
                    {
                      "value": "return_value",
                      "children": []
                    },
                    {
                      "value": "Any",
                      "children": [
                        {
                          "value": "Any",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "\"\"\"Context manager for testing feature flags.\"\"\"\n    original_variation = get_client().variation\n    get_client().variation = lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )\n    try:\n        yield\n    finally:\n        get_client().variation = original_variation",
              "children": [
                {
                  "value": "\"\"\"Context manager for testing feature flags.\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"Context manager for testing feature flags.\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"",
                          "children": []
                        },
                        {
                          "value": "Context manager for testing feature flags.",
                          "children": []
                        },
                        {
                          "value": "\"\"\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "original_variation = get_client().variation",
                  "children": [
                    {
                      "value": "original_variation = get_client().variation",
                      "children": [
                        {
                          "value": "original_variation",
                          "children": []
                        },
                        {
                          "value": "get_client().variation",
                          "children": [
                            {
                              "value": "get_client()",
                              "children": [
                                {
                                  "value": "get_client",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "variation",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "get_client().variation = lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )",
                  "children": [
                    {
                      "value": "get_client().variation = lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )",
                      "children": [
                        {
                          "value": "get_client().variation",
                          "children": [
                            {
                              "value": "get_client()",
                              "children": [
                                {
                                  "value": "get_client",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "variation",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )",
                          "children": [
                            {
                              "value": "key, context, default",
                              "children": [
                                {
                                  "value": "key",
                                  "children": []
                                },
                                {
                                  "value": "context",
                                  "children": []
                                },
                                {
                                  "value": "default",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        return_value if key == flag_key else original_variation(key, context, default)\n    )",
                              "children": [
                                {
                                  "value": "return_value if key == flag_key else original_variation(key, context, default)",
                                  "children": [
                                    {
                                      "value": "return_value",
                                      "children": []
                                    },
                                    {
                                      "value": "key == flag_key",
                                      "children": [
                                        {
                                          "value": "key",
                                          "children": []
                                        },
                                        {
                                          "value": "flag_key",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "original_variation(key, context, default)",
                                      "children": [
                                        {
                                          "value": "original_variation",
                                          "children": []
                                        },
                                        {
                                          "value": "(key, context, default)",
                                          "children": [
                                            {
                                              "value": "key",
                                              "children": []
                                            },
                                            {
                                              "value": "context",
                                              "children": []
                                            },
                                            {
                                              "value": "default",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n        yield\n    finally:\n        get_client().variation = original_variation",
                  "children": [
                    {
                      "value": "yield",
                      "children": [
                        {
                          "value": "yield",
                          "children": [
                            {
                              "value": "yield",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "finally:\n        get_client().variation = original_variation",
                      "children": [
                        {
                          "value": "get_client().variation = original_variation",
                          "children": [
                            {
                              "value": "get_client().variation = original_variation",
                              "children": [
                                {
                                  "value": "get_client().variation = original_variation",
                                  "children": [
                                    {
                                      "value": "get_client().variation",
                                      "children": [
                                        {
                                          "value": "get_client()",
                                          "children": [
                                            {
                                              "value": "get_client",
                                              "children": []
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "variation",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "original_variation",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}