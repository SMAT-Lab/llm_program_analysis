{
  "value": "def match_word_pattern(pattern: str, input_string: str) -> bool:\n    \"\"\"\n    Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False\n    \"\"\"\n\n    def backtrack(pattern_index: int, str_index: int) -> bool:\n        \"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"\n        if pattern_index == len(pattern) and str_index == len(input_string):\n            return True\n        if pattern_index == len(pattern) or str_index == len(input_string):\n            return False\n        char = pattern[pattern_index]\n        if char in pattern_map:\n            mapped_str = pattern_map[char]\n            if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n            else:\n                return False\n        for end in range(str_index + 1, len(input_string) + 1):\n            substr = input_string[str_index:end]\n            if substr in str_map:\n                continue\n            pattern_map[char] = substr\n            str_map[substr] = char\n            if backtrack(pattern_index + 1, end):\n                return True\n            del pattern_map[char]\n            del str_map[substr]\n        return False\n\n    pattern_map: dict[str, str] = {}\n    str_map: dict[str, str] = {}\n    return backtrack(0, 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "children": [
    {
      "value": "def match_word_pattern(pattern: str, input_string: str) -> bool:\n    \"\"\"\n    Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False\n    \"\"\"\n\n    def backtrack(pattern_index: int, str_index: int) -> bool:\n        \"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"\n        if pattern_index == len(pattern) and str_index == len(input_string):\n            return True\n        if pattern_index == len(pattern) or str_index == len(input_string):\n            return False\n        char = pattern[pattern_index]\n        if char in pattern_map:\n            mapped_str = pattern_map[char]\n            if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n            else:\n                return False\n        for end in range(str_index + 1, len(input_string) + 1):\n            substr = input_string[str_index:end]\n            if substr in str_map:\n                continue\n            pattern_map[char] = substr\n            str_map[substr] = char\n            if backtrack(pattern_index + 1, end):\n                return True\n            del pattern_map[char]\n            del str_map[substr]\n        return False\n\n    pattern_map: dict[str, str] = {}\n    str_map: dict[str, str] = {}\n    return backtrack(0, 0)",
      "children": [
        {
          "value": "match_word_pattern",
          "children": []
        },
        {
          "value": "(pattern: str, input_string: str)",
          "children": [
            {
              "value": "pattern: str",
              "children": [
                {
                  "value": "pattern",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "input_string: str",
              "children": [
                {
                  "value": "input_string",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "bool",
          "children": [
            {
              "value": "bool",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False\n    \"\"\"\n\n    def backtrack(pattern_index: int, str_index: int) -> bool:\n        \"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"\n        if pattern_index == len(pattern) and str_index == len(input_string):\n            return True\n        if pattern_index == len(pattern) or str_index == len(input_string):\n            return False\n        char = pattern[pattern_index]\n        if char in pattern_map:\n            mapped_str = pattern_map[char]\n            if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n            else:\n                return False\n        for end in range(str_index + 1, len(input_string) + 1):\n            substr = input_string[str_index:end]\n            if substr in str_map:\n                continue\n            pattern_map[char] = substr\n            str_map[substr] = char\n            if backtrack(pattern_index + 1, end):\n                return True\n            del pattern_map[char]\n            del str_map[substr]\n        return False\n\n    pattern_map: dict[str, str] = {}\n    str_map: dict[str, str] = {}\n    return backtrack(0, 0)",
          "children": [
            {
              "value": "\"\"\"\n    Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def backtrack(pattern_index: int, str_index: int) -> bool:\n        \"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"\n        if pattern_index == len(pattern) and str_index == len(input_string):\n            return True\n        if pattern_index == len(pattern) or str_index == len(input_string):\n            return False\n        char = pattern[pattern_index]\n        if char in pattern_map:\n            mapped_str = pattern_map[char]\n            if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n            else:\n                return False\n        for end in range(str_index + 1, len(input_string) + 1):\n            substr = input_string[str_index:end]\n            if substr in str_map:\n                continue\n            pattern_map[char] = substr\n            str_map[substr] = char\n            if backtrack(pattern_index + 1, end):\n                return True\n            del pattern_map[char]\n            del str_map[substr]\n        return False",
              "children": [
                {
                  "value": "backtrack",
                  "children": []
                },
                {
                  "value": "(pattern_index: int, str_index: int)",
                  "children": [
                    {
                      "value": "pattern_index: int",
                      "children": [
                        {
                          "value": "pattern_index",
                          "children": []
                        },
                        {
                          "value": "int",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "str_index: int",
                      "children": [
                        {
                          "value": "str_index",
                          "children": []
                        },
                        {
                          "value": "int",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"\n        if pattern_index == len(pattern) and str_index == len(input_string):\n            return True\n        if pattern_index == len(pattern) or str_index == len(input_string):\n            return False\n        char = pattern[pattern_index]\n        if char in pattern_map:\n            mapped_str = pattern_map[char]\n            if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n            else:\n                return False\n        for end in range(str_index + 1, len(input_string) + 1):\n            substr = input_string[str_index:end]\n            if substr in str_map:\n                continue\n            pattern_map[char] = substr\n            str_map[substr] = char\n            if backtrack(pattern_index + 1, end):\n                return True\n            del pattern_map[char]\n            del str_map[substr]\n        return False",
                  "children": [
                    {
                      "value": "\"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": ">>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if pattern_index == len(pattern) and str_index == len(input_string):\n            return True",
                      "children": [
                        {
                          "value": "pattern_index == len(pattern) and str_index == len(input_string)",
                          "children": [
                            {
                              "value": "pattern_index == len(pattern)",
                              "children": [
                                {
                                  "value": "pattern_index",
                                  "children": []
                                },
                                {
                                  "value": "len(pattern)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(pattern)",
                                      "children": [
                                        {
                                          "value": "pattern",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "str_index == len(input_string)",
                              "children": [
                                {
                                  "value": "str_index",
                                  "children": []
                                },
                                {
                                  "value": "len(input_string)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(input_string)",
                                      "children": [
                                        {
                                          "value": "input_string",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return True",
                          "children": [
                            {
                              "value": "return True",
                              "children": [
                                {
                                  "value": "True",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if pattern_index == len(pattern) or str_index == len(input_string):\n            return False",
                      "children": [
                        {
                          "value": "pattern_index == len(pattern) or str_index == len(input_string)",
                          "children": [
                            {
                              "value": "pattern_index == len(pattern)",
                              "children": [
                                {
                                  "value": "pattern_index",
                                  "children": []
                                },
                                {
                                  "value": "len(pattern)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(pattern)",
                                      "children": [
                                        {
                                          "value": "pattern",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "str_index == len(input_string)",
                              "children": [
                                {
                                  "value": "str_index",
                                  "children": []
                                },
                                {
                                  "value": "len(input_string)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(input_string)",
                                      "children": [
                                        {
                                          "value": "input_string",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return False",
                          "children": [
                            {
                              "value": "return False",
                              "children": [
                                {
                                  "value": "False",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "char = pattern[pattern_index]",
                      "children": [
                        {
                          "value": "char = pattern[pattern_index]",
                          "children": [
                            {
                              "value": "char",
                              "children": []
                            },
                            {
                              "value": "pattern[pattern_index]",
                              "children": [
                                {
                                  "value": "pattern",
                                  "children": []
                                },
                                {
                                  "value": "pattern_index",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if char in pattern_map:\n            mapped_str = pattern_map[char]\n            if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n            else:\n                return False",
                      "children": [
                        {
                          "value": "char in pattern_map",
                          "children": [
                            {
                              "value": "char",
                              "children": []
                            },
                            {
                              "value": "pattern_map",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "mapped_str = pattern_map[char]\n            if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n            else:\n                return False",
                          "children": [
                            {
                              "value": "mapped_str = pattern_map[char]",
                              "children": [
                                {
                                  "value": "mapped_str = pattern_map[char]",
                                  "children": [
                                    {
                                      "value": "mapped_str",
                                      "children": []
                                    },
                                    {
                                      "value": "pattern_map[char]",
                                      "children": [
                                        {
                                          "value": "pattern_map",
                                          "children": []
                                        },
                                        {
                                          "value": "char",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n            else:\n                return False",
                              "children": [
                                {
                                  "value": "input_string.startswith(mapped_str, str_index)",
                                  "children": [
                                    {
                                      "value": "input_string.startswith",
                                      "children": [
                                        {
                                          "value": "input_string",
                                          "children": []
                                        },
                                        {
                                          "value": "startswith",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(mapped_str, str_index)",
                                      "children": [
                                        {
                                          "value": "mapped_str",
                                          "children": []
                                        },
                                        {
                                          "value": "str_index",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return backtrack(pattern_index + 1, str_index + len(mapped_str))",
                                  "children": [
                                    {
                                      "value": "return backtrack(pattern_index + 1, str_index + len(mapped_str))",
                                      "children": [
                                        {
                                          "value": "backtrack(pattern_index + 1, str_index + len(mapped_str))",
                                          "children": [
                                            {
                                              "value": "backtrack",
                                              "children": []
                                            },
                                            {
                                              "value": "(pattern_index + 1, str_index + len(mapped_str))",
                                              "children": [
                                                {
                                                  "value": "pattern_index + 1",
                                                  "children": [
                                                    {
                                                      "value": "pattern_index",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "str_index + len(mapped_str)",
                                                  "children": [
                                                    {
                                                      "value": "str_index",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "len(mapped_str)",
                                                      "children": [
                                                        {
                                                          "value": "len",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(mapped_str)",
                                                          "children": [
                                                            {
                                                              "value": "mapped_str",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "else:\n                return False",
                                  "children": [
                                    {
                                      "value": "return False",
                                      "children": [
                                        {
                                          "value": "return False",
                                          "children": [
                                            {
                                              "value": "False",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for end in range(str_index + 1, len(input_string) + 1):\n            substr = input_string[str_index:end]\n            if substr in str_map:\n                continue\n            pattern_map[char] = substr\n            str_map[substr] = char\n            if backtrack(pattern_index + 1, end):\n                return True\n            del pattern_map[char]\n            del str_map[substr]",
                      "children": [
                        {
                          "value": "end",
                          "children": []
                        },
                        {
                          "value": "range(str_index + 1, len(input_string) + 1)",
                          "children": [
                            {
                              "value": "range",
                              "children": []
                            },
                            {
                              "value": "(str_index + 1, len(input_string) + 1)",
                              "children": [
                                {
                                  "value": "str_index + 1",
                                  "children": [
                                    {
                                      "value": "str_index",
                                      "children": []
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "len(input_string) + 1",
                                  "children": [
                                    {
                                      "value": "len(input_string)",
                                      "children": [
                                        {
                                          "value": "len",
                                          "children": []
                                        },
                                        {
                                          "value": "(input_string)",
                                          "children": [
                                            {
                                              "value": "input_string",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "substr = input_string[str_index:end]\n            if substr in str_map:\n                continue\n            pattern_map[char] = substr\n            str_map[substr] = char\n            if backtrack(pattern_index + 1, end):\n                return True\n            del pattern_map[char]\n            del str_map[substr]",
                          "children": [
                            {
                              "value": "substr = input_string[str_index:end]",
                              "children": [
                                {
                                  "value": "substr = input_string[str_index:end]",
                                  "children": [
                                    {
                                      "value": "substr",
                                      "children": []
                                    },
                                    {
                                      "value": "input_string[str_index:end]",
                                      "children": [
                                        {
                                          "value": "input_string",
                                          "children": []
                                        },
                                        {
                                          "value": "str_index:end",
                                          "children": [
                                            {
                                              "value": "str_index",
                                              "children": []
                                            },
                                            {
                                              "value": "end",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if substr in str_map:\n                continue",
                              "children": [
                                {
                                  "value": "substr in str_map",
                                  "children": [
                                    {
                                      "value": "substr",
                                      "children": []
                                    },
                                    {
                                      "value": "str_map",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "continue",
                                  "children": [
                                    {
                                      "value": "continue",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "pattern_map[char] = substr",
                              "children": [
                                {
                                  "value": "pattern_map[char] = substr",
                                  "children": [
                                    {
                                      "value": "pattern_map[char]",
                                      "children": [
                                        {
                                          "value": "pattern_map",
                                          "children": []
                                        },
                                        {
                                          "value": "char",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "substr",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "str_map[substr] = char",
                              "children": [
                                {
                                  "value": "str_map[substr] = char",
                                  "children": [
                                    {
                                      "value": "str_map[substr]",
                                      "children": [
                                        {
                                          "value": "str_map",
                                          "children": []
                                        },
                                        {
                                          "value": "substr",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "char",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if backtrack(pattern_index + 1, end):\n                return True",
                              "children": [
                                {
                                  "value": "backtrack(pattern_index + 1, end)",
                                  "children": [
                                    {
                                      "value": "backtrack",
                                      "children": []
                                    },
                                    {
                                      "value": "(pattern_index + 1, end)",
                                      "children": [
                                        {
                                          "value": "pattern_index + 1",
                                          "children": [
                                            {
                                              "value": "pattern_index",
                                              "children": []
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "end",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return True",
                                  "children": [
                                    {
                                      "value": "return True",
                                      "children": [
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "del pattern_map[char]",
                              "children": [
                                {
                                  "value": "pattern_map[char]",
                                  "children": [
                                    {
                                      "value": "pattern_map",
                                      "children": []
                                    },
                                    {
                                      "value": "char",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "del str_map[substr]",
                              "children": [
                                {
                                  "value": "str_map[substr]",
                                  "children": [
                                    {
                                      "value": "str_map",
                                      "children": []
                                    },
                                    {
                                      "value": "substr",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return False",
                      "children": [
                        {
                          "value": "False",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "pattern_map: dict[str, str] = {}",
              "children": [
                {
                  "value": "pattern_map: dict[str, str] = {}",
                  "children": [
                    {
                      "value": "pattern_map",
                      "children": []
                    },
                    {
                      "value": "dict[str, str]",
                      "children": [
                        {
                          "value": "dict[str, str]",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            },
                            {
                              "value": "[str, str]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "{}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "str_map: dict[str, str] = {}",
              "children": [
                {
                  "value": "str_map: dict[str, str] = {}",
                  "children": [
                    {
                      "value": "str_map",
                      "children": []
                    },
                    {
                      "value": "dict[str, str]",
                      "children": [
                        {
                          "value": "dict[str, str]",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            },
                            {
                              "value": "[str, str]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "{}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "return backtrack(0, 0)",
              "children": [
                {
                  "value": "backtrack(0, 0)",
                  "children": [
                    {
                      "value": "backtrack",
                      "children": []
                    },
                    {
                      "value": "(0, 0)",
                      "children": [
                        {
                          "value": "0",
                          "children": []
                        },
                        {
                          "value": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      "children": [
        {
          "value": "__name__ == \"__main__\"",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "\"__main__\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "import doctest\n\n    doctest.testmod()",
          "children": [
            {
              "value": "import doctest",
              "children": [
                {
                  "value": "doctest",
                  "children": [
                    {
                      "value": "doctest",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "doctest.testmod()",
              "children": [
                {
                  "value": "doctest.testmod()",
                  "children": [
                    {
                      "value": "doctest.testmod",
                      "children": [
                        {
                          "value": "doctest",
                          "children": []
                        },
                        {
                          "value": "testmod",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}