{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "from enum import Enum",
        "from typing import Any, Dict, Literal, Optional",
        "from pydantic import SecretStr",
        "from requests.exceptions import RequestException",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField",
        "from backend.integrations.providers import ProviderName",
        "from backend.util.request import requests",
        "TEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='ideogram', api_key=SecretStr('mock-ideogram-api-key'), title='Mock Ideogram API key', expires_at=None)",
        "TEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}",
        "class IdeogramModelName(str, Enum):\n    V2 = 'V_2'\n    V1 = 'V_1'\n    V1_TURBO = 'V_1_TURBO'\n    V2_TURBO = 'V_2_TURBO'",
        "V2 = 'V_2'",
        "V1 = 'V_1'",
        "V1_TURBO = 'V_1_TURBO'",
        "V2_TURBO = 'V_2_TURBO'",
        "class MagicPromptOption(str, Enum):\n    AUTO = 'AUTO'\n    ON = 'ON'\n    OFF = 'OFF'",
        "AUTO = 'AUTO'",
        "ON = 'ON'",
        "OFF = 'OFF'",
        "class StyleType(str, Enum):\n    AUTO = 'AUTO'\n    GENERAL = 'GENERAL'\n    REALISTIC = 'REALISTIC'\n    DESIGN = 'DESIGN'\n    RENDER_3D = 'RENDER_3D'\n    ANIME = 'ANIME'",
        "AUTO = 'AUTO'",
        "GENERAL = 'GENERAL'",
        "REALISTIC = 'REALISTIC'",
        "DESIGN = 'DESIGN'",
        "RENDER_3D = 'RENDER_3D'",
        "ANIME = 'ANIME'",
        "class ColorPalettePreset(str, Enum):\n    NONE = 'NONE'\n    EMBER = 'EMBER'\n    FRESH = 'FRESH'\n    JUNGLE = 'JUNGLE'\n    MAGIC = 'MAGIC'\n    MELON = 'MELON'\n    MOSAIC = 'MOSAIC'\n    PASTEL = 'PASTEL'\n    ULTRAMARINE = 'ULTRAMARINE'",
        "NONE = 'NONE'",
        "EMBER = 'EMBER'",
        "FRESH = 'FRESH'",
        "JUNGLE = 'JUNGLE'",
        "MAGIC = 'MAGIC'",
        "MELON = 'MELON'",
        "MOSAIC = 'MOSAIC'",
        "PASTEL = 'PASTEL'",
        "ULTRAMARINE = 'ULTRAMARINE'",
        "class AspectRatio(str, Enum):\n    ASPECT_10_16 = 'ASPECT_10_16'\n    ASPECT_16_10 = 'ASPECT_16_10'\n    ASPECT_9_16 = 'ASPECT_9_16'\n    ASPECT_16_9 = 'ASPECT_16_9'\n    ASPECT_3_2 = 'ASPECT_3_2'\n    ASPECT_2_3 = 'ASPECT_2_3'\n    ASPECT_4_3 = 'ASPECT_4_3'\n    ASPECT_3_4 = 'ASPECT_3_4'\n    ASPECT_1_1 = 'ASPECT_1_1'\n    ASPECT_1_3 = 'ASPECT_1_3'\n    ASPECT_3_1 = 'ASPECT_3_1'",
        "ASPECT_10_16 = 'ASPECT_10_16'",
        "ASPECT_16_10 = 'ASPECT_16_10'",
        "ASPECT_9_16 = 'ASPECT_9_16'",
        "ASPECT_16_9 = 'ASPECT_16_9'",
        "ASPECT_3_2 = 'ASPECT_3_2'",
        "ASPECT_2_3 = 'ASPECT_2_3'",
        "ASPECT_4_3 = 'ASPECT_4_3'",
        "ASPECT_3_4 = 'ASPECT_3_4'",
        "ASPECT_1_1 = 'ASPECT_1_1'",
        "ASPECT_1_3 = 'ASPECT_1_3'",
        "ASPECT_3_1 = 'ASPECT_3_1'",
        "class UpscaleOption(str, Enum):\n    AI_UPSCALE = 'AI Upscale'\n    NO_UPSCALE = 'No Upscale'",
        "AI_UPSCALE = 'AI Upscale'",
        "NO_UPSCALE = 'No Upscale'",
        "class IdeogramModelBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[Literal[ProviderName.IDEOGRAM], Literal['api_key']] = CredentialsField(description='The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n        prompt: str = SchemaField(description='Text prompt for image generation', placeholder=\"e.g., 'A futuristic cityscape at sunset'\", title='Prompt')\n        ideogram_model_name: IdeogramModelName = SchemaField(description='The name of the Image Generation Model, e.g., V_2', default=IdeogramModelName.V2, title='Image Generation Model', advanced=False)\n        aspect_ratio: AspectRatio = SchemaField(description='Aspect ratio for the generated image', default=AspectRatio.ASPECT_1_1, title='Aspect Ratio', advanced=False)\n        upscale: UpscaleOption = SchemaField(description='Upscale the generated image', default=UpscaleOption.NO_UPSCALE, title='Upscale Image', advanced=False)\n        magic_prompt_option: MagicPromptOption = SchemaField(description='Whether to use MagicPrompt for enhancing the request', default=MagicPromptOption.AUTO, title='Magic Prompt Option', advanced=True)\n        seed: Optional[int] = SchemaField(description='Random seed. Set for reproducible generation', default=None, title='Seed', advanced=True)\n        style_type: StyleType = SchemaField(description='Style type to apply, applicable for V_2 and above', default=StyleType.AUTO, title='Style Type', advanced=True)\n        negative_prompt: Optional[str] = SchemaField(description='Description of what to exclude from the image', default=None, title='Negative Prompt', advanced=True)\n        color_palette_name: ColorPalettePreset = SchemaField(description=\"Color palette preset name, choose 'None' to skip\", default=ColorPalettePreset.NONE, title='Color Palette Preset', advanced=True)\n\n    class Output(BlockSchema):\n        result: str = SchemaField(description='Generated image URL')\n        error: str = SchemaField(description='Error message if the model run failed')\n\n    def __init__(self):\n        super().__init__(id='6ab085e2-20b3-4055-bc3e-08036e01eca6', description='This block runs Ideogram models with both simple and advanced settings.', categories={BlockCategory.AI}, input_schema=IdeogramModelBlock.Input, output_schema=IdeogramModelBlock.Output, test_input={'ideogram_model_name': IdeogramModelName.V2, 'prompt': 'A futuristic cityscape at sunset', 'aspect_ratio': AspectRatio.ASPECT_1_1, 'upscale': UpscaleOption.NO_UPSCALE, 'magic_prompt_option': MagicPromptOption.AUTO, 'seed': None, 'style_type': StyleType.AUTO, 'negative_prompt': None, 'color_palette_name': ColorPalettePreset.NONE, 'credentials': TEST_CREDENTIALS_INPUT}, test_output=[('result', 'https://ideogram.ai/api/images/test-generated-image-url.png')], test_mock={'run_model': lambda api_key, model_name, prompt, seed, aspect_ratio, magic_prompt_option, style_type, negative_prompt, color_palette_name: 'https://ideogram.ai/api/images/test-generated-image-url.png', 'upscale_image': lambda api_key, image_url: 'https://ideogram.ai/api/images/test-upscaled-image-url.png'}, test_credentials=TEST_CREDENTIALS)\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        seed = input_data.seed\n        result = self.run_model(api_key=credentials.api_key, model_name=input_data.ideogram_model_name.value, prompt=input_data.prompt, seed=seed, aspect_ratio=input_data.aspect_ratio.value, magic_prompt_option=input_data.magic_prompt_option.value, style_type=input_data.style_type.value, negative_prompt=input_data.negative_prompt, color_palette_name=input_data.color_palette_name.value)\n        if input_data.upscale == UpscaleOption.AI_UPSCALE:\n            result = self.upscale_image(api_key=credentials.api_key, image_url=result)\n        yield ('result', result)\n\n    def run_model(self, api_key: SecretStr, model_name: str, prompt: str, seed: Optional[int], aspect_ratio: str, magic_prompt_option: str, style_type: str, negative_prompt: Optional[str], color_palette_name: str):\n        url = 'https://api.ideogram.ai/generate'\n        headers = {'Api-Key': api_key.get_secret_value(), 'Content-Type': 'application/json'}\n        data: Dict[str, Any] = {'image_request': {'prompt': prompt, 'model': model_name, 'aspect_ratio': aspect_ratio, 'magic_prompt_option': magic_prompt_option, 'style_type': style_type}}\n        if seed is not None:\n            data['image_request']['seed'] = seed\n        if negative_prompt:\n            data['image_request']['negative_prompt'] = negative_prompt\n        if color_palette_name != 'NONE':\n            data['image_request']['color_palette'] = {'name': color_palette_name}\n        try:\n            response = requests.post(url, json=data, headers=headers)\n            return response.json()['data'][0]['url']\n        except RequestException as e:\n            raise Exception(f'Failed to fetch image: {str(e)}')\n\n    def upscale_image(self, api_key: SecretStr, image_url: str):\n        url = 'https://api.ideogram.ai/upscale'\n        headers = {'Api-Key': api_key.get_secret_value()}\n        try:\n            image_response = requests.get(image_url)\n            files = {'image_file': ('image.png', image_response.content, 'image/png')}\n            response = requests.post(url, headers=headers, data={'image_request': '{}'}, files=files)\n            return response.json()['data'][0]['url']\n        except RequestException as e:\n            raise Exception(f'Failed to upscale image: {str(e)}')",
        "class Input(BlockSchema):\n    credentials: CredentialsMetaInput[Literal[ProviderName.IDEOGRAM], Literal['api_key']] = CredentialsField(description='The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n    prompt: str = SchemaField(description='Text prompt for image generation', placeholder=\"e.g., 'A futuristic cityscape at sunset'\", title='Prompt')\n    ideogram_model_name: IdeogramModelName = SchemaField(description='The name of the Image Generation Model, e.g., V_2', default=IdeogramModelName.V2, title='Image Generation Model', advanced=False)\n    aspect_ratio: AspectRatio = SchemaField(description='Aspect ratio for the generated image', default=AspectRatio.ASPECT_1_1, title='Aspect Ratio', advanced=False)\n    upscale: UpscaleOption = SchemaField(description='Upscale the generated image', default=UpscaleOption.NO_UPSCALE, title='Upscale Image', advanced=False)\n    magic_prompt_option: MagicPromptOption = SchemaField(description='Whether to use MagicPrompt for enhancing the request', default=MagicPromptOption.AUTO, title='Magic Prompt Option', advanced=True)\n    seed: Optional[int] = SchemaField(description='Random seed. Set for reproducible generation', default=None, title='Seed', advanced=True)\n    style_type: StyleType = SchemaField(description='Style type to apply, applicable for V_2 and above', default=StyleType.AUTO, title='Style Type', advanced=True)\n    negative_prompt: Optional[str] = SchemaField(description='Description of what to exclude from the image', default=None, title='Negative Prompt', advanced=True)\n    color_palette_name: ColorPalettePreset = SchemaField(description=\"Color palette preset name, choose 'None' to skip\", default=ColorPalettePreset.NONE, title='Color Palette Preset', advanced=True)",
        "credentials: CredentialsMetaInput[Literal[ProviderName.IDEOGRAM], Literal['api_key']] = CredentialsField(description='The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.')",
        "prompt: str = SchemaField(description='Text prompt for image generation', placeholder=\"e.g., 'A futuristic cityscape at sunset'\", title='Prompt')",
        "ideogram_model_name: IdeogramModelName = SchemaField(description='The name of the Image Generation Model, e.g., V_2', default=IdeogramModelName.V2, title='Image Generation Model', advanced=False)",
        "aspect_ratio: AspectRatio = SchemaField(description='Aspect ratio for the generated image', default=AspectRatio.ASPECT_1_1, title='Aspect Ratio', advanced=False)",
        "upscale: UpscaleOption = SchemaField(description='Upscale the generated image', default=UpscaleOption.NO_UPSCALE, title='Upscale Image', advanced=False)",
        "magic_prompt_option: MagicPromptOption = SchemaField(description='Whether to use MagicPrompt for enhancing the request', default=MagicPromptOption.AUTO, title='Magic Prompt Option', advanced=True)",
        "seed: Optional[int] = SchemaField(description='Random seed. Set for reproducible generation', default=None, title='Seed', advanced=True)",
        "style_type: StyleType = SchemaField(description='Style type to apply, applicable for V_2 and above', default=StyleType.AUTO, title='Style Type', advanced=True)",
        "negative_prompt: Optional[str] = SchemaField(description='Description of what to exclude from the image', default=None, title='Negative Prompt', advanced=True)",
        "color_palette_name: ColorPalettePreset = SchemaField(description=\"Color palette preset name, choose 'None' to skip\", default=ColorPalettePreset.NONE, title='Color Palette Preset', advanced=True)",
        "class Output(BlockSchema):\n    result: str = SchemaField(description='Generated image URL')\n    error: str = SchemaField(description='Error message if the model run failed')",
        "result: str = SchemaField(description='Generated image URL')",
        "error: str = SchemaField(description='Error message if the model run failed')",
        "def __init__(self):\n    super().__init__(id='6ab085e2-20b3-4055-bc3e-08036e01eca6', description='This block runs Ideogram models with both simple and advanced settings.', categories={BlockCategory.AI}, input_schema=IdeogramModelBlock.Input, output_schema=IdeogramModelBlock.Output, test_input={'ideogram_model_name': IdeogramModelName.V2, 'prompt': 'A futuristic cityscape at sunset', 'aspect_ratio': AspectRatio.ASPECT_1_1, 'upscale': UpscaleOption.NO_UPSCALE, 'magic_prompt_option': MagicPromptOption.AUTO, 'seed': None, 'style_type': StyleType.AUTO, 'negative_prompt': None, 'color_palette_name': ColorPalettePreset.NONE, 'credentials': TEST_CREDENTIALS_INPUT}, test_output=[('result', 'https://ideogram.ai/api/images/test-generated-image-url.png')], test_mock={'run_model': lambda api_key, model_name, prompt, seed, aspect_ratio, magic_prompt_option, style_type, negative_prompt, color_palette_name: 'https://ideogram.ai/api/images/test-generated-image-url.png', 'upscale_image': lambda api_key, image_url: 'https://ideogram.ai/api/images/test-upscaled-image-url.png'}, test_credentials=TEST_CREDENTIALS)",
        "super().__init__()",
        "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    seed = input_data.seed\n    result = self.run_model(api_key=credentials.api_key, model_name=input_data.ideogram_model_name.value, prompt=input_data.prompt, seed=seed, aspect_ratio=input_data.aspect_ratio.value, magic_prompt_option=input_data.magic_prompt_option.value, style_type=input_data.style_type.value, negative_prompt=input_data.negative_prompt, color_palette_name=input_data.color_palette_name.value)\n    if input_data.upscale == UpscaleOption.AI_UPSCALE:\n        result = self.upscale_image(api_key=credentials.api_key, image_url=result)\n    yield ('result', result)",
        "seed = input_data.seed",
        "result = self.run_model(api_key=credentials.api_key, model_name=input_data.ideogram_model_name.value, prompt=input_data.prompt, seed=seed, aspect_ratio=input_data.aspect_ratio.value, magic_prompt_option=input_data.magic_prompt_option.value, style_type=input_data.style_type.value, negative_prompt=input_data.negative_prompt, color_palette_name=input_data.color_palette_name.value)",
        "input_data.upscale Eq UpscaleOption.AI_UPSCALE"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "result = self.upscale_image(api_key=credentials.api_key, image_url=result)"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": []
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "(yield ('result', result))",
        "def run_model(self, api_key: SecretStr, model_name: str, prompt: str, seed: Optional[int], aspect_ratio: str, magic_prompt_option: str, style_type: str, negative_prompt: Optional[str], color_palette_name: str):\n    url = 'https://api.ideogram.ai/generate'\n    headers = {'Api-Key': api_key.get_secret_value(), 'Content-Type': 'application/json'}\n    data: Dict[str, Any] = {'image_request': {'prompt': prompt, 'model': model_name, 'aspect_ratio': aspect_ratio, 'magic_prompt_option': magic_prompt_option, 'style_type': style_type}}\n    if seed is not None:\n        data['image_request']['seed'] = seed\n    if negative_prompt:\n        data['image_request']['negative_prompt'] = negative_prompt\n    if color_palette_name != 'NONE':\n        data['image_request']['color_palette'] = {'name': color_palette_name}\n    try:\n        response = requests.post(url, json=data, headers=headers)\n        return response.json()['data'][0]['url']\n    except RequestException as e:\n        raise Exception(f'Failed to fetch image: {str(e)}')",
        "url = 'https://api.ideogram.ai/generate'",
        "headers = {'Api-Key': api_key.get_secret_value(), 'Content-Type': 'application/json'}",
        "data: Dict[str, Any] = {'image_request': {'prompt': prompt, 'model': model_name, 'aspect_ratio': aspect_ratio, 'magic_prompt_option': magic_prompt_option, 'style_type': style_type}}",
        "seed IsNot None"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "data['image_request']['seed'] = seed"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": []
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "negative_prompt"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "data['image_request']['negative_prompt'] = negative_prompt"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": []
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "color_palette_name NotEq 'NONE'"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "data['image_request']['color_palette'] = {'name': color_palette_name}"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": []
    },
    {
      "id": "13",
      "type": "block",
      "statements": [
        "try:\n    response = requests.post(url, json=data, headers=headers)\n    return response.json()['data'][0]['url']\nexcept RequestException as e:\n    raise Exception(f'Failed to fetch image: {str(e)}')",
        "response = requests.post(url, json=data, headers=headers)",
        "return response.json()['data'][0]['url']"
      ]
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "raise Exception(f'Failed to fetch image: {str(e)}')",
        "def upscale_image(self, api_key: SecretStr, image_url: str):\n    url = 'https://api.ideogram.ai/upscale'\n    headers = {'Api-Key': api_key.get_secret_value()}\n    try:\n        image_response = requests.get(image_url)\n        files = {'image_file': ('image.png', image_response.content, 'image/png')}\n        response = requests.post(url, headers=headers, data={'image_request': '{}'}, files=files)\n        return response.json()['data'][0]['url']\n    except RequestException as e:\n        raise Exception(f'Failed to upscale image: {str(e)}')",
        "url = 'https://api.ideogram.ai/upscale'",
        "headers = {'Api-Key': api_key.get_secret_value()}",
        "try:\n    image_response = requests.get(image_url)\n    files = {'image_file': ('image.png', image_response.content, 'image/png')}\n    response = requests.post(url, headers=headers, data={'image_request': '{}'}, files=files)\n    return response.json()['data'][0]['url']\nexcept RequestException as e:\n    raise Exception(f'Failed to upscale image: {str(e)}')",
        "image_response = requests.get(image_url)",
        "files = {'image_file': ('image.png', image_response.content, 'image/png')}",
        "response = requests.post(url, headers=headers, data={'image_request': '{}'}, files=files)",
        "return response.json()['data'][0]['url']"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "raise Exception(f'Failed to upscale image: {str(e)}')"
      ]
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "2",
      "target": "4",
      "type": "next"
    },
    {
      "source": "3",
      "target": "4",
      "type": "next"
    },
    {
      "source": "4",
      "target": "5",
      "type": "true"
    },
    {
      "source": "4",
      "target": "6",
      "type": "false"
    },
    {
      "source": "5",
      "target": "7",
      "type": "next"
    },
    {
      "source": "6",
      "target": "7",
      "type": "next"
    },
    {
      "source": "7",
      "target": "8",
      "type": "true"
    },
    {
      "source": "7",
      "target": "9",
      "type": "false"
    },
    {
      "source": "8",
      "target": "10",
      "type": "next"
    },
    {
      "source": "9",
      "target": "10",
      "type": "next"
    },
    {
      "source": "10",
      "target": "11",
      "type": "true"
    },
    {
      "source": "10",
      "target": "12",
      "type": "false"
    },
    {
      "source": "11",
      "target": "13",
      "type": "next"
    },
    {
      "source": "12",
      "target": "13",
      "type": "next"
    }
  ]
}