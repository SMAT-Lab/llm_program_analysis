{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "\"\"\"\nThe command line interface for the agent server\n\"\"\"\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import os\nimport pathlib\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "import click\nimport psutil\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from backend import app\nfrom backend.util.process import AppProcess\n"
        },
        {
            "id": "chunk_1_get_pid_path_1",
            "code": "def get_pid_path() -> pathlib.Path:\n    home_dir = pathlib.Path.home()\n    new_dir = home_dir / \".config\" / \"agpt\"\n    file_path = new_dir / \"running.tmp\"\n    return file_path\n"
        },
        {
            "id": "chunk_2_get_pid_1",
            "code": "def get_pid() -> int | None:\n    file_path = get_pid_path()\n"
        },
        {
            "id": "chunk_2_get_pid_2",
            "code": "    if not file_path.exists():\n        return None\n"
        },
        {
            "id": "chunk_2_get_pid_3",
            "code": "    os.makedirs(file_path.parent, exist_ok=True)\n"
        },
        {
            "id": "chunk_2_get_pid_4",
            "code": "    with open(file_path, \"r\", encoding=\"utf-8\") as file:\n        pid = file.read()\n"
        },
        {
            "id": "chunk_2_get_pid_5",
            "code": "    try:\n        return int(pid)\n"
        },
        {
            "id": "chunk_2_get_pid_6",
            "code": "    except ValueError:\n        return None\n"
        },
        {
            "id": "chunk_3_write_pid_1",
            "code": "def write_pid(pid: int):\n    file_path = get_pid_path()\n"
        },
        {
            "id": "chunk_3_write_pid_2",
            "code": "    os.makedirs(file_path.parent, exist_ok=True)\n"
        },
        {
            "id": "chunk_3_write_pid_3",
            "code": "    with open(file_path, \"w\", encoding=\"utf-8\") as file:\n        file.write(str(pid))\n"
        },
        {
            "id": "chunk_4_MainApp_1",
            "code": "class MainApp(AppProcess):\n"
        },
        {
            "id": "chunk_4_MainApp_2",
            "code": "    def run(self):\n        app.main(silent=True)\n"
        },
        {
            "id": "chunk_5_main_1",
            "code": "@click.group()\ndef main():\n    \"\"\"AutoGPT Server CLI Tool\"\"\"\n    pass\n"
        },
        {
            "id": "chunk_6_start_1",
            "code": "@main.command()\ndef start():\n"
        },
        {
            "id": "chunk_6_start_2",
            "code": "    \"\"\"\n    Starts the server in the background and saves the PID\n    \"\"\"\n"
        },
        {
            "id": "chunk_6_start_3",
            "code": "    # Define the path for the new directory and file\n    pid = get_pid()\n"
        },
        {
            "id": "chunk_6_start_4",
            "code": "    if pid and psutil.pid_exists(pid):\n        print(\"Server is already running\")\n        exit(1)\n"
        },
        {
            "id": "chunk_6_start_5",
            "code": "    elif pid:\n        print(\"PID does not exist deleting file\")\n        os.remove(get_pid_path())\n"
        },
        {
            "id": "chunk_6_start_6",
            "code": "    print(\"Starting server\")\n    pid = MainApp().start(background=True, silent=True)\n    print(f\"Server running in process: {pid}\")\n"
        },
        {
            "id": "chunk_6_start_7",
            "code": "    write_pid(pid)\n    print(\"done\")\n"
        },
        {
            "id": "chunk_6_start_8",
            "code": "    os._exit(status=0)\n"
        },
        {
            "id": "chunk_7_stop_1",
            "code": "@main.command()\ndef stop():\n"
        },
        {
            "id": "chunk_7_stop_2",
            "code": "    \"\"\"\n    Stops the server\n    \"\"\"\n"
        },
        {
            "id": "chunk_7_stop_3",
            "code": "    pid = get_pid()\n"
        },
        {
            "id": "chunk_7_stop_4",
            "code": "    if not pid:\n        print(\"Server is not running\")\n        return\n"
        },
        {
            "id": "chunk_7_stop_5",
            "code": "    os.remove(get_pid_path())\n"
        },
        {
            "id": "chunk_7_stop_6",
            "code": "    process = psutil.Process(int(pid))\n"
        },
        {
            "id": "chunk_7_stop_7",
            "code": "    for child in process.children(recursive=True):\n        child.terminate()\n"
        },
        {
            "id": "chunk_7_stop_8",
            "code": "    process.terminate()\n"
        },
        {
            "id": "chunk_7_stop_9",
            "code": "    print(\"Server Stopped\")\n"
        },
        {
            "id": "chunk_8_gen_encrypt_key_1",
            "code": "@main.command()\ndef gen_encrypt_key():\n"
        },
        {
            "id": "chunk_8_gen_encrypt_key_2",
            "code": "    \"\"\"\n    Generate a new encryption key\n    \"\"\"\n"
        },
        {
            "id": "chunk_8_gen_encrypt_key_3",
            "code": "    from cryptography.fernet import Fernet\n"
        },
        {
            "id": "chunk_8_gen_encrypt_key_4",
            "code": "    print(Fernet.generate_key().decode())\n"
        },
        {
            "id": "chunk_9_test_1",
            "code": "@click.group()\ndef test():\n"
        },
        {
            "id": "chunk_9_test_2",
            "code": "    \"\"\"\n    Group for test commands\n    \"\"\"\n    pass\n"
        },
        {
            "id": "chunk_10_reddit_1",
            "code": "@test.command()\n@click.argument(\"server_address\")\ndef reddit(server_address: str):\n"
        },
        {
            "id": "chunk_10_reddit_2",
            "code": "    \"\"\"\n    Create an event graph\n    \"\"\"\n"
        },
        {
            "id": "chunk_10_reddit_3",
            "code": "    import requests\n"
        },
        {
            "id": "chunk_10_reddit_4",
            "code": "    from backend.usecases.reddit_marketing import create_test_graph\n"
        },
        {
            "id": "chunk_10_reddit_5",
            "code": "    test_graph = create_test_graph()\n    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = test_graph.model_dump_json()\n"
        },
        {
            "id": "chunk_10_reddit_6",
            "code": "    response = requests.post(url, headers=headers, data=data)\n"
        },
        {
            "id": "chunk_10_reddit_7",
            "code": "    graph_id = response.json()[\"id\"]\n    print(f\"Graph created with ID: {graph_id}\")\n"
        },
        {
            "id": "chunk_11_populate_db_1",
            "code": "@test.command()\n@click.argument(\"server_address\")\ndef populate_db(server_address: str):\n"
        },
        {
            "id": "chunk_11_populate_db_2",
            "code": "    \"\"\"\n    Create an event graph\n    \"\"\"\n"
        },
        {
            "id": "chunk_11_populate_db_3",
            "code": "    import requests\n"
        },
        {
            "id": "chunk_11_populate_db_4",
            "code": "    from backend.usecases.sample import create_test_graph\n"
        },
        {
            "id": "chunk_11_populate_db_5",
            "code": "    test_graph = create_test_graph()\n    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = test_graph.model_dump_json()\n"
        },
        {
            "id": "chunk_11_populate_db_6",
            "code": "    response = requests.post(url, headers=headers, data=data)\n"
        },
        {
            "id": "chunk_11_populate_db_7",
            "code": "    graph_id = response.json()[\"id\"]\n"
        },
        {
            "id": "chunk_11_populate_db_8",
            "code": "    if response.status_code == 200:\n"
        },
        {
            "id": "chunk_11_populate_db_9",
            "code": "        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\n        text = \"Hello, World!\"\n        input_data = {\"input\": text}\n        response = requests.post(execute_url, headers=headers, json=input_data)\n"
        },
        {
            "id": "chunk_11_populate_db_10",
            "code": "        schedule_url = f\"{server_address}/graphs/{graph_id}/schedules\"\n        data = {\n            \"graph_id\": graph_id,\n            \"cron\": \"*/5 * * * *\",\n            \"input_data\": {\"input\": \"Hello, World!\"},\n        }\n        response = requests.post(schedule_url, headers=headers, json=data)\n"
        },
        {
            "id": "chunk_11_populate_db_11",
            "code": "    print(\"Database populated with: \\n- graph\\n- execution\\n- schedule\")\n"
        },
        {
            "id": "chunk_12_graph_1",
            "code": "@test.command()\n@click.argument(\"server_address\")\ndef graph(server_address: str):\n"
        },
        {
            "id": "chunk_12_graph_2",
            "code": "    \"\"\"\n    Create an event graph\n    \"\"\"\n"
        },
        {
            "id": "chunk_12_graph_3",
            "code": "    import requests\n"
        },
        {
            "id": "chunk_12_graph_4",
            "code": "    from backend.usecases.sample import create_test_graph\n"
        },
        {
            "id": "chunk_12_graph_5",
            "code": "    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = create_test_graph().model_dump_json()\n    response = requests.post(url, headers=headers, data=data)\n"
        },
        {
            "id": "chunk_12_graph_6",
            "code": "    if response.status_code == 200:\n        print(response.json()[\"id\"])\n        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\n        text = \"Hello, World!\"\n        input_data = {\"input\": text}\n        response = requests.post(execute_url, headers=headers, json=input_data)\n"
        },
        {
            "id": "chunk_12_graph_7",
            "code": "    else:\n        print(\"Failed to send graph\")\n        print(f\"Response: {response.text}\")\n"
        },
        {
            "id": "chunk_13_execute_1",
            "code": "@test.command()\n@click.argument(\"graph_id\")\n@click.argument(\"content\")\ndef execute(graph_id: str, content: dict):\n"
        },
        {
            "id": "chunk_13_execute_2",
            "code": "    \"\"\"\n    Create an event graph\n    \"\"\"\n"
        },
        {
            "id": "chunk_13_execute_3",
            "code": "    import requests\n"
        },
        {
            "id": "chunk_13_execute_4",
            "code": "    headers = {\"Content-Type\": \"application/json\"}\n"
        },
        {
            "id": "chunk_13_execute_5",
            "code": "    execute_url = f\"http://0.0.0.0:8000/graphs/{graph_id}/execute\"\n    requests.post(execute_url, headers=headers, json=content)\n"
        },
        {
            "id": "chunk_14_event_1",
            "code": "@test.command()\ndef event():\n"
        },
        {
            "id": "chunk_14_event_2",
            "code": "    \"\"\"\n    Send an event to the running server\n    \"\"\"\n"
        },
        {
            "id": "chunk_14_event_3",
            "code": "    print(\"Event sent\")\n"
        },
        {
            "id": "chunk_15_websocket_1",
            "code": "@test.command()\n@click.argument(\"server_address\")\n@click.argument(\"graph_id\")\ndef websocket(server_address: str, graph_id: str):\n"
        },
        {
            "id": "chunk_15_websocket_2",
            "code": "    \"\"\"\n    Tests the websocket connection.\n    \"\"\"\n"
        },
        {
            "id": "chunk_15_websocket_3",
            "code": "    import asyncio\n"
        },
        {
            "id": "chunk_15_websocket_4",
            "code": "    import websockets.asyncio.client\n"
        },
        {
            "id": "chunk_15_websocket_5",
            "code": "    from backend.server.ws_api import ExecutionSubscription, Methods, WsMessage\n"
        },
        {
            "id": "chunk_15_websocket_6",
            "code": "    async def send_message(server_address: str):\n        uri = f\"ws://{server_address}\"\n"
        },
        {
            "id": "chunk_15_websocket_7",
            "code": "        async with websockets.asyncio.client.connect(uri) as websocket:\n            try:\n"
        },
        {
            "id": "chunk_15_websocket_8",
            "code": "                msg = WsMessage(\n                    method=Methods.SUBSCRIBE,\n                    data=ExecutionSubscription(graph_id=graph_id).model_dump(),\n                ).model_dump_json()\n                await websocket.send(msg)\n"
        },
        {
            "id": "chunk_15_websocket_9",
            "code": "                print(f\"Sending: {msg}\")\n"
        },
        {
            "id": "chunk_15_websocket_10",
            "code": "                while True:\n                    response = await websocket.recv()\n                    print(f\"Response from server: {response}\")\n"
        },
        {
            "id": "chunk_15_websocket_11",
            "code": "            except InterruptedError:\n                exit(0)\n"
        },
        {
            "id": "chunk_15_websocket_12",
            "code": "    asyncio.run(send_message(server_address))\n"
        },
        {
            "id": "chunk_15_websocket_13",
            "code": "    print(\"Testing WS\")\n"
        },
        {
            "id": "chunk_16_GlobalBlock_1",
            "code": "main.add_command(test)\n"
        },
        {
            "id": "chunk_16_GlobalBlock_2",
            "code": "if __name__ == \"__main__\":\n    main()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_2_get_pid_1",
            "to": "chunk_2_get_pid_2"
        },
        {
            "from": "chunk_2_get_pid_2",
            "to": "chunk_2_get_pid_3"
        },
        {
            "from": "chunk_2_get_pid_2",
            "to": "chunk_2_get_pid_6"
        },
        {
            "from": "chunk_2_get_pid_3",
            "to": "chunk_2_get_pid_4"
        },
        {
            "from": "chunk_2_get_pid_4",
            "to": "chunk_2_get_pid_5"
        },
        {
            "from": "chunk_2_get_pid_5",
            "to": "chunk_2_get_pid_6"
        },
        {
            "from": "chunk_3_write_pid_1",
            "to": "chunk_3_write_pid_2"
        },
        {
            "from": "chunk_3_write_pid_2",
            "to": "chunk_3_write_pid_3"
        },
        {
            "from": "chunk_6_start_1",
            "to": "chunk_6_start_2"
        },
        {
            "from": "chunk_6_start_2",
            "to": "chunk_6_start_3"
        },
        {
            "from": "chunk_6_start_3",
            "to": "chunk_6_start_4"
        },
        {
            "from": "chunk_6_start_4",
            "to": "chunk_6_start_5"
        },
        {
            "from": "chunk_6_start_4",
            "to": "chunk_6_start_6"
        },
        {
            "from": "chunk_6_start_5",
            "to": "chunk_6_start_6"
        },
        {
            "from": "chunk_6_start_6",
            "to": "chunk_6_start_7"
        },
        {
            "from": "chunk_6_start_7",
            "to": "chunk_6_start_8"
        },
        {
            "from": "chunk_7_stop_1",
            "to": "chunk_7_stop_2"
        },
        {
            "from": "chunk_7_stop_2",
            "to": "chunk_7_stop_3"
        },
        {
            "from": "chunk_7_stop_3",
            "to": "chunk_7_stop_4"
        },
        {
            "from": "chunk_7_stop_4",
            "to": "chunk_7_stop_5"
        },
        {
            "from": "chunk_7_stop_4",
            "to": "chunk_7_stop_9"
        },
        {
            "from": "chunk_7_stop_5",
            "to": "chunk_7_stop_6"
        },
        {
            "from": "chunk_7_stop_6",
            "to": "chunk_7_stop_7"
        },
        {
            "from": "chunk_7_stop_7",
            "to": "chunk_7_stop_8"
        },
        {
            "from": "chunk_7_stop_8",
            "to": "chunk_7_stop_9"
        },
        {
            "from": "chunk_8_gen_encrypt_key_1",
            "to": "chunk_8_gen_encrypt_key_2"
        },
        {
            "from": "chunk_8_gen_encrypt_key_2",
            "to": "chunk_8_gen_encrypt_key_3"
        },
        {
            "from": "chunk_8_gen_encrypt_key_3",
            "to": "chunk_8_gen_encrypt_key_4"
        },
        {
            "from": "chunk_9_test_1",
            "to": "chunk_9_test_2"
        },
        {
            "from": "chunk_10_reddit_1",
            "to": "chunk_10_reddit_2"
        },
        {
            "from": "chunk_10_reddit_2",
            "to": "chunk_10_reddit_3"
        },
        {
            "from": "chunk_10_reddit_3",
            "to": "chunk_10_reddit_4"
        },
        {
            "from": "chunk_10_reddit_4",
            "to": "chunk_10_reddit_5"
        },
        {
            "from": "chunk_10_reddit_5",
            "to": "chunk_10_reddit_6"
        },
        {
            "from": "chunk_10_reddit_6",
            "to": "chunk_10_reddit_7"
        },
        {
            "from": "chunk_11_populate_db_1",
            "to": "chunk_11_populate_db_2"
        },
        {
            "from": "chunk_11_populate_db_2",
            "to": "chunk_11_populate_db_3"
        },
        {
            "from": "chunk_11_populate_db_3",
            "to": "chunk_11_populate_db_4"
        },
        {
            "from": "chunk_11_populate_db_4",
            "to": "chunk_11_populate_db_5"
        },
        {
            "from": "chunk_11_populate_db_5",
            "to": "chunk_11_populate_db_6"
        },
        {
            "from": "chunk_11_populate_db_6",
            "to": "chunk_11_populate_db_7"
        },
        {
            "from": "chunk_11_populate_db_7",
            "to": "chunk_11_populate_db_8"
        },
        {
            "from": "chunk_11_populate_db_8",
            "to": "chunk_11_populate_db_9"
        },
        {
            "from": "chunk_11_populate_db_8",
            "to": "chunk_11_populate_db_11"
        },
        {
            "from": "chunk_11_populate_db_9",
            "to": "chunk_11_populate_db_10"
        },
        {
            "from": "chunk_11_populate_db_10",
            "to": "chunk_11_populate_db_11"
        },
        {
            "from": "chunk_12_graph_1",
            "to": "chunk_12_graph_2"
        },
        {
            "from": "chunk_12_graph_2",
            "to": "chunk_12_graph_3"
        },
        {
            "from": "chunk_12_graph_3",
            "to": "chunk_12_graph_4"
        },
        {
            "from": "chunk_12_graph_4",
            "to": "chunk_12_graph_5"
        },
        {
            "from": "chunk_12_graph_5",
            "to": "chunk_12_graph_6"
        },
        {
            "from": "chunk_12_graph_5",
            "to": "chunk_12_graph_7"
        },
        {
            "from": "chunk_13_execute_1",
            "to": "chunk_13_execute_2"
        },
        {
            "from": "chunk_13_execute_2",
            "to": "chunk_13_execute_3"
        },
        {
            "from": "chunk_13_execute_3",
            "to": "chunk_13_execute_4"
        },
        {
            "from": "chunk_13_execute_4",
            "to": "chunk_13_execute_5"
        },
        {
            "from": "chunk_14_event_1",
            "to": "chunk_14_event_2"
        },
        {
            "from": "chunk_14_event_2",
            "to": "chunk_14_event_3"
        },
        {
            "from": "chunk_15_websocket_1",
            "to": "chunk_15_websocket_2"
        },
        {
            "from": "chunk_15_websocket_2",
            "to": "chunk_15_websocket_3"
        },
        {
            "from": "chunk_15_websocket_3",
            "to": "chunk_15_websocket_4"
        },
        {
            "from": "chunk_15_websocket_4",
            "to": "chunk_15_websocket_5"
        },
        {
            "from": "chunk_15_websocket_5",
            "to": "chunk_15_websocket_6"
        },
        {
            "from": "chunk_15_websocket_6",
            "to": "chunk_15_websocket_7"
        },
        {
            "from": "chunk_15_websocket_7",
            "to": "chunk_15_websocket_8"
        },
        {
            "from": "chunk_15_websocket_8",
            "to": "chunk_15_websocket_9"
        },
        {
            "from": "chunk_15_websocket_9",
            "to": "chunk_15_websocket_10"
        },
        {
            "from": "chunk_15_websocket_10",
            "to": "chunk_15_websocket_10"
        },
        {
            "from": "chunk_15_websocket_10",
            "to": "chunk_15_websocket_11"
        },
        {
            "from": "chunk_15_websocket_12",
            "to": "chunk_15_websocket_13"
        }
    ]
}