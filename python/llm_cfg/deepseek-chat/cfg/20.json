{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "\"\"\"\nCalculates the sum of two non-negative integers using bitwise operators\nWikipedia explanation: https://en.wikipedia.org/wiki/Binary_number\n\"\"\"\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_bitwise_addition_recursive_1",
            "code": "def bitwise_addition_recursive(number: int, other_number: int) -> int:\n    \"\"\"\n    >>> bitwise_addition_recursive(4, 5)\n    9\n    >>> bitwise_addition_recursive(8, 9)\n    17\n    >>> bitwise_addition_recursive(0, 4)\n    4\n    >>> bitwise_addition_recursive(4.5, 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4.5', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive(-1, 9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    >>> bitwise_addition_recursive(1, -9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_bitwise_addition_recursive_2",
            "code": "    if not isinstance(number, int) or not isinstance(other_number, int):\n        raise TypeError(\"Both arguments MUST be integers!\")\n"
        },
        {
            "id": "chunk_1_bitwise_addition_recursive_3",
            "code": "    if number < 0 or other_number < 0:\n        raise ValueError(\"Both arguments MUST be non-negative!\")\n"
        },
        {
            "id": "chunk_1_bitwise_addition_recursive_4",
            "code": "    bitwise_sum = number ^ other_number\n    carry = number & other_number\n"
        },
        {
            "id": "chunk_1_bitwise_addition_recursive_5",
            "code": "    if carry == 0:\n        return bitwise_sum\n"
        },
        {
            "id": "chunk_1_bitwise_addition_recursive_6",
            "code": "    return bitwise_addition_recursive(bitwise_sum, carry << 1)\n"
        },
        {
            "id": "chunk_2_GlobalBlock_1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_2_GlobalBlock_2",
            "code": "    import doctest\n\n    doctest.testmod()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_bitwise_addition_recursive_1",
            "to": "chunk_1_bitwise_addition_recursive_2"
        },
        {
            "from": "chunk_1_bitwise_addition_recursive_2",
            "to": "chunk_1_bitwise_addition_recursive_3"
        },
        {
            "from": "chunk_1_bitwise_addition_recursive_3",
            "to": "chunk_1_bitwise_addition_recursive_4"
        },
        {
            "from": "chunk_1_bitwise_addition_recursive_4",
            "to": "chunk_1_bitwise_addition_recursive_5"
        },
        {
            "from": "chunk_1_bitwise_addition_recursive_4",
            "to": "chunk_1_bitwise_addition_recursive_6"
        },
        {
            "from": "chunk_2_GlobalBlock_1",
            "to": "chunk_2_GlobalBlock_2"
        }
    ]
}