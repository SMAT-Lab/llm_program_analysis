{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from urllib.parse import quote\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import requests\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        },
        {
            "id": "chunk_1_FactCheckerBlock_1",
            "code": "class FactCheckerBlock(Block):\n    class Input(BlockSchema):\n        statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n\n"
        },
        {
            "id": "chunk_1_FactCheckerBlock_2",
            "code": "    class Output(BlockSchema):\n        factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )\n        result: bool = SchemaField(description=\"The result of the factuality check\")\n        reason: str = SchemaField(description=\"The reason for the factuality result\")\n        error: str = SchemaField(description=\"Error message if the check fails\")\n\n"
        },
        {
            "id": "chunk_1_FactCheckerBlock_3",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )\n"
        },
        {
            "id": "chunk_1_FactCheckerBlock_4",
            "code": "    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_1_FactCheckerBlock_5",
            "code": "        encoded_statement = quote(input_data.statement)\n        url = f\"https://g.jina.ai/{encoded_statement}\"\n"
        },
        {
            "id": "chunk_1_FactCheckerBlock_6",
            "code": "        headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n"
        },
        {
            "id": "chunk_1_FactCheckerBlock_7",
            "code": "        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n"
        },
        {
            "id": "chunk_1_FactCheckerBlock_8",
            "code": "        if \"data\" in data:\n            data = data[\"data\"]\n            yield \"factuality\", data[\"factuality\"]\n            yield \"result\", data[\"result\"]\n            yield \"reason\", data[\"reason\"]\n"
        },
        {
            "id": "chunk_1_FactCheckerBlock_9",
            "code": "            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")\n"
        },
        {
            "id": "chunk_2_FactCheckerBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n\n"
        },
        {
            "id": "chunk_3_FactCheckerBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )\n        result: bool = SchemaField(description=\"The result of the factuality check\")\n        reason: str = SchemaField(description=\"The reason for the factuality result\")\n        error: str = SchemaField(description=\"Error message if the check fails\")\n"
        },
        {
            "id": "chunk_4_FactCheckerBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )\n"
        },
        {
            "id": "chunk_5_FactCheckerBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_5_FactCheckerBlock.run_2",
            "code": "        encoded_statement = quote(input_data.statement)\n        url = f\"https://g.jina.ai/{encoded_statement}\"\n"
        },
        {
            "id": "chunk_5_FactCheckerBlock.run_3",
            "code": "        headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n"
        },
        {
            "id": "chunk_5_FactCheckerBlock.run_4",
            "code": "        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n"
        },
        {
            "id": "chunk_5_FactCheckerBlock.run_5",
            "code": "        if \"data\" in data:\n            data = data[\"data\"]\n            yield \"factuality\", data[\"factuality\"]\n            yield \"result\", data[\"result\"]\n            yield \"reason\", data[\"reason\"]\n"
        },
        {
            "id": "chunk_5_FactCheckerBlock.run_6",
            "code": "        else:\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_FactCheckerBlock_1",
            "to": "chunk_1_FactCheckerBlock_2"
        },
        {
            "from": "chunk_1_FactCheckerBlock_2",
            "to": "chunk_1_FactCheckerBlock_3"
        },
        {
            "from": "chunk_1_FactCheckerBlock_3",
            "to": "chunk_1_FactCheckerBlock_4"
        },
        {
            "from": "chunk_1_FactCheckerBlock_4",
            "to": "chunk_1_FactCheckerBlock_5"
        },
        {
            "from": "chunk_1_FactCheckerBlock_5",
            "to": "chunk_1_FactCheckerBlock_6"
        },
        {
            "from": "chunk_1_FactCheckerBlock_6",
            "to": "chunk_1_FactCheckerBlock_7"
        },
        {
            "from": "chunk_1_FactCheckerBlock_7",
            "to": "chunk_1_FactCheckerBlock_8"
        },
        {
            "from": "chunk_1_FactCheckerBlock_7",
            "to": "chunk_1_FactCheckerBlock_9"
        },
        {
            "from": "chunk_5_FactCheckerBlock.run_1",
            "to": "chunk_5_FactCheckerBlock.run_2"
        },
        {
            "from": "chunk_5_FactCheckerBlock.run_2",
            "to": "chunk_5_FactCheckerBlock.run_3"
        },
        {
            "from": "chunk_5_FactCheckerBlock.run_3",
            "to": "chunk_5_FactCheckerBlock.run_4"
        },
        {
            "from": "chunk_5_FactCheckerBlock.run_4",
            "to": "chunk_5_FactCheckerBlock.run_5"
        },
        {
            "from": "chunk_5_FactCheckerBlock.run_4",
            "to": "chunk_5_FactCheckerBlock.run_6"
        }
    ]
}