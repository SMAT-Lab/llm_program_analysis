{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from typing import List\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from ._api import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    Filament,\n    Slant3DCredentialsField,\n    Slant3DCredentialsInput,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from .base import Slant3DBlockBase\n"
        },
        {
            "id": "chunk_1_Slant3DFilamentBlock_1",
            "code": "class Slant3DFilamentBlock(Slant3DBlockBase):\n    \"\"\"Block for retrieving available filaments\"\"\"\n\n"
        },
        {
            "id": "chunk_1_Slant3DFilamentBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n\n"
        },
        {
            "id": "chunk_1_Slant3DFilamentBlock_3",
            "code": "    class Output(BlockSchema):\n        filaments: List[Filament] = SchemaField(\n            description=\"List of available filaments\"\n        )\n        error: str = SchemaField(description=\"Error message if request failed\")\n\n"
        },
        {
            "id": "chunk_1_Slant3DFilamentBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"7cc416f4-f305-4606-9b3b-452b8a81031c\",\n            description=\"Get list of available filaments\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\"credentials\": TEST_CREDENTIALS_INPUT},\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"filaments\",\n                    [\n                        {\n                            \"filament\": \"PLA BLACK\",\n                            \"hexColor\": \"000000\",\n                            \"colorTag\": \"black\",\n                            \"profile\": \"PLA\",\n                        },\n                        {\n                            \"filament\": \"PLA WHITE\",\n                            \"hexColor\": \"ffffff\",\n                            \"colorTag\": \"white\",\n                            \"profile\": \"PLA\",\n                        },\n                    ],\n                )\n            ],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"filaments\": [\n                        {\n                            \"filament\": \"PLA BLACK\",\n                            \"hexColor\": \"000000\",\n                            \"colorTag\": \"black\",\n                            \"profile\": \"PLA\",\n                        },\n                        {\n                            \"filament\": \"PLA WHITE\",\n                            \"hexColor\": \"ffffff\",\n                            \"colorTag\": \"white\",\n                            \"profile\": \"PLA\",\n                        },\n                    ]\n                }\n            },\n        )\n\n"
        },
        {
            "id": "chunk_1_Slant3DFilamentBlock_5",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_1_Slant3DFilamentBlock_6",
            "code": "        try:\n            result = self._make_request(\n                \"GET\", \"filament\", credentials.api_key.get_secret_value()\n            )\n            yield \"filaments\", result[\"filaments\"]\n"
        },
        {
            "id": "chunk_1_Slant3DFilamentBlock_7",
            "code": "        except Exception as e:\n            yield \"error\", str(e)\n            raise\n"
        },
        {
            "id": "chunk_2_Slant3DFilamentBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n"
        },
        {
            "id": "chunk_3_Slant3DFilamentBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        filaments: List[Filament] = SchemaField(\n            description=\"List of available filaments\"\n        )\n        error: str = SchemaField(description=\"Error message if request failed\")\n"
        },
        {
            "id": "chunk_4_Slant3DFilamentBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"7cc416f4-f305-4606-9b3b-452b8a81031c\",\n            description=\"Get list of available filaments\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\"credentials\": TEST_CREDENTIALS_INPUT},\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"filaments\",\n                    [\n                        {\n                            \"filament\": \"PLA BLACK\",\n                            \"hexColor\": \"000000\",\n                            \"colorTag\": \"black\",\n                            \"profile\": \"PLA\",\n                        },\n                        {\n                            \"filament\": \"PLA WHITE\",\n                            \"hexColor\": \"ffffff\",\n                            \"colorTag\": \"white\",\n                            \"profile\": \"PLA\",\n                        },\n                    ],\n                )\n            ],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"filaments\": [\n                        {\n                            \"filament\": \"PLA BLACK\",\n                            \"hexColor\": \"000000\",\n                            \"colorTag\": \"black\",\n                            \"profile\": \"PLA\",\n                        },\n                        {\n                            \"filament\": \"PLA WHITE\",\n                            \"hexColor\": \"ffffff\",\n                            \"colorTag\": \"white\",\n                            \"profile\": \"PLA\",\n                        },\n                    ]\n                }\n            },\n        )\n"
        },
        {
            "id": "chunk_5_Slant3DFilamentBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_5_Slant3DFilamentBlock.run_2",
            "code": "        try:\n            result = self._make_request(\n                \"GET\", \"filament\", credentials.api_key.get_secret_value()\n            )\n            yield \"filaments\", result[\"filaments\"]\n"
        },
        {
            "id": "chunk_5_Slant3DFilamentBlock.run_3",
            "code": "        except Exception as e:\n            yield \"error\", str(e)\n            raise\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_Slant3DFilamentBlock_1",
            "to": "chunk_1_Slant3DFilamentBlock_2"
        },
        {
            "from": "chunk_1_Slant3DFilamentBlock_2",
            "to": "chunk_1_Slant3DFilamentBlock_3"
        },
        {
            "from": "chunk_1_Slant3DFilamentBlock_3",
            "to": "chunk_1_Slant3DFilamentBlock_4"
        },
        {
            "from": "chunk_1_Slant3DFilamentBlock_4",
            "to": "chunk_1_Slant3DFilamentBlock_5"
        },
        {
            "from": "chunk_1_Slant3DFilamentBlock_5",
            "to": "chunk_1_Slant3DFilamentBlock_6"
        },
        {
            "from": "chunk_1_Slant3DFilamentBlock_6",
            "to": "chunk_1_Slant3DFilamentBlock_7"
        },
        {
            "from": "chunk_5_Slant3DFilamentBlock.run_1",
            "to": "chunk_5_Slant3DFilamentBlock.run_2"
        },
        {
            "from": "chunk_5_Slant3DFilamentBlock.run_2",
            "to": "chunk_5_Slant3DFilamentBlock.run_3"
        }
    ]
}