{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import json\nimport os\nfrom enum import Enum\nfrom typing import Any, Dict, Generic, List, Set, Tuple, Type, TypeVar\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from pydantic import BaseModel, Field, PrivateAttr, ValidationInfo, field_validator\nfrom pydantic_settings import (\n    BaseSettings,\n    JsonConfigSettingsSource,\n    PydanticBaseSettingsSource,\n    SettingsConfigDict,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.util.data import get_data_path\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "T = TypeVar(\"T\", bound=BaseSettings)\n"
        },
        {
            "id": "chunk_1_AppEnvironment_1",
            "code": "class AppEnvironment(str, Enum):\n    LOCAL = \"local\"\n    DEVELOPMENT = \"dev\"\n    PRODUCTION = \"prod\"\n"
        },
        {
            "id": "chunk_2_BehaveAs_1",
            "code": "class BehaveAs(str, Enum):\n    LOCAL = \"local\"\n    CLOUD = \"cloud\"\n"
        },
        {
            "id": "chunk_3_UpdateTrackingModel_1",
            "code": "class UpdateTrackingModel(BaseModel, Generic[T]):\n    _updated_fields: Set[str] = PrivateAttr(default_factory=set)\n"
        },
        {
            "id": "chunk_3_UpdateTrackingModel_2",
            "code": "    def __setattr__(self, name: str, value) -> None:\n        if name in self.model_fields:\n            self._updated_fields.add(name)\n        super().__setattr__(name, value)\n"
        },
        {
            "id": "chunk_3_UpdateTrackingModel_3",
            "code": "    def mark_updated(self, field_name: str) -> None:\n        if field_name in self.model_fields:\n            self._updated_fields.add(field_name)\n"
        },
        {
            "id": "chunk_3_UpdateTrackingModel_4",
            "code": "    def clear_updates(self) -> None:\n        self._updated_fields.clear()\n"
        },
        {
            "id": "chunk_3_UpdateTrackingModel_5",
            "code": "    def get_updates(self) -> Dict[str, Any]:\n        return {field: getattr(self, field) for field in self._updated_fields}\n"
        },
        {
            "id": "chunk_3_UpdateTrackingModel_6",
            "code": "    @property\n    def updated_fields(self):\n        return self._updated_fields\n"
        },
        {
            "id": "chunk_4___setattr___1",
            "code": "    def __setattr__(self, name: str, value) -> None:\n"
        },
        {
            "id": "chunk_4___setattr___2",
            "code": "        if name in self.model_fields:\n            self._updated_fields.add(name)\n"
        },
        {
            "id": "chunk_4___setattr___3",
            "code": "        super().__setattr__(name, value)\n"
        },
        {
            "id": "chunk_5_mark_updated_1",
            "code": "    def mark_updated(self, field_name: str) -> None:\n"
        },
        {
            "id": "chunk_5_mark_updated_2",
            "code": "        if field_name in self.model_fields:\n            self._updated_fields.add(field_name)\n"
        },
        {
            "id": "chunk_6_clear_updates_1",
            "code": "    def clear_updates(self) -> None:\n        self._updated_fields.clear()\n"
        },
        {
            "id": "chunk_7_get_updates_1",
            "code": "    def get_updates(self) -> Dict[str, Any]:\n        return {field: getattr(self, field) for field in self._updated_fields}\n"
        },
        {
            "id": "chunk_8_updated_fields_1",
            "code": "    def updated_fields(self):\n        return self._updated_fields\n"
        },
        {
            "id": "chunk_9_Config_1",
            "code": "class Config(UpdateTrackingModel[\"Config\"], BaseSettings):\n    \"\"\"Config for the server.\"\"\"\n\n"
        },
        {
            "id": "chunk_9_Config_2",
            "code": "    num_graph_workers: int = Field(\n        default=10,\n        ge=1,\n        le=1000,\n        description=\"Maximum number of workers to use for graph execution.\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_3",
            "code": "    num_node_workers: int = Field(\n        default=5,\n        ge=1,\n        le=1000,\n        description=\"Maximum number of workers to use for node execution within a single graph.\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_4",
            "code": "    pyro_host: str = Field(\n        default=\"localhost\",\n        description=\"The default hostname of the Pyro server.\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_5",
            "code": "    pyro_client_comm_timeout: float = Field(\n        default=15,\n        description=\"The default timeout in seconds, for Pyro client connections.\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_6",
            "code": "    pyro_client_comm_retry: int = Field(\n        default=3,\n        description=\"The default number of retries for Pyro client connections.\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_7",
            "code": "    enable_auth: bool = Field(\n        default=True,\n        description=\"If authentication is enabled or not\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_8",
            "code": "    enable_credit: str = Field(\n        default=\"false\",\n        description=\"If user credit system is enabled or not\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_9",
            "code": "    num_user_credits_refill: int = Field(\n        default=1500,\n        description=\"Number of credits to refill for each user\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_10",
            "code": "    # Add more configuration fields as needed\n"
        },
        {
            "id": "chunk_9_Config_11",
            "code": "    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        extra=\"allow\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_12",
            "code": "    websocket_server_host: str = Field(\n        default=\"0.0.0.0\",\n        description=\"The host for the websocket server to run on\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_13",
            "code": "    websocket_server_port: int = Field(\n        default=8001,\n        description=\"The port for the websocket server to run on\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_14",
            "code": "    execution_manager_port: int = Field(\n        default=8002,\n        description=\"The port for execution manager daemon to run on\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_15",
            "code": "    execution_scheduler_port: int = Field(\n        default=8003,\n        description=\"The port for execution scheduler daemon to run on\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_16",
            "code": "    agent_server_port: int = Field(\n        default=8004,\n        description=\"The port for agent server daemon to run on\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_17",
            "code": "    database_api_port: int = Field(\n        default=8005,\n        description=\"The port for database server API to run on\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_18",
            "code": "    agent_api_host: str = Field(\n        default=\"0.0.0.0\",\n        description=\"The host for agent server API to run on\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_19",
            "code": "    agent_api_port: int = Field(\n        default=8006,\n        description=\"The port for agent server API to run on\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_20",
            "code": "    platform_base_url: str = Field(\n        default=\"\",\n        description=\"Must be set so the application knows where it's hosted at. \"\n        \"This is necessary to make sure webhooks find their way.\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_21",
            "code": "    frontend_base_url: str = Field(\n        default=\"\",\n        description=\"Can be used to explicitly set the base URL for the frontend. \"\n        \"This value is then used to generate redirect URLs for OAuth flows.\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_22",
            "code": "    media_gcs_bucket_name: str = Field(\n        default=\"\",\n        description=\"The name of the Google Cloud Storage bucket for media files\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_23",
            "code": "    @field_validator(\"platform_base_url\", \"frontend_base_url\")\n    @classmethod\n    def validate_platform_base_url(cls, v: str, info: ValidationInfo) -> str:\n        if not v:\n            return v\n        if not v.startswith((\"http://\", \"https://\")):\n            raise ValueError(\n                f\"{info.field_name} must be a full URL \"\n                \"including a http:// or https:// schema\"\n            )\n        if v.endswith(\"/\"):\n            return v.rstrip(\"/\")  # Remove trailing slash\n        return v\n"
        },
        {
            "id": "chunk_9_Config_24",
            "code": "    app_env: AppEnvironment = Field(\n        default=AppEnvironment.LOCAL,\n        description=\"The name of the app environment: local or dev or prod\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_25",
            "code": "    behave_as: BehaveAs = Field(\n        default=BehaveAs.LOCAL,\n        description=\"What environment to behave as: local or cloud\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_26",
            "code": "    execution_event_bus_name: str = Field(\n        default=\"execution_event\",\n        description=\"Name of the event bus\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_27",
            "code": "    trust_endpoints_for_requests: List[str] = Field(\n        default_factory=list,\n        description=\"A whitelist of trusted internal endpoints for the backend to make requests to.\",\n    )\n"
        },
        {
            "id": "chunk_9_Config_28",
            "code": "    backend_cors_allow_origins: List[str] = Field(default_factory=list)\n"
        },
        {
            "id": "chunk_9_Config_29",
            "code": "    @field_validator(\"backend_cors_allow_origins\")\n    @classmethod\n    def validate_cors_allow_origins(cls, v: List[str]) -> List[str]:\n        out = []\n        port = None\n        has_localhost = False\n        has_127_0_0_1 = False\n        for url in v:\n            url = url.strip()\n            if url.startswith((\"http://\", \"https://\")):\n                if \"localhost\" in url:\n                    port = url.split(\":\")[2]\n                    has_localhost = True\n                if \"127.0.0.1\" in url:\n                    port = url.split(\":\")[2]\n                    has_127_0_0_1 = True\n                out.append(url)\n            else:\n                raise ValueError(f\"Invalid URL: {url}\")\n\n        if has_127_0_0_1 and not has_localhost:\n            out.append(f\"http://localhost:{port}\")\n        if has_localhost and not has_127_0_0_1:\n            out.append(f\"http://127.0.0.1:{port}\")\n\n        return out\n"
        },
        {
            "id": "chunk_9_Config_30",
            "code": "    @classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: Type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            env_settings,\n            file_secret_settings,\n            dotenv_settings,\n            JsonConfigSettingsSource(settings_cls),\n            init_settings,\n        )\n"
        },
        {
            "id": "chunk_9_Config_31",
            "code": "class Secrets(UpdateTrackingModel[\"Secrets\"], BaseSettings):\n    \"\"\"Secrets for the server.\"\"\"\n\n"
        },
        {
            "id": "chunk_9_Config_32",
            "code": "    supabase_url: str = Field(default=\"\", description=\"Supabase URL\")\n"
        },
        {
            "id": "chunk_9_Config_33",
            "code": "    supabase_service_role_key: str = Field(\n        default=\"\", description=\"Supabase service role key\"\n    )\n"
        },
        {
            "id": "chunk_9_Config_34",
            "code": "    encryption_key: str = Field(default=\"\", description=\"Encryption key\")\n"
        },
        {
            "id": "chunk_9_Config_35",
            "code": "    # OAuth server credentials for integrations\n    # --8<-- [start:OAuthServerCredentialsExample]\n"
        },
        {
            "id": "chunk_9_Config_36",
            "code": "    github_client_id: str = Field(default=\"\", description=\"GitHub OAuth client ID\")\n    github_client_secret: str = Field(\n        default=\"\", description=\"GitHub OAuth client secret\"\n    )\n"
        },
        {
            "id": "chunk_9_Config_37",
            "code": "    google_client_id: str = Field(default=\"\", description=\"Google OAuth client ID\")\n    google_client_secret: str = Field(\n        default=\"\", description=\"Google OAuth client secret\"\n    )\n"
        },
        {
            "id": "chunk_9_Config_38",
            "code": "    notion_client_id: str = Field(default=\"\", description=\"Notion OAuth client ID\")\n    notion_client_secret: str = Field(\n        default=\"\", description=\"Notion OAuth client secret\"\n    )\n"
        },
        {
            "id": "chunk_9_Config_39",
            "code": "    openai_api_key: str = Field(default=\"\", description=\"OpenAI API key\")\n    anthropic_api_key: str = Field(default=\"\", description=\"Anthropic API key\")\n    groq_api_key: str = Field(default=\"\", description=\"Groq API key\")\n    open_router_api_key: str = Field(default=\"\", description=\"Open Router API Key\")\n"
        },
        {
            "id": "chunk_9_Config_40",
            "code": "    reddit_client_id: str = Field(default=\"\", description=\"Reddit client ID\")\n    reddit_client_secret: str = Field(default=\"\", description=\"Reddit client secret\")\n    reddit_username: str = Field(default=\"\", description=\"Reddit username\")\n    reddit_password: str = Field(default=\"\", description=\"Reddit password\")\n"
        },
        {
            "id": "chunk_9_Config_41",
            "code": "    openweathermap_api_key: str = Field(\n        default=\"\", description=\"OpenWeatherMap API key\"\n    )\n"
        },
        {
            "id": "chunk_9_Config_42",
            "code": "    medium_api_key: str = Field(default=\"\", description=\"Medium API key\")\n    medium_author_id: str = Field(default=\"\", description=\"Medium author ID\")\n    did_api_key: str = Field(default=\"\", description=\"D-ID API Key\")\n"
        },
        {
            "id": "chunk_9_Config_43",
            "code": "    discord_bot_token: str = Field(default=\"\", description=\"Discord bot token\")\n"
        },
        {
            "id": "chunk_9_Config_44",
            "code": "    smtp_server: str = Field(default=\"\", description=\"SMTP server IP\")\n    smtp_port: str = Field(default=\"\", description=\"SMTP server port\")\n    smtp_username: str = Field(default=\"\", description=\"SMTP username\")\n    smtp_password: str = Field(default=\"\", description=\"SMTP password\")\n"
        },
        {
            "id": "chunk_9_Config_45",
            "code": "    sentry_dsn: str = Field(default=\"\", description=\"Sentry DSN\")\n"
        },
        {
            "id": "chunk_9_Config_46",
            "code": "    google_maps_api_key: str = Field(default=\"\", description=\"Google Maps API Key\")\n"
        },
        {
            "id": "chunk_9_Config_47",
            "code": "    replicate_api_key: str = Field(default=\"\", description=\"Replicate API Key\")\n    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")\n    ideogram_api_key: str = Field(default=\"\", description=\"Ideogram API Key\")\n    jina_api_key: str = Field(default=\"\", description=\"Jina API Key\")\n    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")\n"
        },
        {
            "id": "chunk_9_Config_48",
            "code": "    fal_key: str = Field(default=\"\", description=\"FAL API key\")\n"
        },
        {
            "id": "chunk_9_Config_49",
            "code": "    # Add more secret fields as needed\n"
        },
        {
            "id": "chunk_9_Config_50",
            "code": "    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"allow\",\n    )\n"
        },
        {
            "id": "chunk_10_validate_platform_base_url_1",
            "code": "    def validate_platform_base_url(cls, v: str, info: ValidationInfo) -> str:\n        if not v:\n"
        },
        {
            "id": "chunk_10_validate_platform_base_url_2",
            "code": "        if not v:\n            return v\n"
        },
        {
            "id": "chunk_10_validate_platform_base_url_3",
            "code": "        if not v.startswith((\"http://\", \"https://\")):\n            raise ValueError(\n                f\"{info.field_name} must be a full URL \"\n                \"including a http:// or https:// schema\"\n            )\n"
        },
        {
            "id": "chunk_10_validate_platform_base_url_4",
            "code": "        if v.endswith(\"/\"):\n            return v.rstrip(\"/\")  # Remove trailing slash\n"
        },
        {
            "id": "chunk_10_validate_platform_base_url_5",
            "code": "        return v\n"
        },
        {
            "id": "chunk_11_validate_cors_allow_origins_1",
            "code": "    def validate_cors_allow_origins(cls, v: List[str]) -> List[str]:\n        out = []\n        port = None\n        has_localhost = False\n        has_127_0_0_1 = False\n"
        },
        {
            "id": "chunk_11_validate_cors_allow_origins_2",
            "code": "        for url in v:\n            url = url.strip()\n"
        },
        {
            "id": "chunk_11_validate_cors_allow_origins_3",
            "code": "            if url.startswith((\"http://\", \"https://\")):\n                if \"localhost\" in url:\n"
        },
        {
            "id": "chunk_11_validate_cors_allow_origins_4",
            "code": "                    port = url.split(\":\")[2]\n                    has_localhost = True\n"
        },
        {
            "id": "chunk_11_validate_cors_allow_origins_5",
            "code": "                if \"127.0.0.1\" in url:\n                    port = url.split(\":\")[2]\n"
        },
        {
            "id": "chunk_11_validate_cors_allow_origins_6",
            "code": "                    has_127_0_0_1 = True\n                out.append(url)\n"
        },
        {
            "id": "chunk_11_validate_cors_allow_origins_7",
            "code": "            else:\n                raise ValueError(f\"Invalid URL: {url}\")\n"
        },
        {
            "id": "chunk_11_validate_cors_allow_origins_8",
            "code": "        if has_127_0_0_1 and not has_localhost:\n            out.append(f\"http://localhost:{port}\")\n"
        },
        {
            "id": "chunk_11_validate_cors_allow_origins_9",
            "code": "        if has_localhost and not has_127_0_0_1:\n            out.append(f\"http://127.0.0.1:{port}\")\n"
        },
        {
            "id": "chunk_11_validate_cors_allow_origins_10",
            "code": "        return out\n"
        },
        {
            "id": "chunk_12_settings_customise_sources_1",
            "code": "    def settings_customise_sources(\n        cls,\n        settings_cls: Type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:\n"
        },
        {
            "id": "chunk_12_settings_customise_sources_2",
            "code": "        return (\n            env_settings,\n            file_secret_settings,\n            dotenv_settings,\n            JsonConfigSettingsSource(settings_cls),\n            init_settings,\n        )\n"
        },
        {
            "id": "chunk_13_Secrets_1",
            "code": "class Secrets(UpdateTrackingModel[\"Secrets\"], BaseSettings):\n    \"\"\"Secrets for the server.\"\"\"\n\n"
        },
        {
            "id": "chunk_13_Secrets_2",
            "code": "    supabase_url: str = Field(default=\"\", description=\"Supabase URL\")\n    supabase_service_role_key: str = Field(\n        default=\"\", description=\"Supabase service role key\"\n    )\n"
        },
        {
            "id": "chunk_13_Secrets_3",
            "code": "    encryption_key: str = Field(default=\"\", description=\"Encryption key\")\n"
        },
        {
            "id": "chunk_13_Secrets_4",
            "code": "    # OAuth server credentials for integrations\n    # --8<-- [start:OAuthServerCredentialsExample]\n"
        },
        {
            "id": "chunk_13_Secrets_5",
            "code": "    github_client_id: str = Field(default=\"\", description=\"GitHub OAuth client ID\")\n    github_client_secret: str = Field(\n        default=\"\", description=\"GitHub OAuth client secret\"\n    )\n"
        },
        {
            "id": "chunk_13_Secrets_6",
            "code": "    # --8<-- [end:OAuthServerCredentialsExample]\n"
        },
        {
            "id": "chunk_13_Secrets_7",
            "code": "    google_client_id: str = Field(default=\"\", description=\"Google OAuth client ID\")\n    google_client_secret: str = Field(\n        default=\"\", description=\"Google OAuth client secret\"\n    )\n"
        },
        {
            "id": "chunk_13_Secrets_8",
            "code": "    notion_client_id: str = Field(default=\"\", description=\"Notion OAuth client ID\")\n    notion_client_secret: str = Field(\n        default=\"\", description=\"Notion OAuth client secret\"\n    )\n"
        },
        {
            "id": "chunk_13_Secrets_9",
            "code": "\n"
        },
        {
            "id": "chunk_13_Secrets_10",
            "code": "    openai_api_key: str = Field(default=\"\", description=\"OpenAI API key\")\n    anthropic_api_key: str = Field(default=\"\", description=\"Anthropic API key\")\n    groq_api_key: str = Field(default=\"\", description=\"Groq API key\")\n    open_router_api_key: str = Field(default=\"\", description=\"Open Router API Key\")\n"
        },
        {
            "id": "chunk_13_Secrets_11",
            "code": "\n"
        },
        {
            "id": "chunk_13_Secrets_12",
            "code": "    reddit_client_id: str = Field(default=\"\", description=\"Reddit client ID\")\n    reddit_client_secret: str = Field(default=\"\", description=\"Reddit client secret\")\n    reddit_username: str = Field(default=\"\", description=\"Reddit username\")\n    reddit_password: str = Field(default=\"\", description=\"Reddit password\")\n"
        },
        {
            "id": "chunk_13_Secrets_13",
            "code": "\n"
        },
        {
            "id": "chunk_13_Secrets_14",
            "code": "    openweathermap_api_key: str = Field(\n        default=\"\", description=\"OpenWeatherMap API key\"\n    )\n"
        },
        {
            "id": "chunk_13_Secrets_15",
            "code": "\n"
        },
        {
            "id": "chunk_13_Secrets_16",
            "code": "    medium_api_key: str = Field(default=\"\", description=\"Medium API key\")\n    medium_author_id: str = Field(default=\"\", description=\"Medium author ID\")\n    did_api_key: str = Field(default=\"\", description=\"D-ID API Key\")\n    revid_api_key: str = Field(default=\"\", description=\"revid.ai API key\")\n    discord_bot_token: str = Field(default=\"\", description=\"Discord bot token\")\n"
        },
        {
            "id": "chunk_13_Secrets_17",
            "code": "\n"
        },
        {
            "id": "chunk_13_Secrets_18",
            "code": "    smtp_server: str = Field(default=\"\", description=\"SMTP server IP\")\n    smtp_port: str = Field(default=\"\", description=\"SMTP server port\")\n    smtp_username: str = Field(default=\"\", description=\"SMTP username\")\n    smtp_password: str = Field(default=\"\", description=\"SMTP password\")\n"
        },
        {
            "id": "chunk_13_Secrets_19",
            "code": "\n"
        },
        {
            "id": "chunk_13_Secrets_20",
            "code": "    sentry_dsn: str = Field(default=\"\", description=\"Sentry DSN\")\n\n"
        },
        {
            "id": "chunk_13_Secrets_21",
            "code": "    google_maps_api_key: str = Field(default=\"\", description=\"Google Maps API Key\")\n\n"
        },
        {
            "id": "chunk_13_Secrets_22",
            "code": "    replicate_api_key: str = Field(default=\"\", description=\"Replicate API Key\")\n    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")\n    ideogram_api_key: str = Field(default=\"\", description=\"Ideogram API Key\")\n    jina_api_key: str = Field(default=\"\", description=\"Jina API Key\")\n    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")\n"
        },
        {
            "id": "chunk_13_Secrets_23",
            "code": "\n"
        },
        {
            "id": "chunk_13_Secrets_24",
            "code": "    fal_key: str = Field(default=\"\", description=\"FAL API key\")\n\n"
        },
        {
            "id": "chunk_13_Secrets_25",
            "code": "    # Add more secret fields as needed\n\n"
        },
        {
            "id": "chunk_13_Secrets_26",
            "code": "    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"allow\",\n    )\n"
        },
        {
            "id": "chunk_13_Secrets_27",
            "code": "\n"
        },
        {
            "id": "chunk_14_Settings_1",
            "code": "class Settings(BaseModel):\n    config: Config = Config()\n    secrets: Secrets = Secrets()\n\n"
        },
        {
            "id": "chunk_14_Settings_2",
            "code": "    def save(self) -> None:\n        # Save updated config to JSON file\n"
        },
        {
            "id": "chunk_14_Settings_3",
            "code": "        if self.config.updated_fields:\n"
        },
        {
            "id": "chunk_14_Settings_4",
            "code": "            config_to_save = self.config.get_updates()\n            config_path = os.path.join(get_data_path(), \"config.json\")\n"
        },
        {
            "id": "chunk_14_Settings_5",
            "code": "            if os.path.exists(config_path):\n"
        },
        {
            "id": "chunk_14_Settings_6",
            "code": "                with open(config_path, \"r+\") as f:\n                    existing_config: Dict[str, Any] = json.load(f)\n                    existing_config.update(config_to_save)\n                    f.seek(0)\n                    json.dump(existing_config, f, indent=2)\n                    f.truncate()\n"
        },
        {
            "id": "chunk_14_Settings_7",
            "code": "            else:\n"
        },
        {
            "id": "chunk_14_Settings_8",
            "code": "                with open(config_path, \"w\") as f:\n                    json.dump(config_to_save, f, indent=2)\n"
        },
        {
            "id": "chunk_14_Settings_9",
            "code": "            self.config.clear_updates()\n"
        },
        {
            "id": "chunk_15_save_1",
            "code": "    def save(self) -> None:\n        # Save updated config to JSON file\n"
        },
        {
            "id": "chunk_15_save_2",
            "code": "        if self.config.updated_fields:\n"
        },
        {
            "id": "chunk_15_save_3",
            "code": "            config_to_save = self.config.get_updates()\n            config_path = os.path.join(get_data_path(), \"config.json\")\n"
        },
        {
            "id": "chunk_15_save_4",
            "code": "            if os.path.exists(config_path):\n"
        },
        {
            "id": "chunk_15_save_5",
            "code": "                with open(config_path, \"r+\") as f:\n                    existing_config: Dict[str, Any] = json.load(f)\n                    existing_config.update(config_to_save)\n                    f.seek(0)\n                    json.dump(existing_config, f, indent=2)\n                    f.truncate()\n"
        },
        {
            "id": "chunk_15_save_6",
            "code": "            else:\n"
        },
        {
            "id": "chunk_15_save_7",
            "code": "                with open(config_path, \"w\") as f:\n                    json.dump(config_to_save, f, indent=2)\n"
        },
        {
            "id": "chunk_15_save_8",
            "code": "            self.config.clear_updates()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_4___setattr___1",
            "to": "chunk_4___setattr___2"
        },
        {
            "from": "chunk_4___setattr___2",
            "to": "chunk_4___setattr___3"
        },
        {
            "from": "chunk_5_mark_updated_1",
            "to": "chunk_5_mark_updated_2"
        },
        {
            "from": "chunk_9_Config_1",
            "to": "chunk_9_Config_2"
        },
        {
            "from": "chunk_9_Config_2",
            "to": "chunk_9_Config_3"
        },
        {
            "from": "chunk_9_Config_3",
            "to": "chunk_9_Config_4"
        },
        {
            "from": "chunk_9_Config_4",
            "to": "chunk_9_Config_5"
        },
        {
            "from": "chunk_9_Config_5",
            "to": "chunk_9_Config_6"
        },
        {
            "from": "chunk_9_Config_6",
            "to": "chunk_9_Config_7"
        },
        {
            "from": "chunk_9_Config_7",
            "to": "chunk_9_Config_8"
        },
        {
            "from": "chunk_9_Config_8",
            "to": "chunk_9_Config_9"
        },
        {
            "from": "chunk_9_Config_9",
            "to": "chunk_9_Config_10"
        },
        {
            "from": "chunk_9_Config_10",
            "to": "chunk_9_Config_11"
        },
        {
            "from": "chunk_9_Config_11",
            "to": "chunk_9_Config_12"
        },
        {
            "from": "chunk_9_Config_12",
            "to": "chunk_9_Config_13"
        },
        {
            "from": "chunk_9_Config_13",
            "to": "chunk_9_Config_14"
        },
        {
            "from": "chunk_9_Config_14",
            "to": "chunk_9_Config_15"
        },
        {
            "from": "chunk_9_Config_15",
            "to": "chunk_9_Config_16"
        },
        {
            "from": "chunk_9_Config_16",
            "to": "chunk_9_Config_17"
        },
        {
            "from": "chunk_9_Config_17",
            "to": "chunk_9_Config_18"
        },
        {
            "from": "chunk_9_Config_18",
            "to": "chunk_9_Config_19"
        },
        {
            "from": "chunk_9_Config_19",
            "to": "chunk_9_Config_20"
        },
        {
            "from": "chunk_9_Config_20",
            "to": "chunk_9_Config_21"
        },
        {
            "from": "chunk_9_Config_21",
            "to": "chunk_9_Config_22"
        },
        {
            "from": "chunk_9_Config_22",
            "to": "chunk_9_Config_23"
        },
        {
            "from": "chunk_9_Config_23",
            "to": "chunk_9_Config_24"
        },
        {
            "from": "chunk_9_Config_24",
            "to": "chunk_9_Config_25"
        },
        {
            "from": "chunk_9_Config_25",
            "to": "chunk_9_Config_26"
        },
        {
            "from": "chunk_9_Config_26",
            "to": "chunk_9_Config_27"
        },
        {
            "from": "chunk_9_Config_27",
            "to": "chunk_9_Config_28"
        },
        {
            "from": "chunk_9_Config_28",
            "to": "chunk_9_Config_29"
        },
        {
            "from": "chunk_9_Config_29",
            "to": "chunk_9_Config_30"
        },
        {
            "from": "chunk_9_Config_31",
            "to": "chunk_9_Config_32"
        },
        {
            "from": "chunk_9_Config_32",
            "to": "chunk_9_Config_33"
        },
        {
            "from": "chunk_9_Config_33",
            "to": "chunk_9_Config_34"
        },
        {
            "from": "chunk_9_Config_34",
            "to": "chunk_9_Config_35"
        },
        {
            "from": "chunk_9_Config_35",
            "to": "chunk_9_Config_36"
        },
        {
            "from": "chunk_9_Config_36",
            "to": "chunk_9_Config_37"
        },
        {
            "from": "chunk_9_Config_37",
            "to": "chunk_9_Config_38"
        },
        {
            "from": "chunk_9_Config_38",
            "to": "chunk_9_Config_39"
        },
        {
            "from": "chunk_9_Config_39",
            "to": "chunk_9_Config_40"
        },
        {
            "from": "chunk_9_Config_40",
            "to": "chunk_9_Config_41"
        },
        {
            "from": "chunk_9_Config_41",
            "to": "chunk_9_Config_42"
        },
        {
            "from": "chunk_9_Config_42",
            "to": "chunk_9_Config_43"
        },
        {
            "from": "chunk_9_Config_43",
            "to": "chunk_9_Config_44"
        },
        {
            "from": "chunk_9_Config_44",
            "to": "chunk_9_Config_45"
        },
        {
            "from": "chunk_9_Config_45",
            "to": "chunk_9_Config_46"
        },
        {
            "from": "chunk_9_Config_46",
            "to": "chunk_9_Config_47"
        },
        {
            "from": "chunk_9_Config_47",
            "to": "chunk_9_Config_48"
        },
        {
            "from": "chunk_9_Config_48",
            "to": "chunk_9_Config_49"
        },
        {
            "from": "chunk_9_Config_49",
            "to": "chunk_9_Config_50"
        },
        {
            "from": "chunk_10_validate_platform_base_url_1",
            "to": "chunk_10_validate_platform_base_url_2"
        },
        {
            "from": "chunk_10_validate_platform_base_url_1",
            "to": "chunk_10_validate_platform_base_url_3"
        },
        {
            "from": "chunk_10_validate_platform_base_url_2",
            "to": "chunk_10_validate_platform_base_url_5"
        },
        {
            "from": "chunk_10_validate_platform_base_url_3",
            "to": "chunk_10_validate_platform_base_url_4"
        },
        {
            "from": "chunk_10_validate_platform_base_url_3",
            "to": "chunk_10_validate_platform_base_url_5"
        },
        {
            "from": "chunk_10_validate_platform_base_url_4",
            "to": "chunk_10_validate_platform_base_url_5"
        },
        {
            "from": "chunk_11_validate_cors_allow_origins_1",
            "to": "chunk_11_validate_cors_allow_origins_2"
        },
        {
            "from": "chunk_11_validate_cors_allow_origins_2",
            "to": "chunk_11_validate_cors_allow_origins_3"
        },
        {
            "from": "chunk_11_validate_cors_allow_origins_2",
            "to": "chunk_11_validate_cors_allow_origins_7"
        },
        {
            "from": "chunk_11_validate_cors_allow_origins_3",
            "to": "chunk_11_validate_cors_allow_origins_4"
        },
        {
            "from": "chunk_11_validate_cors_allow_origins_3",
            "to": "chunk_11_validate_cors_allow_origins_5"
        },
        {
            "from": "chunk_11_validate_cors_allow_origins_4",
            "to": "chunk_11_validate_cors_allow_origins_6"
        },
        {
            "from": "chunk_11_validate_cors_allow_origins_5",
            "to": "chunk_11_validate_cors_allow_origins_6"
        },
        {
            "from": "chunk_11_validate_cors_allow_origins_6",
            "to": "chunk_11_validate_cors_allow_origins_2"
        },
        {
            "from": "chunk_11_validate_cors_allow_origins_7",
            "to": "chunk_11_validate_cors_allow_origins_8"
        },
        {
            "from": "chunk_11_validate_cors_allow_origins_7",
            "to": "chunk_11_validate_cors_allow_origins_9"
        },
        {
            "from": "chunk_11_validate_cors_allow_origins_8",
            "to": "chunk_11_validate_cors_allow_origins_10"
        },
        {
            "from": "chunk_11_validate_cors_allow_origins_9",
            "to": "chunk_11_validate_cors_allow_origins_10"
        },
        {
            "from": "chunk_12_settings_customise_sources_1",
            "to": "chunk_12_settings_customise_sources_2"
        },
        {
            "from": "chunk_13_Secrets_1",
            "to": "chunk_13_Secrets_2"
        },
        {
            "from": "chunk_13_Secrets_2",
            "to": "chunk_13_Secrets_3"
        },
        {
            "from": "chunk_13_Secrets_3",
            "to": "chunk_13_Secrets_4"
        },
        {
            "from": "chunk_13_Secrets_4",
            "to": "chunk_13_Secrets_5"
        },
        {
            "from": "chunk_13_Secrets_5",
            "to": "chunk_13_Secrets_6"
        },
        {
            "from": "chunk_13_Secrets_6",
            "to": "chunk_13_Secrets_7"
        },
        {
            "from": "chunk_13_Secrets_7",
            "to": "chunk_13_Secrets_8"
        },
        {
            "from": "chunk_13_Secrets_8",
            "to": "chunk_13_Secrets_9"
        },
        {
            "from": "chunk_13_Secrets_9",
            "to": "chunk_13_Secrets_10"
        },
        {
            "from": "chunk_13_Secrets_10",
            "to": "chunk_13_Secrets_11"
        },
        {
            "from": "chunk_13_Secrets_11",
            "to": "chunk_13_Secrets_12"
        },
        {
            "from": "chunk_13_Secrets_12",
            "to": "chunk_13_Secrets_13"
        },
        {
            "from": "chunk_13_Secrets_13",
            "to": "chunk_13_Secrets_14"
        },
        {
            "from": "chunk_13_Secrets_14",
            "to": "chunk_13_Secrets_15"
        },
        {
            "from": "chunk_13_Secrets_15",
            "to": "chunk_13_Secrets_16"
        },
        {
            "from": "chunk_13_Secrets_16",
            "to": "chunk_13_Secrets_17"
        },
        {
            "from": "chunk_13_Secrets_17",
            "to": "chunk_13_Secrets_18"
        },
        {
            "from": "chunk_13_Secrets_18",
            "to": "chunk_13_Secrets_19"
        },
        {
            "from": "chunk_13_Secrets_19",
            "to": "chunk_13_Secrets_20"
        },
        {
            "from": "chunk_13_Secrets_20",
            "to": "chunk_13_Secrets_21"
        },
        {
            "from": "chunk_13_Secrets_21",
            "to": "chunk_13_Secrets_22"
        },
        {
            "from": "chunk_13_Secrets_22",
            "to": "chunk_13_Secrets_23"
        },
        {
            "from": "chunk_13_Secrets_23",
            "to": "chunk_13_Secrets_24"
        },
        {
            "from": "chunk_13_Secrets_24",
            "to": "chunk_13_Secrets_25"
        },
        {
            "from": "chunk_13_Secrets_25",
            "to": "chunk_13_Secrets_26"
        },
        {
            "from": "chunk_13_Secrets_26",
            "to": "chunk_13_Secrets_27"
        },
        {
            "from": "chunk_14_Settings_2",
            "to": "chunk_14_Settings_3"
        },
        {
            "from": "chunk_14_Settings_3",
            "to": "chunk_14_Settings_4"
        },
        {
            "from": "chunk_14_Settings_3",
            "to": "chunk_14_Settings_9"
        },
        {
            "from": "chunk_14_Settings_4",
            "to": "chunk_14_Settings_5"
        },
        {
            "from": "chunk_14_Settings_5",
            "to": "chunk_14_Settings_6"
        },
        {
            "from": "chunk_14_Settings_5",
            "to": "chunk_14_Settings_7"
        },
        {
            "from": "chunk_14_Settings_6",
            "to": "chunk_14_Settings_9"
        },
        {
            "from": "chunk_14_Settings_7",
            "to": "chunk_14_Settings_8"
        },
        {
            "from": "chunk_14_Settings_8",
            "to": "chunk_14_Settings_9"
        },
        {
            "from": "chunk_15_save_1",
            "to": "chunk_15_save_2"
        },
        {
            "from": "chunk_15_save_2",
            "to": "chunk_15_save_3"
        },
        {
            "from": "chunk_15_save_2",
            "to": "chunk_15_save_8"
        },
        {
            "from": "chunk_15_save_3",
            "to": "chunk_15_save_4"
        },
        {
            "from": "chunk_15_save_4",
            "to": "chunk_15_save_5"
        },
        {
            "from": "chunk_15_save_4",
            "to": "chunk_15_save_6"
        },
        {
            "from": "chunk_15_save_5",
            "to": "chunk_15_save_8"
        },
        {
            "from": "chunk_15_save_6",
            "to": "chunk_15_save_7"
        },
        {
            "from": "chunk_15_save_7",
            "to": "chunk_15_save_8"
        }
    ]
}