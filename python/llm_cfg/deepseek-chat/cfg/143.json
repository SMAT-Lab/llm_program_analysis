{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import contextlib\nimport logging\nimport typing\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import fastapi\nimport fastapi.responses\nimport starlette.middleware.cors\nimport uvicorn\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from autogpt_libs.feature_flag.client import (\n    initialize_launchdarkly,\n    shutdown_launchdarkly,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "import backend.data.block\nimport backend.data.db\nimport backend.data.graph\nimport backend.data.user\nimport backend.server.routers.v1\nimport backend.server.v2.library.routes\nimport backend.server.v2.store.routes\nimport backend.util.service\nimport backend.util.settings\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "settings = backend.util.settings.Settings()\nlogger = logging.getLogger(__name__)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_6",
            "code": "logging.getLogger(\"autogpt_libs\").setLevel(logging.INFO)\n"
        },
        {
            "id": "chunk_1_launch_darkly_context_1",
            "code": "@contextlib.contextmanager\ndef launch_darkly_context():\n"
        },
        {
            "id": "chunk_1_launch_darkly_context_2",
            "code": "    if settings.config.app_env != backend.util.settings.AppEnvironment.LOCAL:\n        initialize_launchdarkly()\n"
        },
        {
            "id": "chunk_1_launch_darkly_context_3",
            "code": "        try:\n            yield\n"
        },
        {
            "id": "chunk_1_launch_darkly_context_4",
            "code": "        finally:\n            shutdown_launchdarkly()\n"
        },
        {
            "id": "chunk_1_launch_darkly_context_5",
            "code": "    else:\n        yield\n"
        },
        {
            "id": "chunk_2_lifespan_context_1",
            "code": "@contextlib.asynccontextmanager\nasync def lifespan_context(app: fastapi.FastAPI):\n"
        },
        {
            "id": "chunk_2_lifespan_context_2",
            "code": "    await backend.data.db.connect()\n    await backend.data.block.initialize_blocks()\n    await backend.data.user.migrate_and_encrypt_user_integrations()\n    await backend.data.graph.fix_llm_provider_credentials()\n"
        },
        {
            "id": "chunk_2_lifespan_context_3",
            "code": "    with launch_darkly_context():\n        yield\n"
        },
        {
            "id": "chunk_2_lifespan_context_4",
            "code": "    await backend.data.db.disconnect()\n"
        },
        {
            "id": "chunk_3_GlobalBlock_1",
            "code": "docs_url = (\n    \"/docs\"\n    if settings.config.app_env == backend.util.settings.AppEnvironment.LOCAL\n    else None\n)\n"
        },
        {
            "id": "chunk_3_GlobalBlock_2",
            "code": "app = fastapi.FastAPI(\n    title=\"AutoGPT Agent Server\",\n    description=(\n        \"This server is used to execute agents that are created by the \"\n        \"AutoGPT system.\"\n    ),\n    summary=\"AutoGPT Agent Server\",\n    version=\"0.1\",\n    lifespan=lifespan_context,\n    docs_url=docs_url,\n)\n"
        },
        {
            "id": "chunk_4_handle_internal_http_error_1",
            "code": "def handle_internal_http_error(status_code: int = 500, log_error: bool = True):\n    def handler(request: fastapi.Request, exc: Exception):\n"
        },
        {
            "id": "chunk_4_handle_internal_http_error_2",
            "code": "        if log_error:\n            logger.exception(f\"{request.method} {request.url.path} failed: {exc}\")\n"
        },
        {
            "id": "chunk_4_handle_internal_http_error_3",
            "code": "        return fastapi.responses.JSONResponse(\n            content={\n                \"message\": f\"{request.method} {request.url.path} failed\",\n                \"detail\": str(exc),\n            },\n            status_code=status_code,\n        )\n"
        },
        {
            "id": "chunk_4_handle_internal_http_error_4",
            "code": "    return handler\n"
        },
        {
            "id": "chunk_5_GlobalBlock_1",
            "code": "app.add_exception_handler(ValueError, handle_internal_http_error(400))\napp.add_exception_handler(Exception, handle_internal_http_error(500))\n"
        },
        {
            "id": "chunk_5_GlobalBlock_2",
            "code": "app.include_router(backend.server.routers.v1.v1_router, tags=[\"v1\"], prefix=\"/api\")\n"
        },
        {
            "id": "chunk_5_GlobalBlock_3",
            "code": "app.include_router(\n    backend.server.v2.store.routes.router, tags=[\"v2\"], prefix=\"/api/store\"\n)\n"
        },
        {
            "id": "chunk_5_GlobalBlock_4",
            "code": "app.include_router(\n    backend.server.v2.library.routes.router, tags=[\"v2\"], prefix=\"/api/library\"\n)\n"
        },
        {
            "id": "chunk_6_health_1",
            "code": "@app.get(path=\"/health\", tags=[\"health\"], dependencies=[])\nasync def health():\n"
        },
        {
            "id": "chunk_6_health_2",
            "code": "    return {\"status\": \"healthy\"}\n"
        },
        {
            "id": "chunk_7_AgentServer_1",
            "code": "class AgentServer(backend.util.service.AppProcess):\n"
        },
        {
            "id": "chunk_7_AgentServer_2",
            "code": "    def run(self):\n"
        },
        {
            "id": "chunk_7_AgentServer_3",
            "code": "        server_app = starlette.middleware.cors.CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],  # Allows all methods\n            allow_headers=[\"*\"],  # Allows all headers\n        )\n"
        },
        {
            "id": "chunk_7_AgentServer_4",
            "code": "        uvicorn.run(\n            server_app,\n            host=backend.util.settings.Config().agent_api_host,\n            port=backend.util.settings.Config().agent_api_port,\n        )\n"
        },
        {
            "id": "chunk_7_AgentServer_5",
            "code": "    @staticmethod\n"
        },
        {
            "id": "chunk_7_AgentServer_6",
            "code": "    async def test_execute_graph(\n        graph_id: str, node_input: dict[typing.Any, typing.Any], user_id: str\n    ):\n        return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)\n"
        },
        {
            "id": "chunk_7_AgentServer_7",
            "code": "    @staticmethod\n"
        },
        {
            "id": "chunk_7_AgentServer_8",
            "code": "    async def test_create_graph(\n        create_graph: backend.server.routers.v1.CreateGraph,\n        user_id: str,\n    ):\n        return await backend.server.routers.v1.create_new_graph(create_graph, user_id)\n"
        },
        {
            "id": "chunk_7_AgentServer_9",
            "code": "    @staticmethod\n"
        },
        {
            "id": "chunk_7_AgentServer_10",
            "code": "    async def test_get_graph_run_status(graph_exec_id: str, user_id: str):\n        execution = await backend.data.graph.get_execution(\n            user_id=user_id, execution_id=graph_exec_id\n        )\n        if not execution:\n            raise ValueError(f\"Execution {graph_exec_id} not found\")\n        return execution.status\n"
        },
        {
            "id": "chunk_7_AgentServer_11",
            "code": "    @staticmethod\n"
        },
        {
            "id": "chunk_7_AgentServer_12",
            "code": "    async def test_get_graph_run_node_execution_results(\n        graph_id: str, graph_exec_id: str, user_id: str\n    ):\n        return await backend.server.routers.v1.get_graph_run_node_execution_results(\n            graph_id, graph_exec_id, user_id\n        )\n"
        },
        {
            "id": "chunk_7_AgentServer_13",
            "code": "    @staticmethod\n"
        },
        {
            "id": "chunk_7_AgentServer_14",
            "code": "    async def test_delete_graph(graph_id: str, user_id: str):\n        return await backend.server.routers.v1.delete_graph(graph_id, user_id)\n"
        },
        {
            "id": "chunk_7_AgentServer_15",
            "code": "    def set_test_dependency_overrides(self, overrides: dict):\n        app.dependency_overrides.update(overrides)\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_0_GlobalBlock_5",
            "to": "chunk_0_GlobalBlock_6"
        },
        {
            "from": "chunk_1_launch_darkly_context_1",
            "to": "chunk_1_launch_darkly_context_2"
        },
        {
            "from": "chunk_1_launch_darkly_context_2",
            "to": "chunk_1_launch_darkly_context_3"
        },
        {
            "from": "chunk_1_launch_darkly_context_2",
            "to": "chunk_1_launch_darkly_context_5"
        },
        {
            "from": "chunk_1_launch_darkly_context_3",
            "to": "chunk_1_launch_darkly_context_4"
        },
        {
            "from": "chunk_2_lifespan_context_1",
            "to": "chunk_2_lifespan_context_2"
        },
        {
            "from": "chunk_2_lifespan_context_2",
            "to": "chunk_2_lifespan_context_3"
        },
        {
            "from": "chunk_2_lifespan_context_3",
            "to": "chunk_2_lifespan_context_4"
        },
        {
            "from": "chunk_3_GlobalBlock_1",
            "to": "chunk_3_GlobalBlock_2"
        },
        {
            "from": "chunk_4_handle_internal_http_error_1",
            "to": "chunk_4_handle_internal_http_error_2"
        },
        {
            "from": "chunk_4_handle_internal_http_error_1",
            "to": "chunk_4_handle_internal_http_error_3"
        },
        {
            "from": "chunk_4_handle_internal_http_error_2",
            "to": "chunk_4_handle_internal_http_error_3"
        },
        {
            "from": "chunk_5_GlobalBlock_1",
            "to": "chunk_5_GlobalBlock_2"
        },
        {
            "from": "chunk_5_GlobalBlock_2",
            "to": "chunk_5_GlobalBlock_3"
        },
        {
            "from": "chunk_5_GlobalBlock_3",
            "to": "chunk_5_GlobalBlock_4"
        },
        {
            "from": "chunk_6_health_1",
            "to": "chunk_6_health_2"
        },
        {
            "from": "chunk_7_AgentServer_1",
            "to": "chunk_7_AgentServer_2"
        },
        {
            "from": "chunk_7_AgentServer_2",
            "to": "chunk_7_AgentServer_3"
        },
        {
            "from": "chunk_7_AgentServer_3",
            "to": "chunk_7_AgentServer_4"
        },
        {
            "from": "chunk_7_AgentServer_5",
            "to": "chunk_7_AgentServer_6"
        },
        {
            "from": "chunk_7_AgentServer_7",
            "to": "chunk_7_AgentServer_8"
        },
        {
            "from": "chunk_7_AgentServer_9",
            "to": "chunk_7_AgentServer_10"
        },
        {
            "from": "chunk_7_AgentServer_11",
            "to": "chunk_7_AgentServer_12"
        },
        {
            "from": "chunk_7_AgentServer_13",
            "to": "chunk_7_AgentServer_14"
        }
    ]
}