{
    "nodes": [
        {
            "id": "chunk_0_find_previous_power_of_two_1",
            "code": "def find_previous_power_of_two(number: int) -> int:\n    \"\"\"\n    Find the largest power of two that is less than or equal to a given integer.\n    https://stackoverflow.com/questions/1322510\n\n    >>> [find_previous_power_of_two(i) for i in range(18)]\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\n    >>> find_previous_power_of_two(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> find_previous_power_of_two(10.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n"
        },
        {
            "id": "chunk_0_find_previous_power_of_two_2",
            "code": "    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n"
        },
        {
            "id": "chunk_0_find_previous_power_of_two_3",
            "code": "    if number == 0:\n        return 0\n"
        },
        {
            "id": "chunk_0_find_previous_power_of_two_4",
            "code": "    power = 1\n"
        },
        {
            "id": "chunk_0_find_previous_power_of_two_5",
            "code": "    while power <= number:\n        power <<= 1  # Equivalent to multiplying by 2\n"
        },
        {
            "id": "chunk_0_find_previous_power_of_two_6",
            "code": "    return power >> 1 if number > 1 else 1\n"
        },
        {
            "id": "chunk_1_GlobalBlock_1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_1_GlobalBlock_2",
            "code": "    import doctest\n\n    doctest.testmod()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_find_previous_power_of_two_1",
            "to": "chunk_0_find_previous_power_of_two_2"
        },
        {
            "from": "chunk_0_find_previous_power_of_two_2",
            "to": "chunk_0_find_previous_power_of_two_3"
        },
        {
            "from": "chunk_0_find_previous_power_of_two_3",
            "to": "chunk_0_find_previous_power_of_two_4"
        },
        {
            "from": "chunk_0_find_previous_power_of_two_4",
            "to": "chunk_0_find_previous_power_of_two_5"
        },
        {
            "from": "chunk_0_find_previous_power_of_two_5",
            "to": "chunk_0_find_previous_power_of_two_5"
        },
        {
            "from": "chunk_0_find_previous_power_of_two_5",
            "to": "chunk_0_find_previous_power_of_two_6"
        },
        {
            "from": "chunk_1_GlobalBlock_1",
            "to": "chunk_1_GlobalBlock_2"
        }
    ]
}