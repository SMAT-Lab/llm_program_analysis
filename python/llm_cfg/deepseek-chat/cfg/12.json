{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import base64\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from typing_extensions import TypedDict\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from ._api import get_api\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "from ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n"
        },
        {
            "id": "chunk_1_GithubListTagsBlock_1",
            "code": "class GithubListTagsBlock(Block):\n"
        },
        {
            "id": "chunk_1_GithubListTagsBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_1_GithubListTagsBlock_3",
            "code": "\n"
        },
        {
            "id": "chunk_1_GithubListTagsBlock_4",
            "code": "    class Output(BlockSchema):\n        class TagItem(TypedDict):\n            name: str\n            url: str\n\n        tag: TagItem = SchemaField(\n            title=\"Tag\", description=\"Tags with their name and file tree browser URL\"\n        )\n        error: str = SchemaField(description=\"Error message if listing tags failed\")\n"
        },
        {
            "id": "chunk_1_GithubListTagsBlock_5",
            "code": "\n"
        },
        {
            "id": "chunk_1_GithubListTagsBlock_6",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"358924e7-9a11-4d1a-a0f2-13c67fe59e2e\",\n            description=\"This block lists all tags for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListTagsBlock.Input,\n            output_schema=GithubListTagsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"tag\",\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/tree/v1.0.0\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_tags\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/tree/v1.0.0\",\n                    }\n                ]\n            },\n        )\n"
        },
        {
            "id": "chunk_1_GithubListTagsBlock_7",
            "code": "\n"
        },
        {
            "id": "chunk_1_GithubListTagsBlock_8",
            "code": "    @staticmethod\n    def list_tags(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.TagItem]:\n        api = get_api(credentials)\n        tags_url = repo_url + \"/tags\"\n        response = api.get(tags_url)\n        data = response.json()\n        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        tags: list[GithubListTagsBlock.Output.TagItem] = [\n            {\n                \"name\": tag[\"name\"],\n                \"url\": f\"https://github.com/{repo_path}/tree/{tag['name']}\",\n            }\n            for tag in data\n        ]\n        return tags\n"
        },
        {
            "id": "chunk_1_GithubListTagsBlock_9",
            "code": "\n"
        },
        {
            "id": "chunk_1_GithubListTagsBlock_10",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        tags = self.list_tags(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"tag\", tag) for tag in tags)\n"
        },
        {
            "id": "chunk_1_GithubListTagsBlock_11",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_2_GithubListTagsBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_3_GithubListTagsBlock.Output_1",
            "code": "    class Output(BlockSchema):\n"
        },
        {
            "id": "chunk_3_GithubListTagsBlock.Output_2",
            "code": "        class TagItem(TypedDict):\n            name: str\n            url: str\n"
        },
        {
            "id": "chunk_3_GithubListTagsBlock.Output_3",
            "code": "        tag: TagItem = SchemaField(\n            title=\"Tag\", description=\"Tags with their name and file tree browser URL\"\n        )\n"
        },
        {
            "id": "chunk_3_GithubListTagsBlock.Output_4",
            "code": "        error: str = SchemaField(description=\"Error message if listing tags failed\")\n"
        },
        {
            "id": "chunk_4_GithubListTagsBlock.Output.TagItem_1",
            "code": "        class TagItem(TypedDict):\n            name: str\n            url: str\n"
        },
        {
            "id": "chunk_5_GithubListTagsBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"358924e7-9a11-4d1a-a0f2-13c67fe59e2e\",\n            description=\"This block lists all tags for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListTagsBlock.Input,\n            output_schema=GithubListTagsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"tag\",\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/tree/v1.0.0\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_tags\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/tree/v1.0.0\",\n                    }\n                ]\n            },\n        )\n"
        },
        {
            "id": "chunk_6_GithubListTagsBlock.list_tags_1",
            "code": "    @staticmethod\n    def list_tags(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.TagItem]:\n"
        },
        {
            "id": "chunk_6_GithubListTagsBlock.list_tags_2",
            "code": "        api = get_api(credentials)\n        tags_url = repo_url + \"/tags\"\n        response = api.get(tags_url)\n        data = response.json()\n"
        },
        {
            "id": "chunk_6_GithubListTagsBlock.list_tags_3",
            "code": "        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n"
        },
        {
            "id": "chunk_6_GithubListTagsBlock.list_tags_4",
            "code": "        tags: list[GithubListTagsBlock.Output.TagItem] = [\n            {\n                \"name\": tag[\"name\"],\n                \"url\": f\"https://github.com/{repo_path}/tree/{tag['name']}\",\n            }\n            for tag in data\n        ]\n"
        },
        {
            "id": "chunk_6_GithubListTagsBlock.list_tags_5",
            "code": "        return tags\n"
        },
        {
            "id": "chunk_7_GithubListTagsBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_7_GithubListTagsBlock.run_2",
            "code": "        tags = self.list_tags(\n            credentials,\n            input_data.repo_url,\n        )\n"
        },
        {
            "id": "chunk_7_GithubListTagsBlock.run_3",
            "code": "        yield from ((\"tag\", tag) for tag in tags)\n"
        },
        {
            "id": "chunk_8_GithubListBranchesBlock_1",
            "code": "class GithubListBranchesBlock(Block):\n"
        },
        {
            "id": "chunk_8_GithubListBranchesBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_8_GithubListBranchesBlock_3",
            "code": "\n"
        },
        {
            "id": "chunk_8_GithubListBranchesBlock_4",
            "code": "    class Output(BlockSchema):\n        class BranchItem(TypedDict):\n            name: str\n            url: str\n\n        branch: BranchItem = SchemaField(\n            title=\"Branch\",\n            description=\"Branches with their name and file tree browser URL\",\n        )\n"
        },
        {
            "id": "chunk_8_GithubListBranchesBlock_5",
            "code": "        error: str = SchemaField(description=\"Error message if listing branches failed\")\n"
        },
        {
            "id": "chunk_8_GithubListBranchesBlock_6",
            "code": "\n"
        },
        {
            "id": "chunk_8_GithubListBranchesBlock_7",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"74243e49-2bec-4916-8bf4-db43d44aead5\",\n            description=\"This block lists all branches for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListBranchesBlock.Input,\n            output_schema=GithubListBranchesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"branch\",\n                    {\n                        \"name\": \"main\",\n                        \"url\": \"https://github.com/owner/repo/tree/main\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_branches\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"main\",\n                        \"url\": \"https://github.com/owner/repo/tree/main\",\n                    }\n                ]\n            },\n        )\n"
        },
        {
            "id": "chunk_8_GithubListBranchesBlock_8",
            "code": "\n"
        },
        {
            "id": "chunk_8_GithubListBranchesBlock_9",
            "code": "    @staticmethod\n    def list_branches(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.BranchItem]:\n        api = get_api(credentials)\n        branches_url = repo_url + \"/branches\"\n        response = api.get(branches_url)\n        data = response.json()\n        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        branches: list[GithubListBranchesBlock.Output.BranchItem] = [\n            {\n                \"name\": branch[\"name\"],\n                \"url\": f\"https://github.com/{repo_path}/tree/{branch['name']}\",\n            }\n            for branch in data\n        ]\n        return branches\n"
        },
        {
            "id": "chunk_8_GithubListBranchesBlock_10",
            "code": "\n"
        },
        {
            "id": "chunk_8_GithubListBranchesBlock_11",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        branches = self.list_branches(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"branch\", branch) for branch in branches)\n\n"
        },
        {
            "id": "chunk_8_GithubListBranchesBlock_12",
            "code": "\n\n"
        },
        {
            "id": "chunk_9_GithubListBranchesBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_10_GithubListBranchesBlock.Output_1",
            "code": "    class Output(BlockSchema):\n"
        },
        {
            "id": "chunk_10_GithubListBranchesBlock.Output_2",
            "code": "        class BranchItem(TypedDict):\n            name: str\n            url: str\n"
        },
        {
            "id": "chunk_10_GithubListBranchesBlock.Output_3",
            "code": "        branch: BranchItem = SchemaField(\n            title=\"Branch\",\n            description=\"Branches with their name and file tree browser URL\",\n        )\n"
        },
        {
            "id": "chunk_10_GithubListBranchesBlock.Output_4",
            "code": "        error: str = SchemaField(description=\"Error message if listing branches failed\")\n"
        },
        {
            "id": "chunk_11_GithubListBranchesBlock.Output.BranchItem_1",
            "code": "        class BranchItem(TypedDict):\n            name: str\n            url: str\n"
        },
        {
            "id": "chunk_12_GithubListBranchesBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n"
        },
        {
            "id": "chunk_12_GithubListBranchesBlock.__init___2",
            "code": "            id=\"74243e49-2bec-4916-8bf4-db43d44aead5\",\n            description=\"This block lists all branches for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListBranchesBlock.Input,\n            output_schema=GithubListBranchesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"branch\",\n                    {\n                        \"name\": \"main\",\n                        \"url\": \"https://github.com/owner/repo/tree/main\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_branches\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"main\",\n                        \"url\": \"https://github.com/owner/repo/tree/main\",\n                    }\n                ]\n            },\n        )\n"
        },
        {
            "id": "chunk_13_GithubListBranchesBlock.list_branches_1",
            "code": "    @staticmethod\n    def list_branches(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.BranchItem]:\n"
        },
        {
            "id": "chunk_13_GithubListBranchesBlock.list_branches_2",
            "code": "        api = get_api(credentials)\n"
        },
        {
            "id": "chunk_13_GithubListBranchesBlock.list_branches_3",
            "code": "        branches_url = repo_url + \"/branches\"\n"
        },
        {
            "id": "chunk_13_GithubListBranchesBlock.list_branches_4",
            "code": "        response = api.get(branches_url)\n"
        },
        {
            "id": "chunk_13_GithubListBranchesBlock.list_branches_5",
            "code": "        data = response.json()\n"
        },
        {
            "id": "chunk_13_GithubListBranchesBlock.list_branches_6",
            "code": "        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n"
        },
        {
            "id": "chunk_13_GithubListBranchesBlock.list_branches_7",
            "code": "        branches: list[GithubListBranchesBlock.Output.BranchItem] = [\n            {\n                \"name\": branch[\"name\"],\n                \"url\": f\"https://github.com/{repo_path}/tree/{branch['name']}\",\n            }\n            for branch in data\n        ]\n"
        },
        {
            "id": "chunk_13_GithubListBranchesBlock.list_branches_8",
            "code": "        return branches\n"
        },
        {
            "id": "chunk_14_GithubListBranchesBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_14_GithubListBranchesBlock.run_2",
            "code": "        branches = self.list_branches(\n            credentials,\n            input_data.repo_url,\n        )\n"
        },
        {
            "id": "chunk_14_GithubListBranchesBlock.run_3",
            "code": "        yield from ((\"branch\", branch) for branch in branches)\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_1",
            "code": "class GithubListDiscussionsBlock(Block):\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_2",
            "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_3",
            "code": "        num_discussions: int = SchemaField(\n            description=\"Number of discussions to fetch\", default=5\n        )\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_4",
            "code": "    class Output(BlockSchema):\n        class DiscussionItem(TypedDict):\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_5",
            "code": "            title: str\n            url: str\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_6",
            "code": "        discussion: DiscussionItem = SchemaField(\n            title=\"Discussion\", description=\"Discussions with their title and URL\"\n        )\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_7",
            "code": "        error: str = SchemaField(\n            description=\"Error message if listing discussions failed\"\n        )\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_8",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"3ef1a419-3d76-4e07-b761-de9dad4d51d7\",\n            description=\"This block lists recent discussions for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListDiscussionsBlock.Input,\n            output_schema=GithubListDiscussionsBlock.Output,\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_9",
            "code": "            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"num_discussions\": 3,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_10",
            "code": "            test_credentials=TEST_CREDENTIALS,\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_11",
            "code": "            test_output=[\n                (\n                    \"discussion\",\n                    {\n                        \"title\": \"Discussion 1\",\n                        \"url\": \"https://github.com/owner/repo/discussions/1\",\n                    },\n                )\n            ],\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_12",
            "code": "            test_mock={\n                \"list_discussions\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Discussion 1\",\n                        \"url\": \"https://github.com/owner/repo/discussions/1\",\n                    }\n                ]\n            },\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_13",
            "code": "        )\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_14",
            "code": "    @staticmethod\n    def list_discussions(\n        credentials: GithubCredentials, repo_url: str, num_discussions: int\n    ) -> list[Output.DiscussionItem]:\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_15",
            "code": "        api = get_api(credentials)\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_16",
            "code": "        # GitHub GraphQL API endpoint is different; we'll use api.post with custom URL\n        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        owner, repo = repo_path.split(\"/\")\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_17",
            "code": "        query = \"\"\"\n        query($owner: String!, $repo: String!, $num: Int!) {\n            repository(owner: $owner, name: $repo) {\n                discussions(first: $num) {\n                    nodes {\n                        title\n                        url\n                    }\n                }\n            }\n        }\n        \"\"\"\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_18",
            "code": "        variables = {\"owner\": owner, \"repo\": repo, \"num\": num_discussions}\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_19",
            "code": "        response = api.post(\n            \"https://api.github.com/graphql\",\n            json={\"query\": query, \"variables\": variables},\n        )\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_20",
            "code": "        data = response.json()\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_21",
            "code": "        discussions: list[GithubListDiscussionsBlock.Output.DiscussionItem] = [\n            {\"title\": discussion[\"title\"], \"url\": discussion[\"url\"]}\n            for discussion in data[\"data\"][\"repository\"][\"discussions\"][\"nodes\"]\n        ]\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_22",
            "code": "        return discussions\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_23",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_24",
            "code": "        discussions = self.list_discussions(\n            credentials, input_data.repo_url, input_data.num_discussions\n        )\n"
        },
        {
            "id": "chunk_15_GithubListDiscussionsBlock_25",
            "code": "        yield from ((\"discussion\", discussion) for discussion in discussions)\n"
        },
        {
            "id": "chunk_16_GithubListDiscussionsBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_16_GithubListDiscussionsBlock.Input_2",
            "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_16_GithubListDiscussionsBlock.Input_3",
            "code": "        num_discussions: int = SchemaField(\n            description=\"Number of discussions to fetch\", default=5\n        )\n"
        },
        {
            "id": "chunk_17_GithubListDiscussionsBlock.Output_1",
            "code": "    class Output(BlockSchema):\n"
        },
        {
            "id": "chunk_17_GithubListDiscussionsBlock.Output_2",
            "code": "        class DiscussionItem(TypedDict):\n            title: str\n            url: str\n"
        },
        {
            "id": "chunk_17_GithubListDiscussionsBlock.Output_3",
            "code": "        discussion: DiscussionItem = SchemaField(\n            title=\"Discussion\", description=\"Discussions with their title and URL\"\n        )\n"
        },
        {
            "id": "chunk_17_GithubListDiscussionsBlock.Output_4",
            "code": "        error: str = SchemaField(\n            description=\"Error message if listing discussions failed\"\n        )\n"
        },
        {
            "id": "chunk_18_GithubListDiscussionsBlock.Output.DiscussionItem_1",
            "code": "        class DiscussionItem(TypedDict):\n            title: str\n            url: str\n"
        },
        {
            "id": "chunk_19_GithubListDiscussionsBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"3ef1a419-3d76-4e07-b761-de9dad4d51d7\",\n            description=\"This block lists recent discussions for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListDiscussionsBlock.Input,\n            output_schema=GithubListDiscussionsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"num_discussions\": 3,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"discussion\",\n                    {\n                        \"title\": \"Discussion 1\",\n                        \"url\": \"https://github.com/owner/repo/discussions/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_discussions\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Discussion 1\",\n                        \"url\": \"https://github.com/owner/repo/discussions/1\",\n                    }\n                ]\n            },\n        )\n"
        },
        {
            "id": "chunk_20_GithubListDiscussionsBlock.list_discussions_1",
            "code": "    @staticmethod\n    def list_discussions(\n        credentials: GithubCredentials, repo_url: str, num_discussions: int\n    ) -> list[Output.DiscussionItem]:\n"
        },
        {
            "id": "chunk_20_GithubListDiscussionsBlock.list_discussions_2",
            "code": "        api = get_api(credentials)\n"
        },
        {
            "id": "chunk_20_GithubListDiscussionsBlock.list_discussions_3",
            "code": "        # GitHub GraphQL API endpoint is different; we'll use api.post with custom URL\n"
        },
        {
            "id": "chunk_20_GithubListDiscussionsBlock.list_discussions_4",
            "code": "        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        owner, repo = repo_path.split(\"/\")\n"
        },
        {
            "id": "chunk_20_GithubListDiscussionsBlock.list_discussions_5",
            "code": "        query = \"\"\"\n        query($owner: String!, $repo: String!, $num: Int!) {\n            repository(owner: $owner, name: $repo) {\n                discussions(first: $num) {\n                    nodes {\n                        title\n                        url\n                    }\n                }\n            }\n        }\n        \"\"\"\n"
        },
        {
            "id": "chunk_20_GithubListDiscussionsBlock.list_discussions_6",
            "code": "        variables = {\"owner\": owner, \"repo\": repo, \"num\": num_discussions}\n"
        },
        {
            "id": "chunk_20_GithubListDiscussionsBlock.list_discussions_7",
            "code": "        response = api.post(\n            \"https://api.github.com/graphql\",\n            json={\"query\": query, \"variables\": variables},\n        )\n"
        },
        {
            "id": "chunk_20_GithubListDiscussionsBlock.list_discussions_8",
            "code": "        data = response.json()\n"
        },
        {
            "id": "chunk_20_GithubListDiscussionsBlock.list_discussions_9",
            "code": "        discussions: list[GithubListDiscussionsBlock.Output.DiscussionItem] = [\n            {\"title\": discussion[\"title\"], \"url\": discussion[\"url\"]}\n            for discussion in data[\"data\"][\"repository\"][\"discussions\"][\"nodes\"]\n        ]\n"
        },
        {
            "id": "chunk_20_GithubListDiscussionsBlock.list_discussions_10",
            "code": "        return discussions\n"
        },
        {
            "id": "chunk_21_GithubListDiscussionsBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_21_GithubListDiscussionsBlock.run_2",
            "code": "        discussions = self.list_discussions(\n            credentials, input_data.repo_url, input_data.num_discussions\n        )\n"
        },
        {
            "id": "chunk_21_GithubListDiscussionsBlock.run_3",
            "code": "        yield from ((\"discussion\", discussion) for discussion in discussions)\n"
        },
        {
            "id": "chunk_22_GithubListReleasesBlock_1",
            "code": "class GithubListReleasesBlock(Block):\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_22_GithubListReleasesBlock_2",
            "code": "    class Output(BlockSchema):\n        class ReleaseItem(TypedDict):\n            name: str\n            url: str\n\n        release: ReleaseItem = SchemaField(\n            title=\"Release\",\n            description=\"Releases with their name and file tree browser URL\",\n        )\n"
        },
        {
            "id": "chunk_22_GithubListReleasesBlock_3",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"3460367a-6ba7-4645-8ce6-47b05d040b92\",\n            description=\"This block lists all releases for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListReleasesBlock.Input,\n            output_schema=GithubListReleasesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"release\",\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_releases\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n                    }\n                ]\n            },\n        )\n"
        },
        {
            "id": "chunk_22_GithubListReleasesBlock_4",
            "code": "    @staticmethod\n    def list_releases(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.ReleaseItem]:\n        api = get_api(credentials)\n        releases_url = repo_url + \"/releases\"\n        response = api.get(releases_url)\n        data = response.json()\n        releases: list[GithubListReleasesBlock.Output.ReleaseItem] = [\n            {\"name\": release[\"name\"], \"url\": release[\"html_url\"]} for release in data\n        ]\n        return releases\n"
        },
        {
            "id": "chunk_22_GithubListReleasesBlock_5",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        releases = self.list_releases(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"release\", release) for release in releases)\n"
        },
        {
            "id": "chunk_23_GithubListReleasesBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_24_GithubListReleasesBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        class ReleaseItem(TypedDict):\n"
        },
        {
            "id": "chunk_24_GithubListReleasesBlock.Output_2",
            "code": "        class ReleaseItem(TypedDict):\n            name: str\n            url: str\n"
        },
        {
            "id": "chunk_24_GithubListReleasesBlock.Output_3",
            "code": "        release: ReleaseItem = SchemaField(\n            title=\"Release\",\n            description=\"Releases with their name and file tree browser URL\",\n        )\n"
        },
        {
            "id": "chunk_24_GithubListReleasesBlock.Output_4",
            "code": "        error: str = SchemaField(description=\"Error message if listing releases failed\")\n"
        },
        {
            "id": "chunk_25_GithubListReleasesBlock.Output.ReleaseItem_1",
            "code": "        class ReleaseItem(TypedDict):\n            name: str\n            url: str\n"
        },
        {
            "id": "chunk_26_GithubListReleasesBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"3460367a-6ba7-4645-8ce6-47b05d040b92\",\n            description=\"This block lists all releases for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListReleasesBlock.Input,\n            output_schema=GithubListReleasesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"release\",\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_releases\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n                    }\n                ]\n            },\n        )\n"
        },
        {
            "id": "chunk_27_GithubListReleasesBlock.list_releases_1",
            "code": "    @staticmethod\n    def list_releases(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.ReleaseItem]:\n"
        },
        {
            "id": "chunk_27_GithubListReleasesBlock.list_releases_2",
            "code": "        api = get_api(credentials)\n        releases_url = repo_url + \"/releases\"\n        response = api.get(releases_url)\n        data = response.json()\n"
        },
        {
            "id": "chunk_27_GithubListReleasesBlock.list_releases_3",
            "code": "        releases: list[GithubListReleasesBlock.Output.ReleaseItem] = [\n            {\"name\": release[\"name\"], \"url\": release[\"html_url\"]} for release in data\n        ]\n"
        },
        {
            "id": "chunk_27_GithubListReleasesBlock.list_releases_4",
            "code": "        return releases\n"
        },
        {
            "id": "chunk_28_GithubListReleasesBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_28_GithubListReleasesBlock.run_2",
            "code": "        releases = self.list_releases(\n            credentials,\n            input_data.repo_url,\n        )\n"
        },
        {
            "id": "chunk_28_GithubListReleasesBlock.run_3",
            "code": "        yield from ((\"release\", release) for release in releases)\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_1",
            "code": "class GithubReadFileBlock(Block):\n    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_2",
            "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_3",
            "code": "        file_path: str = SchemaField(\n            description=\"Path to the file in the repository\",\n            placeholder=\"path/to/file\",\n        )\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_4",
            "code": "        branch: str = SchemaField(\n            description=\"Branch to read from\",\n            placeholder=\"branch_name\",\n            default=\"master\",\n        )\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_5",
            "code": "    class Output(BlockSchema):\n        text_content: str = SchemaField(\n            description=\"Content of the file (decoded as UTF-8 text)\"\n        )\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_6",
            "code": "        raw_content: str = SchemaField(\n            description=\"Raw base64-encoded content of the file\"\n        )\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_7",
            "code": "        size: int = SchemaField(description=\"The size of the file (in bytes)\")\n        error: str = SchemaField(description=\"Error message if the file reading failed\")\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_8",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"87ce6c27-5752-4bbc-8e26-6da40a3dcfd3\",\n            description=\"This block reads the content of a specified file from a GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadFileBlock.Input,\n            output_schema=GithubReadFileBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"file_path\": \"path/to/file\",\n                \"branch\": \"master\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"raw_content\", \"RmlsZSBjb250ZW50\"),\n                (\"text_content\", \"File content\"),\n                (\"size\", 13),\n            ],\n            test_mock={\"read_file\": lambda *args, **kwargs: (\"RmlsZSBjb250ZW50\", 13)},\n        )\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_9",
            "code": "    @staticmethod\n    def read_file(\n        credentials: GithubCredentials, repo_url: str, file_path: str, branch: str\n    ) -> tuple[str, int]:\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_10",
            "code": "        api = get_api(credentials)\n        content_url = repo_url + f\"/contents/{file_path}?ref={branch}\"\n        response = api.get(content_url)\n        content = response.json()\n\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_11",
            "code": "        if isinstance(content, list):\n            # Multiple entries of different types exist at this path\n            if not (file := next((f for f in content if f[\"type\"] == \"file\"), None)):\n                raise TypeError(\"Not a file\")\n            content = file\n\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_12",
            "code": "        if content[\"type\"] != \"file\":\n            raise TypeError(\"Not a file\")\n\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_13",
            "code": "        return content[\"content\"], content[\"size\"]\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_14",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_15",
            "code": "        raw_content, size = self.read_file(\n            credentials,\n            input_data.repo_url,\n            input_data.file_path.lstrip(\"/\"),\n            input_data.branch,\n        )\n"
        },
        {
            "id": "chunk_29_GithubReadFileBlock_16",
            "code": "        yield \"raw_content\", raw_content\n        yield \"text_content\", base64.b64decode(raw_content).decode(\"utf-8\")\n        yield \"size\", size\n"
        },
        {
            "id": "chunk_30_GithubReadFileBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_30_GithubReadFileBlock.Input_2",
            "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_30_GithubReadFileBlock.Input_3",
            "code": "        file_path: str = SchemaField(\n            description=\"Path to the file in the repository\",\n            placeholder=\"path/to/file\",\n        )\n"
        },
        {
            "id": "chunk_30_GithubReadFileBlock.Input_4",
            "code": "        branch: str = SchemaField(\n            description=\"Branch to read from\",\n            placeholder=\"branch_name\",\n            default=\"master\",\n        )\n"
        },
        {
            "id": "chunk_31_GithubReadFileBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        text_content: str = SchemaField(\n            description=\"Content of the file (decoded as UTF-8 text)\"\n        )\n        raw_content: str = SchemaField(\n            description=\"Raw base64-encoded content of the file\"\n        )\n        size: int = SchemaField(description=\"The size of the file (in bytes)\")\n        error: str = SchemaField(description=\"Error message if the file reading failed\")\n\n"
        },
        {
            "id": "chunk_32_GithubReadFileBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"87ce6c27-5752-4bbc-8e26-6da40a3dcfd3\",\n            description=\"This block reads the content of a specified file from a GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadFileBlock.Input,\n            output_schema=GithubReadFileBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"file_path\": \"path/to/file\",\n                \"branch\": \"master\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"raw_content\", \"RmlsZSBjb250ZW50\"),\n                (\"text_content\", \"File content\"),\n                (\"size\", 13),\n            ],\n            test_mock={\"read_file\": lambda *args, **kwargs: (\"RmlsZSBjb250ZW50\", 13)},\n        )\n"
        },
        {
            "id": "chunk_33_GithubReadFileBlock.read_file_1",
            "code": "    @staticmethod\n    def read_file(\n        credentials: GithubCredentials, repo_url: str, file_path: str, branch: str\n    ) -> tuple[str, int]:\n"
        },
        {
            "id": "chunk_33_GithubReadFileBlock.read_file_2",
            "code": "        api = get_api(credentials)\n        content_url = repo_url + f\"/contents/{file_path}?ref={branch}\"\n        response = api.get(content_url)\n        content = response.json()\n"
        },
        {
            "id": "chunk_33_GithubReadFileBlock.read_file_3",
            "code": "        if isinstance(content, list):\n            # Multiple entries of different types exist at this path\n            if not (file := next((f for f in content if f[\"type\"] == \"file\"), None)):\n                raise TypeError(\"Not a file\")\n            content = file\n"
        },
        {
            "id": "chunk_33_GithubReadFileBlock.read_file_4",
            "code": "        if content[\"type\"] != \"file\":\n            raise TypeError(\"Not a file\")\n"
        },
        {
            "id": "chunk_33_GithubReadFileBlock.read_file_5",
            "code": "        return content[\"content\"], content[\"size\"]\n"
        },
        {
            "id": "chunk_34_GithubReadFileBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_34_GithubReadFileBlock.run_2",
            "code": "        raw_content, size = self.read_file(\n            credentials,\n            input_data.repo_url,\n            input_data.file_path.lstrip(\"/\"),\n            input_data.branch,\n        )\n"
        },
        {
            "id": "chunk_34_GithubReadFileBlock.run_3",
            "code": "        yield \"raw_content\", raw_content\n"
        },
        {
            "id": "chunk_34_GithubReadFileBlock.run_4",
            "code": "        yield \"text_content\", base64.b64decode(raw_content).decode(\"utf-8\")\n"
        },
        {
            "id": "chunk_34_GithubReadFileBlock.run_5",
            "code": "        yield \"size\", size\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_1",
            "code": "class GithubReadFolderBlock(Block):\n    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_2",
            "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        folder_path: str = SchemaField(\n            description=\"Path to the folder in the repository\",\n            placeholder=\"path/to/folder\",\n        )\n        branch: str = SchemaField(\n            description=\"Branch name to read from (defaults to master)\",\n            placeholder=\"branch_name\",\n            default=\"master\",\n        )\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_3",
            "code": "    class Output(BlockSchema):\n        class DirEntry(TypedDict):\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_4",
            "code": "            name: str\n            path: str\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_5",
            "code": "        class FileEntry(TypedDict):\n            name: str\n            path: str\n            size: int\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_6",
            "code": "        file: FileEntry = SchemaField(description=\"Files in the folder\")\n        dir: DirEntry = SchemaField(description=\"Directories in the folder\")\n        error: str = SchemaField(\n            description=\"Error message if reading the folder failed\"\n        )\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_7",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"1355f863-2db3-4d75-9fba-f91e8a8ca400\",\n            description=\"This block reads the content of a specified folder from a GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadFolderBlock.Input,\n            output_schema=GithubReadFolderBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"folder_path\": \"path/to/folder\",\n                \"branch\": \"master\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"file\",\n                    {\n                        \"name\": \"file1.txt\",\n                        \"path\": \"path/to/folder/file1.txt\",\n                        \"size\": 1337,\n                    },\n                ),\n                (\"dir\", {\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}),\n            ],\n            test_mock={\n                \"read_folder\": lambda *args, **kwargs: (\n                    [\n                        {\n                            \"name\": \"file1.txt\",\n                            \"path\": \"path/to/folder/file1.txt\",\n                            \"size\": 1337,\n                        }\n                    ],\n                    [{\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}],\n                )\n            },\n        )\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_8",
            "code": "    @staticmethod\n    def read_folder(\n        credentials: GithubCredentials, repo_url: str, folder_path: str, branch: str\n    ) -> tuple[list[Output.FileEntry], list[Output.DirEntry]]:\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_9",
            "code": "        api = get_api(credentials)\n        contents_url = repo_url + f\"/contents/{folder_path}?ref={branch}\"\n        response = api.get(contents_url)\n        content = response.json()\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_10",
            "code": "        if not isinstance(content, list):\n            raise TypeError(\"Not a folder\")\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_11",
            "code": "        files = [\n            GithubReadFolderBlock.Output.FileEntry(\n                name=entry[\"name\"],\n                path=entry[\"path\"],\n                size=entry[\"size\"],\n            )\n            for entry in content\n            if entry[\"type\"] == \"file\"\n        ]\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_12",
            "code": "        dirs = [\n            GithubReadFolderBlock.Output.DirEntry(\n                name=entry[\"name\"],\n                path=entry[\"path\"],\n            )\n            for entry in content\n            if entry[\"type\"] == \"dir\"\n        ]\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_13",
            "code": "        return files, dirs\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_14",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_15",
            "code": "        files, dirs = self.read_folder(\n            credentials,\n            input_data.repo_url,\n            input_data.folder_path.lstrip(\"/\"),\n            input_data.branch,\n        )\n"
        },
        {
            "id": "chunk_35_GithubReadFolderBlock_16",
            "code": "        yield from ((\"file\", file) for file in files)\n        yield from ((\"dir\", dir) for dir in dirs)\n"
        },
        {
            "id": "chunk_36_GithubReadFolderBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_36_GithubReadFolderBlock.Input_2",
            "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_36_GithubReadFolderBlock.Input_3",
            "code": "        folder_path: str = SchemaField(\n            description=\"Path to the folder in the repository\",\n            placeholder=\"path/to/folder\",\n        )\n"
        },
        {
            "id": "chunk_36_GithubReadFolderBlock.Input_4",
            "code": "        branch: str = SchemaField(\n            description=\"Branch name to read from (defaults to master)\",\n            placeholder=\"branch_name\",\n            default=\"master\",\n        )\n"
        },
        {
            "id": "chunk_37_GithubReadFolderBlock.Output_1",
            "code": "    class Output(BlockSchema):\n"
        },
        {
            "id": "chunk_37_GithubReadFolderBlock.Output_2",
            "code": "        class DirEntry(TypedDict):\n            name: str\n            path: str\n"
        },
        {
            "id": "chunk_37_GithubReadFolderBlock.Output_3",
            "code": "        class FileEntry(TypedDict):\n            name: str\n            path: str\n            size: int\n"
        },
        {
            "id": "chunk_37_GithubReadFolderBlock.Output_4",
            "code": "        file: FileEntry = SchemaField(description=\"Files in the folder\")\n"
        },
        {
            "id": "chunk_37_GithubReadFolderBlock.Output_5",
            "code": "        dir: DirEntry = SchemaField(description=\"Directories in the folder\")\n"
        },
        {
            "id": "chunk_37_GithubReadFolderBlock.Output_6",
            "code": "        error: str = SchemaField(\n            description=\"Error message if reading the folder failed\"\n        )\n"
        },
        {
            "id": "chunk_38_GithubReadFolderBlock.Output.DirEntry_1",
            "code": "        class DirEntry(TypedDict):\n            name: str\n            path: str\n"
        },
        {
            "id": "chunk_39_GithubReadFolderBlock.Output.FileEntry_1",
            "code": "        class FileEntry(TypedDict):\n            name: str\n            path: str\n            size: int\n"
        },
        {
            "id": "chunk_40_GithubReadFolderBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"1355f863-2db3-4d75-9fba-f91e8a8ca400\",\n            description=\"This block reads the content of a specified folder from a GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadFolderBlock.Input,\n            output_schema=GithubReadFolderBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"folder_path\": \"path/to/folder\",\n                \"branch\": \"master\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"file\",\n                    {\n                        \"name\": \"file1.txt\",\n                        \"path\": \"path/to/folder/file1.txt\",\n                        \"size\": 1337,\n                    },\n                ),\n                (\"dir\", {\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}),\n            ],\n            test_mock={\n                \"read_folder\": lambda *args, **kwargs: (\n                    [\n                        {\n                            \"name\": \"file1.txt\",\n                            \"path\": \"path/to/folder/file1.txt\",\n                            \"size\": 1337,\n                        }\n                    ],\n                    [{\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}],\n                )\n            },\n        )\n"
        },
        {
            "id": "chunk_41_GithubReadFolderBlock.read_folder_1",
            "code": "    @staticmethod\n    def read_folder(\n        credentials: GithubCredentials, repo_url: str, folder_path: str, branch: str\n    ) -> tuple[list[Output.FileEntry], list[Output.DirEntry]]:\n"
        },
        {
            "id": "chunk_41_GithubReadFolderBlock.read_folder_2",
            "code": "        api = get_api(credentials)\n        contents_url = repo_url + f\"/contents/{folder_path}?ref={branch}\"\n        response = api.get(contents_url)\n        content = response.json()\n"
        },
        {
            "id": "chunk_41_GithubReadFolderBlock.read_folder_3",
            "code": "        if not isinstance(content, list):\n            raise TypeError(\"Not a folder\")\n"
        },
        {
            "id": "chunk_41_GithubReadFolderBlock.read_folder_4",
            "code": "        files = [\n            GithubReadFolderBlock.Output.FileEntry(\n                name=entry[\"name\"],\n                path=entry[\"path\"],\n                size=entry[\"size\"],\n            )\n            for entry in content\n            if entry[\"type\"] == \"file\"\n        ]\n"
        },
        {
            "id": "chunk_41_GithubReadFolderBlock.read_folder_5",
            "code": "        dirs = [\n            GithubReadFolderBlock.Output.DirEntry(\n                name=entry[\"name\"],\n                path=entry[\"path\"],\n            )\n            for entry in content\n            if entry[\"type\"] == \"dir\"\n        ]\n"
        },
        {
            "id": "chunk_41_GithubReadFolderBlock.read_folder_6",
            "code": "        return files, dirs\n"
        },
        {
            "id": "chunk_42_GithubReadFolderBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_42_GithubReadFolderBlock.run_2",
            "code": "        files, dirs = self.read_folder(\n            credentials,\n            input_data.repo_url,\n            input_data.folder_path.lstrip(\"/\"),\n            input_data.branch,\n        )\n"
        },
        {
            "id": "chunk_42_GithubReadFolderBlock.run_3",
            "code": "        yield from ((\"file\", file) for file in files)\n"
        },
        {
            "id": "chunk_42_GithubReadFolderBlock.run_4",
            "code": "        yield from ((\"dir\", dir) for dir in dirs)\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_1",
            "code": "class GithubMakeBranchBlock(Block):\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        new_branch: str = SchemaField(\n            description=\"Name of the new branch\",\n            placeholder=\"new_branch_name\",\n        )\n        source_branch: str = SchemaField(\n            description=\"Name of the source branch\",\n            placeholder=\"source_branch_name\",\n        )\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_3",
            "code": "\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_4",
            "code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the branch creation operation\")\n        error: str = SchemaField(\n            description=\"Error message if the branch creation failed\"\n        )\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_5",
            "code": "\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_6",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"944cc076-95e7-4d1b-b6b6-b15d8ee5448d\",\n            description=\"This block creates a new branch from a specified source branch.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakeBranchBlock.Input,\n            output_schema=GithubMakeBranchBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"new_branch\": \"new_branch_name\",\n                \"source_branch\": \"source_branch_name\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Branch created successfully\")],\n            test_mock={\n                \"create_branch\": lambda *args, **kwargs: \"Branch created successfully\"\n            },\n        )\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_7",
            "code": "\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_8",
            "code": "    @staticmethod\n    def create_branch(\n        credentials: GithubCredentials,\n        repo_url: str,\n        new_branch: str,\n        source_branch: str,\n    ) -> str:\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_9",
            "code": "        api = get_api(credentials)\n        # Get the SHA of the source branch\n        ref_url = repo_url + f\"/git/refs/heads/{source_branch}\"\n        response = api.get(ref_url)\n        sha = response.json()[\"object\"][\"sha\"]\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_10",
            "code": "\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_11",
            "code": "        # Create the new branch\n        create_ref_url = repo_url + \"/git/refs\"\n        data = {\"ref\": f\"refs/heads/{new_branch}\", \"sha\": sha}\n        response = api.post(create_ref_url, json=data)\n        return \"Branch created successfully\"\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_12",
            "code": "\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_13",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_14",
            "code": "        status = self.create_branch(\n            credentials,\n            input_data.repo_url,\n            input_data.new_branch,\n            input_data.source_branch,\n        )\n        yield \"status\", status\n"
        },
        {
            "id": "chunk_43_GithubMakeBranchBlock_15",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_44_GithubMakeBranchBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_44_GithubMakeBranchBlock.Input_2",
            "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_44_GithubMakeBranchBlock.Input_3",
            "code": "        new_branch: str = SchemaField(\n            description=\"Name of the new branch\",\n            placeholder=\"new_branch_name\",\n        )\n"
        },
        {
            "id": "chunk_44_GithubMakeBranchBlock.Input_4",
            "code": "        source_branch: str = SchemaField(\n            description=\"Name of the source branch\",\n            placeholder=\"source_branch_name\",\n        )\n"
        },
        {
            "id": "chunk_45_GithubMakeBranchBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the branch creation operation\")\n"
        },
        {
            "id": "chunk_45_GithubMakeBranchBlock.Output_2",
            "code": "        error: str = SchemaField(\n            description=\"Error message if the branch creation failed\"\n        )\n"
        },
        {
            "id": "chunk_46_GithubMakeBranchBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"944cc076-95e7-4d1b-b6b6-b15d8ee5448d\",\n            description=\"This block creates a new branch from a specified source branch.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakeBranchBlock.Input,\n            output_schema=GithubMakeBranchBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"new_branch\": \"new_branch_name\",\n                \"source_branch\": \"source_branch_name\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Branch created successfully\")],\n            test_mock={\n                \"create_branch\": lambda *args, **kwargs: \"Branch created successfully\"\n            },\n        )\n"
        },
        {
            "id": "chunk_47_GithubMakeBranchBlock.create_branch_1",
            "code": "    @staticmethod\n    def create_branch(\n        credentials: GithubCredentials,\n        repo_url: str,\n        new_branch: str,\n        source_branch: str,\n    ) -> str:\n"
        },
        {
            "id": "chunk_47_GithubMakeBranchBlock.create_branch_2",
            "code": "        api = get_api(credentials)\n        # Get the SHA of the source branch\n        ref_url = repo_url + f\"/git/refs/heads/{source_branch}\"\n        response = api.get(ref_url)\n        sha = response.json()[\"object\"][\"sha\"]\n"
        },
        {
            "id": "chunk_47_GithubMakeBranchBlock.create_branch_3",
            "code": "        # Create the new branch\n        create_ref_url = repo_url + \"/git/refs\"\n        data = {\"ref\": f\"refs/heads/{new_branch}\", \"sha\": sha}\n        response = api.post(create_ref_url, json=data)\n"
        },
        {
            "id": "chunk_47_GithubMakeBranchBlock.create_branch_4",
            "code": "        return \"Branch created successfully\"\n"
        },
        {
            "id": "chunk_48_GithubMakeBranchBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_48_GithubMakeBranchBlock.run_2",
            "code": "        status = self.create_branch(\n            credentials,\n            input_data.repo_url,\n            input_data.new_branch,\n            input_data.source_branch,\n        )\n"
        },
        {
            "id": "chunk_48_GithubMakeBranchBlock.run_3",
            "code": "        yield \"status\", status\n"
        },
        {
            "id": "chunk_49_GithubDeleteBranchBlock_1",
            "code": "class GithubDeleteBranchBlock(Block):\n"
        },
        {
            "id": "chunk_49_GithubDeleteBranchBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        branch: str = SchemaField(\n            description=\"Name of the branch to delete\",\n            placeholder=\"branch_name\",\n        )\n"
        },
        {
            "id": "chunk_49_GithubDeleteBranchBlock_3",
            "code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the branch deletion operation\")\n        error: str = SchemaField(\n            description=\"Error message if the branch deletion failed\"\n        )\n"
        },
        {
            "id": "chunk_49_GithubDeleteBranchBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"0d4130f7-e0ab-4d55-adc3-0a40225e80f4\",\n            description=\"This block deletes a specified branch.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubDeleteBranchBlock.Input,\n            output_schema=GithubDeleteBranchBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"branch\": \"branch_name\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Branch deleted successfully\")],\n            test_mock={\n                \"delete_branch\": lambda *args, **kwargs: \"Branch deleted successfully\"\n            },\n        )\n"
        },
        {
            "id": "chunk_49_GithubDeleteBranchBlock_5",
            "code": "    @staticmethod\n    def delete_branch(\n        credentials: GithubCredentials, repo_url: str, branch: str\n    ) -> str:\n        api = get_api(credentials)\n        ref_url = repo_url + f\"/git/refs/heads/{branch}\"\n        api.delete(ref_url)\n        return \"Branch deleted successfully\"\n"
        },
        {
            "id": "chunk_49_GithubDeleteBranchBlock_6",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.delete_branch(\n            credentials,\n            input_data.repo_url,\n            input_data.branch,\n        )\n        yield \"status\", status\n"
        },
        {
            "id": "chunk_50_GithubDeleteBranchBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_50_GithubDeleteBranchBlock.Input_2",
            "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_50_GithubDeleteBranchBlock.Input_3",
            "code": "        branch: str = SchemaField(\n            description=\"Name of the branch to delete\",\n            placeholder=\"branch_name\",\n        )\n"
        },
        {
            "id": "chunk_51_GithubDeleteBranchBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the branch deletion operation\")\n        error: str = SchemaField(\n            description=\"Error message if the branch deletion failed\"\n        )\n"
        },
        {
            "id": "chunk_52_GithubDeleteBranchBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"0d4130f7-e0ab-4d55-adc3-0a40225e80f4\",\n            description=\"This block deletes a specified branch.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubDeleteBranchBlock.Input,\n            output_schema=GithubDeleteBranchBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"branch\": \"branch_name\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Branch deleted successfully\")],\n            test_mock={\n                \"delete_branch\": lambda *args, **kwargs: \"Branch deleted successfully\"\n            },\n        )\n"
        },
        {
            "id": "chunk_53_GithubDeleteBranchBlock.delete_branch_1",
            "code": "    @staticmethod\n    def delete_branch(\n        credentials: GithubCredentials, repo_url: str, branch: str\n    ) -> str:\n"
        },
        {
            "id": "chunk_53_GithubDeleteBranchBlock.delete_branch_2",
            "code": "        api = get_api(credentials)\n        ref_url = repo_url + f\"/git/refs/heads/{branch}\"\n        api.delete(ref_url)\n"
        },
        {
            "id": "chunk_53_GithubDeleteBranchBlock.delete_branch_3",
            "code": "        return \"Branch deleted successfully\"\n"
        },
        {
            "id": "chunk_54_GithubDeleteBranchBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_54_GithubDeleteBranchBlock.run_2",
            "code": "        status = self.delete_branch(\n            credentials,\n            input_data.repo_url,\n            input_data.branch,\n        )\n"
        },
        {
            "id": "chunk_54_GithubDeleteBranchBlock.run_3",
            "code": "        yield \"status\", status\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_1_GithubListTagsBlock_1",
            "to": "chunk_1_GithubListTagsBlock_2"
        },
        {
            "from": "chunk_1_GithubListTagsBlock_2",
            "to": "chunk_1_GithubListTagsBlock_3"
        },
        {
            "from": "chunk_1_GithubListTagsBlock_3",
            "to": "chunk_1_GithubListTagsBlock_4"
        },
        {
            "from": "chunk_1_GithubListTagsBlock_4",
            "to": "chunk_1_GithubListTagsBlock_5"
        },
        {
            "from": "chunk_1_GithubListTagsBlock_5",
            "to": "chunk_1_GithubListTagsBlock_6"
        },
        {
            "from": "chunk_1_GithubListTagsBlock_6",
            "to": "chunk_1_GithubListTagsBlock_7"
        },
        {
            "from": "chunk_1_GithubListTagsBlock_7",
            "to": "chunk_1_GithubListTagsBlock_8"
        },
        {
            "from": "chunk_1_GithubListTagsBlock_8",
            "to": "chunk_1_GithubListTagsBlock_9"
        },
        {
            "from": "chunk_1_GithubListTagsBlock_9",
            "to": "chunk_1_GithubListTagsBlock_10"
        },
        {
            "from": "chunk_1_GithubListTagsBlock_10",
            "to": "chunk_1_GithubListTagsBlock_11"
        },
        {
            "from": "chunk_3_GithubListTagsBlock.Output_1",
            "to": "chunk_3_GithubListTagsBlock.Output_2"
        },
        {
            "from": "chunk_3_GithubListTagsBlock.Output_2",
            "to": "chunk_3_GithubListTagsBlock.Output_3"
        },
        {
            "from": "chunk_3_GithubListTagsBlock.Output_3",
            "to": "chunk_3_GithubListTagsBlock.Output_4"
        },
        {
            "from": "chunk_6_GithubListTagsBlock.list_tags_1",
            "to": "chunk_6_GithubListTagsBlock.list_tags_2"
        },
        {
            "from": "chunk_6_GithubListTagsBlock.list_tags_2",
            "to": "chunk_6_GithubListTagsBlock.list_tags_3"
        },
        {
            "from": "chunk_6_GithubListTagsBlock.list_tags_3",
            "to": "chunk_6_GithubListTagsBlock.list_tags_4"
        },
        {
            "from": "chunk_6_GithubListTagsBlock.list_tags_4",
            "to": "chunk_6_GithubListTagsBlock.list_tags_5"
        },
        {
            "from": "chunk_7_GithubListTagsBlock.run_1",
            "to": "chunk_7_GithubListTagsBlock.run_2"
        },
        {
            "from": "chunk_7_GithubListTagsBlock.run_2",
            "to": "chunk_7_GithubListTagsBlock.run_3"
        },
        {
            "from": "chunk_8_GithubListBranchesBlock_1",
            "to": "chunk_8_GithubListBranchesBlock_2"
        },
        {
            "from": "chunk_8_GithubListBranchesBlock_2",
            "to": "chunk_8_GithubListBranchesBlock_3"
        },
        {
            "from": "chunk_8_GithubListBranchesBlock_3",
            "to": "chunk_8_GithubListBranchesBlock_4"
        },
        {
            "from": "chunk_8_GithubListBranchesBlock_4",
            "to": "chunk_8_GithubListBranchesBlock_5"
        },
        {
            "from": "chunk_8_GithubListBranchesBlock_5",
            "to": "chunk_8_GithubListBranchesBlock_6"
        },
        {
            "from": "chunk_8_GithubListBranchesBlock_6",
            "to": "chunk_8_GithubListBranchesBlock_7"
        },
        {
            "from": "chunk_8_GithubListBranchesBlock_7",
            "to": "chunk_8_GithubListBranchesBlock_8"
        },
        {
            "from": "chunk_8_GithubListBranchesBlock_8",
            "to": "chunk_8_GithubListBranchesBlock_9"
        },
        {
            "from": "chunk_8_GithubListBranchesBlock_9",
            "to": "chunk_8_GithubListBranchesBlock_10"
        },
        {
            "from": "chunk_8_GithubListBranchesBlock_10",
            "to": "chunk_8_GithubListBranchesBlock_11"
        },
        {
            "from": "chunk_8_GithubListBranchesBlock_11",
            "to": "chunk_8_GithubListBranchesBlock_12"
        },
        {
            "from": "chunk_10_GithubListBranchesBlock.Output_1",
            "to": "chunk_10_GithubListBranchesBlock.Output_2"
        },
        {
            "from": "chunk_10_GithubListBranchesBlock.Output_2",
            "to": "chunk_10_GithubListBranchesBlock.Output_3"
        },
        {
            "from": "chunk_10_GithubListBranchesBlock.Output_3",
            "to": "chunk_10_GithubListBranchesBlock.Output_4"
        },
        {
            "from": "chunk_12_GithubListBranchesBlock.__init___1",
            "to": "chunk_12_GithubListBranchesBlock.__init___2"
        },
        {
            "from": "chunk_13_GithubListBranchesBlock.list_branches_1",
            "to": "chunk_13_GithubListBranchesBlock.list_branches_2"
        },
        {
            "from": "chunk_13_GithubListBranchesBlock.list_branches_2",
            "to": "chunk_13_GithubListBranchesBlock.list_branches_3"
        },
        {
            "from": "chunk_13_GithubListBranchesBlock.list_branches_3",
            "to": "chunk_13_GithubListBranchesBlock.list_branches_4"
        },
        {
            "from": "chunk_13_GithubListBranchesBlock.list_branches_4",
            "to": "chunk_13_GithubListBranchesBlock.list_branches_5"
        },
        {
            "from": "chunk_13_GithubListBranchesBlock.list_branches_5",
            "to": "chunk_13_GithubListBranchesBlock.list_branches_6"
        },
        {
            "from": "chunk_13_GithubListBranchesBlock.list_branches_6",
            "to": "chunk_13_GithubListBranchesBlock.list_branches_7"
        },
        {
            "from": "chunk_13_GithubListBranchesBlock.list_branches_7",
            "to": "chunk_13_GithubListBranchesBlock.list_branches_8"
        },
        {
            "from": "chunk_14_GithubListBranchesBlock.run_1",
            "to": "chunk_14_GithubListBranchesBlock.run_2"
        },
        {
            "from": "chunk_14_GithubListBranchesBlock.run_2",
            "to": "chunk_14_GithubListBranchesBlock.run_3"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_1",
            "to": "chunk_15_GithubListDiscussionsBlock_2"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_2",
            "to": "chunk_15_GithubListDiscussionsBlock_3"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_3",
            "to": "chunk_15_GithubListDiscussionsBlock_4"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_4",
            "to": "chunk_15_GithubListDiscussionsBlock_5"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_5",
            "to": "chunk_15_GithubListDiscussionsBlock_6"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_6",
            "to": "chunk_15_GithubListDiscussionsBlock_7"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_7",
            "to": "chunk_15_GithubListDiscussionsBlock_8"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_8",
            "to": "chunk_15_GithubListDiscussionsBlock_9"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_9",
            "to": "chunk_15_GithubListDiscussionsBlock_10"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_10",
            "to": "chunk_15_GithubListDiscussionsBlock_11"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_11",
            "to": "chunk_15_GithubListDiscussionsBlock_12"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_12",
            "to": "chunk_15_GithubListDiscussionsBlock_13"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_13",
            "to": "chunk_15_GithubListDiscussionsBlock_14"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_14",
            "to": "chunk_15_GithubListDiscussionsBlock_15"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_15",
            "to": "chunk_15_GithubListDiscussionsBlock_16"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_16",
            "to": "chunk_15_GithubListDiscussionsBlock_17"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_17",
            "to": "chunk_15_GithubListDiscussionsBlock_18"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_18",
            "to": "chunk_15_GithubListDiscussionsBlock_19"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_19",
            "to": "chunk_15_GithubListDiscussionsBlock_20"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_20",
            "to": "chunk_15_GithubListDiscussionsBlock_21"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_21",
            "to": "chunk_15_GithubListDiscussionsBlock_22"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_22",
            "to": "chunk_15_GithubListDiscussionsBlock_23"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_23",
            "to": "chunk_15_GithubListDiscussionsBlock_24"
        },
        {
            "from": "chunk_15_GithubListDiscussionsBlock_24",
            "to": "chunk_15_GithubListDiscussionsBlock_25"
        },
        {
            "from": "chunk_16_GithubListDiscussionsBlock.Input_1",
            "to": "chunk_16_GithubListDiscussionsBlock.Input_2"
        },
        {
            "from": "chunk_16_GithubListDiscussionsBlock.Input_2",
            "to": "chunk_16_GithubListDiscussionsBlock.Input_3"
        },
        {
            "from": "chunk_17_GithubListDiscussionsBlock.Output_1",
            "to": "chunk_17_GithubListDiscussionsBlock.Output_2"
        },
        {
            "from": "chunk_17_GithubListDiscussionsBlock.Output_2",
            "to": "chunk_17_GithubListDiscussionsBlock.Output_3"
        },
        {
            "from": "chunk_17_GithubListDiscussionsBlock.Output_3",
            "to": "chunk_17_GithubListDiscussionsBlock.Output_4"
        },
        {
            "from": "chunk_20_GithubListDiscussionsBlock.list_discussions_1",
            "to": "chunk_20_GithubListDiscussionsBlock.list_discussions_2"
        },
        {
            "from": "chunk_20_GithubListDiscussionsBlock.list_discussions_2",
            "to": "chunk_20_GithubListDiscussionsBlock.list_discussions_3"
        },
        {
            "from": "chunk_20_GithubListDiscussionsBlock.list_discussions_3",
            "to": "chunk_20_GithubListDiscussionsBlock.list_discussions_4"
        },
        {
            "from": "chunk_20_GithubListDiscussionsBlock.list_discussions_4",
            "to": "chunk_20_GithubListDiscussionsBlock.list_discussions_5"
        },
        {
            "from": "chunk_20_GithubListDiscussionsBlock.list_discussions_5",
            "to": "chunk_20_GithubListDiscussionsBlock.list_discussions_6"
        },
        {
            "from": "chunk_20_GithubListDiscussionsBlock.list_discussions_6",
            "to": "chunk_20_GithubListDiscussionsBlock.list_discussions_7"
        },
        {
            "from": "chunk_20_GithubListDiscussionsBlock.list_discussions_7",
            "to": "chunk_20_GithubListDiscussionsBlock.list_discussions_8"
        },
        {
            "from": "chunk_20_GithubListDiscussionsBlock.list_discussions_8",
            "to": "chunk_20_GithubListDiscussionsBlock.list_discussions_9"
        },
        {
            "from": "chunk_20_GithubListDiscussionsBlock.list_discussions_9",
            "to": "chunk_20_GithubListDiscussionsBlock.list_discussions_10"
        },
        {
            "from": "chunk_21_GithubListDiscussionsBlock.run_1",
            "to": "chunk_21_GithubListDiscussionsBlock.run_2"
        },
        {
            "from": "chunk_21_GithubListDiscussionsBlock.run_2",
            "to": "chunk_21_GithubListDiscussionsBlock.run_3"
        },
        {
            "from": "chunk_22_GithubListReleasesBlock_1",
            "to": "chunk_22_GithubListReleasesBlock_2"
        },
        {
            "from": "chunk_22_GithubListReleasesBlock_2",
            "to": "chunk_22_GithubListReleasesBlock_3"
        },
        {
            "from": "chunk_22_GithubListReleasesBlock_3",
            "to": "chunk_22_GithubListReleasesBlock_4"
        },
        {
            "from": "chunk_22_GithubListReleasesBlock_3",
            "to": "chunk_22_GithubListReleasesBlock_5"
        },
        {
            "from": "chunk_24_GithubListReleasesBlock.Output_1",
            "to": "chunk_24_GithubListReleasesBlock.Output_2"
        },
        {
            "from": "chunk_24_GithubListReleasesBlock.Output_2",
            "to": "chunk_24_GithubListReleasesBlock.Output_3"
        },
        {
            "from": "chunk_24_GithubListReleasesBlock.Output_3",
            "to": "chunk_24_GithubListReleasesBlock.Output_4"
        },
        {
            "from": "chunk_27_GithubListReleasesBlock.list_releases_1",
            "to": "chunk_27_GithubListReleasesBlock.list_releases_2"
        },
        {
            "from": "chunk_27_GithubListReleasesBlock.list_releases_2",
            "to": "chunk_27_GithubListReleasesBlock.list_releases_3"
        },
        {
            "from": "chunk_27_GithubListReleasesBlock.list_releases_3",
            "to": "chunk_27_GithubListReleasesBlock.list_releases_4"
        },
        {
            "from": "chunk_28_GithubListReleasesBlock.run_1",
            "to": "chunk_28_GithubListReleasesBlock.run_2"
        },
        {
            "from": "chunk_28_GithubListReleasesBlock.run_2",
            "to": "chunk_28_GithubListReleasesBlock.run_3"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_1",
            "to": "chunk_29_GithubReadFileBlock_2"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_2",
            "to": "chunk_29_GithubReadFileBlock_3"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_3",
            "to": "chunk_29_GithubReadFileBlock_4"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_4",
            "to": "chunk_29_GithubReadFileBlock_5"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_5",
            "to": "chunk_29_GithubReadFileBlock_6"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_6",
            "to": "chunk_29_GithubReadFileBlock_7"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_7",
            "to": "chunk_29_GithubReadFileBlock_8"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_8",
            "to": "chunk_29_GithubReadFileBlock_9"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_9",
            "to": "chunk_29_GithubReadFileBlock_10"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_10",
            "to": "chunk_29_GithubReadFileBlock_11"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_11",
            "to": "chunk_29_GithubReadFileBlock_12"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_12",
            "to": "chunk_29_GithubReadFileBlock_13"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_14",
            "to": "chunk_29_GithubReadFileBlock_15"
        },
        {
            "from": "chunk_29_GithubReadFileBlock_15",
            "to": "chunk_29_GithubReadFileBlock_16"
        },
        {
            "from": "chunk_30_GithubReadFileBlock.Input_1",
            "to": "chunk_30_GithubReadFileBlock.Input_2"
        },
        {
            "from": "chunk_30_GithubReadFileBlock.Input_2",
            "to": "chunk_30_GithubReadFileBlock.Input_3"
        },
        {
            "from": "chunk_30_GithubReadFileBlock.Input_3",
            "to": "chunk_30_GithubReadFileBlock.Input_4"
        },
        {
            "from": "chunk_33_GithubReadFileBlock.read_file_1",
            "to": "chunk_33_GithubReadFileBlock.read_file_2"
        },
        {
            "from": "chunk_33_GithubReadFileBlock.read_file_2",
            "to": "chunk_33_GithubReadFileBlock.read_file_3"
        },
        {
            "from": "chunk_33_GithubReadFileBlock.read_file_3",
            "to": "chunk_33_GithubReadFileBlock.read_file_4"
        },
        {
            "from": "chunk_33_GithubReadFileBlock.read_file_4",
            "to": "chunk_33_GithubReadFileBlock.read_file_5"
        },
        {
            "from": "chunk_34_GithubReadFileBlock.run_1",
            "to": "chunk_34_GithubReadFileBlock.run_2"
        },
        {
            "from": "chunk_34_GithubReadFileBlock.run_2",
            "to": "chunk_34_GithubReadFileBlock.run_3"
        },
        {
            "from": "chunk_34_GithubReadFileBlock.run_3",
            "to": "chunk_34_GithubReadFileBlock.run_4"
        },
        {
            "from": "chunk_34_GithubReadFileBlock.run_4",
            "to": "chunk_34_GithubReadFileBlock.run_5"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_1",
            "to": "chunk_35_GithubReadFolderBlock_2"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_2",
            "to": "chunk_35_GithubReadFolderBlock_3"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_3",
            "to": "chunk_35_GithubReadFolderBlock_4"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_4",
            "to": "chunk_35_GithubReadFolderBlock_5"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_5",
            "to": "chunk_35_GithubReadFolderBlock_6"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_6",
            "to": "chunk_35_GithubReadFolderBlock_7"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_7",
            "to": "chunk_35_GithubReadFolderBlock_14"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_8",
            "to": "chunk_35_GithubReadFolderBlock_9"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_9",
            "to": "chunk_35_GithubReadFolderBlock_10"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_10",
            "to": "chunk_35_GithubReadFolderBlock_11"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_11",
            "to": "chunk_35_GithubReadFolderBlock_12"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_12",
            "to": "chunk_35_GithubReadFolderBlock_13"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_14",
            "to": "chunk_35_GithubReadFolderBlock_15"
        },
        {
            "from": "chunk_35_GithubReadFolderBlock_15",
            "to": "chunk_35_GithubReadFolderBlock_16"
        },
        {
            "from": "chunk_36_GithubReadFolderBlock.Input_1",
            "to": "chunk_36_GithubReadFolderBlock.Input_2"
        },
        {
            "from": "chunk_36_GithubReadFolderBlock.Input_2",
            "to": "chunk_36_GithubReadFolderBlock.Input_3"
        },
        {
            "from": "chunk_36_GithubReadFolderBlock.Input_3",
            "to": "chunk_36_GithubReadFolderBlock.Input_4"
        },
        {
            "from": "chunk_37_GithubReadFolderBlock.Output_1",
            "to": "chunk_37_GithubReadFolderBlock.Output_2"
        },
        {
            "from": "chunk_37_GithubReadFolderBlock.Output_1",
            "to": "chunk_37_GithubReadFolderBlock.Output_3"
        },
        {
            "from": "chunk_37_GithubReadFolderBlock.Output_4",
            "to": "chunk_37_GithubReadFolderBlock.Output_5"
        },
        {
            "from": "chunk_37_GithubReadFolderBlock.Output_5",
            "to": "chunk_37_GithubReadFolderBlock.Output_6"
        },
        {
            "from": "chunk_41_GithubReadFolderBlock.read_folder_1",
            "to": "chunk_41_GithubReadFolderBlock.read_folder_2"
        },
        {
            "from": "chunk_41_GithubReadFolderBlock.read_folder_2",
            "to": "chunk_41_GithubReadFolderBlock.read_folder_3"
        },
        {
            "from": "chunk_41_GithubReadFolderBlock.read_folder_3",
            "to": "chunk_41_GithubReadFolderBlock.read_folder_4"
        },
        {
            "from": "chunk_41_GithubReadFolderBlock.read_folder_3",
            "to": "chunk_41_GithubReadFolderBlock.read_folder_5"
        },
        {
            "from": "chunk_41_GithubReadFolderBlock.read_folder_4",
            "to": "chunk_41_GithubReadFolderBlock.read_folder_6"
        },
        {
            "from": "chunk_41_GithubReadFolderBlock.read_folder_5",
            "to": "chunk_41_GithubReadFolderBlock.read_folder_6"
        },
        {
            "from": "chunk_42_GithubReadFolderBlock.run_1",
            "to": "chunk_42_GithubReadFolderBlock.run_2"
        },
        {
            "from": "chunk_42_GithubReadFolderBlock.run_2",
            "to": "chunk_42_GithubReadFolderBlock.run_3"
        },
        {
            "from": "chunk_42_GithubReadFolderBlock.run_2",
            "to": "chunk_42_GithubReadFolderBlock.run_4"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_1",
            "to": "chunk_43_GithubMakeBranchBlock_2"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_2",
            "to": "chunk_43_GithubMakeBranchBlock_3"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_3",
            "to": "chunk_43_GithubMakeBranchBlock_4"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_4",
            "to": "chunk_43_GithubMakeBranchBlock_5"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_5",
            "to": "chunk_43_GithubMakeBranchBlock_6"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_6",
            "to": "chunk_43_GithubMakeBranchBlock_7"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_7",
            "to": "chunk_43_GithubMakeBranchBlock_8"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_8",
            "to": "chunk_43_GithubMakeBranchBlock_9"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_9",
            "to": "chunk_43_GithubMakeBranchBlock_10"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_10",
            "to": "chunk_43_GithubMakeBranchBlock_11"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_11",
            "to": "chunk_43_GithubMakeBranchBlock_12"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_12",
            "to": "chunk_43_GithubMakeBranchBlock_13"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_13",
            "to": "chunk_43_GithubMakeBranchBlock_14"
        },
        {
            "from": "chunk_43_GithubMakeBranchBlock_14",
            "to": "chunk_43_GithubMakeBranchBlock_15"
        },
        {
            "from": "chunk_44_GithubMakeBranchBlock.Input_1",
            "to": "chunk_44_GithubMakeBranchBlock.Input_2"
        },
        {
            "from": "chunk_44_GithubMakeBranchBlock.Input_2",
            "to": "chunk_44_GithubMakeBranchBlock.Input_3"
        },
        {
            "from": "chunk_44_GithubMakeBranchBlock.Input_3",
            "to": "chunk_44_GithubMakeBranchBlock.Input_4"
        },
        {
            "from": "chunk_45_GithubMakeBranchBlock.Output_1",
            "to": "chunk_45_GithubMakeBranchBlock.Output_2"
        },
        {
            "from": "chunk_47_GithubMakeBranchBlock.create_branch_1",
            "to": "chunk_47_GithubMakeBranchBlock.create_branch_2"
        },
        {
            "from": "chunk_47_GithubMakeBranchBlock.create_branch_2",
            "to": "chunk_47_GithubMakeBranchBlock.create_branch_3"
        },
        {
            "from": "chunk_47_GithubMakeBranchBlock.create_branch_3",
            "to": "chunk_47_GithubMakeBranchBlock.create_branch_4"
        },
        {
            "from": "chunk_48_GithubMakeBranchBlock.run_1",
            "to": "chunk_48_GithubMakeBranchBlock.run_2"
        },
        {
            "from": "chunk_48_GithubMakeBranchBlock.run_2",
            "to": "chunk_48_GithubMakeBranchBlock.run_3"
        },
        {
            "from": "chunk_49_GithubDeleteBranchBlock_1",
            "to": "chunk_49_GithubDeleteBranchBlock_2"
        },
        {
            "from": "chunk_49_GithubDeleteBranchBlock_1",
            "to": "chunk_49_GithubDeleteBranchBlock_3"
        },
        {
            "from": "chunk_49_GithubDeleteBranchBlock_1",
            "to": "chunk_49_GithubDeleteBranchBlock_4"
        },
        {
            "from": "chunk_49_GithubDeleteBranchBlock_4",
            "to": "chunk_49_GithubDeleteBranchBlock_5"
        },
        {
            "from": "chunk_49_GithubDeleteBranchBlock_4",
            "to": "chunk_49_GithubDeleteBranchBlock_6"
        },
        {
            "from": "chunk_50_GithubDeleteBranchBlock.Input_1",
            "to": "chunk_50_GithubDeleteBranchBlock.Input_2"
        },
        {
            "from": "chunk_50_GithubDeleteBranchBlock.Input_2",
            "to": "chunk_50_GithubDeleteBranchBlock.Input_3"
        },
        {
            "from": "chunk_53_GithubDeleteBranchBlock.delete_branch_1",
            "to": "chunk_53_GithubDeleteBranchBlock.delete_branch_2"
        },
        {
            "from": "chunk_53_GithubDeleteBranchBlock.delete_branch_2",
            "to": "chunk_53_GithubDeleteBranchBlock.delete_branch_3"
        },
        {
            "from": "chunk_54_GithubDeleteBranchBlock.run_1",
            "to": "chunk_54_GithubDeleteBranchBlock.run_2"
        },
        {
            "from": "chunk_54_GithubDeleteBranchBlock.run_2",
            "to": "chunk_54_GithubDeleteBranchBlock.run_3"
        }
    ]
}