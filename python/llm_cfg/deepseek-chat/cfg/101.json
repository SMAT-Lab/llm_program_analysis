{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from typing import Literal\nfrom urllib.parse import quote\n\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from pydantic import SecretStr\n\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.blocks.helpers.http import GetRequest\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "from backend.integrations.providers import ProviderName\n\n\n\n"
        },
        {
            "id": "chunk_1_GetWikipediaSummaryBlock_1",
            "code": "class GetWikipediaSummaryBlock(Block, GetRequest):\n"
        },
        {
            "id": "chunk_1_GetWikipediaSummaryBlock_2",
            "code": "    class Input(BlockSchema):\n        topic: str = SchemaField(description=\"The topic to fetch the summary for\")\n"
        },
        {
            "id": "chunk_1_GetWikipediaSummaryBlock_3",
            "code": "    class Output(BlockSchema):\n        summary: str = SchemaField(description=\"The summary of the given topic\")\n        error: str = SchemaField(\n            description=\"Error message if the summary cannot be retrieved\"\n        )\n"
        },
        {
            "id": "chunk_1_GetWikipediaSummaryBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"f5b0f5d0-1862-4d61-94be-3ad0fa772760\",\n            description=\"This block fetches the summary of a given topic from Wikipedia.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=GetWikipediaSummaryBlock.Input,\n            output_schema=GetWikipediaSummaryBlock.Output,\n            test_input={\"topic\": \"Artificial Intelligence\"},\n            test_output=(\"summary\", \"summary content\"),\n            test_mock={\"get_request\": lambda url, json: {\"extract\": \"summary content\"}},\n        )\n"
        },
        {
            "id": "chunk_1_GetWikipediaSummaryBlock_5",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        topic = input_data.topic\n        url = f\"https://en.wikipedia.org/api/rest_v1/page/summary/{topic}\"\n        response = self.get_request(url, json=True)\n        if \"extract\" not in response:\n            raise RuntimeError(f\"Unable to parse Wikipedia response: {response}\")\n        yield \"summary\", response[\"extract\"]\n"
        },
        {
            "id": "chunk_2_GetWikipediaSummaryBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        topic: str = SchemaField(description=\"The topic to fetch the summary for\")\n"
        },
        {
            "id": "chunk_3_GetWikipediaSummaryBlock.Output_1",
            "code": "    class Output(BlockSchema):\n"
        },
        {
            "id": "chunk_3_GetWikipediaSummaryBlock.Output_2",
            "code": "        summary: str = SchemaField(description=\"The summary of the given topic\")\n"
        },
        {
            "id": "chunk_3_GetWikipediaSummaryBlock.Output_3",
            "code": "        error: str = SchemaField(\n            description=\"Error message if the summary cannot be retrieved\"\n        )\n"
        },
        {
            "id": "chunk_4_GetWikipediaSummaryBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"f5b0f5d0-1862-4d61-94be-3ad0fa772760\",\n            description=\"This block fetches the summary of a given topic from Wikipedia.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=GetWikipediaSummaryBlock.Input,\n            output_schema=GetWikipediaSummaryBlock.Output,\n            test_input={\"topic\": \"Artificial Intelligence\"},\n            test_output=(\"summary\", \"summary content\"),\n            test_mock={\"get_request\": lambda url, json: {\"extract\": \"summary content\"}},\n        )\n"
        },
        {
            "id": "chunk_5_GetWikipediaSummaryBlock.run_1",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        topic = input_data.topic\n        url = f\"https://en.wikipedia.org/api/rest_v1/page/summary/{topic}\"\n        response = self.get_request(url, json=True)\n"
        },
        {
            "id": "chunk_5_GetWikipediaSummaryBlock.run_2",
            "code": "        if \"extract\" not in response:\n            raise RuntimeError(f\"Unable to parse Wikipedia response: {response}\")\n"
        },
        {
            "id": "chunk_5_GetWikipediaSummaryBlock.run_3",
            "code": "        yield \"summary\", response[\"extract\"]\n"
        },
        {
            "id": "chunk_6_GlobalBlock_1",
            "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"openweathermap\",\n    api_key=SecretStr(\"mock-openweathermap-api-key\"),\n    title=\"Mock OpenWeatherMap API key\",\n    expires_at=None,\n)\n"
        },
        {
            "id": "chunk_6_GlobalBlock_2",
            "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n"
        },
        {
            "id": "chunk_7_GetWeatherInformationBlock_1",
            "code": "class GetWeatherInformationBlock(Block, GetRequest):\n"
        },
        {
            "id": "chunk_7_GetWeatherInformationBlock_2",
            "code": "    class Input(BlockSchema):\n        location: str = SchemaField(\n            description=\"Location to get weather information for\"\n        )\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.OPENWEATHERMAP], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The OpenWeatherMap integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        use_celsius: bool = SchemaField(\n            default=True,\n            description=\"Whether to use Celsius or Fahrenheit for temperature\",\n        )\n"
        },
        {
            "id": "chunk_7_GetWeatherInformationBlock_3",
            "code": "    class Output(BlockSchema):\n        temperature: str = SchemaField(\n            description=\"Temperature in the specified location\"\n        )\n        humidity: str = SchemaField(description=\"Humidity in the specified location\")\n        condition: str = SchemaField(\n            description=\"Weather condition in the specified location\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the weather information cannot be retrieved\"\n        )\n"
        },
        {
            "id": "chunk_7_GetWeatherInformationBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f\",\n            input_schema=GetWeatherInformationBlock.Input,\n            output_schema=GetWeatherInformationBlock.Output,\n            description=\"Retrieves weather information for a specified location using OpenWeatherMap API.\",\n            test_input={\n                \"location\": \"New York\",\n                \"use_celsius\": True,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\"temperature\", \"21.66\"),\n                (\"humidity\", \"32\"),\n                (\"condition\", \"overcast clouds\"),\n            ],\n            test_mock={\n                \"get_request\": lambda url, json: {\n                    \"main\": {\"temp\": 21.66, \"humidity\": 32},\n                    \"weather\": [{\"description\": \"overcast clouds\"}],\n                }\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n"
        },
        {
            "id": "chunk_7_GetWeatherInformationBlock_5",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        units = \"metric\" if input_data.use_celsius else \"imperial\"\n        api_key = credentials.api_key\n        location = input_data.location\n        url = f\"http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}\"\n        weather_data = self.get_request(url, json=True)\n"
        },
        {
            "id": "chunk_7_GetWeatherInformationBlock_6",
            "code": "        if \"main\" in weather_data and \"weather\" in weather_data:\n            yield \"temperature\", str(weather_data[\"main\"][\"temp\"])\n            yield \"humidity\", str(weather_data[\"main\"][\"humidity\"])\n            yield \"condition\", weather_data[\"weather\"][0][\"description\"]\n"
        },
        {
            "id": "chunk_7_GetWeatherInformationBlock_7",
            "code": "        else:\n            raise RuntimeError(f\"Expected keys not found in response: {weather_data}\")\n"
        },
        {
            "id": "chunk_8_GetWeatherInformationBlock.Input_1",
            "code": "    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_8_GetWeatherInformationBlock.Input_2",
            "code": "        location: str = SchemaField(\n            description=\"Location to get weather information for\"\n        )\n"
        },
        {
            "id": "chunk_8_GetWeatherInformationBlock.Input_3",
            "code": "        credentials: CredentialsMetaInput[\n            Literal[ProviderName.OPENWEATHERMAP], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The OpenWeatherMap integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n"
        },
        {
            "id": "chunk_8_GetWeatherInformationBlock.Input_4",
            "code": "        use_celsius: bool = SchemaField(\n            default=True,\n            description=\"Whether to use Celsius or Fahrenheit for temperature\",\n        )\n"
        },
        {
            "id": "chunk_9_GetWeatherInformationBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        temperature: str = SchemaField(\n            description=\"Temperature in the specified location\"\n        )\n        humidity: str = SchemaField(description=\"Humidity in the specified location\")\n        condition: str = SchemaField(\n            description=\"Weather condition in the specified location\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the weather information cannot be retrieved\"\n        )\n"
        },
        {
            "id": "chunk_10_GetWeatherInformationBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f\",\n            input_schema=GetWeatherInformationBlock.Input,\n            output_schema=GetWeatherInformationBlock.Output,\n            description=\"Retrieves weather information for a specified location using OpenWeatherMap API.\",\n            test_input={\n                \"location\": \"New York\",\n                \"use_celsius\": True,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\"temperature\", \"21.66\"),\n                (\"humidity\", \"32\"),\n                (\"condition\", \"overcast clouds\"),\n            ],\n            test_mock={\n                \"get_request\": lambda url, json: {\n                    \"main\": {\"temp\": 21.66, \"humidity\": 32},\n                    \"weather\": [{\"description\": \"overcast clouds\"}],\n                }\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n"
        },
        {
            "id": "chunk_11_GetWeatherInformationBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_11_GetWeatherInformationBlock.run_2",
            "code": "        units = \"metric\" if input_data.use_celsius else \"imperial\"\n        api_key = credentials.api_key\n        location = input_data.location\n        url = f\"http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}\"\n"
        },
        {
            "id": "chunk_11_GetWeatherInformationBlock.run_3",
            "code": "        weather_data = self.get_request(url, json=True)\n"
        },
        {
            "id": "chunk_11_GetWeatherInformationBlock.run_4",
            "code": "        if \"main\" in weather_data and \"weather\" in weather_data:\n            yield \"temperature\", str(weather_data[\"main\"][\"temp\"])\n            yield \"humidity\", str(weather_data[\"main\"][\"humidity\"])\n            yield \"condition\", weather_data[\"weather\"][0][\"description\"]\n"
        },
        {
            "id": "chunk_11_GetWeatherInformationBlock.run_5",
            "code": "        else:\n            raise RuntimeError(f\"Expected keys not found in response: {weather_data}\")\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_1_GetWikipediaSummaryBlock_1",
            "to": "chunk_1_GetWikipediaSummaryBlock_2"
        },
        {
            "from": "chunk_1_GetWikipediaSummaryBlock_1",
            "to": "chunk_1_GetWikipediaSummaryBlock_3"
        },
        {
            "from": "chunk_3_GetWikipediaSummaryBlock.Output_1",
            "to": "chunk_3_GetWikipediaSummaryBlock.Output_2"
        },
        {
            "from": "chunk_3_GetWikipediaSummaryBlock.Output_2",
            "to": "chunk_3_GetWikipediaSummaryBlock.Output_3"
        },
        {
            "from": "chunk_5_GetWikipediaSummaryBlock.run_1",
            "to": "chunk_5_GetWikipediaSummaryBlock.run_2"
        },
        {
            "from": "chunk_5_GetWikipediaSummaryBlock.run_2",
            "to": "chunk_5_GetWikipediaSummaryBlock.run_3"
        },
        {
            "from": "chunk_6_GlobalBlock_1",
            "to": "chunk_6_GlobalBlock_2"
        },
        {
            "from": "chunk_7_GetWeatherInformationBlock_1",
            "to": "chunk_7_GetWeatherInformationBlock_2"
        },
        {
            "from": "chunk_7_GetWeatherInformationBlock_1",
            "to": "chunk_7_GetWeatherInformationBlock_3"
        },
        {
            "from": "chunk_7_GetWeatherInformationBlock_1",
            "to": "chunk_7_GetWeatherInformationBlock_4"
        },
        {
            "from": "chunk_7_GetWeatherInformationBlock_4",
            "to": "chunk_7_GetWeatherInformationBlock_5"
        },
        {
            "from": "chunk_7_GetWeatherInformationBlock_5",
            "to": "chunk_7_GetWeatherInformationBlock_6"
        },
        {
            "from": "chunk_7_GetWeatherInformationBlock_5",
            "to": "chunk_7_GetWeatherInformationBlock_7"
        },
        {
            "from": "chunk_8_GetWeatherInformationBlock.Input_1",
            "to": "chunk_8_GetWeatherInformationBlock.Input_2"
        },
        {
            "from": "chunk_8_GetWeatherInformationBlock.Input_2",
            "to": "chunk_8_GetWeatherInformationBlock.Input_3"
        },
        {
            "from": "chunk_8_GetWeatherInformationBlock.Input_3",
            "to": "chunk_8_GetWeatherInformationBlock.Input_4"
        },
        {
            "from": "chunk_11_GetWeatherInformationBlock.run_1",
            "to": "chunk_11_GetWeatherInformationBlock.run_2"
        },
        {
            "from": "chunk_11_GetWeatherInformationBlock.run_2",
            "to": "chunk_11_GetWeatherInformationBlock.run_3"
        },
        {
            "from": "chunk_11_GetWeatherInformationBlock.run_3",
            "to": "chunk_11_GetWeatherInformationBlock.run_4"
        },
        {
            "from": "chunk_11_GetWeatherInformationBlock.run_3",
            "to": "chunk_11_GetWeatherInformationBlock.run_5"
        }
    ]
}