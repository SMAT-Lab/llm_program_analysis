{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from functools import wraps\nfrom typing import Any, Callable, Concatenate, Coroutine, ParamSpec, TypeVar, cast\n\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.data.credit import get_user_credit_model\nfrom backend.data.execution import (\n    ExecutionResult,\n    RedisExecutionEventBus,\n    create_graph_execution,\n    get_execution_results,\n    get_incomplete_executions,\n    get_latest_execution,\n    update_execution_status,\n    update_graph_execution_stats,\n    update_node_execution_stats,\n    upsert_execution_input,\n    upsert_execution_output,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.graph import get_graph, get_node\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from backend.data.user import (\n    get_user_integrations,\n    get_user_metadata,\n    update_user_integrations,\n    update_user_metadata,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "from backend.util.service import AppService, expose, register_pydantic_serializers\nfrom backend.util.settings import Config\n"
        },
        {
            "id": "chunk_0_GlobalBlock_6",
            "code": "\n"
        },
        {
            "id": "chunk_0_GlobalBlock_7",
            "code": "P = ParamSpec(\"P\")\nR = TypeVar(\"R\")\n"
        },
        {
            "id": "chunk_0_GlobalBlock_8",
            "code": "config = Config()\n"
        },
        {
            "id": "chunk_0_GlobalBlock_9",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_DatabaseManager_1",
            "code": "class DatabaseManager(AppService):\n"
        },
        {
            "id": "chunk_1_DatabaseManager_2",
            "code": "    def __init__(self):\n        super().__init__()\n        self.use_db = True\n        self.use_redis = True\n        self.event_queue = RedisExecutionEventBus()\n\n"
        },
        {
            "id": "chunk_1_DatabaseManager_3",
            "code": "    @classmethod\n    def get_port(cls) -> int:\n        return config.database_api_port\n"
        },
        {
            "id": "chunk_1_DatabaseManager_4",
            "code": "    @expose\n    def send_execution_update(self, execution_result: ExecutionResult):\n        self.event_queue.publish(execution_result)\n"
        },
        {
            "id": "chunk_1_DatabaseManager_5",
            "code": "    @staticmethod\n    def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:\n        @expose\n        @wraps(f)\n        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res\n\n        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)\n\n        return wrapper\n"
        },
        {
            "id": "chunk_1_DatabaseManager_6",
            "code": "    # Executions\n    create_graph_execution = exposed_run_and_wait(create_graph_execution)\n    get_execution_results = exposed_run_and_wait(get_execution_results)\n    get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\n    get_latest_execution = exposed_run_and_wait(get_latest_execution)\n    update_execution_status = exposed_run_and_wait(update_execution_status)\n    update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)\n    update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\n    upsert_execution_input = exposed_run_and_wait(upsert_execution_input)\n    upsert_execution_output = exposed_run_and_wait(upsert_execution_output)\n"
        },
        {
            "id": "chunk_1_DatabaseManager_7",
            "code": "    # Graphs\n    get_node = exposed_run_and_wait(get_node)\n    get_graph = exposed_run_and_wait(get_graph)\n"
        },
        {
            "id": "chunk_1_DatabaseManager_8",
            "code": "    # Credits\n    user_credit_model = get_user_credit_model()\n    get_or_refill_credit = cast(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )\n    spend_credits = cast(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )\n"
        },
        {
            "id": "chunk_1_DatabaseManager_9",
            "code": "    # User + User Metadata + User Integrations\n    get_user_metadata = exposed_run_and_wait(get_user_metadata)\n    update_user_metadata = exposed_run_and_wait(update_user_metadata)\n    get_user_integrations = exposed_run_and_wait(get_user_integrations)\n    update_user_integrations = exposed_run_and_wait(update_user_integrations)\n"
        },
        {
            "id": "chunk_2_DatabaseManager.__init___1",
            "code": "    def __init__(self):\n        super().__init__()\n        self.use_db = True\n        self.use_redis = True\n        self.event_queue = RedisExecutionEventBus()\n\n"
        },
        {
            "id": "chunk_3_DatabaseManager.get_port_1",
            "code": "    @classmethod\n    def get_port(cls) -> int:\n        return config.database_api_port\n"
        },
        {
            "id": "chunk_4_DatabaseManager.send_execution_update_1",
            "code": "    def send_execution_update(self, execution_result: ExecutionResult):\n        self.event_queue.publish(execution_result)\n"
        },
        {
            "id": "chunk_5_DatabaseManager.exposed_run_and_wait_1",
            "code": "    @staticmethod\n    def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:\n"
        },
        {
            "id": "chunk_5_DatabaseManager.exposed_run_and_wait_2",
            "code": "        @expose\n        @wraps(f)\n        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n"
        },
        {
            "id": "chunk_5_DatabaseManager.exposed_run_and_wait_3",
            "code": "            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res\n"
        },
        {
            "id": "chunk_5_DatabaseManager.exposed_run_and_wait_4",
            "code": "        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)\n"
        },
        {
            "id": "chunk_5_DatabaseManager.exposed_run_and_wait_5",
            "code": "        return wrapper\n"
        },
        {
            "id": "chunk_6_DatabaseManager.exposed_run_and_wait.wrapper_1",
            "code": "        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_0_GlobalBlock_5",
            "to": "chunk_0_GlobalBlock_6"
        },
        {
            "from": "chunk_0_GlobalBlock_6",
            "to": "chunk_0_GlobalBlock_7"
        },
        {
            "from": "chunk_0_GlobalBlock_7",
            "to": "chunk_0_GlobalBlock_8"
        },
        {
            "from": "chunk_0_GlobalBlock_8",
            "to": "chunk_0_GlobalBlock_9"
        },
        {
            "from": "chunk_1_DatabaseManager_1",
            "to": "chunk_1_DatabaseManager_2"
        },
        {
            "from": "chunk_1_DatabaseManager_2",
            "to": "chunk_1_DatabaseManager_3"
        },
        {
            "from": "chunk_1_DatabaseManager_2",
            "to": "chunk_1_DatabaseManager_4"
        },
        {
            "from": "chunk_1_DatabaseManager_2",
            "to": "chunk_1_DatabaseManager_5"
        },
        {
            "from": "chunk_1_DatabaseManager_5",
            "to": "chunk_1_DatabaseManager_6"
        },
        {
            "from": "chunk_1_DatabaseManager_5",
            "to": "chunk_1_DatabaseManager_7"
        },
        {
            "from": "chunk_1_DatabaseManager_5",
            "to": "chunk_1_DatabaseManager_8"
        },
        {
            "from": "chunk_1_DatabaseManager_5",
            "to": "chunk_1_DatabaseManager_9"
        },
        {
            "from": "chunk_5_DatabaseManager.exposed_run_and_wait_1",
            "to": "chunk_5_DatabaseManager.exposed_run_and_wait_2"
        },
        {
            "from": "chunk_5_DatabaseManager.exposed_run_and_wait_2",
            "to": "chunk_5_DatabaseManager.exposed_run_and_wait_3"
        },
        {
            "from": "chunk_5_DatabaseManager.exposed_run_and_wait_3",
            "to": "chunk_5_DatabaseManager.exposed_run_and_wait_5"
        },
        {
            "from": "chunk_5_DatabaseManager.exposed_run_and_wait_4",
            "to": "chunk_5_DatabaseManager.exposed_run_and_wait_5"
        }
    ]
}