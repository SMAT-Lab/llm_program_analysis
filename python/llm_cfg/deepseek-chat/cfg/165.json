{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import pytest\nfrom ldclient import LDClient\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from autogpt_libs.feature_flag.client import feature_flag, mock_flag_variation\n"
        },
        {
            "id": "chunk_1_ld_client_1",
            "code": "@pytest.fixture\ndef ld_client(mocker):\n"
        },
        {
            "id": "chunk_1_ld_client_2",
            "code": "    client = mocker.Mock(spec=LDClient)\n    mocker.patch(\"ldclient.get\", return_value=client)\n    client.is_initialized.return_value = True\n    return client\n"
        },
        {
            "id": "chunk_2_test_feature_flag_enabled_1",
            "code": "@pytest.mark.asyncio\nasync def test_feature_flag_enabled(ld_client):\n"
        },
        {
            "id": "chunk_2_test_feature_flag_enabled_2",
            "code": "    ld_client.variation.return_value = True\n"
        },
        {
            "id": "chunk_2_test_feature_flag_enabled_3",
            "code": "    @feature_flag(\"test-flag\")\n    async def test_function(user_id: str):\n        return \"success\"\n"
        },
        {
            "id": "chunk_2_test_feature_flag_enabled_4",
            "code": "    result = test_function(user_id=\"test-user\")\n"
        },
        {
            "id": "chunk_2_test_feature_flag_enabled_5",
            "code": "    assert result == \"success\"\n    ld_client.variation.assert_called_once()\n"
        },
        {
            "id": "chunk_3_test_function_nested_in_test_feature_flag_enabled_1",
            "code": "    @feature_flag(\"test-flag\")\n    async def test_function(user_id: str):\n        return \"success\"\n"
        },
        {
            "id": "chunk_4_test_feature_flag_unauthorized_response_1",
            "code": "@pytest.mark.asyncio\nasync def test_feature_flag_unauthorized_response(ld_client):\n"
        },
        {
            "id": "chunk_4_test_feature_flag_unauthorized_response_2",
            "code": "    ld_client.variation.return_value = False\n"
        },
        {
            "id": "chunk_4_test_feature_flag_unauthorized_response_3",
            "code": "    @feature_flag(\"test-flag\")\n    async def test_function(user_id: str):\n        return \"success\"\n"
        },
        {
            "id": "chunk_4_test_feature_flag_unauthorized_response_4",
            "code": "    result = test_function(user_id=\"test-user\")\n    assert result == {\"error\": \"disabled\"}\n"
        },
        {
            "id": "chunk_5_test_function_nested_in_test_feature_flag_unauthorized_response_1",
            "code": "    @feature_flag(\"test-flag\")\n    async def test_function(user_id: str):\n        return \"success\"\n"
        },
        {
            "id": "chunk_6_test_mock_flag_variation_1",
            "code": "def test_mock_flag_variation(ld_client):\n"
        },
        {
            "id": "chunk_6_test_mock_flag_variation_2",
            "code": "    with mock_flag_variation(\"test-flag\", True):\n        assert ld_client.variation(\"test-flag\", None, False)\n"
        },
        {
            "id": "chunk_6_test_mock_flag_variation_3",
            "code": "    with mock_flag_variation(\"test-flag\", False):\n        assert ld_client.variation(\"test-flag\", None, False)\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_ld_client_1",
            "to": "chunk_1_ld_client_2"
        },
        {
            "from": "chunk_2_test_feature_flag_enabled_1",
            "to": "chunk_2_test_feature_flag_enabled_2"
        },
        {
            "from": "chunk_2_test_feature_flag_enabled_2",
            "to": "chunk_2_test_feature_flag_enabled_3"
        },
        {
            "from": "chunk_2_test_feature_flag_enabled_3",
            "to": "chunk_2_test_feature_flag_enabled_4"
        },
        {
            "from": "chunk_2_test_feature_flag_enabled_4",
            "to": "chunk_2_test_feature_flag_enabled_5"
        },
        {
            "from": "chunk_4_test_feature_flag_unauthorized_response_1",
            "to": "chunk_4_test_feature_flag_unauthorized_response_2"
        },
        {
            "from": "chunk_4_test_feature_flag_unauthorized_response_2",
            "to": "chunk_4_test_feature_flag_unauthorized_response_3"
        },
        {
            "from": "chunk_4_test_feature_flag_unauthorized_response_3",
            "to": "chunk_4_test_feature_flag_unauthorized_response_4"
        },
        {
            "from": "chunk_6_test_mock_flag_variation_1",
            "to": "chunk_6_test_mock_flag_variation_2"
        },
        {
            "from": "chunk_6_test_mock_flag_variation_2",
            "to": "chunk_6_test_mock_flag_variation_3"
        }
    ]
}