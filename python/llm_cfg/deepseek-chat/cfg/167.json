{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import json\nfrom typing import Optional\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from cryptography.fernet import Fernet\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.util.settings import Settings\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "ENCRYPTION_KEY = Settings().secrets.encryption_key\n"
        },
        {
            "id": "chunk_1_JSONCryptor_1",
            "code": "class JSONCryptor:\n"
        },
        {
            "id": "chunk_1_JSONCryptor_2",
            "code": "    def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n"
        },
        {
            "id": "chunk_1_JSONCryptor_3",
            "code": "        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n"
        },
        {
            "id": "chunk_1_JSONCryptor_4",
            "code": "        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )\n"
        },
        {
            "id": "chunk_1_JSONCryptor_5",
            "code": "    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n"
        },
        {
            "id": "chunk_1_JSONCryptor_6",
            "code": "    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n"
        },
        {
            "id": "chunk_1_JSONCryptor_7",
            "code": "        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())\n"
        },
        {
            "id": "chunk_2___init___1",
            "code": "    def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n"
        },
        {
            "id": "chunk_2___init___2",
            "code": "        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n"
        },
        {
            "id": "chunk_2___init___3",
            "code": "        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )\n"
        },
        {
            "id": "chunk_3_encrypt_1",
            "code": "    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n"
        },
        {
            "id": "chunk_4_decrypt_1",
            "code": "    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n"
        },
        {
            "id": "chunk_4_decrypt_2",
            "code": "        if not encrypted_str:\n            return {}\n"
        },
        {
            "id": "chunk_4_decrypt_3",
            "code": "        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_JSONCryptor_1",
            "to": "chunk_1_JSONCryptor_2"
        },
        {
            "from": "chunk_1_JSONCryptor_2",
            "to": "chunk_1_JSONCryptor_3"
        },
        {
            "from": "chunk_1_JSONCryptor_3",
            "to": "chunk_1_JSONCryptor_4"
        },
        {
            "from": "chunk_1_JSONCryptor_6",
            "to": "chunk_1_JSONCryptor_7"
        },
        {
            "from": "chunk_2___init___1",
            "to": "chunk_2___init___2"
        },
        {
            "from": "chunk_2___init___2",
            "to": "chunk_2___init___3"
        },
        {
            "from": "chunk_4_decrypt_1",
            "to": "chunk_4_decrypt_2"
        },
        {
            "from": "chunk_4_decrypt_2",
            "to": "chunk_4_decrypt_3"
        }
    ]
}