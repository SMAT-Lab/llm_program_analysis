{
    "nodes": [
        {
            "id": "chunk_0_Item_1",
            "code": "class Item(object):\n\n"
        },
        {
            "id": "chunk_0_Item_2",
            "code": "    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n"
        },
        {
            "id": "chunk_0_Item_3",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_HashTable_1",
            "code": "class HashTable(object):\n\n"
        },
        {
            "id": "chunk_1_HashTable_2",
            "code": "    def __init__(self, size):\n        self.size = size\n        self.table = [[] for _ in range(self.size)]\n\n"
        },
        {
            "id": "chunk_1_HashTable_3",
            "code": "    def _hash_function(self, key):\n        return key % self.size\n\n"
        },
        {
            "id": "chunk_1_HashTable_4",
            "code": "    def set(self, key, value):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                item.value = value\n                return\n        self.table[hash_index].append(Item(key, value))\n\n"
        },
        {
            "id": "chunk_1_HashTable_5",
            "code": "    def get(self, key):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                return item.value\n        raise KeyError('Key not found')\n\n"
        },
        {
            "id": "chunk_1_HashTable_6",
            "code": "    def remove(self, key):\n        hash_index = self._hash_function(key)\n        for index, item in enumerate(self.table[hash_index]):\n            if item.key == key:\n                del self.table[hash_index][index]\n                return\n        raise KeyError('Key not found')\n\n"
        },
        {
            "id": "chunk_2___init__ (inside HashTable)_1",
            "code": "    def __init__(self, size):\n        self.size = size\n        self.table = [[] for _ in range(self.size)]\n"
        },
        {
            "id": "chunk_3__hash_function_1",
            "code": "    def _hash_function(self, key):\n        return key % self.size\n"
        },
        {
            "id": "chunk_4_set_1",
            "code": "    def set(self, key, value):\n        hash_index = self._hash_function(key)\n"
        },
        {
            "id": "chunk_4_set_2",
            "code": "        for item in self.table[hash_index]:\n            if item.key == key:\n                item.value = value\n                return\n"
        },
        {
            "id": "chunk_4_set_3",
            "code": "        self.table[hash_index].append(Item(key, value))\n"
        },
        {
            "id": "chunk_5_get_1",
            "code": "    def get(self, key):\n        hash_index = self._hash_function(key)\n"
        },
        {
            "id": "chunk_5_get_2",
            "code": "        for item in self.table[hash_index]:\n            if item.key == key:\n                return item.value\n"
        },
        {
            "id": "chunk_5_get_3",
            "code": "        raise KeyError('Key not found')\n"
        },
        {
            "id": "chunk_6_remove_1",
            "code": "    def remove(self, key):\n        hash_index = self._hash_function(key)\n"
        },
        {
            "id": "chunk_6_remove_2",
            "code": "        for index, item in enumerate(self.table[hash_index]):\n            if item.key == key:\n                del self.table[hash_index][index]\n                return\n"
        },
        {
            "id": "chunk_6_remove_3",
            "code": "        raise KeyError('Key not found')\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_Item_1",
            "to": "chunk_0_Item_2"
        },
        {
            "from": "chunk_4_set_1",
            "to": "chunk_4_set_2"
        },
        {
            "from": "chunk_4_set_2",
            "to": "chunk_4_set_3"
        },
        {
            "from": "chunk_5_get_1",
            "to": "chunk_5_get_2"
        },
        {
            "from": "chunk_5_get_2",
            "to": "chunk_5_get_3"
        },
        {
            "from": "chunk_6_remove_1",
            "to": "chunk_6_remove_2"
        },
        {
            "from": "chunk_6_remove_2",
            "to": "chunk_6_remove_3"
        }
    ]
}