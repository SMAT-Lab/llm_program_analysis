{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import operator\nfrom enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n"
        },
        {
            "id": "chunk_1_Operation_1",
            "code": "class Operation(Enum):\n    ADD = \"Add\"\n    SUBTRACT = \"Subtract\"\n    MULTIPLY = \"Multiply\"\n    DIVIDE = \"Divide\"\n    POWER = \"Power\"\n\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_1",
            "code": "class CalculatorBlock(Block):\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_2",
            "code": "    class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_3",
            "code": "    class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_5",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_6",
            "code": "        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_7",
            "code": "        op_func = operations[operation]\n\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_8",
            "code": "        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_9",
            "code": "            result = op_func(a, b)\n\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_10",
            "code": "            if input_data.round_result:\n                result = round(result)\n\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_11",
            "code": "            yield \"result\", result\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_12",
            "code": "        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n"
        },
        {
            "id": "chunk_2_CalculatorBlock_13",
            "code": "        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors\n"
        },
        {
            "id": "chunk_3_CalculatorBlock.Input_1",
            "code": "    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_3_CalculatorBlock.Input_2",
            "code": "        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n"
        },
        {
            "id": "chunk_3_CalculatorBlock.Input_3",
            "code": "        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n"
        },
        {
            "id": "chunk_3_CalculatorBlock.Input_4",
            "code": "        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n"
        },
        {
            "id": "chunk_3_CalculatorBlock.Input_5",
            "code": "        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )\n"
        },
        {
            "id": "chunk_4_CalculatorBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")\n"
        },
        {
            "id": "chunk_5_CalculatorBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )\n"
        },
        {
            "id": "chunk_6_CalculatorBlock.run_1",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n"
        },
        {
            "id": "chunk_6_CalculatorBlock.run_2",
            "code": "        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n"
        },
        {
            "id": "chunk_6_CalculatorBlock.run_3",
            "code": "        op_func = operations[operation]\n\n"
        },
        {
            "id": "chunk_6_CalculatorBlock.run_4",
            "code": "        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n"
        },
        {
            "id": "chunk_6_CalculatorBlock.run_5",
            "code": "            result = op_func(a, b)\n\n"
        },
        {
            "id": "chunk_6_CalculatorBlock.run_6",
            "code": "            if input_data.round_result:\n                result = round(result)\n\n"
        },
        {
            "id": "chunk_6_CalculatorBlock.run_7",
            "code": "            yield \"result\", result\n\n"
        },
        {
            "id": "chunk_6_CalculatorBlock.run_8",
            "code": "        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n"
        },
        {
            "id": "chunk_6_CalculatorBlock.run_9",
            "code": "        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors\n"
        },
        {
            "id": "chunk_7_CountItemsBlock_1",
            "code": "class CountItemsBlock(Block):\n    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_7_CountItemsBlock_2",
            "code": "        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )\n"
        },
        {
            "id": "chunk_7_CountItemsBlock_3",
            "code": "    class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")\n"
        },
        {
            "id": "chunk_7_CountItemsBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )\n"
        },
        {
            "id": "chunk_7_CountItemsBlock_5",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n"
        },
        {
            "id": "chunk_7_CountItemsBlock_6",
            "code": "        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n"
        },
        {
            "id": "chunk_7_CountItemsBlock_7",
            "code": "            yield \"count\", count\n"
        },
        {
            "id": "chunk_7_CountItemsBlock_8",
            "code": "        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error\n"
        },
        {
            "id": "chunk_8_CountItemsBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )\n"
        },
        {
            "id": "chunk_9_CountItemsBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")\n"
        },
        {
            "id": "chunk_10_CountItemsBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )\n"
        },
        {
            "id": "chunk_11_CountItemsBlock.run_1",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n"
        },
        {
            "id": "chunk_11_CountItemsBlock.run_2",
            "code": "        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n"
        },
        {
            "id": "chunk_11_CountItemsBlock.run_3",
            "code": "            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n"
        },
        {
            "id": "chunk_11_CountItemsBlock.run_4",
            "code": "            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n"
        },
        {
            "id": "chunk_11_CountItemsBlock.run_5",
            "code": "            else:\n                raise ValueError(\"Input is not a countable collection\")\n"
        },
        {
            "id": "chunk_11_CountItemsBlock.run_6",
            "code": "            yield \"count\", count\n"
        },
        {
            "id": "chunk_11_CountItemsBlock.run_7",
            "code": "        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_2_CalculatorBlock_1",
            "to": "chunk_2_CalculatorBlock_2"
        },
        {
            "from": "chunk_2_CalculatorBlock_2",
            "to": "chunk_2_CalculatorBlock_3"
        },
        {
            "from": "chunk_2_CalculatorBlock_3",
            "to": "chunk_2_CalculatorBlock_4"
        },
        {
            "from": "chunk_2_CalculatorBlock_4",
            "to": "chunk_2_CalculatorBlock_5"
        },
        {
            "from": "chunk_2_CalculatorBlock_5",
            "to": "chunk_2_CalculatorBlock_6"
        },
        {
            "from": "chunk_2_CalculatorBlock_6",
            "to": "chunk_2_CalculatorBlock_7"
        },
        {
            "from": "chunk_2_CalculatorBlock_7",
            "to": "chunk_2_CalculatorBlock_8"
        },
        {
            "from": "chunk_2_CalculatorBlock_8",
            "to": "chunk_2_CalculatorBlock_9"
        },
        {
            "from": "chunk_2_CalculatorBlock_8",
            "to": "chunk_2_CalculatorBlock_12"
        },
        {
            "from": "chunk_2_CalculatorBlock_9",
            "to": "chunk_2_CalculatorBlock_10"
        },
        {
            "from": "chunk_2_CalculatorBlock_10",
            "to": "chunk_2_CalculatorBlock_11"
        },
        {
            "from": "chunk_3_CalculatorBlock.Input_1",
            "to": "chunk_3_CalculatorBlock.Input_2"
        },
        {
            "from": "chunk_3_CalculatorBlock.Input_2",
            "to": "chunk_3_CalculatorBlock.Input_3"
        },
        {
            "from": "chunk_3_CalculatorBlock.Input_3",
            "to": "chunk_3_CalculatorBlock.Input_4"
        },
        {
            "from": "chunk_3_CalculatorBlock.Input_4",
            "to": "chunk_3_CalculatorBlock.Input_5"
        },
        {
            "from": "chunk_6_CalculatorBlock.run_1",
            "to": "chunk_6_CalculatorBlock.run_2"
        },
        {
            "from": "chunk_6_CalculatorBlock.run_2",
            "to": "chunk_6_CalculatorBlock.run_3"
        },
        {
            "from": "chunk_6_CalculatorBlock.run_3",
            "to": "chunk_6_CalculatorBlock.run_4"
        },
        {
            "from": "chunk_6_CalculatorBlock.run_4",
            "to": "chunk_6_CalculatorBlock.run_5"
        },
        {
            "from": "chunk_6_CalculatorBlock.run_4",
            "to": "chunk_6_CalculatorBlock.run_8"
        },
        {
            "from": "chunk_6_CalculatorBlock.run_5",
            "to": "chunk_6_CalculatorBlock.run_6"
        },
        {
            "from": "chunk_6_CalculatorBlock.run_6",
            "to": "chunk_6_CalculatorBlock.run_7"
        },
        {
            "from": "chunk_7_CountItemsBlock_1",
            "to": "chunk_7_CountItemsBlock_2"
        },
        {
            "from": "chunk_7_CountItemsBlock_1",
            "to": "chunk_7_CountItemsBlock_3"
        },
        {
            "from": "chunk_7_CountItemsBlock_5",
            "to": "chunk_7_CountItemsBlock_6"
        },
        {
            "from": "chunk_7_CountItemsBlock_6",
            "to": "chunk_7_CountItemsBlock_7"
        },
        {
            "from": "chunk_7_CountItemsBlock_6",
            "to": "chunk_7_CountItemsBlock_8"
        },
        {
            "from": "chunk_11_CountItemsBlock.run_1",
            "to": "chunk_11_CountItemsBlock.run_2"
        },
        {
            "from": "chunk_11_CountItemsBlock.run_2",
            "to": "chunk_11_CountItemsBlock.run_3"
        },
        {
            "from": "chunk_11_CountItemsBlock.run_2",
            "to": "chunk_11_CountItemsBlock.run_4"
        },
        {
            "from": "chunk_11_CountItemsBlock.run_2",
            "to": "chunk_11_CountItemsBlock.run_5"
        },
        {
            "from": "chunk_11_CountItemsBlock.run_3",
            "to": "chunk_11_CountItemsBlock.run_6"
        },
        {
            "from": "chunk_11_CountItemsBlock.run_4",
            "to": "chunk_11_CountItemsBlock.run_6"
        },
        {
            "from": "chunk_11_CountItemsBlock.run_5",
            "to": "chunk_11_CountItemsBlock.run_7"
        }
    ]
}