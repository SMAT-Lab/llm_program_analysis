{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from typing import Any, Literal\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from pydantic import SecretStr\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "from backend.integrations.providers import ProviderName\n"
        },
        {
            "id": "chunk_0_GlobalBlock_6",
            "code": "from backend.util.request import requests\n"
        },
        {
            "id": "chunk_0_GlobalBlock_7",
            "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"unreal_speech\",\n    api_key=SecretStr(\"mock-unreal-speech-api-key\"),\n    title=\"Mock Unreal Speech API key\",\n    expires_at=None,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_8",
            "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n"
        },
        {
            "id": "chunk_1_UnrealTextToSpeechBlock_1",
            "code": "class UnrealTextToSpeechBlock(Block):\n"
        },
        {
            "id": "chunk_1_UnrealTextToSpeechBlock_2",
            "code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"The text to be converted to speech\",\n            placeholder=\"Enter the text you want to convert to speech\",\n        )\n        voice_id: str = SchemaField(\n            description=\"The voice ID to use for text-to-speech conversion\",\n            placeholder=\"Scarlett\",\n            default=\"Scarlett\",\n        )\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.UNREAL_SPEECH], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Unreal Speech integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n"
        },
        {
            "id": "chunk_1_UnrealTextToSpeechBlock_3",
            "code": "\n"
        },
        {
            "id": "chunk_1_UnrealTextToSpeechBlock_4",
            "code": "    class Output(BlockSchema):\n        mp3_url: str = SchemaField(description=\"The URL of the generated MP3 file\")\n        error: str = SchemaField(description=\"Error message if the API call failed\")\n"
        },
        {
            "id": "chunk_1_UnrealTextToSpeechBlock_5",
            "code": "\n"
        },
        {
            "id": "chunk_1_UnrealTextToSpeechBlock_6",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"4ff1ff6d-cc40-4caa-ae69-011daa20c378\",\n            description=\"Converts text to speech using the Unreal Speech API\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=UnrealTextToSpeechBlock.Input,\n            output_schema=UnrealTextToSpeechBlock.Output,\n            test_input={\n                \"text\": \"This is a test of the text to speech API.\",\n                \"voice_id\": \"Scarlett\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"mp3_url\", \"https://example.com/test.mp3\")],\n            test_mock={\n                \"call_unreal_speech_api\": lambda *args, **kwargs: {\n                    \"OutputUri\": \"https://example.com/test.mp3\"\n                }\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n"
        },
        {
            "id": "chunk_1_UnrealTextToSpeechBlock_7",
            "code": "\n"
        },
        {
            "id": "chunk_1_UnrealTextToSpeechBlock_8",
            "code": "    @staticmethod\n    def call_unreal_speech_api(\n        api_key: SecretStr, text: str, voice_id: str\n    ) -> dict[str, Any]:\n        url = \"https://api.v7.unrealspeech.com/speech\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n        }\n        data = {\n            \"Text\": text,\n            \"VoiceId\": voice_id,\n            \"Bitrate\": \"192k\",\n            \"Speed\": \"0\",\n            \"Pitch\": \"1\",\n            \"TimestampType\": \"sentence\",\n        }\n\n        response = requests.post(url, headers=headers, json=data)\n        return response.json()\n"
        },
        {
            "id": "chunk_1_UnrealTextToSpeechBlock_9",
            "code": "\n"
        },
        {
            "id": "chunk_1_UnrealTextToSpeechBlock_10",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        api_response = self.call_unreal_speech_api(\n            credentials.api_key,\n            input_data.text,\n            input_data.voice_id,\n        )\n        yield \"mp3_url\", api_response[\"OutputUri\"]\n"
        },
        {
            "id": "chunk_1_UnrealTextToSpeechBlock_11",
            "code": "\n\n"
        },
        {
            "id": "chunk_2_UnrealTextToSpeechBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"The text to be converted to speech\",\n            placeholder=\"Enter the text you want to convert to speech\",\n        )\n"
        },
        {
            "id": "chunk_2_UnrealTextToSpeechBlock.Input_2",
            "code": "        voice_id: str = SchemaField(\n            description=\"The voice ID to use for text-to-speech conversion\",\n            placeholder=\"Scarlett\",\n            default=\"Scarlett\",\n        )\n"
        },
        {
            "id": "chunk_2_UnrealTextToSpeechBlock.Input_3",
            "code": "        credentials: CredentialsMetaInput[\n            Literal[ProviderName.UNREAL_SPEECH], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Unreal Speech integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n"
        },
        {
            "id": "chunk_3_UnrealTextToSpeechBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        mp3_url: str = SchemaField(description=\"The URL of the generated MP3 file\")\n        error: str = SchemaField(description=\"Error message if the API call failed\")\n"
        },
        {
            "id": "chunk_4_UnrealTextToSpeechBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"4ff1ff6d-cc40-4caa-ae69-011daa20c378\",\n            description=\"Converts text to speech using the Unreal Speech API\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=UnrealTextToSpeechBlock.Input,\n            output_schema=UnrealTextToSpeechBlock.Output,\n            test_input={\n                \"text\": \"This is a test of the text to speech API.\",\n                \"voice_id\": \"Scarlett\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"mp3_url\", \"https://example.com/test.mp3\")],\n            test_mock={\n                \"call_unreal_speech_api\": lambda *args, **kwargs: {\n                    \"OutputUri\": \"https://example.com/test.mp3\"\n                }\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n"
        },
        {
            "id": "chunk_5_UnrealTextToSpeechBlock.call_unreal_speech_api_1",
            "code": "    @staticmethod\n    def call_unreal_speech_api(\n        api_key: SecretStr, text: str, voice_id: str\n    ) -> dict[str, Any]:\n"
        },
        {
            "id": "chunk_5_UnrealTextToSpeechBlock.call_unreal_speech_api_2",
            "code": "        url = \"https://api.v7.unrealspeech.com/speech\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n        }\n        data = {\n            \"Text\": text,\n            \"VoiceId\": voice_id,\n            \"Bitrate\": \"192k\",\n            \"Speed\": \"0\",\n            \"Pitch\": \"1\",\n            \"TimestampType\": \"sentence\",\n        }\n"
        },
        {
            "id": "chunk_5_UnrealTextToSpeechBlock.call_unreal_speech_api_3",
            "code": "        response = requests.post(url, headers=headers, json=data)\n        return response.json()\n"
        },
        {
            "id": "chunk_6_UnrealTextToSpeechBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_6_UnrealTextToSpeechBlock.run_2",
            "code": "        api_response = self.call_unreal_speech_api(\n            credentials.api_key,\n            input_data.text,\n            input_data.voice_id,\n        )\n"
        },
        {
            "id": "chunk_6_UnrealTextToSpeechBlock.run_3",
            "code": "        yield \"mp3_url\", api_response[\"OutputUri\"]\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_0_GlobalBlock_5",
            "to": "chunk_0_GlobalBlock_6"
        },
        {
            "from": "chunk_0_GlobalBlock_6",
            "to": "chunk_0_GlobalBlock_7"
        },
        {
            "from": "chunk_0_GlobalBlock_7",
            "to": "chunk_0_GlobalBlock_8"
        },
        {
            "from": "chunk_1_UnrealTextToSpeechBlock_1",
            "to": "chunk_1_UnrealTextToSpeechBlock_2"
        },
        {
            "from": "chunk_1_UnrealTextToSpeechBlock_2",
            "to": "chunk_1_UnrealTextToSpeechBlock_3"
        },
        {
            "from": "chunk_1_UnrealTextToSpeechBlock_3",
            "to": "chunk_1_UnrealTextToSpeechBlock_4"
        },
        {
            "from": "chunk_1_UnrealTextToSpeechBlock_4",
            "to": "chunk_1_UnrealTextToSpeechBlock_5"
        },
        {
            "from": "chunk_1_UnrealTextToSpeechBlock_5",
            "to": "chunk_1_UnrealTextToSpeechBlock_6"
        },
        {
            "from": "chunk_1_UnrealTextToSpeechBlock_6",
            "to": "chunk_1_UnrealTextToSpeechBlock_7"
        },
        {
            "from": "chunk_1_UnrealTextToSpeechBlock_7",
            "to": "chunk_1_UnrealTextToSpeechBlock_8"
        },
        {
            "from": "chunk_1_UnrealTextToSpeechBlock_8",
            "to": "chunk_1_UnrealTextToSpeechBlock_9"
        },
        {
            "from": "chunk_1_UnrealTextToSpeechBlock_9",
            "to": "chunk_1_UnrealTextToSpeechBlock_10"
        },
        {
            "from": "chunk_1_UnrealTextToSpeechBlock_10",
            "to": "chunk_1_UnrealTextToSpeechBlock_11"
        },
        {
            "from": "chunk_2_UnrealTextToSpeechBlock.Input_1",
            "to": "chunk_2_UnrealTextToSpeechBlock.Input_2"
        },
        {
            "from": "chunk_2_UnrealTextToSpeechBlock.Input_2",
            "to": "chunk_2_UnrealTextToSpeechBlock.Input_3"
        },
        {
            "from": "chunk_5_UnrealTextToSpeechBlock.call_unreal_speech_api_1",
            "to": "chunk_5_UnrealTextToSpeechBlock.call_unreal_speech_api_2"
        },
        {
            "from": "chunk_5_UnrealTextToSpeechBlock.call_unreal_speech_api_2",
            "to": "chunk_5_UnrealTextToSpeechBlock.call_unreal_speech_api_3"
        },
        {
            "from": "chunk_6_UnrealTextToSpeechBlock.run_1",
            "to": "chunk_6_UnrealTextToSpeechBlock.run_2"
        },
        {
            "from": "chunk_6_UnrealTextToSpeechBlock.run_2",
            "to": "chunk_6_UnrealTextToSpeechBlock.run_3"
        }
    ]
}