{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from ._auth import (\n    GOOGLE_OAUTH_IS_CONFIGURED,\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GoogleCredentials,\n    GoogleCredentialsField,\n    GoogleCredentialsInput,\n)\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_1",
            "code": "class GoogleSheetsReadBlock(Block):\n    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_2",
            "code": "        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/spreadsheets.readonly\"]\n        )\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_3",
            "code": "        spreadsheet_id: str = SchemaField(\n            description=\"The ID of the spreadsheet to read from\",\n        )\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_4",
            "code": "        range: str = SchemaField(\n            description=\"The A1 notation of the range to read\",\n        )\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_5",
            "code": "    class Output(BlockSchema):\n        result: list[list[str]] = SchemaField(\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_6",
            "code": "            description=\"The data read from the spreadsheet\",\n        )\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_7",
            "code": "        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_8",
            "code": "    def __init__(self):\n        super().__init__(\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_9",
            "code": "            id=\"5724e902-3635-47e9-a108-aaa0263a4988\",\n            description=\"This block reads data from a Google Sheets spreadsheet.\",\n            categories={BlockCategory.DATA},\n            input_schema=GoogleSheetsReadBlock.Input,\n            output_schema=GoogleSheetsReadBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"spreadsheet_id\": \"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\",\n                \"range\": \"Sheet1!A1:B2\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    [\n                        [\"Name\", \"Score\"],\n                        [\"Alice\", \"85\"],\n                    ],\n                ),\n            ],\n            test_mock={\n                \"_read_sheet\": lambda *args, **kwargs: [\n                    [\"Name\", \"Score\"],\n                    [\"Alice\", \"85\"],\n                ],\n            },\n        )\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_10",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_11",
            "code": "        service = self._build_service(credentials, **kwargs)\n        data = self._read_sheet(service, input_data.spreadsheet_id, input_data.range)\n        yield \"result\", data\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_12",
            "code": "    @staticmethod\n    def _build_service(credentials: GoogleCredentials, **kwargs):\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_13",
            "code": "        creds = Credentials(\n            token=(\n                credentials.access_token.get_secret_value()\n                if credentials.access_token\n                else None\n            ),\n            refresh_token=(\n                credentials.refresh_token.get_secret_value()\n                if credentials.refresh_token\n                else None\n            ),\n            token_uri=\"https://oauth2.googleapis.com/token\",\n            client_id=kwargs.get(\"client_id\"),\n            client_secret=kwargs.get(\"client_secret\"),\n            scopes=credentials.scopes,\n        )\n        return build(\"sheets\", \"v4\", credentials=creds)\n"
        },
        {
            "id": "chunk_1_GoogleSheetsReadBlock_14",
            "code": "    def _read_sheet(self, service, spreadsheet_id: str, range: str) -> list[list[str]]:\n        sheet = service.spreadsheets()\n        result = sheet.values().get(spreadsheetId=spreadsheet_id, range=range).execute()\n        return result.get(\"values\", [])\n"
        },
        {
            "id": "chunk_2_GoogleSheetsReadBlock.Input_1",
            "code": "    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_2_GoogleSheetsReadBlock.Input_2",
            "code": "        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/spreadsheets.readonly\"]\n        )\n"
        },
        {
            "id": "chunk_2_GoogleSheetsReadBlock.Input_3",
            "code": "        spreadsheet_id: str = SchemaField(\n            description=\"The ID of the spreadsheet to read from\",\n        )\n"
        },
        {
            "id": "chunk_2_GoogleSheetsReadBlock.Input_4",
            "code": "        range: str = SchemaField(\n            description=\"The A1 notation of the range to read\",\n        )\n"
        },
        {
            "id": "chunk_3_GoogleSheetsReadBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        result: list[list[str]] = SchemaField(\n            description=\"The data read from the spreadsheet\",\n        )\n"
        },
        {
            "id": "chunk_3_GoogleSheetsReadBlock.Output_2",
            "code": "        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_4_GoogleSheetsReadBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"5724e902-3635-47e9-a108-aaa0263a4988\",\n            description=\"This block reads data from a Google Sheets spreadsheet.\",\n            categories={BlockCategory.DATA},\n            input_schema=GoogleSheetsReadBlock.Input,\n            output_schema=GoogleSheetsReadBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"spreadsheet_id\": \"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\",\n                \"range\": \"Sheet1!A1:B2\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    [\n                        [\"Name\", \"Score\"],\n                        [\"Alice\", \"85\"],\n                    ],\n                ),\n            ],\n            test_mock={\n                \"_read_sheet\": lambda *args, **kwargs: [\n                    [\"Name\", \"Score\"],\n                    [\"Alice\", \"85\"],\n                ],\n            },\n        )\n"
        },
        {
            "id": "chunk_5_GoogleSheetsReadBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_5_GoogleSheetsReadBlock.run_2",
            "code": "        service = self._build_service(credentials, **kwargs)\n"
        },
        {
            "id": "chunk_5_GoogleSheetsReadBlock.run_3",
            "code": "        data = self._read_sheet(service, input_data.spreadsheet_id, input_data.range)\n"
        },
        {
            "id": "chunk_5_GoogleSheetsReadBlock.run_4",
            "code": "        yield \"result\", data\n"
        },
        {
            "id": "chunk_6_GoogleSheetsReadBlock._build_service_1",
            "code": "    def _build_service(credentials: GoogleCredentials, **kwargs):\n        creds = Credentials(\n            token=(\n                credentials.access_token.get_secret_value()\n                if credentials.access_token\n                else None\n            ),\n            refresh_token=(\n                credentials.refresh_token.get_secret_value()\n                if credentials.refresh_token\n                else None\n            ),\n            token_uri=\"https://oauth2.googleapis.com/token\",\n            client_id=kwargs.get(\"client_id\"),\n            client_secret=kwargs.get(\"client_secret\"),\n            scopes=credentials.scopes,\n        )\n"
        },
        {
            "id": "chunk_6_GoogleSheetsReadBlock._build_service_2",
            "code": "        return build(\"sheets\", \"v4\", credentials=creds)\n"
        },
        {
            "id": "chunk_7_GoogleSheetsReadBlock._read_sheet_1",
            "code": "    def _read_sheet(self, service, spreadsheet_id: str, range: str) -> list[list[str]]:\n        sheet = service.spreadsheets()\n        result = sheet.values().get(spreadsheetId=spreadsheet_id, range=range).execute()\n        return result.get(\"values\", [])\n"
        },
        {
            "id": "chunk_8_GoogleSheetsWriteBlock_1",
            "code": "class GoogleSheetsWriteBlock(Block):\n    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/spreadsheets\"]\n        )\n        spreadsheet_id: str = SchemaField(\n            description=\"The ID of the spreadsheet to write to\",\n        )\n        range: str = SchemaField(\n            description=\"The A1 notation of the range to write\",\n        )\n        values: list[list[str]] = SchemaField(\n            description=\"The data to write to the spreadsheet\",\n        )\n\n"
        },
        {
            "id": "chunk_8_GoogleSheetsWriteBlock_2",
            "code": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"The result of the write operation\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n\n"
        },
        {
            "id": "chunk_8_GoogleSheetsWriteBlock_3",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"d9291e87-301d-47a8-91fe-907fb55460e5\",\n            description=\"This block writes data to a Google Sheets spreadsheet.\",\n            categories={BlockCategory.DATA},\n            input_schema=GoogleSheetsWriteBlock.Input,\n            output_schema=GoogleSheetsWriteBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"spreadsheet_id\": \"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\",\n                \"range\": \"Sheet1!A1:B2\",\n                \"values\": [\n                    [\"Name\", \"Score\"],\n                    [\"Bob\", \"90\"],\n                ],\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    {\"updatedCells\": 4, \"updatedColumns\": 2, \"updatedRows\": 2},\n                ),\n            ],\n            test_mock={\n                \"_write_sheet\": lambda *args, **kwargs: {\n                    \"updatedCells\": 4,\n                    \"updatedColumns\": 2,\n                    \"updatedRows\": 2,\n                },\n            },\n        )\n"
        },
        {
            "id": "chunk_8_GoogleSheetsWriteBlock_4",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = GoogleSheetsReadBlock._build_service(credentials, **kwargs)\n        result = self._write_sheet(\n            service,\n            input_data.spreadsheet_id,\n            input_data.range,\n            input_data.values,\n        )\n        yield \"result\", result\n"
        },
        {
            "id": "chunk_8_GoogleSheetsWriteBlock_5",
            "code": "    def _write_sheet(\n        self, service, spreadsheet_id: str, range: str, values: list[list[str]]\n    ) -> dict:\n        body = {\"values\": values}\n        result = (\n            service.spreadsheets()\n            .values()\n            .update(\n                spreadsheetId=spreadsheet_id,\n                range=range,\n                valueInputOption=\"USER_ENTERED\",\n                body=body,\n            )\n            .execute()\n        )\n        return result\n"
        },
        {
            "id": "chunk_9_GoogleSheetsWriteBlock.Input_1",
            "code": "    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_9_GoogleSheetsWriteBlock.Input_2",
            "code": "        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/spreadsheets\"]\n        )\n"
        },
        {
            "id": "chunk_9_GoogleSheetsWriteBlock.Input_3",
            "code": "        spreadsheet_id: str = SchemaField(\n            description=\"The ID of the spreadsheet to write to\",\n        )\n"
        },
        {
            "id": "chunk_9_GoogleSheetsWriteBlock.Input_4",
            "code": "        range: str = SchemaField(\n            description=\"The A1 notation of the range to write\",\n        )\n"
        },
        {
            "id": "chunk_9_GoogleSheetsWriteBlock.Input_5",
            "code": "        values: list[list[str]] = SchemaField(\n            description=\"The data to write to the spreadsheet\",\n        )\n"
        },
        {
            "id": "chunk_10_GoogleSheetsWriteBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"The result of the write operation\",\n        )\n"
        },
        {
            "id": "chunk_10_GoogleSheetsWriteBlock.Output_2",
            "code": "        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_11_GoogleSheetsWriteBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"d9291e87-301d-47a8-91fe-907fb55460e5\",\n            description=\"This block writes data to a Google Sheets spreadsheet.\",\n            categories={BlockCategory.DATA},\n            input_schema=GoogleSheetsWriteBlock.Input,\n            output_schema=GoogleSheetsWriteBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"spreadsheet_id\": \"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\",\n                \"range\": \"Sheet1!A1:B2\",\n                \"values\": [\n                    [\"Name\", \"Score\"],\n                    [\"Bob\", \"90\"],\n                ],\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    {\"updatedCells\": 4, \"updatedColumns\": 2, \"updatedRows\": 2},\n                ),\n            ],\n            test_mock={\n                \"_write_sheet\": lambda *args, **kwargs: {\n                    \"updatedCells\": 4,\n                    \"updatedColumns\": 2,\n                    \"updatedRows\": 2,\n                },\n            },\n        )\n"
        },
        {
            "id": "chunk_12_GoogleSheetsWriteBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_12_GoogleSheetsWriteBlock.run_2",
            "code": "        service = GoogleSheetsReadBlock._build_service(credentials, **kwargs)\n"
        },
        {
            "id": "chunk_12_GoogleSheetsWriteBlock.run_3",
            "code": "        result = self._write_sheet(\n            service,\n            input_data.spreadsheet_id,\n            input_data.range,\n            input_data.values,\n        )\n"
        },
        {
            "id": "chunk_12_GoogleSheetsWriteBlock.run_4",
            "code": "        yield \"result\", result\n"
        },
        {
            "id": "chunk_13_GoogleSheetsWriteBlock._write_sheet_1",
            "code": "    def _write_sheet(\n        self, service, spreadsheet_id: str, range: str, values: list[list[str]]\n    ) -> dict:\n"
        },
        {
            "id": "chunk_13_GoogleSheetsWriteBlock._write_sheet_2",
            "code": "        body = {\"values\": values}\n"
        },
        {
            "id": "chunk_13_GoogleSheetsWriteBlock._write_sheet_3",
            "code": "        result = (\n            service.spreadsheets()\n            .values()\n            .update(\n                spreadsheetId=spreadsheet_id,\n                range=range,\n                valueInputOption=\"USER_ENTERED\",\n                body=body,\n            )\n            .execute()\n        )\n"
        },
        {
            "id": "chunk_13_GoogleSheetsWriteBlock._write_sheet_4",
            "code": "        return result\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_1_GoogleSheetsReadBlock_1",
            "to": "chunk_1_GoogleSheetsReadBlock_2"
        },
        {
            "from": "chunk_1_GoogleSheetsReadBlock_2",
            "to": "chunk_1_GoogleSheetsReadBlock_3"
        },
        {
            "from": "chunk_1_GoogleSheetsReadBlock_3",
            "to": "chunk_1_GoogleSheetsReadBlock_4"
        },
        {
            "from": "chunk_1_GoogleSheetsReadBlock_4",
            "to": "chunk_1_GoogleSheetsReadBlock_5"
        },
        {
            "from": "chunk_1_GoogleSheetsReadBlock_5",
            "to": "chunk_1_GoogleSheetsReadBlock_6"
        },
        {
            "from": "chunk_1_GoogleSheetsReadBlock_6",
            "to": "chunk_1_GoogleSheetsReadBlock_7"
        },
        {
            "from": "chunk_1_GoogleSheetsReadBlock_7",
            "to": "chunk_1_GoogleSheetsReadBlock_8"
        },
        {
            "from": "chunk_1_GoogleSheetsReadBlock_8",
            "to": "chunk_1_GoogleSheetsReadBlock_9"
        },
        {
            "from": "chunk_1_GoogleSheetsReadBlock_9",
            "to": "chunk_1_GoogleSheetsReadBlock_10"
        },
        {
            "from": "chunk_1_GoogleSheetsReadBlock_10",
            "to": "chunk_1_GoogleSheetsReadBlock_11"
        },
        {
            "from": "chunk_1_GoogleSheetsReadBlock_12",
            "to": "chunk_1_GoogleSheetsReadBlock_13"
        },
        {
            "from": "chunk_2_GoogleSheetsReadBlock.Input_1",
            "to": "chunk_2_GoogleSheetsReadBlock.Input_2"
        },
        {
            "from": "chunk_2_GoogleSheetsReadBlock.Input_2",
            "to": "chunk_2_GoogleSheetsReadBlock.Input_3"
        },
        {
            "from": "chunk_2_GoogleSheetsReadBlock.Input_3",
            "to": "chunk_2_GoogleSheetsReadBlock.Input_4"
        },
        {
            "from": "chunk_3_GoogleSheetsReadBlock.Output_1",
            "to": "chunk_3_GoogleSheetsReadBlock.Output_2"
        },
        {
            "from": "chunk_5_GoogleSheetsReadBlock.run_1",
            "to": "chunk_5_GoogleSheetsReadBlock.run_2"
        },
        {
            "from": "chunk_5_GoogleSheetsReadBlock.run_2",
            "to": "chunk_5_GoogleSheetsReadBlock.run_3"
        },
        {
            "from": "chunk_5_GoogleSheetsReadBlock.run_3",
            "to": "chunk_5_GoogleSheetsReadBlock.run_4"
        },
        {
            "from": "chunk_6_GoogleSheetsReadBlock._build_service_1",
            "to": "chunk_6_GoogleSheetsReadBlock._build_service_2"
        },
        {
            "from": "chunk_8_GoogleSheetsWriteBlock_1",
            "to": "chunk_8_GoogleSheetsWriteBlock_2"
        },
        {
            "from": "chunk_8_GoogleSheetsWriteBlock_2",
            "to": "chunk_8_GoogleSheetsWriteBlock_3"
        },
        {
            "from": "chunk_8_GoogleSheetsWriteBlock_3",
            "to": "chunk_8_GoogleSheetsWriteBlock_4"
        },
        {
            "from": "chunk_8_GoogleSheetsWriteBlock_4",
            "to": "chunk_8_GoogleSheetsWriteBlock_5"
        },
        {
            "from": "chunk_9_GoogleSheetsWriteBlock.Input_1",
            "to": "chunk_9_GoogleSheetsWriteBlock.Input_2"
        },
        {
            "from": "chunk_9_GoogleSheetsWriteBlock.Input_2",
            "to": "chunk_9_GoogleSheetsWriteBlock.Input_3"
        },
        {
            "from": "chunk_9_GoogleSheetsWriteBlock.Input_3",
            "to": "chunk_9_GoogleSheetsWriteBlock.Input_4"
        },
        {
            "from": "chunk_9_GoogleSheetsWriteBlock.Input_4",
            "to": "chunk_9_GoogleSheetsWriteBlock.Input_5"
        },
        {
            "from": "chunk_10_GoogleSheetsWriteBlock.Output_1",
            "to": "chunk_10_GoogleSheetsWriteBlock.Output_2"
        },
        {
            "from": "chunk_12_GoogleSheetsWriteBlock.run_1",
            "to": "chunk_12_GoogleSheetsWriteBlock.run_2"
        },
        {
            "from": "chunk_12_GoogleSheetsWriteBlock.run_2",
            "to": "chunk_12_GoogleSheetsWriteBlock.run_3"
        },
        {
            "from": "chunk_12_GoogleSheetsWriteBlock.run_3",
            "to": "chunk_12_GoogleSheetsWriteBlock.run_4"
        },
        {
            "from": "chunk_13_GoogleSheetsWriteBlock._write_sheet_1",
            "to": "chunk_13_GoogleSheetsWriteBlock._write_sheet_2"
        },
        {
            "from": "chunk_13_GoogleSheetsWriteBlock._write_sheet_2",
            "to": "chunk_13_GoogleSheetsWriteBlock._write_sheet_3"
        },
        {
            "from": "chunk_13_GoogleSheetsWriteBlock._write_sheet_3",
            "to": "chunk_13_GoogleSheetsWriteBlock._write_sheet_4"
        }
    ]
}