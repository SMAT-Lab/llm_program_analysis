{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from __future__ import annotations\n"
        },
        {
            "id": "chunk_1_get_valid_pos_1",
            "code": "def get_valid_pos(position: tuple[int, int], n: int) -> list[tuple[int, int]]:\n    \"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\n\n"
        },
        {
            "id": "chunk_1_get_valid_pos_2",
            "code": "    y, x = position\n    positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]\n"
        },
        {
            "id": "chunk_1_get_valid_pos_3",
            "code": "    permissible_positions = []\n\n"
        },
        {
            "id": "chunk_1_get_valid_pos_4",
            "code": "    for inner_position in positions:\n        y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)\n\n"
        },
        {
            "id": "chunk_1_get_valid_pos_5",
            "code": "    return permissible_positions\n"
        },
        {
            "id": "chunk_2_is_complete_1",
            "code": "def is_complete(board: list[list[int]]) -> bool:\n    \"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"\n\n    return not any(elem == 0 for row in board for elem in row)\n"
        },
        {
            "id": "chunk_3_open_knight_tour_helper_1",
            "code": "def open_knight_tour_helper(\n    board: list[list[int]], pos: tuple[int, int], curr: int\n) -> bool:\n    \"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\n\n"
        },
        {
            "id": "chunk_3_open_knight_tour_helper_2",
            "code": "    if is_complete(board):\n        return True\n"
        },
        {
            "id": "chunk_3_open_knight_tour_helper_3",
            "code": "    for position in get_valid_pos(pos, len(board)):\n        y, x = position\n\n"
        },
        {
            "id": "chunk_3_open_knight_tour_helper_4",
            "code": "        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0\n"
        },
        {
            "id": "chunk_3_open_knight_tour_helper_5",
            "code": "    return False\n"
        },
        {
            "id": "chunk_4_open_knight_tour_1",
            "code": "def open_knight_tour(n: int) -> list[list[int]]:\n    \"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"\n"
        },
        {
            "id": "chunk_4_open_knight_tour_2",
            "code": "    board = [[0 for i in range(n)] for j in range(n)]\n"
        },
        {
            "id": "chunk_4_open_knight_tour_3",
            "code": "    for i in range(n):\n        for j in range(n):\n            board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n            board[i][j] = 0\n"
        },
        {
            "id": "chunk_4_open_knight_tour_4",
            "code": "    msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"\n    raise ValueError(msg)\n"
        },
        {
            "id": "chunk_5_GlobalBlock_1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_5_GlobalBlock_2",
            "code": "    import doctest\n\n    doctest.testmod()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_1_get_valid_pos_1",
            "to": "chunk_1_get_valid_pos_2"
        },
        {
            "from": "chunk_1_get_valid_pos_2",
            "to": "chunk_1_get_valid_pos_3"
        },
        {
            "from": "chunk_1_get_valid_pos_3",
            "to": "chunk_1_get_valid_pos_4"
        },
        {
            "from": "chunk_1_get_valid_pos_4",
            "to": "chunk_1_get_valid_pos_5"
        },
        {
            "from": "chunk_3_open_knight_tour_helper_1",
            "to": "chunk_3_open_knight_tour_helper_2"
        },
        {
            "from": "chunk_3_open_knight_tour_helper_2",
            "to": "chunk_3_open_knight_tour_helper_3"
        },
        {
            "from": "chunk_3_open_knight_tour_helper_2",
            "to": "chunk_3_open_knight_tour_helper_5"
        },
        {
            "from": "chunk_3_open_knight_tour_helper_3",
            "to": "chunk_3_open_knight_tour_helper_4"
        },
        {
            "from": "chunk_3_open_knight_tour_helper_4",
            "to": "chunk_3_open_knight_tour_helper_3"
        },
        {
            "from": "chunk_3_open_knight_tour_helper_4",
            "to": "chunk_3_open_knight_tour_helper_5"
        },
        {
            "from": "chunk_4_open_knight_tour_1",
            "to": "chunk_4_open_knight_tour_2"
        },
        {
            "from": "chunk_4_open_knight_tour_2",
            "to": "chunk_4_open_knight_tour_3"
        },
        {
            "from": "chunk_4_open_knight_tour_3",
            "to": "chunk_4_open_knight_tour_4"
        },
        {
            "from": "chunk_5_GlobalBlock_1",
            "to": "chunk_5_GlobalBlock_2"
        }
    ]
}