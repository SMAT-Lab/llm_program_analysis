{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import logging\nimport time\nfrom typing import Sequence\n\nfrom backend.data import db\nfrom backend.data.block import Block, initialize_blocks\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.data.user import create_default_user\nfrom backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler\nfrom backend.server.rest_api import AgentServer\nfrom backend.server.utils import get_user_id\n\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "log = logging.getLogger(__name__)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_SpinTestServer_1",
            "code": "class SpinTestServer:\n"
        },
        {
            "id": "chunk_1_SpinTestServer_2",
            "code": "    def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()\n"
        },
        {
            "id": "chunk_1_SpinTestServer_3",
            "code": "    @staticmethod\n    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n"
        },
        {
            "id": "chunk_1_SpinTestServer_4",
            "code": "    async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n"
        },
        {
            "id": "chunk_1_SpinTestServer_5",
            "code": "        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n"
        },
        {
            "id": "chunk_1_SpinTestServer_6",
            "code": "        return self\n"
        },
        {
            "id": "chunk_1_SpinTestServer_7",
            "code": "    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n"
        },
        {
            "id": "chunk_1_SpinTestServer_8",
            "code": "        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n"
        },
        {
            "id": "chunk_1_SpinTestServer_9",
            "code": "    def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )\n"
        },
        {
            "id": "chunk_2_test_get_user_id_1",
            "code": "    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n"
        },
        {
            "id": "chunk_3___aenter___1",
            "code": "    async def __aenter__(self):\n        self.setup_dependency_overrides()\n"
        },
        {
            "id": "chunk_3___aenter___2",
            "code": "        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n"
        },
        {
            "id": "chunk_3___aenter___3",
            "code": "        self.db_api.__enter__()\n        self.agent_server.__enter__()\n"
        },
        {
            "id": "chunk_3___aenter___4",
            "code": "        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n"
        },
        {
            "id": "chunk_3___aenter___5",
            "code": "        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n"
        },
        {
            "id": "chunk_3___aenter___6",
            "code": "        self.scheduler.__enter__()\n\n        await db.connect()\n"
        },
        {
            "id": "chunk_3___aenter___7",
            "code": "        await db.connect()\n        await initialize_blocks()\n"
        },
        {
            "id": "chunk_3___aenter___8",
            "code": "        await initialize_blocks()\n        await create_default_user()\n"
        },
        {
            "id": "chunk_3___aenter___9",
            "code": "        await create_default_user()\n\n        return self\n"
        },
        {
            "id": "chunk_4___aexit___1",
            "code": "    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n"
        },
        {
            "id": "chunk_4___aexit___2",
            "code": "        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n"
        },
        {
            "id": "chunk_5_setup_dependency_overrides_1",
            "code": "    def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )\n"
        },
        {
            "id": "chunk_6_wait_execution_1",
            "code": "async def wait_execution(\n    user_id: str,\n    graph_id: str,\n    graph_exec_id: str,\n    timeout: int = 20,\n) -> Sequence[ExecutionResult]:\n"
        },
        {
            "id": "chunk_6_wait_execution_2",
            "code": "    async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED\n"
        },
        {
            "id": "chunk_6_wait_execution_3",
            "code": "    # Wait for the executions to complete\n    for i in range(timeout):\n"
        },
        {
            "id": "chunk_6_wait_execution_4",
            "code": "        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n"
        },
        {
            "id": "chunk_6_wait_execution_5",
            "code": "        time.sleep(1)\n"
        },
        {
            "id": "chunk_6_wait_execution_6",
            "code": "    assert False, \"Execution did not complete in time.\"\n"
        },
        {
            "id": "chunk_7_is_execution_completed_1",
            "code": "    async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n"
        },
        {
            "id": "chunk_7_is_execution_completed_2",
            "code": "        log.info(f\"Execution status: {status}\")\n"
        },
        {
            "id": "chunk_7_is_execution_completed_3",
            "code": "        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n"
        },
        {
            "id": "chunk_7_is_execution_completed_4",
            "code": "        return status == ExecutionStatus.COMPLETED\n"
        },
        {
            "id": "chunk_8_execute_block_test_1",
            "code": "def execute_block_test(block: Block):\n    prefix = f\"[Test-{block.name}]\"\n"
        },
        {
            "id": "chunk_8_execute_block_test_2",
            "code": "    if not block.test_input or not block.test_output:\n        log.info(f\"{prefix} No test data provided\")\n        return\n"
        },
        {
            "id": "chunk_8_execute_block_test_3",
            "code": "    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n"
        },
        {
            "id": "chunk_8_execute_block_test_4",
            "code": "    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n"
        },
        {
            "id": "chunk_8_execute_block_test_5",
            "code": "    output_index = 0\n    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")\n"
        },
        {
            "id": "chunk_8_execute_block_test_6",
            "code": "    prefix = \" \" * 4 + prefix\n"
        },
        {
            "id": "chunk_8_execute_block_test_7",
            "code": "    for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")\n"
        },
        {
            "id": "chunk_8_execute_block_test_8",
            "code": "    extra_exec_kwargs = {}\n"
        },
        {
            "id": "chunk_8_execute_block_test_9",
            "code": "    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n"
        },
        {
            "id": "chunk_8_execute_block_test_10",
            "code": "    for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n"
        },
        {
            "id": "chunk_8_execute_block_test_11",
            "code": "        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n"
        },
        {
            "id": "chunk_8_execute_block_test_12",
            "code": "            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"\u2705\" if is_matching else \"\u274c\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n"
        },
        {
            "id": "chunk_8_execute_block_test_13",
            "code": "            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n"
        },
        {
            "id": "chunk_8_execute_block_test_14",
            "code": "            output_index += 1\n"
        },
        {
            "id": "chunk_8_execute_block_test_15",
            "code": "    if output_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )\n"
        },
        {
            "id": "chunk_9_compare_1",
            "code": "            def compare(data, expected_data):\n"
        },
        {
            "id": "chunk_9_compare_2",
            "code": "                if data == expected_data:\n                    is_matching = True\n"
        },
        {
            "id": "chunk_9_compare_3",
            "code": "                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n"
        },
        {
            "id": "chunk_9_compare_4",
            "code": "                elif callable(expected_data):\n                    is_matching = expected_data(data)\n"
        },
        {
            "id": "chunk_9_compare_5",
            "code": "                else:\n                    is_matching = False\n"
        },
        {
            "id": "chunk_9_compare_6",
            "code": "                mark = \"\u2705\" if is_matching else \"\u274c\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n"
        },
        {
            "id": "chunk_9_compare_7",
            "code": "                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_1_SpinTestServer_1",
            "to": "chunk_1_SpinTestServer_2"
        },
        {
            "from": "chunk_1_SpinTestServer_2",
            "to": "chunk_1_SpinTestServer_3"
        },
        {
            "from": "chunk_1_SpinTestServer_2",
            "to": "chunk_1_SpinTestServer_4"
        },
        {
            "from": "chunk_1_SpinTestServer_2",
            "to": "chunk_1_SpinTestServer_7"
        },
        {
            "from": "chunk_1_SpinTestServer_2",
            "to": "chunk_1_SpinTestServer_9"
        },
        {
            "from": "chunk_1_SpinTestServer_4",
            "to": "chunk_1_SpinTestServer_5"
        },
        {
            "from": "chunk_1_SpinTestServer_5",
            "to": "chunk_1_SpinTestServer_6"
        },
        {
            "from": "chunk_1_SpinTestServer_7",
            "to": "chunk_1_SpinTestServer_8"
        },
        {
            "from": "chunk_3___aenter___1",
            "to": "chunk_3___aenter___2"
        },
        {
            "from": "chunk_3___aenter___2",
            "to": "chunk_3___aenter___3"
        },
        {
            "from": "chunk_3___aenter___3",
            "to": "chunk_3___aenter___4"
        },
        {
            "from": "chunk_3___aenter___4",
            "to": "chunk_3___aenter___5"
        },
        {
            "from": "chunk_3___aenter___5",
            "to": "chunk_3___aenter___6"
        },
        {
            "from": "chunk_3___aenter___6",
            "to": "chunk_3___aenter___7"
        },
        {
            "from": "chunk_3___aenter___7",
            "to": "chunk_3___aenter___8"
        },
        {
            "from": "chunk_3___aenter___8",
            "to": "chunk_3___aenter___9"
        },
        {
            "from": "chunk_4___aexit___1",
            "to": "chunk_4___aexit___2"
        },
        {
            "from": "chunk_6_wait_execution_1",
            "to": "chunk_6_wait_execution_3"
        },
        {
            "from": "chunk_6_wait_execution_3",
            "to": "chunk_6_wait_execution_4"
        },
        {
            "from": "chunk_6_wait_execution_3",
            "to": "chunk_6_wait_execution_6"
        },
        {
            "from": "chunk_6_wait_execution_4",
            "to": "chunk_6_wait_execution_5"
        },
        {
            "from": "chunk_6_wait_execution_5",
            "to": "chunk_6_wait_execution_3"
        },
        {
            "from": "chunk_7_is_execution_completed_1",
            "to": "chunk_7_is_execution_completed_2"
        },
        {
            "from": "chunk_7_is_execution_completed_2",
            "to": "chunk_7_is_execution_completed_3"
        },
        {
            "from": "chunk_7_is_execution_completed_3",
            "to": "chunk_7_is_execution_completed_4"
        },
        {
            "from": "chunk_8_execute_block_test_1",
            "to": "chunk_8_execute_block_test_2"
        },
        {
            "from": "chunk_8_execute_block_test_2",
            "to": "chunk_8_execute_block_test_3"
        },
        {
            "from": "chunk_8_execute_block_test_2",
            "to": "chunk_8_execute_block_test_5"
        },
        {
            "from": "chunk_8_execute_block_test_3",
            "to": "chunk_8_execute_block_test_4"
        },
        {
            "from": "chunk_8_execute_block_test_4",
            "to": "chunk_8_execute_block_test_5"
        },
        {
            "from": "chunk_8_execute_block_test_5",
            "to": "chunk_8_execute_block_test_6"
        },
        {
            "from": "chunk_8_execute_block_test_6",
            "to": "chunk_8_execute_block_test_7"
        },
        {
            "from": "chunk_8_execute_block_test_7",
            "to": "chunk_8_execute_block_test_8"
        },
        {
            "from": "chunk_8_execute_block_test_8",
            "to": "chunk_8_execute_block_test_9"
        },
        {
            "from": "chunk_8_execute_block_test_9",
            "to": "chunk_8_execute_block_test_10"
        },
        {
            "from": "chunk_8_execute_block_test_10",
            "to": "chunk_8_execute_block_test_11"
        },
        {
            "from": "chunk_8_execute_block_test_11",
            "to": "chunk_8_execute_block_test_12"
        },
        {
            "from": "chunk_8_execute_block_test_12",
            "to": "chunk_8_execute_block_test_13"
        },
        {
            "from": "chunk_8_execute_block_test_13",
            "to": "chunk_8_execute_block_test_14"
        },
        {
            "from": "chunk_8_execute_block_test_14",
            "to": "chunk_8_execute_block_test_10"
        },
        {
            "from": "chunk_8_execute_block_test_14",
            "to": "chunk_8_execute_block_test_15"
        },
        {
            "from": "chunk_9_compare_1",
            "to": "chunk_9_compare_2"
        },
        {
            "from": "chunk_9_compare_2",
            "to": "chunk_9_compare_3"
        },
        {
            "from": "chunk_9_compare_2",
            "to": "chunk_9_compare_5"
        },
        {
            "from": "chunk_9_compare_3",
            "to": "chunk_9_compare_4"
        },
        {
            "from": "chunk_9_compare_3",
            "to": "chunk_9_compare_5"
        },
        {
            "from": "chunk_9_compare_4",
            "to": "chunk_9_compare_5"
        },
        {
            "from": "chunk_9_compare_5",
            "to": "chunk_9_compare_6"
        },
        {
            "from": "chunk_9_compare_6",
            "to": "chunk_9_compare_7"
        }
    ]
}