{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import re\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from typing_extensions import TypedDict\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from ._api import get_api\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "from ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n"
        },
        {
            "id": "chunk_1_GithubListPullRequestsBlock_1",
            "code": "class GithubListPullRequestsBlock(Block):\n"
        },
        {
            "id": "chunk_1_GithubListPullRequestsBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_1_GithubListPullRequestsBlock_3",
            "code": "\n"
        },
        {
            "id": "chunk_1_GithubListPullRequestsBlock_4",
            "code": "    class Output(BlockSchema):\n        class PRItem(TypedDict):\n            title: str\n            url: str\n\n        pull_request: PRItem = SchemaField(\n            title=\"Pull Request\", description=\"PRs with their title and URL\"\n        )\n        error: str = SchemaField(description=\"Error message if listing issues failed\")\n"
        },
        {
            "id": "chunk_1_GithubListPullRequestsBlock_5",
            "code": "\n"
        },
        {
            "id": "chunk_1_GithubListPullRequestsBlock_6",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"ffef3c4c-6cd0-48dd-817d-459f975219f4\",\n            description=\"This block lists all pull requests for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListPullRequestsBlock.Input,\n            output_schema=GithubListPullRequestsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"pull_request\",\n                    {\n                        \"title\": \"Pull request 1\",\n                        \"url\": \"https://github.com/owner/repo/pull/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_prs\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Pull request 1\",\n                        \"url\": \"https://github.com/owner/repo/pull/1\",\n                    }\n                ]\n            },\n        )\n"
        },
        {
            "id": "chunk_1_GithubListPullRequestsBlock_7",
            "code": "\n"
        },
        {
            "id": "chunk_1_GithubListPullRequestsBlock_8",
            "code": "    @staticmethod\n    def list_prs(credentials: GithubCredentials, repo_url: str) -> list[Output.PRItem]:\n        api = get_api(credentials)\n        pulls_url = repo_url + \"/pulls\"\n        response = api.get(pulls_url)\n        data = response.json()\n        pull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = [\n            {\"title\": pr[\"title\"], \"url\": pr[\"html_url\"]} for pr in data\n        ]\n        return pull_requests\n"
        },
        {
            "id": "chunk_1_GithubListPullRequestsBlock_9",
            "code": "\n"
        },
        {
            "id": "chunk_1_GithubListPullRequestsBlock_10",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        pull_requests = self.list_prs(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"pull_request\", pr) for pr in pull_requests)\n"
        },
        {
            "id": "chunk_1_GithubListPullRequestsBlock_11",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_2_GithubListPullRequestsBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_3_GithubListPullRequestsBlock.Output_1",
            "code": "    class Output(BlockSchema):\n"
        },
        {
            "id": "chunk_3_GithubListPullRequestsBlock.Output_2",
            "code": "        class PRItem(TypedDict):\n            title: str\n            url: str\n"
        },
        {
            "id": "chunk_3_GithubListPullRequestsBlock.Output_3",
            "code": "        pull_request: PRItem = SchemaField(\n            title=\"Pull Request\", description=\"PRs with their title and URL\"\n        )\n"
        },
        {
            "id": "chunk_3_GithubListPullRequestsBlock.Output_4",
            "code": "        error: str = SchemaField(description=\"Error message if listing issues failed\")\n"
        },
        {
            "id": "chunk_4_GithubListPullRequestsBlock.Output.PRItem_1",
            "code": "        class PRItem(TypedDict):\n            title: str\n            url: str\n"
        },
        {
            "id": "chunk_5_GithubListPullRequestsBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"ffef3c4c-6cd0-48dd-817d-459f975219f4\",\n            description=\"This block lists all pull requests for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListPullRequestsBlock.Input,\n            output_schema=GithubListPullRequestsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"pull_request\",\n                    {\n                        \"title\": \"Pull request 1\",\n                        \"url\": \"https://github.com/owner/repo/pull/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_prs\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Pull request 1\",\n                        \"url\": \"https://github.com/owner/repo/pull/1\",\n                    }\n                ]\n            },\n        )\n"
        },
        {
            "id": "chunk_6_GithubListPullRequestsBlock.list_prs_1",
            "code": "    @staticmethod\n    def list_prs(credentials: GithubCredentials, repo_url: str) -> list[Output.PRItem]:\n"
        },
        {
            "id": "chunk_6_GithubListPullRequestsBlock.list_prs_2",
            "code": "        api = get_api(credentials)\n        pulls_url = repo_url + \"/pulls\"\n        response = api.get(pulls_url)\n        data = response.json()\n"
        },
        {
            "id": "chunk_6_GithubListPullRequestsBlock.list_prs_3",
            "code": "        pull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = [\n            {\"title\": pr[\"title\"], \"url\": pr[\"html_url\"]} for pr in data\n        ]\n"
        },
        {
            "id": "chunk_6_GithubListPullRequestsBlock.list_prs_4",
            "code": "        return pull_requests\n"
        },
        {
            "id": "chunk_7_GithubListPullRequestsBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_7_GithubListPullRequestsBlock.run_2",
            "code": "        pull_requests = self.list_prs(\n            credentials,\n            input_data.repo_url,\n        )\n"
        },
        {
            "id": "chunk_7_GithubListPullRequestsBlock.run_3",
            "code": "        yield from ((\"pull_request\", pr) for pr in pull_requests)\n"
        },
        {
            "id": "chunk_8_GithubMakePullRequestBlock_1",
            "code": "class GithubMakePullRequestBlock(Block):\n    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_8_GithubMakePullRequestBlock_2",
            "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        title: str = SchemaField(\n            description=\"Title of the pull request\",\n            placeholder=\"Enter the pull request title\",\n        )\n        body: str = SchemaField(\n            description=\"Body of the pull request\",\n            placeholder=\"Enter the pull request body\",\n        )\n        head: str = SchemaField(\n            description=(\n                \"The name of the branch where your changes are implemented. \"\n                \"For cross-repository pull requests in the same network, \"\n                \"namespace head with a user like this: username:branch.\"\n            ),\n            placeholder=\"Enter the head branch\",\n        )\n        base: str = SchemaField(\n            description=\"The name of the branch you want the changes pulled into.\",\n            placeholder=\"Enter the base branch\",\n        )\n"
        },
        {
            "id": "chunk_8_GithubMakePullRequestBlock_3",
            "code": "    class Output(BlockSchema):\n        number: int = SchemaField(description=\"Number of the created pull request\")\n        url: str = SchemaField(description=\"URL of the created pull request\")\n        error: str = SchemaField(\n            description=\"Error message if the pull request creation failed\"\n        )\n"
        },
        {
            "id": "chunk_8_GithubMakePullRequestBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"dfb987f8-f197-4b2e-bf19-111812afd692\",\n            description=\"This block creates a new pull request on a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakePullRequestBlock.Input,\n            output_schema=GithubMakePullRequestBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"title\": \"Test Pull Request\",\n                \"body\": \"This is a test pull request.\",\n                \"head\": \"feature-branch\",\n                \"base\": \"main\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"number\", 1),\n                (\"url\", \"https://github.com/owner/repo/pull/1\"),\n            ],\n            test_mock={\n                \"create_pr\": lambda *args, **kwargs: (\n                    1,\n                    \"https://github.com/owner/repo/pull/1\",\n                )\n            },\n        )\n"
        },
        {
            "id": "chunk_8_GithubMakePullRequestBlock_5",
            "code": "    @staticmethod\n    def create_pr(\n        credentials: GithubCredentials,\n        repo_url: str,\n        title: str,\n        body: str,\n        head: str,\n        base: str,\n    ) -> tuple[int, str]:\n        api = get_api(credentials)\n        pulls_url = repo_url + \"/pulls\"\n        data = {\"title\": title, \"body\": body, \"head\": head, \"base\": base}\n        response = api.post(pulls_url, json=data)\n        pr_data = response.json()\n        return pr_data[\"number\"], pr_data[\"html_url\"]\n"
        },
        {
            "id": "chunk_8_GithubMakePullRequestBlock_6",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            number, url = self.create_pr(\n                credentials,\n                input_data.repo_url,\n                input_data.title,\n                input_data.body,\n                input_data.head,\n                input_data.base,\n            )\n            yield \"number\", number\n            yield \"url\", url\n        except Exception as e:\n            yield \"error\", str(e)\n"
        },
        {
            "id": "chunk_9_GithubMakePullRequestBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_9_GithubMakePullRequestBlock.Input_2",
            "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
        },
        {
            "id": "chunk_9_GithubMakePullRequestBlock.Input_3",
            "code": "        title: str = SchemaField(\n            description=\"Title of the pull request\",\n            placeholder=\"Enter the pull request title\",\n        )\n"
        },
        {
            "id": "chunk_9_GithubMakePullRequestBlock.Input_4",
            "code": "        body: str = SchemaField(\n            description=\"Body of the pull request\",\n            placeholder=\"Enter the pull request body\",\n        )\n"
        },
        {
            "id": "chunk_9_GithubMakePullRequestBlock.Input_5",
            "code": "        head: str = SchemaField(\n            description=(\n                \"The name of the branch where your changes are implemented. \"\n                \"For cross-repository pull requests in the same network, \"\n                \"namespace head with a user like this: username:branch.\"\n            ),\n            placeholder=\"Enter the head branch\",\n        )\n"
        },
        {
            "id": "chunk_9_GithubMakePullRequestBlock.Input_6",
            "code": "        base: str = SchemaField(\n            description=\"The name of the branch you want the changes pulled into.\",\n            placeholder=\"Enter the base branch\",\n        )\n"
        },
        {
            "id": "chunk_10_GithubMakePullRequestBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        number: int = SchemaField(description=\"Number of the created pull request\")\n        url: str = SchemaField(description=\"URL of the created pull request\")\n        error: str = SchemaField(\n            description=\"Error message if the pull request creation failed\"\n        )\n"
        },
        {
            "id": "chunk_11_GithubMakePullRequestBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"dfb987f8-f197-4b2e-bf19-111812afd692\",\n            description=\"This block creates a new pull request on a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakePullRequestBlock.Input,\n            output_schema=GithubMakePullRequestBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"title\": \"Test Pull Request\",\n                \"body\": \"This is a test pull request.\",\n                \"head\": \"feature-branch\",\n                \"base\": \"main\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"number\", 1),\n                (\"url\", \"https://github.com/owner/repo/pull/1\"),\n            ],\n            test_mock={\n                \"create_pr\": lambda *args, **kwargs: (\n                    1,\n                    \"https://github.com/owner/repo/pull/1\",\n                )\n            },\n        )\n"
        },
        {
            "id": "chunk_12_GithubMakePullRequestBlock.create_pr_1",
            "code": "    @staticmethod\n    def create_pr(\n        credentials: GithubCredentials,\n        repo_url: str,\n        title: str,\n        body: str,\n        head: str,\n        base: str,\n    ) -> tuple[int, str]:\n"
        },
        {
            "id": "chunk_12_GithubMakePullRequestBlock.create_pr_2",
            "code": "        api = get_api(credentials)\n        pulls_url = repo_url + \"/pulls\"\n        data = {\"title\": title, \"body\": body, \"head\": head, \"base\": base}\n        response = api.post(pulls_url, json=data)\n        pr_data = response.json()\n        return pr_data[\"number\"], pr_data[\"html_url\"]\n"
        },
        {
            "id": "chunk_13_GithubMakePullRequestBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_13_GithubMakePullRequestBlock.run_2",
            "code": "        try:\n            number, url = self.create_pr(\n                credentials,\n                input_data.repo_url,\n                input_data.title,\n                input_data.body,\n                input_data.head,\n                input_data.base,\n            )\n            yield \"number\", number\n            yield \"url\", url\n"
        },
        {
            "id": "chunk_13_GithubMakePullRequestBlock.run_3",
            "code": "        except Exception as e:\n            yield \"error\", str(e)\n"
        },
        {
            "id": "chunk_14_GithubReadPullRequestBlock_1",
            "code": "class GithubReadPullRequestBlock(Block):\n    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_14_GithubReadPullRequestBlock_2",
            "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n        include_pr_changes: bool = SchemaField(\n            description=\"Whether to include the changes made in the pull request\",\n            default=False,\n        )\n"
        },
        {
            "id": "chunk_14_GithubReadPullRequestBlock_3",
            "code": "    class Output(BlockSchema):\n        title: str = SchemaField(description=\"Title of the pull request\")\n        body: str = SchemaField(description=\"Body of the pull request\")\n        author: str = SchemaField(description=\"User who created the pull request\")\n        changes: str = SchemaField(description=\"Changes made in the pull request\")\n        error: str = SchemaField(\n            description=\"Error message if reading the pull request failed\"\n        )\n"
        },
        {
            "id": "chunk_14_GithubReadPullRequestBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"bf94b2a4-1a30-4600-a783-a8a44ee31301\",\n            description=\"This block reads the body, title, user, and changes of a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadPullRequestBlock.Input,\n            output_schema=GithubReadPullRequestBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"include_pr_changes\": True,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"title\", \"Title of the pull request\"),\n                (\"body\", \"This is the body of the pull request.\"),\n                (\"author\", \"username\"),\n                (\"changes\", \"List of changes made in the pull request.\"),\n            ],\n            test_mock={\n                \"read_pr\": lambda *args, **kwargs: (\n                    \"Title of the pull request\",\n                    \"This is the body of the pull request.\",\n                    \"username\",\n                ),\n                \"read_pr_changes\": lambda *args, **kwargs: \"List of changes made in the pull request.\",\n            },\n        )\n"
        },
        {
            "id": "chunk_14_GithubReadPullRequestBlock_5",
            "code": "    @staticmethod\n    def read_pr(credentials: GithubCredentials, pr_url: str) -> tuple[str, str, str]:\n        api = get_api(credentials)\n        # Adjust the URL to access the issue endpoint for PR metadata\n        issue_url = pr_url.replace(\"/pull/\", \"/issues/\")\n        response = api.get(issue_url)\n        data = response.json()\n        title = data.get(\"title\", \"No title found\")\n        body = data.get(\"body\", \"No body content found\")\n        author = data.get(\"user\", {}).get(\"login\", \"No user found\")\n        return title, body, author\n"
        },
        {
            "id": "chunk_14_GithubReadPullRequestBlock_6",
            "code": "    @staticmethod\n    def read_pr_changes(credentials: GithubCredentials, pr_url: str) -> str:\n        api = get_api(credentials)\n        files_url = prepare_pr_api_url(pr_url=pr_url, path=\"files\")\n        response = api.get(files_url)\n        files = response.json()\n        changes = []\n        for file in files:\n            filename = file.get(\"filename\")\n            patch = file.get(\"patch\")\n            if filename and patch:\n                changes.append(f\"File: {filename}\\n{patch}\")\n        return \"\\n\\n\".join(changes)\n"
        },
        {
            "id": "chunk_14_GithubReadPullRequestBlock_7",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        title, body, author = self.read_pr(\n            credentials,\n            input_data.pr_url,\n        )\n        yield \"title\", title\n        yield \"body\", body\n        yield \"author\", author\n"
        },
        {
            "id": "chunk_14_GithubReadPullRequestBlock_8",
            "code": "        if input_data.include_pr_changes:\n            changes = self.read_pr_changes(\n                credentials,\n                input_data.pr_url,\n            )\n            yield \"changes\", changes\n"
        },
        {
            "id": "chunk_15_GithubReadPullRequestBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_15_GithubReadPullRequestBlock.Input_2",
            "code": "        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n"
        },
        {
            "id": "chunk_15_GithubReadPullRequestBlock.Input_3",
            "code": "        include_pr_changes: bool = SchemaField(\n            description=\"Whether to include the changes made in the pull request\",\n            default=False,\n        )\n"
        },
        {
            "id": "chunk_16_GithubReadPullRequestBlock.Output_1",
            "code": "    class Output(BlockSchema):\n"
        },
        {
            "id": "chunk_16_GithubReadPullRequestBlock.Output_2",
            "code": "        title: str = SchemaField(description=\"Title of the pull request\")\n        body: str = SchemaField(description=\"Body of the pull request\")\n        author: str = SchemaField(description=\"User who created the pull request\")\n        changes: str = SchemaField(description=\"Changes made in the pull request\")\n"
        },
        {
            "id": "chunk_16_GithubReadPullRequestBlock.Output_3",
            "code": "        error: str = SchemaField(\n            description=\"Error message if reading the pull request failed\"\n        )\n"
        },
        {
            "id": "chunk_17_GithubReadPullRequestBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"bf94b2a4-1a30-4600-a783-a8a44ee31301\",\n            description=\"This block reads the body, title, user, and changes of a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadPullRequestBlock.Input,\n            output_schema=GithubReadPullRequestBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"include_pr_changes\": True,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"title\", \"Title of the pull request\"),\n                (\"body\", \"This is the body of the pull request.\"),\n                (\"author\", \"username\"),\n                (\"changes\", \"List of changes made in the pull request.\"),\n            ],\n            test_mock={\n                \"read_pr\": lambda *args, **kwargs: (\n                    \"Title of the pull request\",\n                    \"This is the body of the pull request.\",\n                    \"username\",\n                ),\n                \"read_pr_changes\": lambda *args, **kwargs: \"List of changes made in the pull request.\",\n            },\n        )\n"
        },
        {
            "id": "chunk_18_GithubReadPullRequestBlock.read_pr_1",
            "code": "    def read_pr(credentials: GithubCredentials, pr_url: str) -> tuple[str, str, str]:\n        api = get_api(credentials)\n"
        },
        {
            "id": "chunk_18_GithubReadPullRequestBlock.read_pr_2",
            "code": "        # Adjust the URL to access the issue endpoint for PR metadata\n        issue_url = pr_url.replace(\"/pull/\", \"/issues/\")\n"
        },
        {
            "id": "chunk_18_GithubReadPullRequestBlock.read_pr_3",
            "code": "        response = api.get(issue_url)\n        data = response.json()\n"
        },
        {
            "id": "chunk_18_GithubReadPullRequestBlock.read_pr_4",
            "code": "        title = data.get(\"title\", \"No title found\")\n        body = data.get(\"body\", \"No body content found\")\n        author = data.get(\"user\", {}).get(\"login\", \"No user found\")\n"
        },
        {
            "id": "chunk_18_GithubReadPullRequestBlock.read_pr_5",
            "code": "        return title, body, author\n"
        },
        {
            "id": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_1",
            "code": "    def read_pr_changes(credentials: GithubCredentials, pr_url: str) -> str:\n        api = get_api(credentials)\n"
        },
        {
            "id": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_2",
            "code": "        files_url = prepare_pr_api_url(pr_url=pr_url, path=\"files\")\n        response = api.get(files_url)\n        files = response.json()\n"
        },
        {
            "id": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_3",
            "code": "        changes = []\n"
        },
        {
            "id": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_4",
            "code": "        for file in files:\n            filename = file.get(\"filename\")\n            patch = file.get(\"patch\")\n            if filename and patch:\n                changes.append(f\"File: {filename}\\n{patch}\")\n"
        },
        {
            "id": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_5",
            "code": "        return \"\\n\\n\".join(changes)\n"
        },
        {
            "id": "chunk_20_GithubReadPullRequestBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_20_GithubReadPullRequestBlock.run_2",
            "code": "        title, body, author = self.read_pr(\n            credentials,\n            input_data.pr_url,\n        )\n"
        },
        {
            "id": "chunk_20_GithubReadPullRequestBlock.run_3",
            "code": "        yield \"title\", title\n        yield \"body\", body\n        yield \"author\", author\n"
        },
        {
            "id": "chunk_20_GithubReadPullRequestBlock.run_4",
            "code": "        if input_data.include_pr_changes:\n"
        },
        {
            "id": "chunk_20_GithubReadPullRequestBlock.run_5",
            "code": "            changes = self.read_pr_changes(\n                credentials,\n                input_data.pr_url,\n            )\n"
        },
        {
            "id": "chunk_20_GithubReadPullRequestBlock.run_6",
            "code": "            yield \"changes\", changes\n"
        },
        {
            "id": "chunk_21_GithubAssignPRReviewerBlock_1",
            "code": "class GithubAssignPRReviewerBlock(Block):\n    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_21_GithubAssignPRReviewerBlock_2",
            "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n"
        },
        {
            "id": "chunk_21_GithubAssignPRReviewerBlock_3",
            "code": "        reviewer: str = SchemaField(\n            description=\"Username of the reviewer to assign\",\n            placeholder=\"Enter the reviewer's username\",\n        )\n"
        },
        {
            "id": "chunk_21_GithubAssignPRReviewerBlock_4",
            "code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the reviewer assignment operation\"\n        )\n"
        },
        {
            "id": "chunk_21_GithubAssignPRReviewerBlock_5",
            "code": "        error: str = SchemaField(\n            description=\"Error message if the reviewer assignment failed\"\n        )\n"
        },
        {
            "id": "chunk_21_GithubAssignPRReviewerBlock_6",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"c0d22c5e-e688-43e3-ba43-d5faba7927fd\",\n            description=\"This block assigns a reviewer to a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubAssignPRReviewerBlock.Input,\n            output_schema=GithubAssignPRReviewerBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"reviewer\": \"reviewer_username\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Reviewer assigned successfully\")],\n            test_mock={\n                \"assign_reviewer\": lambda *args, **kwargs: \"Reviewer assigned successfully\"\n            },\n        )\n"
        },
        {
            "id": "chunk_21_GithubAssignPRReviewerBlock_7",
            "code": "    @staticmethod\n    def assign_reviewer(\n        credentials: GithubCredentials, pr_url: str, reviewer: str\n    ) -> str:\n        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\n        data = {\"reviewers\": [reviewer]}\n        api.post(reviewers_url, json=data)\n        return \"Reviewer assigned successfully\"\n"
        },
        {
            "id": "chunk_21_GithubAssignPRReviewerBlock_8",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_21_GithubAssignPRReviewerBlock_9",
            "code": "        try:\n            status = self.assign_reviewer(\n                credentials,\n                input_data.pr_url,\n                input_data.reviewer,\n            )\n            yield \"status\", status\n"
        },
        {
            "id": "chunk_21_GithubAssignPRReviewerBlock_10",
            "code": "        except Exception as e:\n            yield \"error\", str(e)\n"
        },
        {
            "id": "chunk_22_GithubAssignPRReviewerBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_22_GithubAssignPRReviewerBlock.Input_2",
            "code": "        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n"
        },
        {
            "id": "chunk_22_GithubAssignPRReviewerBlock.Input_3",
            "code": "        reviewer: str = SchemaField(\n            description=\"Username of the reviewer to assign\",\n            placeholder=\"Enter the reviewer's username\",\n        )\n"
        },
        {
            "id": "chunk_23_GithubAssignPRReviewerBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the reviewer assignment operation\"\n        )\n"
        },
        {
            "id": "chunk_23_GithubAssignPRReviewerBlock.Output_2",
            "code": "        error: str = SchemaField(\n            description=\"Error message if the reviewer assignment failed\"\n        )\n"
        },
        {
            "id": "chunk_24_GithubAssignPRReviewerBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"c0d22c5e-e688-43e3-ba43-d5faba7927fd\",\n            description=\"This block assigns a reviewer to a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubAssignPRReviewerBlock.Input,\n            output_schema=GithubAssignPRReviewerBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"reviewer\": \"reviewer_username\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Reviewer assigned successfully\")],\n            test_mock={\n                \"assign_reviewer\": lambda *args, **kwargs: \"Reviewer assigned successfully\"\n            },\n        )\n"
        },
        {
            "id": "chunk_25_GithubAssignPRReviewerBlock.assign_reviewer_1",
            "code": "    def assign_reviewer(\n        credentials: GithubCredentials, pr_url: str, reviewer: str\n    ) -> str:\n"
        },
        {
            "id": "chunk_25_GithubAssignPRReviewerBlock.assign_reviewer_2",
            "code": "        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\n        data = {\"reviewers\": [reviewer]}\n        api.post(reviewers_url, json=data)\n"
        },
        {
            "id": "chunk_25_GithubAssignPRReviewerBlock.assign_reviewer_3",
            "code": "        return \"Reviewer assigned successfully\"\n"
        },
        {
            "id": "chunk_26_GithubAssignPRReviewerBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_26_GithubAssignPRReviewerBlock.run_2",
            "code": "        try:\n            status = self.assign_reviewer(\n                credentials,\n                input_data.pr_url,\n                input_data.reviewer,\n            )\n            yield \"status\", status\n"
        },
        {
            "id": "chunk_26_GithubAssignPRReviewerBlock.run_3",
            "code": "        except Exception as e:\n            yield \"error\", str(e)\n"
        },
        {
            "id": "chunk_27_GithubUnassignPRReviewerBlock_1",
            "code": "class GithubUnassignPRReviewerBlock(Block):\n    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_27_GithubUnassignPRReviewerBlock_2",
            "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n"
        },
        {
            "id": "chunk_27_GithubUnassignPRReviewerBlock_3",
            "code": "        reviewer: str = SchemaField(\n            description=\"Username of the reviewer to unassign\",\n            placeholder=\"Enter the reviewer's username\",\n        )\n"
        },
        {
            "id": "chunk_27_GithubUnassignPRReviewerBlock_4",
            "code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n"
        },
        {
            "id": "chunk_27_GithubUnassignPRReviewerBlock_5",
            "code": "            description=\"Status of the reviewer unassignment operation\"\n        )\n"
        },
        {
            "id": "chunk_27_GithubUnassignPRReviewerBlock_6",
            "code": "        error: str = SchemaField(\n            description=\"Error message if the reviewer unassignment failed\"\n        )\n"
        },
        {
            "id": "chunk_27_GithubUnassignPRReviewerBlock_7",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"9637945d-c602-4875-899a-9c22f8fd30de\",\n            description=\"This block unassigns a reviewer from a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubUnassignPRReviewerBlock.Input,\n            output_schema=GithubUnassignPRReviewerBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"reviewer\": \"reviewer_username\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Reviewer unassigned successfully\")],\n            test_mock={\n                \"unassign_reviewer\": lambda *args, **kwargs: \"Reviewer unassigned successfully\"\n            },\n        )\n"
        },
        {
            "id": "chunk_27_GithubUnassignPRReviewerBlock_8",
            "code": "    @staticmethod\n    def unassign_reviewer(\n        credentials: GithubCredentials, pr_url: str, reviewer: str\n    ) -> str:\n"
        },
        {
            "id": "chunk_27_GithubUnassignPRReviewerBlock_9",
            "code": "        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\n        data = {\"reviewers\": [reviewer]}\n        api.delete(reviewers_url, json=data)\n        return \"Reviewer unassigned successfully\"\n"
        },
        {
            "id": "chunk_27_GithubUnassignPRReviewerBlock_10",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_27_GithubUnassignPRReviewerBlock_11",
            "code": "        try:\n            status = self.unassign_reviewer(\n                credentials,\n                input_data.pr_url,\n                input_data.reviewer,\n            )\n            yield \"status\", status\n"
        },
        {
            "id": "chunk_27_GithubUnassignPRReviewerBlock_12",
            "code": "        except Exception as e:\n            yield \"error\", str(e)\n"
        },
        {
            "id": "chunk_28_GithubUnassignPRReviewerBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_28_GithubUnassignPRReviewerBlock.Input_2",
            "code": "        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n"
        },
        {
            "id": "chunk_28_GithubUnassignPRReviewerBlock.Input_3",
            "code": "        reviewer: str = SchemaField(\n            description=\"Username of the reviewer to unassign\",\n            placeholder=\"Enter the reviewer's username\",\n        )\n"
        },
        {
            "id": "chunk_29_GithubUnassignPRReviewerBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the reviewer unassignment operation\"\n        )\n"
        },
        {
            "id": "chunk_29_GithubUnassignPRReviewerBlock.Output_2",
            "code": "        error: str = SchemaField(\n            description=\"Error message if the reviewer unassignment failed\"\n        )\n"
        },
        {
            "id": "chunk_30_GithubUnassignPRReviewerBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"9637945d-c602-4875-899a-9c22f8fd30de\",\n            description=\"This block unassigns a reviewer from a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubUnassignPRReviewerBlock.Input,\n            output_schema=GithubUnassignPRReviewerBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"reviewer\": \"reviewer_username\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Reviewer unassigned successfully\")],\n            test_mock={\n                \"unassign_reviewer\": lambda *args, **kwargs: \"Reviewer unassigned successfully\"\n            },\n        )\n"
        },
        {
            "id": "chunk_31_GithubUnassignPRReviewerBlock.unassign_reviewer_1",
            "code": "    def unassign_reviewer(\n        credentials: GithubCredentials, pr_url: str, reviewer: str\n    ) -> str:\n"
        },
        {
            "id": "chunk_31_GithubUnassignPRReviewerBlock.unassign_reviewer_2",
            "code": "        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\n        data = {\"reviewers\": [reviewer]}\n        api.delete(reviewers_url, json=data)\n        return \"Reviewer unassigned successfully\"\n"
        },
        {
            "id": "chunk_32_GithubUnassignPRReviewerBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_32_GithubUnassignPRReviewerBlock.run_2",
            "code": "        try:\n            status = self.unassign_reviewer(\n                credentials,\n                input_data.pr_url,\n                input_data.reviewer,\n            )\n            yield \"status\", status\n"
        },
        {
            "id": "chunk_32_GithubUnassignPRReviewerBlock.run_3",
            "code": "        except Exception as e:\n            yield \"error\", str(e)\n"
        },
        {
            "id": "chunk_33_GithubListPRReviewersBlock_1",
            "code": "class GithubListPRReviewersBlock(Block):\n    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_33_GithubListPRReviewersBlock_2",
            "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n"
        },
        {
            "id": "chunk_33_GithubListPRReviewersBlock_3",
            "code": "    class Output(BlockSchema):\n        class ReviewerItem(TypedDict):\n"
        },
        {
            "id": "chunk_33_GithubListPRReviewersBlock_4",
            "code": "            username: str\n            url: str\n"
        },
        {
            "id": "chunk_33_GithubListPRReviewersBlock_5",
            "code": "        reviewer: ReviewerItem = SchemaField(\n            title=\"Reviewer\",\n            description=\"Reviewers with their username and profile URL\",\n        )\n"
        },
        {
            "id": "chunk_33_GithubListPRReviewersBlock_6",
            "code": "        error: str = SchemaField(\n            description=\"Error message if listing reviewers failed\"\n        )\n"
        },
        {
            "id": "chunk_33_GithubListPRReviewersBlock_7",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"2646956e-96d5-4754-a3df-034017e7ed96\",\n            description=\"This block lists all reviewers for a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListPRReviewersBlock.Input,\n            output_schema=GithubListPRReviewersBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"reviewer\",\n                    {\n                        \"username\": \"reviewer1\",\n                        \"url\": \"https://github.com/reviewer1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_reviewers\": lambda *args, **kwargs: [\n                    {\n                        \"username\": \"reviewer1\",\n                        \"url\": \"https://github.com/reviewer1\",\n                    }\n                ]\n            },\n        )\n"
        },
        {
            "id": "chunk_33_GithubListPRReviewersBlock_8",
            "code": "    @staticmethod\n    def list_reviewers(\n        credentials: GithubCredentials, pr_url: str\n"
        },
        {
            "id": "chunk_33_GithubListPRReviewersBlock_9",
            "code": "        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\n        response = api.get(reviewers_url)\n        data = response.json()\n        reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [\n            {\"username\": reviewer[\"login\"], \"url\": reviewer[\"html_url\"]}\n            for reviewer in data.get(\"users\", [])\n        ]\n        return reviewers\n"
        },
        {
            "id": "chunk_33_GithubListPRReviewersBlock_10",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_33_GithubListPRReviewersBlock_11",
            "code": "        reviewers = self.list_reviewers(\n            credentials,\n            input_data.pr_url,\n        )\n        yield from ((\"reviewer\", reviewer) for reviewer in reviewers)\n"
        },
        {
            "id": "chunk_34_GithubListPRReviewersBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_34_GithubListPRReviewersBlock.Input_2",
            "code": "        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n"
        },
        {
            "id": "chunk_35_GithubListPRReviewersBlock.Output_1",
            "code": "    class Output(BlockSchema):\n"
        },
        {
            "id": "chunk_35_GithubListPRReviewersBlock.Output_2",
            "code": "        class ReviewerItem(TypedDict):\n            username: str\n            url: str\n"
        },
        {
            "id": "chunk_35_GithubListPRReviewersBlock.Output_3",
            "code": "        reviewer: ReviewerItem = SchemaField(\n            title=\"Reviewer\",\n            description=\"Reviewers with their username and profile URL\",\n        )\n"
        },
        {
            "id": "chunk_35_GithubListPRReviewersBlock.Output_4",
            "code": "        error: str = SchemaField(\n            description=\"Error message if listing reviewers failed\"\n        )\n"
        },
        {
            "id": "chunk_36_GithubListPRReviewersBlock.Output.ReviewerItem_1",
            "code": "        class ReviewerItem(TypedDict):\n            username: str\n            url: str\n"
        },
        {
            "id": "chunk_37_GithubListPRReviewersBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"2646956e-96d5-4754-a3df-034017e7ed96\",\n            description=\"This block lists all reviewers for a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListPRReviewersBlock.Input,\n            output_schema=GithubListPRReviewersBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"reviewer\",\n                    {\n                        \"username\": \"reviewer1\",\n                        \"url\": \"https://github.com/reviewer1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_reviewers\": lambda *args, **kwargs: [\n                    {\n                        \"username\": \"reviewer1\",\n                        \"url\": \"https://github.com/reviewer1\",\n                    }\n                ]\n            },\n        )\n"
        },
        {
            "id": "chunk_38_GithubListPRReviewersBlock.list_reviewers_1",
            "code": "    def list_reviewers(\n        credentials: GithubCredentials, pr_url: str\n    ) -> list[Output.ReviewerItem]:\n"
        },
        {
            "id": "chunk_38_GithubListPRReviewersBlock.list_reviewers_2",
            "code": "        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\n        response = api.get(reviewers_url)\n        data = response.json()\n"
        },
        {
            "id": "chunk_38_GithubListPRReviewersBlock.list_reviewers_3",
            "code": "        reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [\n            {\"username\": reviewer[\"login\"], \"url\": reviewer[\"html_url\"]}\n            for reviewer in data.get(\"users\", [])\n        ]\n"
        },
        {
            "id": "chunk_38_GithubListPRReviewersBlock.list_reviewers_4",
            "code": "        return reviewers\n"
        },
        {
            "id": "chunk_39_GithubListPRReviewersBlock.run_1",
            "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_39_GithubListPRReviewersBlock.run_2",
            "code": "        reviewers = self.list_reviewers(\n            credentials,\n            input_data.pr_url,\n        )\n"
        },
        {
            "id": "chunk_39_GithubListPRReviewersBlock.run_3",
            "code": "        yield from ((\"reviewer\", reviewer) for reviewer in reviewers)\n"
        },
        {
            "id": "chunk_40_prepare_pr_api_url_1",
            "code": "def prepare_pr_api_url(pr_url: str, path: str) -> str:\n    # Pattern to capture the base repository URL and the pull request number\n    pattern = r\"^(?:https?://)?([^/]+/[^/]+/[^/]+)/pull/(\\d+)\"\n"
        },
        {
            "id": "chunk_40_prepare_pr_api_url_2",
            "code": "    match = re.match(pattern, pr_url)\n"
        },
        {
            "id": "chunk_40_prepare_pr_api_url_3",
            "code": "    if not match:\n        return pr_url\n"
        },
        {
            "id": "chunk_40_prepare_pr_api_url_4",
            "code": "    base_url, pr_number = match.groups()\n    return f\"{base_url}/pulls/{pr_number}/{path}\"\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_1_GithubListPullRequestsBlock_1",
            "to": "chunk_1_GithubListPullRequestsBlock_2"
        },
        {
            "from": "chunk_1_GithubListPullRequestsBlock_2",
            "to": "chunk_1_GithubListPullRequestsBlock_3"
        },
        {
            "from": "chunk_1_GithubListPullRequestsBlock_3",
            "to": "chunk_1_GithubListPullRequestsBlock_4"
        },
        {
            "from": "chunk_1_GithubListPullRequestsBlock_4",
            "to": "chunk_1_GithubListPullRequestsBlock_5"
        },
        {
            "from": "chunk_1_GithubListPullRequestsBlock_5",
            "to": "chunk_1_GithubListPullRequestsBlock_6"
        },
        {
            "from": "chunk_1_GithubListPullRequestsBlock_6",
            "to": "chunk_1_GithubListPullRequestsBlock_7"
        },
        {
            "from": "chunk_1_GithubListPullRequestsBlock_7",
            "to": "chunk_1_GithubListPullRequestsBlock_8"
        },
        {
            "from": "chunk_1_GithubListPullRequestsBlock_8",
            "to": "chunk_1_GithubListPullRequestsBlock_9"
        },
        {
            "from": "chunk_1_GithubListPullRequestsBlock_9",
            "to": "chunk_1_GithubListPullRequestsBlock_10"
        },
        {
            "from": "chunk_1_GithubListPullRequestsBlock_10",
            "to": "chunk_1_GithubListPullRequestsBlock_11"
        },
        {
            "from": "chunk_3_GithubListPullRequestsBlock.Output_1",
            "to": "chunk_3_GithubListPullRequestsBlock.Output_2"
        },
        {
            "from": "chunk_3_GithubListPullRequestsBlock.Output_2",
            "to": "chunk_3_GithubListPullRequestsBlock.Output_3"
        },
        {
            "from": "chunk_3_GithubListPullRequestsBlock.Output_3",
            "to": "chunk_3_GithubListPullRequestsBlock.Output_4"
        },
        {
            "from": "chunk_6_GithubListPullRequestsBlock.list_prs_1",
            "to": "chunk_6_GithubListPullRequestsBlock.list_prs_2"
        },
        {
            "from": "chunk_6_GithubListPullRequestsBlock.list_prs_2",
            "to": "chunk_6_GithubListPullRequestsBlock.list_prs_3"
        },
        {
            "from": "chunk_6_GithubListPullRequestsBlock.list_prs_3",
            "to": "chunk_6_GithubListPullRequestsBlock.list_prs_4"
        },
        {
            "from": "chunk_7_GithubListPullRequestsBlock.run_1",
            "to": "chunk_7_GithubListPullRequestsBlock.run_2"
        },
        {
            "from": "chunk_7_GithubListPullRequestsBlock.run_2",
            "to": "chunk_7_GithubListPullRequestsBlock.run_3"
        },
        {
            "from": "chunk_8_GithubMakePullRequestBlock_1",
            "to": "chunk_8_GithubMakePullRequestBlock_2"
        },
        {
            "from": "chunk_8_GithubMakePullRequestBlock_1",
            "to": "chunk_8_GithubMakePullRequestBlock_3"
        },
        {
            "from": "chunk_8_GithubMakePullRequestBlock_4",
            "to": "chunk_8_GithubMakePullRequestBlock_5"
        },
        {
            "from": "chunk_8_GithubMakePullRequestBlock_4",
            "to": "chunk_8_GithubMakePullRequestBlock_6"
        },
        {
            "from": "chunk_9_GithubMakePullRequestBlock.Input_1",
            "to": "chunk_9_GithubMakePullRequestBlock.Input_2"
        },
        {
            "from": "chunk_9_GithubMakePullRequestBlock.Input_2",
            "to": "chunk_9_GithubMakePullRequestBlock.Input_3"
        },
        {
            "from": "chunk_9_GithubMakePullRequestBlock.Input_3",
            "to": "chunk_9_GithubMakePullRequestBlock.Input_4"
        },
        {
            "from": "chunk_9_GithubMakePullRequestBlock.Input_4",
            "to": "chunk_9_GithubMakePullRequestBlock.Input_5"
        },
        {
            "from": "chunk_9_GithubMakePullRequestBlock.Input_5",
            "to": "chunk_9_GithubMakePullRequestBlock.Input_6"
        },
        {
            "from": "chunk_12_GithubMakePullRequestBlock.create_pr_1",
            "to": "chunk_12_GithubMakePullRequestBlock.create_pr_2"
        },
        {
            "from": "chunk_13_GithubMakePullRequestBlock.run_1",
            "to": "chunk_13_GithubMakePullRequestBlock.run_2"
        },
        {
            "from": "chunk_13_GithubMakePullRequestBlock.run_2",
            "to": "chunk_13_GithubMakePullRequestBlock.run_3"
        },
        {
            "from": "chunk_14_GithubReadPullRequestBlock_1",
            "to": "chunk_14_GithubReadPullRequestBlock_2"
        },
        {
            "from": "chunk_14_GithubReadPullRequestBlock_2",
            "to": "chunk_14_GithubReadPullRequestBlock_3"
        },
        {
            "from": "chunk_14_GithubReadPullRequestBlock_3",
            "to": "chunk_14_GithubReadPullRequestBlock_4"
        },
        {
            "from": "chunk_14_GithubReadPullRequestBlock_4",
            "to": "chunk_14_GithubReadPullRequestBlock_5"
        },
        {
            "from": "chunk_14_GithubReadPullRequestBlock_4",
            "to": "chunk_14_GithubReadPullRequestBlock_6"
        },
        {
            "from": "chunk_14_GithubReadPullRequestBlock_4",
            "to": "chunk_14_GithubReadPullRequestBlock_7"
        },
        {
            "from": "chunk_14_GithubReadPullRequestBlock_7",
            "to": "chunk_14_GithubReadPullRequestBlock_8"
        },
        {
            "from": "chunk_15_GithubReadPullRequestBlock.Input_1",
            "to": "chunk_15_GithubReadPullRequestBlock.Input_2"
        },
        {
            "from": "chunk_15_GithubReadPullRequestBlock.Input_2",
            "to": "chunk_15_GithubReadPullRequestBlock.Input_3"
        },
        {
            "from": "chunk_16_GithubReadPullRequestBlock.Output_1",
            "to": "chunk_16_GithubReadPullRequestBlock.Output_2"
        },
        {
            "from": "chunk_16_GithubReadPullRequestBlock.Output_2",
            "to": "chunk_16_GithubReadPullRequestBlock.Output_3"
        },
        {
            "from": "chunk_18_GithubReadPullRequestBlock.read_pr_1",
            "to": "chunk_18_GithubReadPullRequestBlock.read_pr_2"
        },
        {
            "from": "chunk_18_GithubReadPullRequestBlock.read_pr_2",
            "to": "chunk_18_GithubReadPullRequestBlock.read_pr_3"
        },
        {
            "from": "chunk_18_GithubReadPullRequestBlock.read_pr_3",
            "to": "chunk_18_GithubReadPullRequestBlock.read_pr_4"
        },
        {
            "from": "chunk_18_GithubReadPullRequestBlock.read_pr_4",
            "to": "chunk_18_GithubReadPullRequestBlock.read_pr_5"
        },
        {
            "from": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_1",
            "to": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_2"
        },
        {
            "from": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_2",
            "to": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_3"
        },
        {
            "from": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_3",
            "to": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_4"
        },
        {
            "from": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_4",
            "to": "chunk_19_GithubReadPullRequestBlock.read_pr_changes_5"
        },
        {
            "from": "chunk_20_GithubReadPullRequestBlock.run_1",
            "to": "chunk_20_GithubReadPullRequestBlock.run_2"
        },
        {
            "from": "chunk_20_GithubReadPullRequestBlock.run_2",
            "to": "chunk_20_GithubReadPullRequestBlock.run_3"
        },
        {
            "from": "chunk_20_GithubReadPullRequestBlock.run_3",
            "to": "chunk_20_GithubReadPullRequestBlock.run_4"
        },
        {
            "from": "chunk_20_GithubReadPullRequestBlock.run_4",
            "to": "chunk_20_GithubReadPullRequestBlock.run_5"
        },
        {
            "from": "chunk_20_GithubReadPullRequestBlock.run_4",
            "to": "chunk_20_GithubReadPullRequestBlock.run_6"
        },
        {
            "from": "chunk_20_GithubReadPullRequestBlock.run_5",
            "to": "chunk_20_GithubReadPullRequestBlock.run_6"
        },
        {
            "from": "chunk_21_GithubAssignPRReviewerBlock_1",
            "to": "chunk_21_GithubAssignPRReviewerBlock_2"
        },
        {
            "from": "chunk_21_GithubAssignPRReviewerBlock_2",
            "to": "chunk_21_GithubAssignPRReviewerBlock_3"
        },
        {
            "from": "chunk_21_GithubAssignPRReviewerBlock_3",
            "to": "chunk_21_GithubAssignPRReviewerBlock_4"
        },
        {
            "from": "chunk_21_GithubAssignPRReviewerBlock_4",
            "to": "chunk_21_GithubAssignPRReviewerBlock_5"
        },
        {
            "from": "chunk_21_GithubAssignPRReviewerBlock_5",
            "to": "chunk_21_GithubAssignPRReviewerBlock_6"
        },
        {
            "from": "chunk_21_GithubAssignPRReviewerBlock_6",
            "to": "chunk_21_GithubAssignPRReviewerBlock_7"
        },
        {
            "from": "chunk_21_GithubAssignPRReviewerBlock_6",
            "to": "chunk_21_GithubAssignPRReviewerBlock_8"
        },
        {
            "from": "chunk_21_GithubAssignPRReviewerBlock_8",
            "to": "chunk_21_GithubAssignPRReviewerBlock_9"
        },
        {
            "from": "chunk_21_GithubAssignPRReviewerBlock_9",
            "to": "chunk_21_GithubAssignPRReviewerBlock_10"
        },
        {
            "from": "chunk_22_GithubAssignPRReviewerBlock.Input_1",
            "to": "chunk_22_GithubAssignPRReviewerBlock.Input_2"
        },
        {
            "from": "chunk_22_GithubAssignPRReviewerBlock.Input_2",
            "to": "chunk_22_GithubAssignPRReviewerBlock.Input_3"
        },
        {
            "from": "chunk_23_GithubAssignPRReviewerBlock.Output_1",
            "to": "chunk_23_GithubAssignPRReviewerBlock.Output_2"
        },
        {
            "from": "chunk_25_GithubAssignPRReviewerBlock.assign_reviewer_1",
            "to": "chunk_25_GithubAssignPRReviewerBlock.assign_reviewer_2"
        },
        {
            "from": "chunk_25_GithubAssignPRReviewerBlock.assign_reviewer_2",
            "to": "chunk_25_GithubAssignPRReviewerBlock.assign_reviewer_3"
        },
        {
            "from": "chunk_26_GithubAssignPRReviewerBlock.run_1",
            "to": "chunk_26_GithubAssignPRReviewerBlock.run_2"
        },
        {
            "from": "chunk_26_GithubAssignPRReviewerBlock.run_2",
            "to": "chunk_26_GithubAssignPRReviewerBlock.run_3"
        },
        {
            "from": "chunk_27_GithubUnassignPRReviewerBlock_1",
            "to": "chunk_27_GithubUnassignPRReviewerBlock_2"
        },
        {
            "from": "chunk_27_GithubUnassignPRReviewerBlock_2",
            "to": "chunk_27_GithubUnassignPRReviewerBlock_3"
        },
        {
            "from": "chunk_27_GithubUnassignPRReviewerBlock_3",
            "to": "chunk_27_GithubUnassignPRReviewerBlock_4"
        },
        {
            "from": "chunk_27_GithubUnassignPRReviewerBlock_4",
            "to": "chunk_27_GithubUnassignPRReviewerBlock_5"
        },
        {
            "from": "chunk_27_GithubUnassignPRReviewerBlock_5",
            "to": "chunk_27_GithubUnassignPRReviewerBlock_6"
        },
        {
            "from": "chunk_27_GithubUnassignPRReviewerBlock_6",
            "to": "chunk_27_GithubUnassignPRReviewerBlock_7"
        },
        {
            "from": "chunk_27_GithubUnassignPRReviewerBlock_7",
            "to": "chunk_27_GithubUnassignPRReviewerBlock_8"
        },
        {
            "from": "chunk_27_GithubUnassignPRReviewerBlock_7",
            "to": "chunk_27_GithubUnassignPRReviewerBlock_10"
        },
        {
            "from": "chunk_27_GithubUnassignPRReviewerBlock_8",
            "to": "chunk_27_GithubUnassignPRReviewerBlock_9"
        },
        {
            "from": "chunk_27_GithubUnassignPRReviewerBlock_10",
            "to": "chunk_27_GithubUnassignPRReviewerBlock_11"
        },
        {
            "from": "chunk_27_GithubUnassignPRReviewerBlock_11",
            "to": "chunk_27_GithubUnassignPRReviewerBlock_12"
        },
        {
            "from": "chunk_28_GithubUnassignPRReviewerBlock.Input_1",
            "to": "chunk_28_GithubUnassignPRReviewerBlock.Input_2"
        },
        {
            "from": "chunk_28_GithubUnassignPRReviewerBlock.Input_2",
            "to": "chunk_28_GithubUnassignPRReviewerBlock.Input_3"
        },
        {
            "from": "chunk_29_GithubUnassignPRReviewerBlock.Output_1",
            "to": "chunk_29_GithubUnassignPRReviewerBlock.Output_2"
        },
        {
            "from": "chunk_31_GithubUnassignPRReviewerBlock.unassign_reviewer_1",
            "to": "chunk_31_GithubUnassignPRReviewerBlock.unassign_reviewer_2"
        },
        {
            "from": "chunk_32_GithubUnassignPRReviewerBlock.run_1",
            "to": "chunk_32_GithubUnassignPRReviewerBlock.run_2"
        },
        {
            "from": "chunk_32_GithubUnassignPRReviewerBlock.run_2",
            "to": "chunk_32_GithubUnassignPRReviewerBlock.run_3"
        },
        {
            "from": "chunk_33_GithubListPRReviewersBlock_1",
            "to": "chunk_33_GithubListPRReviewersBlock_2"
        },
        {
            "from": "chunk_33_GithubListPRReviewersBlock_1",
            "to": "chunk_33_GithubListPRReviewersBlock_3"
        },
        {
            "from": "chunk_33_GithubListPRReviewersBlock_3",
            "to": "chunk_33_GithubListPRReviewersBlock_4"
        },
        {
            "from": "chunk_33_GithubListPRReviewersBlock_4",
            "to": "chunk_33_GithubListPRReviewersBlock_5"
        },
        {
            "from": "chunk_33_GithubListPRReviewersBlock_4",
            "to": "chunk_33_GithubListPRReviewersBlock_6"
        },
        {
            "from": "chunk_33_GithubListPRReviewersBlock_8",
            "to": "chunk_33_GithubListPRReviewersBlock_9"
        },
        {
            "from": "chunk_33_GithubListPRReviewersBlock_10",
            "to": "chunk_33_GithubListPRReviewersBlock_11"
        },
        {
            "from": "chunk_34_GithubListPRReviewersBlock.Input_1",
            "to": "chunk_34_GithubListPRReviewersBlock.Input_2"
        },
        {
            "from": "chunk_35_GithubListPRReviewersBlock.Output_1",
            "to": "chunk_35_GithubListPRReviewersBlock.Output_2"
        },
        {
            "from": "chunk_35_GithubListPRReviewersBlock.Output_2",
            "to": "chunk_35_GithubListPRReviewersBlock.Output_3"
        },
        {
            "from": "chunk_35_GithubListPRReviewersBlock.Output_3",
            "to": "chunk_35_GithubListPRReviewersBlock.Output_4"
        },
        {
            "from": "chunk_38_GithubListPRReviewersBlock.list_reviewers_1",
            "to": "chunk_38_GithubListPRReviewersBlock.list_reviewers_2"
        },
        {
            "from": "chunk_38_GithubListPRReviewersBlock.list_reviewers_2",
            "to": "chunk_38_GithubListPRReviewersBlock.list_reviewers_3"
        },
        {
            "from": "chunk_38_GithubListPRReviewersBlock.list_reviewers_3",
            "to": "chunk_38_GithubListPRReviewersBlock.list_reviewers_4"
        },
        {
            "from": "chunk_39_GithubListPRReviewersBlock.run_1",
            "to": "chunk_39_GithubListPRReviewersBlock.run_2"
        },
        {
            "from": "chunk_39_GithubListPRReviewersBlock.run_2",
            "to": "chunk_39_GithubListPRReviewersBlock.run_3"
        },
        {
            "from": "chunk_40_prepare_pr_api_url_1",
            "to": "chunk_40_prepare_pr_api_url_2"
        },
        {
            "from": "chunk_40_prepare_pr_api_url_2",
            "to": "chunk_40_prepare_pr_api_url_3"
        },
        {
            "from": "chunk_40_prepare_pr_api_url_2",
            "to": "chunk_40_prepare_pr_api_url_4"
        }
    ]
}