{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from datetime import datetime\nfrom typing import Any, List\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.blocks.exa._auth import (\n    ExaCredentials,\n    ExaCredentialsField,\n    ExaCredentialsInput,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from .helpers import ContentSettings\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_1",
            "code": "class ExaFindSimilarBlock(Block):\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        url: str = SchemaField(\n            description=\"The url for which you would like to find similar links\"\n        )\n        number_of_results: int = SchemaField(\n            description=\"Number of results to return\",\n            default=10,\n            advanced=True,\n        )\n        include_domains: List[str] = SchemaField(\n            description=\"Domains to include in search\",\n            default=[],\n            advanced=True,\n        )\n        exclude_domains: List[str] = SchemaField(\n            description=\"Domains to exclude from search\",\n            default=[],\n            advanced=True,\n        )\n        start_crawl_date: datetime = SchemaField(\n            description=\"Start date for crawled content\",\n        )\n        end_crawl_date: datetime = SchemaField(\n            description=\"End date for crawled content\",\n        )\n        start_published_date: datetime = SchemaField(\n            description=\"Start date for published content\",\n        )\n        end_published_date: datetime = SchemaField(\n            description=\"End date for published content\",\n        )\n        include_text: List[str] = SchemaField(\n            description=\"Text patterns to include (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        exclude_text: List[str] = SchemaField(\n            description=\"Text patterns to exclude (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        contents: ContentSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentSettings(),\n            advanced=True,\n        )\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_3",
            "code": "    class Output(BlockSchema):\n        results: List[Any] = SchemaField(\n            description=\"List of similar documents with title, URL, published date, author, and score\",\n            default=[],\n        )\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\",\n            description=\"Finds similar links using Exa's findSimilar API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaFindSimilarBlock.Input,\n            output_schema=ExaFindSimilarBlock.Output,\n        )\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_5",
            "code": "    def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_6",
            "code": "        url = \"https://api.exa.ai/findSimilar\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_7",
            "code": "        payload = {\n            \"url\": input_data.url,\n            \"numResults\": input_data.number_of_results,\n            \"contents\": input_data.contents.dict(),\n        }\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_8",
            "code": "        optional_field_mapping = {\n            \"include_domains\": \"includeDomains\",\n            \"exclude_domains\": \"excludeDomains\",\n            \"include_text\": \"includeText\",\n            \"exclude_text\": \"excludeText\",\n        }\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_9",
            "code": "        # Add optional fields if they have values\n        for input_field, api_field in optional_field_mapping.items():\n            value = getattr(input_data, input_field)\n            if value:  # Only add non-empty values\n                payload[api_field] = value\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_10",
            "code": "        date_field_mapping = {\n            \"start_crawl_date\": \"startCrawlDate\",\n            \"end_crawl_date\": \"endCrawlDate\",\n            \"start_published_date\": \"startPublishedDate\",\n            \"end_published_date\": \"endPublishedDate\",\n        }\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_11",
            "code": "        # Add dates if they exist\n        for input_field, api_field in date_field_mapping.items():\n            value = getattr(input_data, input_field, None)\n            if value:\n                payload[api_field] = value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\")\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_12",
            "code": "        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])\n"
        },
        {
            "id": "chunk_1_ExaFindSimilarBlock_13",
            "code": "        except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []\n"
        },
        {
            "id": "chunk_2_ExaFindSimilarBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n"
        },
        {
            "id": "chunk_2_ExaFindSimilarBlock.Input_2",
            "code": "        url: str = SchemaField(\n            description=\"The url for which you would like to find similar links\"\n        )\n"
        },
        {
            "id": "chunk_2_ExaFindSimilarBlock.Input_3",
            "code": "        number_of_results: int = SchemaField(\n            description=\"Number of results to return\",\n            default=10,\n            advanced=True,\n        )\n"
        },
        {
            "id": "chunk_2_ExaFindSimilarBlock.Input_4",
            "code": "        include_domains: List[str] = SchemaField(\n            description=\"Domains to include in search\",\n            default=[],\n            advanced=True,\n        )\n"
        },
        {
            "id": "chunk_2_ExaFindSimilarBlock.Input_5",
            "code": "        exclude_domains: List[str] = SchemaField(\n            description=\"Domains to exclude from search\",\n            default=[],\n            advanced=True,\n        )\n"
        },
        {
            "id": "chunk_2_ExaFindSimilarBlock.Input_6",
            "code": "        start_crawl_date: datetime = SchemaField(\n            description=\"Start date for crawled content\",\n        )\n"
        },
        {
            "id": "chunk_2_ExaFindSimilarBlock.Input_7",
            "code": "        end_crawl_date: datetime = SchemaField(\n            description=\"End date for crawled content\",\n        )\n"
        },
        {
            "id": "chunk_2_ExaFindSimilarBlock.Input_8",
            "code": "        start_published_date: datetime = SchemaField(\n            description=\"Start date for published content\",\n        )\n"
        },
        {
            "id": "chunk_2_ExaFindSimilarBlock.Input_9",
            "code": "        end_published_date: datetime = SchemaField(\n            description=\"End date for published content\",\n        )\n"
        },
        {
            "id": "chunk_2_ExaFindSimilarBlock.Input_10",
            "code": "        include_text: List[str] = SchemaField(\n            description=\"Text patterns to include (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n"
        },
        {
            "id": "chunk_2_ExaFindSimilarBlock.Input_11",
            "code": "        exclude_text: List[str] = SchemaField(\n            description=\"Text patterns to exclude (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n"
        },
        {
            "id": "chunk_2_ExaFindSimilarBlock.Input_12",
            "code": "        contents: ContentSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentSettings(),\n            advanced=True,\n        )\n"
        },
        {
            "id": "chunk_3_ExaFindSimilarBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        results: List[Any] = SchemaField(\n            description=\"List of similar documents with title, URL, published date, author, and score\",\n            default=[],\n        )\n"
        },
        {
            "id": "chunk_4_ExaFindSimilarBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\",\n            description=\"Finds similar links using Exa's findSimilar API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaFindSimilarBlock.Input,\n            output_schema=ExaFindSimilarBlock.Output,\n        )\n"
        },
        {
            "id": "chunk_5_ExaFindSimilarBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_5_ExaFindSimilarBlock.run_2",
            "code": "        url = \"https://api.exa.ai/findSimilar\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n"
        },
        {
            "id": "chunk_5_ExaFindSimilarBlock.run_3",
            "code": "        payload = {\n            \"url\": input_data.url,\n            \"numResults\": input_data.number_of_results,\n            \"contents\": input_data.contents.dict(),\n        }\n"
        },
        {
            "id": "chunk_5_ExaFindSimilarBlock.run_4",
            "code": "        optional_field_mapping = {\n            \"include_domains\": \"includeDomains\",\n            \"exclude_domains\": \"excludeDomains\",\n            \"include_text\": \"includeText\",\n            \"exclude_text\": \"excludeText\",\n        }\n"
        },
        {
            "id": "chunk_5_ExaFindSimilarBlock.run_5",
            "code": "        for input_field, api_field in optional_field_mapping.items():\n            value = getattr(input_data, input_field)\n            if value:  # Only add non-empty values\n                payload[api_field] = value\n"
        },
        {
            "id": "chunk_5_ExaFindSimilarBlock.run_6",
            "code": "        date_field_mapping = {\n            \"start_crawl_date\": \"startCrawlDate\",\n            \"end_crawl_date\": \"endCrawlDate\",\n            \"start_published_date\": \"startPublishedDate\",\n            \"end_published_date\": \"endPublishedDate\",\n        }\n"
        },
        {
            "id": "chunk_5_ExaFindSimilarBlock.run_7",
            "code": "        for input_field, api_field in date_field_mapping.items():\n            value = getattr(input_data, input_field, None)\n            if value:\n                payload[api_field] = value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\")\n"
        },
        {
            "id": "chunk_5_ExaFindSimilarBlock.run_8",
            "code": "        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])\n"
        },
        {
            "id": "chunk_5_ExaFindSimilarBlock.run_9",
            "code": "        except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_ExaFindSimilarBlock_1",
            "to": "chunk_1_ExaFindSimilarBlock_2"
        },
        {
            "from": "chunk_1_ExaFindSimilarBlock_2",
            "to": "chunk_1_ExaFindSimilarBlock_3"
        },
        {
            "from": "chunk_1_ExaFindSimilarBlock_3",
            "to": "chunk_1_ExaFindSimilarBlock_4"
        },
        {
            "from": "chunk_1_ExaFindSimilarBlock_4",
            "to": "chunk_1_ExaFindSimilarBlock_5"
        },
        {
            "from": "chunk_1_ExaFindSimilarBlock_5",
            "to": "chunk_1_ExaFindSimilarBlock_6"
        },
        {
            "from": "chunk_1_ExaFindSimilarBlock_6",
            "to": "chunk_1_ExaFindSimilarBlock_7"
        },
        {
            "from": "chunk_1_ExaFindSimilarBlock_7",
            "to": "chunk_1_ExaFindSimilarBlock_8"
        },
        {
            "from": "chunk_1_ExaFindSimilarBlock_8",
            "to": "chunk_1_ExaFindSimilarBlock_9"
        },
        {
            "from": "chunk_1_ExaFindSimilarBlock_9",
            "to": "chunk_1_ExaFindSimilarBlock_10"
        },
        {
            "from": "chunk_1_ExaFindSimilarBlock_10",
            "to": "chunk_1_ExaFindSimilarBlock_11"
        },
        {
            "from": "chunk_1_ExaFindSimilarBlock_11",
            "to": "chunk_1_ExaFindSimilarBlock_12"
        },
        {
            "from": "chunk_1_ExaFindSimilarBlock_12",
            "to": "chunk_1_ExaFindSimilarBlock_13"
        },
        {
            "from": "chunk_2_ExaFindSimilarBlock.Input_1",
            "to": "chunk_2_ExaFindSimilarBlock.Input_2"
        },
        {
            "from": "chunk_2_ExaFindSimilarBlock.Input_2",
            "to": "chunk_2_ExaFindSimilarBlock.Input_3"
        },
        {
            "from": "chunk_2_ExaFindSimilarBlock.Input_3",
            "to": "chunk_2_ExaFindSimilarBlock.Input_4"
        },
        {
            "from": "chunk_2_ExaFindSimilarBlock.Input_4",
            "to": "chunk_2_ExaFindSimilarBlock.Input_5"
        },
        {
            "from": "chunk_2_ExaFindSimilarBlock.Input_5",
            "to": "chunk_2_ExaFindSimilarBlock.Input_6"
        },
        {
            "from": "chunk_2_ExaFindSimilarBlock.Input_6",
            "to": "chunk_2_ExaFindSimilarBlock.Input_7"
        },
        {
            "from": "chunk_2_ExaFindSimilarBlock.Input_7",
            "to": "chunk_2_ExaFindSimilarBlock.Input_8"
        },
        {
            "from": "chunk_2_ExaFindSimilarBlock.Input_8",
            "to": "chunk_2_ExaFindSimilarBlock.Input_9"
        },
        {
            "from": "chunk_2_ExaFindSimilarBlock.Input_9",
            "to": "chunk_2_ExaFindSimilarBlock.Input_10"
        },
        {
            "from": "chunk_2_ExaFindSimilarBlock.Input_10",
            "to": "chunk_2_ExaFindSimilarBlock.Input_11"
        },
        {
            "from": "chunk_2_ExaFindSimilarBlock.Input_11",
            "to": "chunk_2_ExaFindSimilarBlock.Input_12"
        },
        {
            "from": "chunk_5_ExaFindSimilarBlock.run_1",
            "to": "chunk_5_ExaFindSimilarBlock.run_2"
        },
        {
            "from": "chunk_5_ExaFindSimilarBlock.run_2",
            "to": "chunk_5_ExaFindSimilarBlock.run_3"
        },
        {
            "from": "chunk_5_ExaFindSimilarBlock.run_3",
            "to": "chunk_5_ExaFindSimilarBlock.run_4"
        },
        {
            "from": "chunk_5_ExaFindSimilarBlock.run_4",
            "to": "chunk_5_ExaFindSimilarBlock.run_5"
        },
        {
            "from": "chunk_5_ExaFindSimilarBlock.run_5",
            "to": "chunk_5_ExaFindSimilarBlock.run_6"
        },
        {
            "from": "chunk_5_ExaFindSimilarBlock.run_6",
            "to": "chunk_5_ExaFindSimilarBlock.run_7"
        },
        {
            "from": "chunk_5_ExaFindSimilarBlock.run_7",
            "to": "chunk_5_ExaFindSimilarBlock.run_8"
        },
        {
            "from": "chunk_5_ExaFindSimilarBlock.run_8",
            "to": "chunk_5_ExaFindSimilarBlock.run_9"
        }
    ]
}