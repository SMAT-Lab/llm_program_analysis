{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import fastapi\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from .config import Settings\nfrom .middleware import auth_middleware\nfrom .models import DEFAULT_USER_ID, User\n"
        },
        {
            "id": "chunk_1_requires_user_1",
            "code": "def requires_user(payload: dict = fastapi.Depends(auth_middleware)) -> User:\n    return verify_user(payload, admin_only=False)\n"
        },
        {
            "id": "chunk_2_requires_admin_user_1",
            "code": "def requires_admin_user(\n    payload: dict = fastapi.Depends(auth_middleware),\n) -> User:\n    return verify_user(payload, admin_only=True)\n"
        },
        {
            "id": "chunk_3_verify_user_1",
            "code": "def verify_user(payload: dict | None, admin_only: bool) -> User:\n"
        },
        {
            "id": "chunk_3_verify_user_2",
            "code": "    if not payload:\n        if Settings.ENABLE_AUTH:\n"
        },
        {
            "id": "chunk_3_verify_user_3",
            "code": "            raise fastapi.HTTPException(\n                status_code=401, detail=\"Authorization header is missing\"\n            )\n"
        },
        {
            "id": "chunk_3_verify_user_4",
            "code": "        # This handles the case when authentication is disabled\n        payload = {\"sub\": DEFAULT_USER_ID, \"role\": \"admin\"}\n"
        },
        {
            "id": "chunk_3_verify_user_5",
            "code": "    user_id = payload.get(\"sub\")\n"
        },
        {
            "id": "chunk_3_verify_user_6",
            "code": "    if not user_id:\n        raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n"
        },
        {
            "id": "chunk_3_verify_user_7",
            "code": "    if admin_only and payload[\"role\"] != \"admin\":\n        raise fastapi.HTTPException(status_code=403, detail=\"Admin access required\")\n"
        },
        {
            "id": "chunk_3_verify_user_8",
            "code": "    return User.from_payload(payload)\n"
        },
        {
            "id": "chunk_4_get_user_id_1",
            "code": "def get_user_id(payload: dict = fastapi.Depends(auth_middleware)) -> str:\n    user_id = payload.get(\"sub\")\n"
        },
        {
            "id": "chunk_4_get_user_id_2",
            "code": "    if not user_id:\n        raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )\n"
        },
        {
            "id": "chunk_4_get_user_id_3",
            "code": "    return user_id\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_3_verify_user_1",
            "to": "chunk_3_verify_user_2"
        },
        {
            "from": "chunk_3_verify_user_2",
            "to": "chunk_3_verify_user_3"
        },
        {
            "from": "chunk_3_verify_user_2",
            "to": "chunk_3_verify_user_4"
        },
        {
            "from": "chunk_3_verify_user_4",
            "to": "chunk_3_verify_user_5"
        },
        {
            "from": "chunk_3_verify_user_5",
            "to": "chunk_3_verify_user_6"
        },
        {
            "from": "chunk_3_verify_user_6",
            "to": "chunk_3_verify_user_7"
        },
        {
            "from": "chunk_3_verify_user_6",
            "to": "chunk_3_verify_user_8"
        },
        {
            "from": "chunk_4_get_user_id_1",
            "to": "chunk_4_get_user_id_2"
        },
        {
            "from": "chunk_4_get_user_id_2",
            "to": "chunk_4_get_user_id_3"
        }
    ]
}