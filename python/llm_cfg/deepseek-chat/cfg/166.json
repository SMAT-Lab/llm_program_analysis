{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import base64\nfrom email.utils import parseaddr\nfrom typing import List\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\nfrom pydantic import BaseModel\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from ._auth import (\n    GOOGLE_OAUTH_IS_CONFIGURED,\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GoogleCredentials,\n    GoogleCredentialsField,\n    GoogleCredentialsInput,\n)\n"
        },
        {
            "id": "chunk_1_Attachment_1",
            "code": "class Attachment(BaseModel):\n    filename: str\n    content_type: str\n    size: int\n    attachment_id: str\n"
        },
        {
            "id": "chunk_2_Email_1",
            "code": "class Email(BaseModel):\n    id: str\n    subject: str\n    snippet: str\n    from_: str\n    to: str\n    date: str\n    body: str = \"\"  # Default to an empty string\n    sizeEstimate: int\n    attachments: List[Attachment]\n\n"
        },
        {
            "id": "chunk_3_GmailReadBlock_1",
            "code": "class GmailReadBlock(Block):\n"
        },
        {
            "id": "chunk_3_GmailReadBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.readonly\"]\n        )\n        query: str = SchemaField(\n            description=\"Search query for reading emails\",\n            default=\"is:unread\",\n        )\n        max_results: int = SchemaField(\n            description=\"Maximum number of emails to retrieve\",\n            default=10,\n        )\n"
        },
        {
            "id": "chunk_3_GmailReadBlock_3",
            "code": "    class Output(BlockSchema):\n        email: Email = SchemaField(\n            description=\"Email data\",\n        )\n        emails: list[Email] = SchemaField(\n            description=\"List of email data\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_3_GmailReadBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"25310c70-b89b-43ba-b25c-4dfa7e2a481c\",\n            description=\"This block reads emails from Gmail.\",\n            categories={BlockCategory.COMMUNICATION},\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            input_schema=GmailReadBlock.Input,\n            output_schema=GmailReadBlock.Output,\n            test_input={\n                \"query\": \"is:unread\",\n                \"max_results\": 5,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"email\",\n                    {\n                        \"id\": \"1\",\n                        \"subject\": \"Test Email\",\n                        \"snippet\": \"This is a test email\",\n                        \"from_\": \"test@example.com\",\n                        \"to\": \"recipient@example.com\",\n                        \"date\": \"2024-01-01\",\n                        \"body\": \"This is a test email\",\n                        \"sizeEstimate\": 100,\n                        \"attachments\": [],\n                    },\n                ),\n                (\n                    \"emails\",\n                    [\n                        {\n                            \"id\": \"1\",\n                            \"subject\": \"Test Email\",\n                            \"snippet\": \"This is a test email\",\n                            \"from_\": \"test@example.com\",\n                            \"to\": \"recipient@example.com\",\n                            \"date\": \"2024-01-01\",\n                            \"body\": \"This is a test email\",\n                            \"sizeEstimate\": 100,\n                            \"attachments\": [],\n                        }\n                    ],\n                ),\n            ],\n            test_mock={\n                \"_read_emails\": lambda *args, **kwargs: [\n                    {\n                        \"id\": \"1\",\n                        \"subject\": \"Test Email\",\n                        \"snippet\": \"This is a test email\",\n                        \"from_\": \"test@example.com\",\n                        \"to\": \"recipient@example.com\",\n                        \"date\": \"2024-01-01\",\n                        \"body\": \"This is a test email\",\n                        \"sizeEstimate\": 100,\n                        \"attachments\": [],\n                    }\n                ],\n                \"_send_email\": lambda *args, **kwargs: {\"id\": \"1\", \"status\": \"sent\"},\n            },\n        )\n"
        },
        {
            "id": "chunk_3_GmailReadBlock_5",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = self._build_service(credentials, **kwargs)\n        messages = self._read_emails(service, input_data.query, input_data.max_results)\n        for email in messages:\n            yield \"email\", email\n        yield \"emails\", messages\n"
        },
        {
            "id": "chunk_3_GmailReadBlock_6",
            "code": "    @staticmethod\n    def _build_service(credentials: GoogleCredentials, **kwargs):\n        creds = Credentials(\n            token=(\n                credentials.access_token.get_secret_value()\n                if credentials.access_token\n                else None\n            ),\n            refresh_token=(\n                credentials.refresh_token.get_secret_value()\n                if credentials.refresh_token\n                else None\n            ),\n            token_uri=\"https://oauth2.googleapis.com/token\",\n            client_id=kwargs.get(\"client_id\"),\n            client_secret=kwargs.get(\"client_secret\"),\n            scopes=credentials.scopes,\n        )\n        return build(\"gmail\", \"v1\", credentials=creds)\n"
        },
        {
            "id": "chunk_3_GmailReadBlock_7",
            "code": "    def _read_emails(\n        self, service, query: str | None, max_results: int | None\n    ) -> list[Email]:\n        results = (\n            service.users()\n            .messages()\n            .list(userId=\"me\", q=query or \"\", maxResults=max_results or 10)\n            .execute()\n        )\n        messages = results.get(\"messages\", [])\n\n        email_data = []\n        for message in messages:\n            msg = (\n                service.users()\n                .messages()\n                .get(userId=\"me\", id=message[\"id\"], format=\"full\")\n                .execute()\n            )\n\n            headers = {\n                header[\"name\"].lower(): header[\"value\"]\n                for header in msg[\"payload\"][\"headers\"]\n            }\n\n            attachments = self._get_attachments(service, msg)\n\n            email = Email(\n                id=msg[\"id\"],\n                subject=headers.get(\"subject\", \"No Subject\"),\n                snippet=msg[\"snippet\"],\n                from_=parseaddr(headers.get(\"from\", \"\"))[1],\n                to=parseaddr(headers.get(\"to\", \"\"))[1],\n                date=headers.get(\"date\", \"\"),\n                body=self._get_email_body(msg),\n                sizeEstimate=msg[\"sizeEstimate\"],\n                attachments=attachments,\n            )\n            email_data.append(email)\n\n        return email_data\n"
        },
        {
            "id": "chunk_3_GmailReadBlock_8",
            "code": "    def _get_email_body(self, msg):\n        if \"parts\" in msg[\"payload\"]:\n            for part in msg[\"payload\"][\"parts\"]:\n                if part[\"mimeType\"] == \"text/plain\":\n                    return base64.urlsafe_b64decode(part[\"body\"][\"data\"]).decode(\n                        \"utf-8\"\n                    )\n        elif msg[\"payload\"][\"mimeType\"] == \"text/plain\":\n            return base64.urlsafe_b64decode(msg[\"payload\"][\"body\"][\"data\"]).decode(\n                \"utf-8\"\n            )\n\n        return \"This email does not contain a text body.\"\n"
        },
        {
            "id": "chunk_3_GmailReadBlock_9",
            "code": "    def _get_attachments(self, service, message):\n        attachments = []\n        if \"parts\" in message[\"payload\"]:\n            for part in message[\"payload\"][\"parts\"]:\n                if part[\"filename\"]:\n                    attachment = Attachment(\n                        filename=part[\"filename\"],\n                        content_type=part[\"mimeType\"],\n                        size=int(part[\"body\"].get(\"size\", 0)),\n                        attachment_id=part[\"body\"][\"attachmentId\"],\n                    )\n                    attachments.append(attachment)\n        return attachments\n"
        },
        {
            "id": "chunk_3_GmailReadBlock_10",
            "code": "    def download_attachment(self, service, message_id: str, attachment_id: str):\n        attachment = (\n            service.users()\n            .messages()\n            .attachments()\n            .get(userId=\"me\", messageId=message_id, id=attachment_id)\n            .execute()\n        )\n        file_data = base64.urlsafe_b64decode(attachment[\"data\"].encode(\"UTF-8\"))\n        return file_data\n"
        },
        {
            "id": "chunk_4_GmailReadBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.readonly\"]\n        )\n"
        },
        {
            "id": "chunk_4_GmailReadBlock.Input_2",
            "code": "        query: str = SchemaField(\n            description=\"Search query for reading emails\",\n            default=\"is:unread\",\n        )\n"
        },
        {
            "id": "chunk_4_GmailReadBlock.Input_3",
            "code": "        max_results: int = SchemaField(\n            description=\"Maximum number of emails to retrieve\",\n            default=10,\n        )\n"
        },
        {
            "id": "chunk_5_GmailReadBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        email: Email = SchemaField(\n"
        },
        {
            "id": "chunk_5_GmailReadBlock.Output_2",
            "code": "        email: Email = SchemaField(\n            description=\"Email data\",\n        )\n"
        },
        {
            "id": "chunk_5_GmailReadBlock.Output_3",
            "code": "        emails: list[Email] = SchemaField(\n            description=\"List of email data\",\n        )\n"
        },
        {
            "id": "chunk_5_GmailReadBlock.Output_4",
            "code": "        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_6_GmailReadBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"25310c70-b89b-43ba-b25c-4dfa7e2a481c\",\n            description=\"This block reads emails from Gmail.\",\n            categories={BlockCategory.COMMUNICATION},\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            input_schema=GmailReadBlock.Input,\n            output_schema=GmailReadBlock.Output,\n            test_input={\n                \"query\": \"is:unread\",\n                \"max_results\": 5,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"email\",\n                    {\n                        \"id\": \"1\",\n                        \"subject\": \"Test Email\",\n                        \"snippet\": \"This is a test email\",\n                        \"from_\": \"test@example.com\",\n                        \"to\": \"recipient@example.com\",\n                        \"date\": \"2024-01-01\",\n                        \"body\": \"This is a test email\",\n                        \"sizeEstimate\": 100,\n                        \"attachments\": [],\n                    },\n                ),\n                (\n                    \"emails\",\n                    [\n                        {\n                            \"id\": \"1\",\n                            \"subject\": \"Test Email\",\n                            \"snippet\": \"This is a test email\",\n                            \"from_\": \"test@example.com\",\n                            \"to\": \"recipient@example.com\",\n                            \"date\": \"2024-01-01\",\n                            \"body\": \"This is a test email\",\n                            \"sizeEstimate\": 100,\n                            \"attachments\": [],\n                        }\n                    ],\n                ),\n            ],\n            test_mock={\n                \"_read_emails\": lambda *args, **kwargs: [\n                    {\n                        \"id\": \"1\",\n                        \"subject\": \"Test Email\",\n                        \"snippet\": \"This is a test email\",\n                        \"from_\": \"test@example.com\",\n                        \"to\": \"recipient@example.com\",\n                        \"date\": \"2024-01-01\",\n                        \"body\": \"This is a test email\",\n                        \"sizeEstimate\": 100,\n                        \"attachments\": [],\n                    }\n                ],\n                \"_send_email\": lambda *args, **kwargs: {\"id\": \"1\", \"status\": \"sent\"},\n            },\n        )\n"
        },
        {
            "id": "chunk_7_GmailReadBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_7_GmailReadBlock.run_2",
            "code": "        service = self._build_service(credentials, **kwargs)\n        messages = self._read_emails(service, input_data.query, input_data.max_results)\n"
        },
        {
            "id": "chunk_7_GmailReadBlock.run_3",
            "code": "        for email in messages:\n            yield \"email\", email\n"
        },
        {
            "id": "chunk_7_GmailReadBlock.run_4",
            "code": "        yield \"emails\", messages\n"
        },
        {
            "id": "chunk_8_GmailReadBlock._build_service_1",
            "code": "    def _build_service(credentials: GoogleCredentials, **kwargs):\n"
        },
        {
            "id": "chunk_8_GmailReadBlock._build_service_2",
            "code": "        creds = Credentials(\n            token=(\n                credentials.access_token.get_secret_value()\n                if credentials.access_token\n                else None\n            ),\n            refresh_token=(\n                credentials.refresh_token.get_secret_value()\n                if credentials.refresh_token\n                else None\n            ),\n            token_uri=\"https://oauth2.googleapis.com/token\",\n            client_id=kwargs.get(\"client_id\"),\n            client_secret=kwargs.get(\"client_secret\"),\n            scopes=credentials.scopes,\n        )\n"
        },
        {
            "id": "chunk_8_GmailReadBlock._build_service_3",
            "code": "        return build(\"gmail\", \"v1\", credentials=creds)\n"
        },
        {
            "id": "chunk_9_GmailReadBlock._read_emails_1",
            "code": "    def _read_emails(\n        self, service, query: str | None, max_results: int | None\n    ) -> list[Email]:\n"
        },
        {
            "id": "chunk_9_GmailReadBlock._read_emails_2",
            "code": "        results = (\n            service.users()\n            .messages()\n            .list(userId=\"me\", q=query or \"\", maxResults=max_results or 10)\n            .execute()\n        )\n"
        },
        {
            "id": "chunk_9_GmailReadBlock._read_emails_3",
            "code": "        messages = results.get(\"messages\", [])\n"
        },
        {
            "id": "chunk_9_GmailReadBlock._read_emails_4",
            "code": "        email_data = []\n"
        },
        {
            "id": "chunk_9_GmailReadBlock._read_emails_5",
            "code": "        for message in messages:\n            msg = (\n                service.users()\n                .messages()\n                .get(userId=\"me\", id=message[\"id\"], format=\"full\")\n                .execute()\n            )\n"
        },
        {
            "id": "chunk_9_GmailReadBlock._read_emails_6",
            "code": "            headers = {\n                header[\"name\"].lower(): header[\"value\"]\n                for header in msg[\"payload\"][\"headers\"]\n            }\n"
        },
        {
            "id": "chunk_9_GmailReadBlock._read_emails_7",
            "code": "            attachments = self._get_attachments(service, msg)\n"
        },
        {
            "id": "chunk_9_GmailReadBlock._read_emails_8",
            "code": "            email = Email(\n                id=msg[\"id\"],\n                subject=headers.get(\"subject\", \"No Subject\"),\n                snippet=msg[\"snippet\"],\n                from_=parseaddr(headers.get(\"from\", \"\"))[1],\n                to=parseaddr(headers.get(\"to\", \"\"))[1],\n                date=headers.get(\"date\", \"\"),\n                body=self._get_email_body(msg),\n                sizeEstimate=msg[\"sizeEstimate\"],\n                attachments=attachments,\n            )\n"
        },
        {
            "id": "chunk_9_GmailReadBlock._read_emails_9",
            "code": "            email_data.append(email)\n"
        },
        {
            "id": "chunk_9_GmailReadBlock._read_emails_10",
            "code": "        return email_data\n"
        },
        {
            "id": "chunk_10_GmailReadBlock._get_email_body_1",
            "code": "    def _get_email_body(self, msg):\n        if \"parts\" in msg[\"payload\"]:\n"
        },
        {
            "id": "chunk_10_GmailReadBlock._get_email_body_2",
            "code": "        if \"parts\" in msg[\"payload\"]:\n            for part in msg[\"payload\"][\"parts\"]:\n"
        },
        {
            "id": "chunk_10_GmailReadBlock._get_email_body_3",
            "code": "            for part in msg[\"payload\"][\"parts\"]:\n                if part[\"mimeType\"] == \"text/plain\":\n"
        },
        {
            "id": "chunk_10_GmailReadBlock._get_email_body_4",
            "code": "                if part[\"mimeType\"] == \"text/plain\":\n                    return base64.urlsafe_b64decode(part[\"body\"][\"data\"]).decode(\n                        \"utf-8\"\n                    )\n"
        },
        {
            "id": "chunk_10_GmailReadBlock._get_email_body_5",
            "code": "        elif msg[\"payload\"][\"mimeType\"] == \"text/plain\":\n            return base64.urlsafe_b64decode(msg[\"payload\"][\"body\"][\"data\"]).decode(\n                \"utf-8\"\n            )\n"
        },
        {
            "id": "chunk_10_GmailReadBlock._get_email_body_6",
            "code": "        return \"This email does not contain a text body.\"\n"
        },
        {
            "id": "chunk_11_GmailReadBlock._get_attachments_1",
            "code": "    def _get_attachments(self, service, message):\n        attachments = []\n"
        },
        {
            "id": "chunk_11_GmailReadBlock._get_attachments_2",
            "code": "        if \"parts\" in message[\"payload\"]:\n"
        },
        {
            "id": "chunk_11_GmailReadBlock._get_attachments_3",
            "code": "            for part in message[\"payload\"][\"parts\"]:\n                if part[\"filename\"]:\n                    attachment = Attachment(\n                        filename=part[\"filename\"],\n                        content_type=part[\"mimeType\"],\n                        size=int(part[\"body\"].get(\"size\", 0)),\n                        attachment_id=part[\"body\"][\"attachmentId\"],\n                    )\n                    attachments.append(attachment)\n"
        },
        {
            "id": "chunk_11_GmailReadBlock._get_attachments_4",
            "code": "        return attachments\n"
        },
        {
            "id": "chunk_12_GmailReadBlock.download_attachment_1",
            "code": "    def download_attachment(self, service, message_id: str, attachment_id: str):\n"
        },
        {
            "id": "chunk_12_GmailReadBlock.download_attachment_2",
            "code": "        attachment = (\n            service.users()\n            .messages()\n            .attachments()\n            .get(userId=\"me\", messageId=message_id, id=attachment_id)\n            .execute()\n        )\n"
        },
        {
            "id": "chunk_12_GmailReadBlock.download_attachment_3",
            "code": "        file_data = base64.urlsafe_b64decode(attachment[\"data\"].encode(\"UTF-8\"))\n"
        },
        {
            "id": "chunk_12_GmailReadBlock.download_attachment_4",
            "code": "        return file_data\n"
        },
        {
            "id": "chunk_13_GmailSendBlock_1",
            "code": "class GmailSendBlock(Block):\n"
        },
        {
            "id": "chunk_13_GmailSendBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.send\"]\n        )\n        to: str = SchemaField(\n            description=\"Recipient email address\",\n        )\n        subject: str = SchemaField(\n            description=\"Email subject\",\n        )\n        body: str = SchemaField(\n            description=\"Email body\",\n        )\n"
        },
        {
            "id": "chunk_13_GmailSendBlock_3",
            "code": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"Send confirmation\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_13_GmailSendBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"6c27abc2-e51d-499e-a85f-5a0041ba94f0\",\n            description=\"This block sends an email using Gmail.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailSendBlock.Input,\n            output_schema=GmailSendBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"to\": \"recipient@example.com\",\n                \"subject\": \"Test Email\",\n                \"body\": \"This is a test email sent from GmailSendBlock.\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"result\", {\"id\": \"1\", \"status\": \"sent\"}),\n            ],\n            test_mock={\n                \"_send_email\": lambda *args, **kwargs: {\"id\": \"1\", \"status\": \"sent\"},\n            },\n        )\n"
        },
        {
            "id": "chunk_13_GmailSendBlock_5",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = GmailReadBlock._build_service(credentials, **kwargs)\n        send_result = self._send_email(\n            service, input_data.to, input_data.subject, input_data.body\n        )\n        yield \"result\", send_result\n"
        },
        {
            "id": "chunk_13_GmailSendBlock_6",
            "code": "    def _send_email(self, service, to: str, subject: str, body: str) -> dict:\n        if not to or not subject or not body:\n            raise ValueError(\"To, subject, and body are required for sending an email\")\n        message = self._create_message(to, subject, body)\n        sent_message = (\n            service.users().messages().send(userId=\"me\", body=message).execute()\n        )\n        return {\"id\": sent_message[\"id\"], \"status\": \"sent\"}\n"
        },
        {
            "id": "chunk_13_GmailSendBlock_7",
            "code": "    def _create_message(self, to: str, subject: str, body: str) -> dict:\n        import base64\n        from email.mime.text import MIMEText\n\n        message = MIMEText(body)\n        message[\"to\"] = to\n        message[\"subject\"] = subject\n        raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode(\"utf-8\")\n        return {\"raw\": raw_message}\n"
        },
        {
            "id": "chunk_14_GmailSendBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.send\"]\n        )\n"
        },
        {
            "id": "chunk_14_GmailSendBlock.Input_2",
            "code": "        to: str = SchemaField(\n            description=\"Recipient email address\",\n        )\n"
        },
        {
            "id": "chunk_14_GmailSendBlock.Input_3",
            "code": "        subject: str = SchemaField(\n            description=\"Email subject\",\n        )\n"
        },
        {
            "id": "chunk_14_GmailSendBlock.Input_4",
            "code": "        body: str = SchemaField(\n            description=\"Email body\",\n        )\n"
        },
        {
            "id": "chunk_15_GmailSendBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"Send confirmation\",\n        )\n"
        },
        {
            "id": "chunk_15_GmailSendBlock.Output_2",
            "code": "        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_16_GmailSendBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"6c27abc2-e51d-499e-a85f-5a0041ba94f0\",\n            description=\"This block sends an email using Gmail.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailSendBlock.Input,\n            output_schema=GmailSendBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"to\": \"recipient@example.com\",\n                \"subject\": \"Test Email\",\n                \"body\": \"This is a test email sent from GmailSendBlock.\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"result\", {\"id\": \"1\", \"status\": \"sent\"}),\n            ],\n            test_mock={\n                \"_send_email\": lambda *args, **kwargs: {\"id\": \"1\", \"status\": \"sent\"},\n            },\n        )\n"
        },
        {
            "id": "chunk_17_GmailSendBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_17_GmailSendBlock.run_2",
            "code": "        service = GmailReadBlock._build_service(credentials, **kwargs)\n"
        },
        {
            "id": "chunk_17_GmailSendBlock.run_3",
            "code": "        send_result = self._send_email(\n            service, input_data.to, input_data.subject, input_data.body\n        )\n"
        },
        {
            "id": "chunk_17_GmailSendBlock.run_4",
            "code": "        yield \"result\", send_result\n"
        },
        {
            "id": "chunk_18_GmailSendBlock._send_email_1",
            "code": "    def _send_email(self, service, to: str, subject: str, body: str) -> dict:\n"
        },
        {
            "id": "chunk_18_GmailSendBlock._send_email_2",
            "code": "        if not to or not subject or not body:\n            raise ValueError(\"To, subject, and body are required for sending an email\")\n"
        },
        {
            "id": "chunk_18_GmailSendBlock._send_email_3",
            "code": "        message = self._create_message(to, subject, body)\n"
        },
        {
            "id": "chunk_18_GmailSendBlock._send_email_4",
            "code": "        sent_message = (\n            service.users().messages().send(userId=\"me\", body=message).execute()\n        )\n"
        },
        {
            "id": "chunk_18_GmailSendBlock._send_email_5",
            "code": "        return {\"id\": sent_message[\"id\"], \"status\": \"sent\"}\n"
        },
        {
            "id": "chunk_19_GmailSendBlock._create_message_1",
            "code": "    def _create_message(self, to: str, subject: str, body: str) -> dict:\n"
        },
        {
            "id": "chunk_19_GmailSendBlock._create_message_2",
            "code": "        import base64\n        from email.mime.text import MIMEText\n"
        },
        {
            "id": "chunk_19_GmailSendBlock._create_message_3",
            "code": "        message = MIMEText(body)\n        message[\"to\"] = to\n        message[\"subject\"] = subject\n        raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode(\"utf-8\")\n        return {\"raw\": raw_message}\n"
        },
        {
            "id": "chunk_20_GmailListLabelsBlock_1",
            "code": "class GmailListLabelsBlock(Block):\n    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.labels\"]\n        )\n"
        },
        {
            "id": "chunk_20_GmailListLabelsBlock_2",
            "code": "    class Output(BlockSchema):\n        result: list[dict] = SchemaField(\n            description=\"List of labels\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_20_GmailListLabelsBlock_3",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"3e1c2c1c-c689-4520-b956-1f3bf4e02bb7\",\n            description=\"This block lists all labels in Gmail.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailListLabelsBlock.Input,\n            output_schema=GmailListLabelsBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    [\n                        {\"id\": \"Label_1\", \"name\": \"Important\"},\n                        {\"id\": \"Label_2\", \"name\": \"Work\"},\n                    ],\n                ),\n            ],\n            test_mock={\n                \"_list_labels\": lambda *args, **kwargs: [\n                    {\"id\": \"Label_1\", \"name\": \"Important\"},\n                    {\"id\": \"Label_2\", \"name\": \"Work\"},\n                ],\n            },\n        )\n"
        },
        {
            "id": "chunk_20_GmailListLabelsBlock_4",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = GmailReadBlock._build_service(credentials, **kwargs)\n        labels = self._list_labels(service)\n        yield \"result\", labels\n"
        },
        {
            "id": "chunk_20_GmailListLabelsBlock_5",
            "code": "    def _list_labels(self, service) -> list[dict]:\n        results = service.users().labels().list(userId=\"me\").execute()\n        labels = results.get(\"labels\", [])\n        return [{\"id\": label[\"id\"], \"name\": label[\"name\"]} for label in labels]\n"
        },
        {
            "id": "chunk_21_GmailListLabelsBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.labels\"]\n        )\n"
        },
        {
            "id": "chunk_22_GmailListLabelsBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        result: list[dict] = SchemaField(\n            description=\"List of labels\",\n        )\n"
        },
        {
            "id": "chunk_22_GmailListLabelsBlock.Output_2",
            "code": "        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_23_GmailListLabelsBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"3e1c2c1c-c689-4520-b956-1f3bf4e02bb7\",\n            description=\"This block lists all labels in Gmail.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailListLabelsBlock.Input,\n            output_schema=GmailListLabelsBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    [\n                        {\"id\": \"Label_1\", \"name\": \"Important\"},\n                        {\"id\": \"Label_2\", \"name\": \"Work\"},\n                    ],\n                ),\n            ],\n            test_mock={\n                \"_list_labels\": lambda *args, **kwargs: [\n                    {\"id\": \"Label_1\", \"name\": \"Important\"},\n                    {\"id\": \"Label_2\", \"name\": \"Work\"},\n                ],\n            },\n        )\n"
        },
        {
            "id": "chunk_24_GmailListLabelsBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_24_GmailListLabelsBlock.run_2",
            "code": "        service = GmailReadBlock._build_service(credentials, **kwargs)\n"
        },
        {
            "id": "chunk_24_GmailListLabelsBlock.run_3",
            "code": "        labels = self._list_labels(service)\n"
        },
        {
            "id": "chunk_24_GmailListLabelsBlock.run_4",
            "code": "        yield \"result\", labels\n"
        },
        {
            "id": "chunk_25_GmailListLabelsBlock._list_labels_1",
            "code": "    def _list_labels(self, service) -> list[dict]:\n"
        },
        {
            "id": "chunk_25_GmailListLabelsBlock._list_labels_2",
            "code": "        results = service.users().labels().list(userId=\"me\").execute()\n        labels = results.get(\"labels\", [])\n"
        },
        {
            "id": "chunk_25_GmailListLabelsBlock._list_labels_3",
            "code": "        return [{\"id\": label[\"id\"], \"name\": label[\"name\"]} for label in labels]\n"
        },
        {
            "id": "chunk_26_GmailAddLabelBlock_1",
            "code": "class GmailAddLabelBlock(Block):\n"
        },
        {
            "id": "chunk_26_GmailAddLabelBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.modify\"]\n        )\n        message_id: str = SchemaField(\n            description=\"Message ID to add label to\",\n        )\n        label_name: str = SchemaField(\n            description=\"Label name to add\",\n        )\n"
        },
        {
            "id": "chunk_26_GmailAddLabelBlock_3",
            "code": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"Label addition result\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_26_GmailAddLabelBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"f884b2fb-04f4-4265-9658-14f433926ac9\",\n            description=\"This block adds a label to a Gmail message.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailAddLabelBlock.Input,\n            output_schema=GmailAddLabelBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"message_id\": \"12345\",\n                \"label_name\": \"Important\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    {\"status\": \"Label added successfully\", \"label_id\": \"Label_1\"},\n                ),\n            ],\n            test_mock={\n                \"_add_label\": lambda *args, **kwargs: {\n                    \"status\": \"Label added successfully\",\n                    \"label_id\": \"Label_1\",\n                },\n            },\n        )\n"
        },
        {
            "id": "chunk_26_GmailAddLabelBlock_5",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = GmailReadBlock._build_service(credentials, **kwargs)\n        result = self._add_label(service, input_data.message_id, input_data.label_name)\n        yield \"result\", result\n"
        },
        {
            "id": "chunk_26_GmailAddLabelBlock_6",
            "code": "    def _add_label(self, service, message_id: str, label_name: str) -> dict:\n        label_id = self._get_or_create_label(service, label_name)\n        service.users().messages().modify(\n            userId=\"me\", id=message_id, body={\"addLabelIds\": [label_id]}\n        ).execute()\n        return {\"status\": \"Label added successfully\", \"label_id\": label_id}\n"
        },
        {
            "id": "chunk_26_GmailAddLabelBlock_7",
            "code": "    def _get_or_create_label(self, service, label_name: str) -> str:\n        label_id = self._get_label_id(service, label_name)\n        if not label_id:\n            label = (\n                service.users()\n                .labels()\n                .create(userId=\"me\", body={\"name\": label_name})\n                .execute()\n            )\n            label_id = label[\"id\"]\n        return label_id\n"
        },
        {
            "id": "chunk_26_GmailAddLabelBlock_8",
            "code": "    def _get_label_id(self, service, label_name: str) -> str | None:\n        results = service.users().labels().list(userId=\"me\").execute()\n        labels = results.get(\"labels\", [])\n        for label in labels:\n            if label[\"name\"] == label_name:\n                return label[\"id\"]\n        return None\n"
        },
        {
            "id": "chunk_27_GmailAddLabelBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.modify\"]\n        )\n"
        },
        {
            "id": "chunk_27_GmailAddLabelBlock.Input_2",
            "code": "        message_id: str = SchemaField(\n            description=\"Message ID to add label to\",\n        )\n"
        },
        {
            "id": "chunk_27_GmailAddLabelBlock.Input_3",
            "code": "        label_name: str = SchemaField(\n            description=\"Label name to add\",\n        )\n"
        },
        {
            "id": "chunk_28_GmailAddLabelBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"Label addition result\",\n        )\n"
        },
        {
            "id": "chunk_28_GmailAddLabelBlock.Output_2",
            "code": "        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_29_GmailAddLabelBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"f884b2fb-04f4-4265-9658-14f433926ac9\",\n            description=\"This block adds a label to a Gmail message.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailAddLabelBlock.Input,\n            output_schema=GmailAddLabelBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"message_id\": \"12345\",\n                \"label_name\": \"Important\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    {\"status\": \"Label added successfully\", \"label_id\": \"Label_1\"},\n                ),\n            ],\n            test_mock={\n                \"_add_label\": lambda *args, **kwargs: {\n                    \"status\": \"Label added successfully\",\n                    \"label_id\": \"Label_1\",\n                },\n            },\n        )\n"
        },
        {
            "id": "chunk_30_GmailAddLabelBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_30_GmailAddLabelBlock.run_2",
            "code": "        service = GmailReadBlock._build_service(credentials, **kwargs)\n        result = self._add_label(service, input_data.message_id, input_data.label_name)\n        yield \"result\", result\n"
        },
        {
            "id": "chunk_31_GmailAddLabelBlock._add_label_1",
            "code": "    def _add_label(self, service, message_id: str, label_name: str) -> dict:\n        label_id = self._get_or_create_label(service, label_name)\n"
        },
        {
            "id": "chunk_31_GmailAddLabelBlock._add_label_2",
            "code": "        service.users().messages().modify(\n            userId=\"me\", id=message_id, body={\"addLabelIds\": [label_id]}\n        ).execute()\n"
        },
        {
            "id": "chunk_31_GmailAddLabelBlock._add_label_3",
            "code": "        return {\"status\": \"Label added successfully\", \"label_id\": label_id}\n"
        },
        {
            "id": "chunk_32_GmailAddLabelBlock._get_or_create_label_1",
            "code": "    def _get_or_create_label(self, service, label_name: str) -> str:\n        label_id = self._get_label_id(service, label_name)\n"
        },
        {
            "id": "chunk_32_GmailAddLabelBlock._get_or_create_label_2",
            "code": "        if not label_id:\n"
        },
        {
            "id": "chunk_32_GmailAddLabelBlock._get_or_create_label_3",
            "code": "            label = (\n                service.users()\n                .labels()\n                .create(userId=\"me\", body={\"name\": label_name})\n                .execute()\n            )\n            label_id = label[\"id\"]\n"
        },
        {
            "id": "chunk_32_GmailAddLabelBlock._get_or_create_label_4",
            "code": "        return label_id\n"
        },
        {
            "id": "chunk_33_GmailAddLabelBlock._get_label_id_1",
            "code": "    def _get_label_id(self, service, label_name: str) -> str | None:\n        results = service.users().labels().list(userId=\"me\").execute()\n        labels = results.get(\"labels\", [])\n"
        },
        {
            "id": "chunk_33_GmailAddLabelBlock._get_label_id_2",
            "code": "        for label in labels:\n            if label[\"name\"] == label_name:\n                return label[\"id\"]\n"
        },
        {
            "id": "chunk_33_GmailAddLabelBlock._get_label_id_3",
            "code": "        return None\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_1",
            "code": "class GmailRemoveLabelBlock(Block):\n    class Input(BlockSchema):\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_2",
            "code": "        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.modify\"]\n        )\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_3",
            "code": "        message_id: str = SchemaField(\n            description=\"Message ID to remove label from\",\n        )\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_4",
            "code": "        label_name: str = SchemaField(\n            description=\"Label name to remove\",\n        )\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_5",
            "code": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_6",
            "code": "            description=\"Label removal result\",\n        )\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_7",
            "code": "        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_8",
            "code": "    def __init__(self):\n        super().__init__(\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_9",
            "code": "            id=\"0afc0526-aba1-4b2b-888e-a22b7c3f359d\",\n            description=\"This block removes a label from a Gmail message.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailRemoveLabelBlock.Input,\n            output_schema=GmailRemoveLabelBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_10",
            "code": "            test_input={\n                \"message_id\": \"12345\",\n                \"label_name\": \"Important\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_11",
            "code": "            test_credentials=TEST_CREDENTIALS,\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_12",
            "code": "            test_output=[\n                (\n                    \"result\",\n                    {\"status\": \"Label removed successfully\", \"label_id\": \"Label_1\"},\n                ),\n            ],\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_13",
            "code": "            test_mock={\n                \"_remove_label\": lambda *args, **kwargs: {\n                    \"status\": \"Label removed successfully\",\n                    \"label_id\": \"Label_1\",\n                },\n            },\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_14",
            "code": "        )\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_15",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_16",
            "code": "        service = GmailReadBlock._build_service(credentials, **kwargs)\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_17",
            "code": "        result = self._remove_label(\n            service, input_data.message_id, input_data.label_name\n        )\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_18",
            "code": "        yield \"result\", result\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_19",
            "code": "    def _remove_label(self, service, message_id: str, label_name: str) -> dict:\n        label_id = self._get_label_id(service, label_name)\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_20",
            "code": "        if label_id:\n            service.users().messages().modify(\n                userId=\"me\", id=message_id, body={\"removeLabelIds\": [label_id]}\n            ).execute()\n            return {\"status\": \"Label removed successfully\", \"label_id\": label_id}\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_21",
            "code": "        else:\n            return {\"status\": \"Label not found\", \"label_name\": label_name}\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_22",
            "code": "    def _get_label_id(self, service, label_name: str) -> str | None:\n        results = service.users().labels().list(userId=\"me\").execute()\n"
        },
        {
            "id": "chunk_34_GmailRemoveLabelBlock_23",
            "code": "        labels = results.get(\"labels\", [])\n        for label in labels:\n            if label[\"name\"] == label_name:\n                return label[\"id\"]\n        return None\n"
        },
        {
            "id": "chunk_35_GmailRemoveLabelBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.modify\"]\n        )\n"
        },
        {
            "id": "chunk_35_GmailRemoveLabelBlock.Input_2",
            "code": "        message_id: str = SchemaField(\n            description=\"Message ID to remove label from\",\n        )\n"
        },
        {
            "id": "chunk_35_GmailRemoveLabelBlock.Input_3",
            "code": "        label_name: str = SchemaField(\n            description=\"Label name to remove\",\n        )\n"
        },
        {
            "id": "chunk_36_GmailRemoveLabelBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"Label removal result\",\n        )\n"
        },
        {
            "id": "chunk_36_GmailRemoveLabelBlock.Output_2",
            "code": "        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
        },
        {
            "id": "chunk_37_GmailRemoveLabelBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"0afc0526-aba1-4b2b-888e-a22b7c3f359d\",\n            description=\"This block removes a label from a Gmail message.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailRemoveLabelBlock.Input,\n            output_schema=GmailRemoveLabelBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"message_id\": \"12345\",\n                \"label_name\": \"Important\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    {\"status\": \"Label removed successfully\", \"label_id\": \"Label_1\"},\n                ),\n            ],\n            test_mock={\n                \"_remove_label\": lambda *args, **kwargs: {\n                    \"status\": \"Label removed successfully\",\n                    \"label_id\": \"Label_1\",\n                },\n            },\n        )\n"
        },
        {
            "id": "chunk_38_GmailRemoveLabelBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_38_GmailRemoveLabelBlock.run_2",
            "code": "        service = GmailReadBlock._build_service(credentials, **kwargs)\n"
        },
        {
            "id": "chunk_38_GmailRemoveLabelBlock.run_3",
            "code": "        result = self._remove_label(\n            service, input_data.message_id, input_data.label_name\n        )\n"
        },
        {
            "id": "chunk_38_GmailRemoveLabelBlock.run_4",
            "code": "        yield \"result\", result\n"
        },
        {
            "id": "chunk_39_GmailRemoveLabelBlock._remove_label_1",
            "code": "    def _remove_label(self, service, message_id: str, label_name: str) -> dict:\n        label_id = self._get_label_id(service, label_name)\n"
        },
        {
            "id": "chunk_39_GmailRemoveLabelBlock._remove_label_2",
            "code": "        if label_id:\n"
        },
        {
            "id": "chunk_39_GmailRemoveLabelBlock._remove_label_3",
            "code": "            service.users().messages().modify(\n                userId=\"me\", id=message_id, body={\"removeLabelIds\": [label_id]}\n            ).execute()\n            return {\"status\": \"Label removed successfully\", \"label_id\": label_id}\n"
        },
        {
            "id": "chunk_39_GmailRemoveLabelBlock._remove_label_4",
            "code": "        else:\n            return {\"status\": \"Label not found\", \"label_name\": label_name}\n"
        },
        {
            "id": "chunk_40_GmailRemoveLabelBlock._get_label_id_1",
            "code": "    def _get_label_id(self, service, label_name: str) -> str | None:\n        results = service.users().labels().list(userId=\"me\").execute()\n        labels = results.get(\"labels\", [])\n"
        },
        {
            "id": "chunk_40_GmailRemoveLabelBlock._get_label_id_2",
            "code": "        for label in labels:\n            if label[\"name\"] == label_name:\n                return label[\"id\"]\n"
        },
        {
            "id": "chunk_40_GmailRemoveLabelBlock._get_label_id_3",
            "code": "        return None\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_3_GmailReadBlock_1",
            "to": "chunk_3_GmailReadBlock_2"
        },
        {
            "from": "chunk_3_GmailReadBlock_1",
            "to": "chunk_3_GmailReadBlock_3"
        },
        {
            "from": "chunk_3_GmailReadBlock_1",
            "to": "chunk_3_GmailReadBlock_4"
        },
        {
            "from": "chunk_3_GmailReadBlock_4",
            "to": "chunk_3_GmailReadBlock_5"
        },
        {
            "from": "chunk_3_GmailReadBlock_5",
            "to": "chunk_3_GmailReadBlock_6"
        },
        {
            "from": "chunk_3_GmailReadBlock_5",
            "to": "chunk_3_GmailReadBlock_7"
        },
        {
            "from": "chunk_3_GmailReadBlock_7",
            "to": "chunk_3_GmailReadBlock_8"
        },
        {
            "from": "chunk_3_GmailReadBlock_7",
            "to": "chunk_3_GmailReadBlock_9"
        },
        {
            "from": "chunk_4_GmailReadBlock.Input_1",
            "to": "chunk_4_GmailReadBlock.Input_2"
        },
        {
            "from": "chunk_4_GmailReadBlock.Input_2",
            "to": "chunk_4_GmailReadBlock.Input_3"
        },
        {
            "from": "chunk_5_GmailReadBlock.Output_1",
            "to": "chunk_5_GmailReadBlock.Output_2"
        },
        {
            "from": "chunk_5_GmailReadBlock.Output_2",
            "to": "chunk_5_GmailReadBlock.Output_3"
        },
        {
            "from": "chunk_5_GmailReadBlock.Output_3",
            "to": "chunk_5_GmailReadBlock.Output_4"
        },
        {
            "from": "chunk_7_GmailReadBlock.run_1",
            "to": "chunk_7_GmailReadBlock.run_2"
        },
        {
            "from": "chunk_7_GmailReadBlock.run_2",
            "to": "chunk_7_GmailReadBlock.run_3"
        },
        {
            "from": "chunk_7_GmailReadBlock.run_3",
            "to": "chunk_7_GmailReadBlock.run_4"
        },
        {
            "from": "chunk_8_GmailReadBlock._build_service_1",
            "to": "chunk_8_GmailReadBlock._build_service_2"
        },
        {
            "from": "chunk_8_GmailReadBlock._build_service_2",
            "to": "chunk_8_GmailReadBlock._build_service_3"
        },
        {
            "from": "chunk_9_GmailReadBlock._read_emails_1",
            "to": "chunk_9_GmailReadBlock._read_emails_2"
        },
        {
            "from": "chunk_9_GmailReadBlock._read_emails_2",
            "to": "chunk_9_GmailReadBlock._read_emails_3"
        },
        {
            "from": "chunk_9_GmailReadBlock._read_emails_3",
            "to": "chunk_9_GmailReadBlock._read_emails_4"
        },
        {
            "from": "chunk_9_GmailReadBlock._read_emails_4",
            "to": "chunk_9_GmailReadBlock._read_emails_5"
        },
        {
            "from": "chunk_9_GmailReadBlock._read_emails_5",
            "to": "chunk_9_GmailReadBlock._read_emails_6"
        },
        {
            "from": "chunk_9_GmailReadBlock._read_emails_6",
            "to": "chunk_9_GmailReadBlock._read_emails_7"
        },
        {
            "from": "chunk_9_GmailReadBlock._read_emails_7",
            "to": "chunk_9_GmailReadBlock._read_emails_8"
        },
        {
            "from": "chunk_9_GmailReadBlock._read_emails_8",
            "to": "chunk_9_GmailReadBlock._read_emails_9"
        },
        {
            "from": "chunk_9_GmailReadBlock._read_emails_9",
            "to": "chunk_9_GmailReadBlock._read_emails_5"
        },
        {
            "from": "chunk_9_GmailReadBlock._read_emails_9",
            "to": "chunk_9_GmailReadBlock._read_emails_10"
        },
        {
            "from": "chunk_10_GmailReadBlock._get_email_body_1",
            "to": "chunk_10_GmailReadBlock._get_email_body_2"
        },
        {
            "from": "chunk_10_GmailReadBlock._get_email_body_1",
            "to": "chunk_10_GmailReadBlock._get_email_body_5"
        },
        {
            "from": "chunk_10_GmailReadBlock._get_email_body_2",
            "to": "chunk_10_GmailReadBlock._get_email_body_3"
        },
        {
            "from": "chunk_10_GmailReadBlock._get_email_body_2",
            "to": "chunk_10_GmailReadBlock._get_email_body_6"
        },
        {
            "from": "chunk_10_GmailReadBlock._get_email_body_3",
            "to": "chunk_10_GmailReadBlock._get_email_body_4"
        },
        {
            "from": "chunk_10_GmailReadBlock._get_email_body_3",
            "to": "chunk_10_GmailReadBlock._get_email_body_6"
        },
        {
            "from": "chunk_11_GmailReadBlock._get_attachments_1",
            "to": "chunk_11_GmailReadBlock._get_attachments_2"
        },
        {
            "from": "chunk_11_GmailReadBlock._get_attachments_2",
            "to": "chunk_11_GmailReadBlock._get_attachments_3"
        },
        {
            "from": "chunk_11_GmailReadBlock._get_attachments_2",
            "to": "chunk_11_GmailReadBlock._get_attachments_4"
        },
        {
            "from": "chunk_11_GmailReadBlock._get_attachments_3",
            "to": "chunk_11_GmailReadBlock._get_attachments_2"
        },
        {
            "from": "chunk_12_GmailReadBlock.download_attachment_1",
            "to": "chunk_12_GmailReadBlock.download_attachment_2"
        },
        {
            "from": "chunk_12_GmailReadBlock.download_attachment_2",
            "to": "chunk_12_GmailReadBlock.download_attachment_3"
        },
        {
            "from": "chunk_12_GmailReadBlock.download_attachment_3",
            "to": "chunk_12_GmailReadBlock.download_attachment_4"
        },
        {
            "from": "chunk_13_GmailSendBlock_1",
            "to": "chunk_13_GmailSendBlock_2"
        },
        {
            "from": "chunk_13_GmailSendBlock_1",
            "to": "chunk_13_GmailSendBlock_3"
        },
        {
            "from": "chunk_13_GmailSendBlock_1",
            "to": "chunk_13_GmailSendBlock_4"
        },
        {
            "from": "chunk_13_GmailSendBlock_4",
            "to": "chunk_13_GmailSendBlock_5"
        },
        {
            "from": "chunk_13_GmailSendBlock_5",
            "to": "chunk_13_GmailSendBlock_6"
        },
        {
            "from": "chunk_13_GmailSendBlock_6",
            "to": "chunk_13_GmailSendBlock_7"
        },
        {
            "from": "chunk_14_GmailSendBlock.Input_1",
            "to": "chunk_14_GmailSendBlock.Input_2"
        },
        {
            "from": "chunk_14_GmailSendBlock.Input_2",
            "to": "chunk_14_GmailSendBlock.Input_3"
        },
        {
            "from": "chunk_14_GmailSendBlock.Input_3",
            "to": "chunk_14_GmailSendBlock.Input_4"
        },
        {
            "from": "chunk_15_GmailSendBlock.Output_1",
            "to": "chunk_15_GmailSendBlock.Output_2"
        },
        {
            "from": "chunk_17_GmailSendBlock.run_1",
            "to": "chunk_17_GmailSendBlock.run_2"
        },
        {
            "from": "chunk_17_GmailSendBlock.run_2",
            "to": "chunk_17_GmailSendBlock.run_3"
        },
        {
            "from": "chunk_17_GmailSendBlock.run_3",
            "to": "chunk_17_GmailSendBlock.run_4"
        },
        {
            "from": "chunk_18_GmailSendBlock._send_email_1",
            "to": "chunk_18_GmailSendBlock._send_email_2"
        },
        {
            "from": "chunk_18_GmailSendBlock._send_email_2",
            "to": "chunk_18_GmailSendBlock._send_email_3"
        },
        {
            "from": "chunk_18_GmailSendBlock._send_email_3",
            "to": "chunk_18_GmailSendBlock._send_email_4"
        },
        {
            "from": "chunk_18_GmailSendBlock._send_email_4",
            "to": "chunk_18_GmailSendBlock._send_email_5"
        },
        {
            "from": "chunk_19_GmailSendBlock._create_message_1",
            "to": "chunk_19_GmailSendBlock._create_message_2"
        },
        {
            "from": "chunk_19_GmailSendBlock._create_message_2",
            "to": "chunk_19_GmailSendBlock._create_message_3"
        },
        {
            "from": "chunk_20_GmailListLabelsBlock_1",
            "to": "chunk_20_GmailListLabelsBlock_2"
        },
        {
            "from": "chunk_20_GmailListLabelsBlock_2",
            "to": "chunk_20_GmailListLabelsBlock_3"
        },
        {
            "from": "chunk_20_GmailListLabelsBlock_3",
            "to": "chunk_20_GmailListLabelsBlock_4"
        },
        {
            "from": "chunk_20_GmailListLabelsBlock_4",
            "to": "chunk_20_GmailListLabelsBlock_5"
        },
        {
            "from": "chunk_22_GmailListLabelsBlock.Output_1",
            "to": "chunk_22_GmailListLabelsBlock.Output_2"
        },
        {
            "from": "chunk_24_GmailListLabelsBlock.run_1",
            "to": "chunk_24_GmailListLabelsBlock.run_2"
        },
        {
            "from": "chunk_24_GmailListLabelsBlock.run_2",
            "to": "chunk_24_GmailListLabelsBlock.run_3"
        },
        {
            "from": "chunk_24_GmailListLabelsBlock.run_3",
            "to": "chunk_24_GmailListLabelsBlock.run_4"
        },
        {
            "from": "chunk_25_GmailListLabelsBlock._list_labels_1",
            "to": "chunk_25_GmailListLabelsBlock._list_labels_2"
        },
        {
            "from": "chunk_25_GmailListLabelsBlock._list_labels_2",
            "to": "chunk_25_GmailListLabelsBlock._list_labels_3"
        },
        {
            "from": "chunk_26_GmailAddLabelBlock_1",
            "to": "chunk_26_GmailAddLabelBlock_2"
        },
        {
            "from": "chunk_26_GmailAddLabelBlock_1",
            "to": "chunk_26_GmailAddLabelBlock_3"
        },
        {
            "from": "chunk_26_GmailAddLabelBlock_1",
            "to": "chunk_26_GmailAddLabelBlock_4"
        },
        {
            "from": "chunk_26_GmailAddLabelBlock_4",
            "to": "chunk_26_GmailAddLabelBlock_5"
        },
        {
            "from": "chunk_26_GmailAddLabelBlock_5",
            "to": "chunk_26_GmailAddLabelBlock_6"
        },
        {
            "from": "chunk_26_GmailAddLabelBlock_6",
            "to": "chunk_26_GmailAddLabelBlock_7"
        },
        {
            "from": "chunk_26_GmailAddLabelBlock_7",
            "to": "chunk_26_GmailAddLabelBlock_8"
        },
        {
            "from": "chunk_27_GmailAddLabelBlock.Input_1",
            "to": "chunk_27_GmailAddLabelBlock.Input_2"
        },
        {
            "from": "chunk_27_GmailAddLabelBlock.Input_2",
            "to": "chunk_27_GmailAddLabelBlock.Input_3"
        },
        {
            "from": "chunk_28_GmailAddLabelBlock.Output_1",
            "to": "chunk_28_GmailAddLabelBlock.Output_2"
        },
        {
            "from": "chunk_30_GmailAddLabelBlock.run_1",
            "to": "chunk_30_GmailAddLabelBlock.run_2"
        },
        {
            "from": "chunk_31_GmailAddLabelBlock._add_label_1",
            "to": "chunk_31_GmailAddLabelBlock._add_label_2"
        },
        {
            "from": "chunk_31_GmailAddLabelBlock._add_label_2",
            "to": "chunk_31_GmailAddLabelBlock._add_label_3"
        },
        {
            "from": "chunk_32_GmailAddLabelBlock._get_or_create_label_1",
            "to": "chunk_32_GmailAddLabelBlock._get_or_create_label_2"
        },
        {
            "from": "chunk_32_GmailAddLabelBlock._get_or_create_label_2",
            "to": "chunk_32_GmailAddLabelBlock._get_or_create_label_3"
        },
        {
            "from": "chunk_32_GmailAddLabelBlock._get_or_create_label_2",
            "to": "chunk_32_GmailAddLabelBlock._get_or_create_label_4"
        },
        {
            "from": "chunk_32_GmailAddLabelBlock._get_or_create_label_3",
            "to": "chunk_32_GmailAddLabelBlock._get_or_create_label_4"
        },
        {
            "from": "chunk_33_GmailAddLabelBlock._get_label_id_1",
            "to": "chunk_33_GmailAddLabelBlock._get_label_id_2"
        },
        {
            "from": "chunk_33_GmailAddLabelBlock._get_label_id_2",
            "to": "chunk_33_GmailAddLabelBlock._get_label_id_3"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_1",
            "to": "chunk_34_GmailRemoveLabelBlock_2"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_2",
            "to": "chunk_34_GmailRemoveLabelBlock_3"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_3",
            "to": "chunk_34_GmailRemoveLabelBlock_4"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_4",
            "to": "chunk_34_GmailRemoveLabelBlock_5"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_5",
            "to": "chunk_34_GmailRemoveLabelBlock_6"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_6",
            "to": "chunk_34_GmailRemoveLabelBlock_7"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_7",
            "to": "chunk_34_GmailRemoveLabelBlock_8"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_8",
            "to": "chunk_34_GmailRemoveLabelBlock_9"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_9",
            "to": "chunk_34_GmailRemoveLabelBlock_10"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_10",
            "to": "chunk_34_GmailRemoveLabelBlock_11"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_11",
            "to": "chunk_34_GmailRemoveLabelBlock_12"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_12",
            "to": "chunk_34_GmailRemoveLabelBlock_13"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_13",
            "to": "chunk_34_GmailRemoveLabelBlock_14"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_14",
            "to": "chunk_34_GmailRemoveLabelBlock_15"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_15",
            "to": "chunk_34_GmailRemoveLabelBlock_16"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_16",
            "to": "chunk_34_GmailRemoveLabelBlock_17"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_17",
            "to": "chunk_34_GmailRemoveLabelBlock_18"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_19",
            "to": "chunk_34_GmailRemoveLabelBlock_20"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_19",
            "to": "chunk_34_GmailRemoveLabelBlock_21"
        },
        {
            "from": "chunk_34_GmailRemoveLabelBlock_22",
            "to": "chunk_34_GmailRemoveLabelBlock_23"
        },
        {
            "from": "chunk_35_GmailRemoveLabelBlock.Input_1",
            "to": "chunk_35_GmailRemoveLabelBlock.Input_2"
        },
        {
            "from": "chunk_35_GmailRemoveLabelBlock.Input_2",
            "to": "chunk_35_GmailRemoveLabelBlock.Input_3"
        },
        {
            "from": "chunk_36_GmailRemoveLabelBlock.Output_1",
            "to": "chunk_36_GmailRemoveLabelBlock.Output_2"
        },
        {
            "from": "chunk_38_GmailRemoveLabelBlock.run_1",
            "to": "chunk_38_GmailRemoveLabelBlock.run_2"
        },
        {
            "from": "chunk_38_GmailRemoveLabelBlock.run_2",
            "to": "chunk_38_GmailRemoveLabelBlock.run_3"
        },
        {
            "from": "chunk_38_GmailRemoveLabelBlock.run_3",
            "to": "chunk_38_GmailRemoveLabelBlock.run_4"
        },
        {
            "from": "chunk_39_GmailRemoveLabelBlock._remove_label_1",
            "to": "chunk_39_GmailRemoveLabelBlock._remove_label_2"
        },
        {
            "from": "chunk_39_GmailRemoveLabelBlock._remove_label_2",
            "to": "chunk_39_GmailRemoveLabelBlock._remove_label_3"
        },
        {
            "from": "chunk_39_GmailRemoveLabelBlock._remove_label_2",
            "to": "chunk_39_GmailRemoveLabelBlock._remove_label_4"
        },
        {
            "from": "chunk_40_GmailRemoveLabelBlock._get_label_id_1",
            "to": "chunk_40_GmailRemoveLabelBlock._get_label_id_2"
        },
        {
            "from": "chunk_40_GmailRemoveLabelBlock._get_label_id_2",
            "to": "chunk_40_GmailRemoveLabelBlock._get_label_id_3"
        }
    ]
}