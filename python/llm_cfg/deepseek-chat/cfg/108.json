{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from base64 import b64encode\nfrom urllib.parse import urlencode\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from .base import BaseOAuthHandler\n"
        },
        {
            "id": "chunk_1_NotionOAuthHandler_1",
            "code": "class NotionOAuthHandler(BaseOAuthHandler):\n    \"\"\"\n    Based on the documentation at https://developers.notion.com/docs/authorization\n\n    Notes:\n    - Notion uses non-expiring access tokens and therefore doesn't have a refresh flow\n    - Notion doesn't use scopes\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_NotionOAuthHandler_2",
            "code": "    PROVIDER_NAME = ProviderName.NOTION\n"
        },
        {
            "id": "chunk_1_NotionOAuthHandler_3",
            "code": "    def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.redirect_uri = redirect_uri\n        self.auth_base_url = \"https://api.notion.com/v1/oauth/authorize\"\n        self.token_url = \"https://api.notion.com/v1/oauth/token\"\n"
        },
        {
            "id": "chunk_1_NotionOAuthHandler_4",
            "code": "    def get_login_url(self, scopes: list[str], state: str) -> str:\n        params = {\n            \"client_id\": self.client_id,\n            \"redirect_uri\": self.redirect_uri,\n            \"response_type\": \"code\",\n            \"owner\": \"user\",\n            \"state\": state,\n        }\n        return f\"{self.auth_base_url}?{urlencode(params)}\"\n"
        },
        {
            "id": "chunk_1_NotionOAuthHandler_5",
            "code": "    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        request_body = {\n            \"grant_type\": \"authorization_code\",\n            \"code\": code,\n            \"redirect_uri\": self.redirect_uri,\n        }\n        auth_str = b64encode(f\"{self.client_id}:{self.client_secret}\".encode()).decode()\n        headers = {\n            \"Authorization\": f\"Basic {auth_str}\",\n            \"Accept\": \"application/json\",\n        }\n        response = requests.post(self.token_url, json=request_body, headers=headers)\n        token_data = response.json()\n        # Email is only available for non-bot users\n        email = (\n            token_data[\"owner\"][\"person\"][\"email\"]\n            if \"person\" in token_data[\"owner\"]\n            and \"email\" in token_data[\"owner\"][\"person\"]\n            else None\n        )\n"
        },
        {
            "id": "chunk_1_NotionOAuthHandler_6",
            "code": "        return OAuth2Credentials(\n            provider=self.PROVIDER_NAME,\n            title=token_data.get(\"workspace_name\"),\n            username=email,\n            access_token=token_data[\"access_token\"],\n            refresh_token=None,\n            access_token_expires_at=None,  # Notion tokens don't expire\n            refresh_token_expires_at=None,\n            scopes=[],\n            metadata={\n                \"owner\": token_data[\"owner\"],\n                \"bot_id\": token_data[\"bot_id\"],\n                \"workspace_id\": token_data[\"workspace_id\"],\n                \"workspace_name\": token_data.get(\"workspace_name\"),\n                \"workspace_icon\": token_data.get(\"workspace_icon\"),\n            },\n        )\n"
        },
        {
            "id": "chunk_1_NotionOAuthHandler_7",
            "code": "    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # Notion doesn't support token revocation\n        return False\n"
        },
        {
            "id": "chunk_1_NotionOAuthHandler_8",
            "code": "    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # Notion doesn't support token refresh\n        return credentials\n"
        },
        {
            "id": "chunk_1_NotionOAuthHandler_9",
            "code": "    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        # Notion access tokens don't expire\n        return False\n"
        },
        {
            "id": "chunk_2___init___1",
            "code": "    def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.redirect_uri = redirect_uri\n        self.auth_base_url = \"https://api.notion.com/v1/oauth/authorize\"\n        self.token_url = \"https://api.notion.com/v1/oauth/token\"\n\n"
        },
        {
            "id": "chunk_3_get_login_url_1",
            "code": "    def get_login_url(self, scopes: list[str], state: str) -> str:\n"
        },
        {
            "id": "chunk_3_get_login_url_2",
            "code": "        params = {\n            \"client_id\": self.client_id,\n            \"redirect_uri\": self.redirect_uri,\n            \"response_type\": \"code\",\n            \"owner\": \"user\",\n            \"state\": state,\n        }\n"
        },
        {
            "id": "chunk_3_get_login_url_3",
            "code": "        return f\"{self.auth_base_url}?{urlencode(params)}\"\n"
        },
        {
            "id": "chunk_4_exchange_code_for_tokens_1",
            "code": "    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n"
        },
        {
            "id": "chunk_4_exchange_code_for_tokens_2",
            "code": "        request_body = {\n            \"grant_type\": \"authorization_code\",\n            \"code\": code,\n            \"redirect_uri\": self.redirect_uri,\n        }\n"
        },
        {
            "id": "chunk_4_exchange_code_for_tokens_3",
            "code": "        auth_str = b64encode(f\"{self.client_id}:{self.client_secret}\".encode()).decode()\n"
        },
        {
            "id": "chunk_4_exchange_code_for_tokens_4",
            "code": "        headers = {\n            \"Authorization\": f\"Basic {auth_str}\",\n            \"Accept\": \"application/json\",\n        }\n"
        },
        {
            "id": "chunk_4_exchange_code_for_tokens_5",
            "code": "        response = requests.post(self.token_url, json=request_body, headers=headers)\n        token_data = response.json()\n"
        },
        {
            "id": "chunk_4_exchange_code_for_tokens_6",
            "code": "        # Email is only available for non-bot users\n        email = (\n            token_data[\"owner\"][\"person\"][\"email\"]\n            if \"person\" in token_data[\"owner\"]\n            and \"email\" in token_data[\"owner\"][\"person\"]\n            else None\n        )\n"
        },
        {
            "id": "chunk_4_exchange_code_for_tokens_7",
            "code": "\n"
        },
        {
            "id": "chunk_4_exchange_code_for_tokens_8",
            "code": "        return OAuth2Credentials(\n            provider=self.PROVIDER_NAME,\n            title=token_data.get(\"workspace_name\"),\n            username=email,\n            access_token=token_data[\"access_token\"],\n            refresh_token=None,\n            access_token_expires_at=None,  # Notion tokens don't expire\n            refresh_token_expires_at=None,\n            scopes=[],\n            metadata={\n                \"owner\": token_data[\"owner\"],\n                \"bot_id\": token_data[\"bot_id\"],\n                \"workspace_id\": token_data[\"workspace_id\"],\n                \"workspace_name\": token_data.get(\"workspace_name\"),\n                \"workspace_icon\": token_data.get(\"workspace_icon\"),\n            },\n        )\n"
        },
        {
            "id": "chunk_4_exchange_code_for_tokens_9",
            "code": "\n"
        },
        {
            "id": "chunk_5_revoke_tokens_1",
            "code": "    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # Notion doesn't support token revocation\n        return False\n"
        },
        {
            "id": "chunk_6__refresh_tokens_1",
            "code": "    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # Notion doesn't support token refresh\n        return credentials\n"
        },
        {
            "id": "chunk_7_needs_refresh_1",
            "code": "    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        # Notion access tokens don't expire\n        return False\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_1_NotionOAuthHandler_1",
            "to": "chunk_1_NotionOAuthHandler_2"
        },
        {
            "from": "chunk_1_NotionOAuthHandler_2",
            "to": "chunk_1_NotionOAuthHandler_3"
        },
        {
            "from": "chunk_1_NotionOAuthHandler_3",
            "to": "chunk_1_NotionOAuthHandler_4"
        },
        {
            "from": "chunk_1_NotionOAuthHandler_5",
            "to": "chunk_1_NotionOAuthHandler_6"
        },
        {
            "from": "chunk_3_get_login_url_1",
            "to": "chunk_3_get_login_url_2"
        },
        {
            "from": "chunk_3_get_login_url_2",
            "to": "chunk_3_get_login_url_3"
        },
        {
            "from": "chunk_4_exchange_code_for_tokens_1",
            "to": "chunk_4_exchange_code_for_tokens_2"
        },
        {
            "from": "chunk_4_exchange_code_for_tokens_2",
            "to": "chunk_4_exchange_code_for_tokens_3"
        },
        {
            "from": "chunk_4_exchange_code_for_tokens_3",
            "to": "chunk_4_exchange_code_for_tokens_4"
        },
        {
            "from": "chunk_4_exchange_code_for_tokens_4",
            "to": "chunk_4_exchange_code_for_tokens_5"
        },
        {
            "from": "chunk_4_exchange_code_for_tokens_5",
            "to": "chunk_4_exchange_code_for_tokens_6"
        },
        {
            "from": "chunk_4_exchange_code_for_tokens_6",
            "to": "chunk_4_exchange_code_for_tokens_7"
        },
        {
            "from": "chunk_4_exchange_code_for_tokens_7",
            "to": "chunk_4_exchange_code_for_tokens_8"
        },
        {
            "from": "chunk_4_exchange_code_for_tokens_8",
            "to": "chunk_4_exchange_code_for_tokens_9"
        }
    ]
}