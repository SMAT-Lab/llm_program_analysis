{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import logging\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import pytest\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.util.test import SpinTestServer\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "#  NOTE: You can run tests like with the --log-cli-level=INFO to see the logs\n# Set up logging\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "logger = logging.getLogger(__name__)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_6",
            "code": "# Create console handler with formatting\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n"
        },
        {
            "id": "chunk_1_server_1",
            "code": "@pytest.fixture(scope=\"session\")\n"
        },
        {
            "id": "chunk_1_server_2",
            "code": "async def server():\n    async with SpinTestServer() as server:\n        yield server\n"
        },
        {
            "id": "chunk_2_graph_cleanup_1",
            "code": "@pytest.fixture(scope=\"session\", autouse=True)\nasync def graph_cleanup(server):\n"
        },
        {
            "id": "chunk_2_graph_cleanup_2",
            "code": "    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n"
        },
        {
            "id": "chunk_2_graph_cleanup_3",
            "code": "    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n"
        },
        {
            "id": "chunk_2_graph_cleanup_4",
            "code": "    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n"
        },
        {
            "id": "chunk_2_graph_cleanup_5",
            "code": "        yield  # This runs the test function\n"
        },
        {
            "id": "chunk_2_graph_cleanup_6",
            "code": "    finally:\n        server.agent_server.test_create_graph = original_create_graph\n"
        },
        {
            "id": "chunk_2_graph_cleanup_7",
            "code": "        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n"
        },
        {
            "id": "chunk_2_graph_cleanup_8",
            "code": "            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"\n"
        },
        {
            "id": "chunk_3_create_graph_wrapper_1",
            "code": "    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n"
        },
        {
            "id": "chunk_3_create_graph_wrapper_2",
            "code": "        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_0_GlobalBlock_5",
            "to": "chunk_0_GlobalBlock_6"
        },
        {
            "from": "chunk_1_server_1",
            "to": "chunk_1_server_2"
        },
        {
            "from": "chunk_2_graph_cleanup_1",
            "to": "chunk_2_graph_cleanup_2"
        },
        {
            "from": "chunk_2_graph_cleanup_2",
            "to": "chunk_2_graph_cleanup_3"
        },
        {
            "from": "chunk_2_graph_cleanup_2",
            "to": "chunk_2_graph_cleanup_4"
        },
        {
            "from": "chunk_2_graph_cleanup_4",
            "to": "chunk_2_graph_cleanup_5"
        },
        {
            "from": "chunk_2_graph_cleanup_5",
            "to": "chunk_2_graph_cleanup_6"
        },
        {
            "from": "chunk_2_graph_cleanup_6",
            "to": "chunk_2_graph_cleanup_7"
        },
        {
            "from": "chunk_2_graph_cleanup_7",
            "to": "chunk_2_graph_cleanup_8"
        },
        {
            "from": "chunk_3_create_graph_wrapper_1",
            "to": "chunk_3_create_graph_wrapper_2"
        }
    ]
}