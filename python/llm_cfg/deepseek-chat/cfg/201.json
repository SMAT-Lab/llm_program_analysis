{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from __future__ import annotations\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from abc import abstractmethod\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from math import pi\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from typing import Protocol\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "import matplotlib.pyplot as plt\n"
        },
        {
            "id": "chunk_0_GlobalBlock_6",
            "code": "import numpy as np\n"
        },
        {
            "id": "chunk_1_FilterType_1",
            "code": "class FilterType(Protocol):\n    @abstractmethod\n    def process(self, sample: float) -> float:\n"
        },
        {
            "id": "chunk_1_FilterType_2",
            "code": "        \"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"\n"
        },
        {
            "id": "chunk_1_FilterType_3",
            "code": "\n\n"
        },
        {
            "id": "chunk_2_get_bounds_1",
            "code": "def get_bounds(\n    fft_results: np.ndarray, samplerate: int\n) -> tuple[int | float, int | float]:\n"
        },
        {
            "id": "chunk_2_get_bounds_2",
            "code": "    \"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"\n"
        },
        {
            "id": "chunk_2_get_bounds_3",
            "code": "    lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])\n    highest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])\n"
        },
        {
            "id": "chunk_2_get_bounds_4",
            "code": "    return lowest, highest\n"
        },
        {
            "id": "chunk_3_show_frequency_response_1",
            "code": "def show_frequency_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)\n    \"\"\"\n"
        },
        {
            "id": "chunk_3_show_frequency_response_2",
            "code": "    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n"
        },
        {
            "id": "chunk_3_show_frequency_response_3",
            "code": "    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n"
        },
        {
            "id": "chunk_3_show_frequency_response_4",
            "code": "    fft_out = np.abs(np.fft.fft(outputs))\n    fft_db = 20 * np.log10(fft_out)\n"
        },
        {
            "id": "chunk_3_show_frequency_response_5",
            "code": "    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n"
        },
        {
            "id": "chunk_3_show_frequency_response_6",
            "code": "    # Display within reasonable bounds\n    bounds = get_bounds(fft_db, samplerate)\n    plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))\n    plt.ylabel(\"Gain (dB)\")\n"
        },
        {
            "id": "chunk_3_show_frequency_response_7",
            "code": "    plt.plot(fft_db)\n    plt.show()\n"
        },
        {
            "id": "chunk_4_show_phase_response_1",
            "code": "def show_phase_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)\n    \"\"\"\n"
        },
        {
            "id": "chunk_4_show_phase_response_2",
            "code": "    size = 512\n    inputs = [1] + [0] * (size - 1)\n"
        },
        {
            "id": "chunk_4_show_phase_response_3",
            "code": "    outputs = [filter_type.process(item) for item in inputs]\n"
        },
        {
            "id": "chunk_4_show_phase_response_4",
            "code": "    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n"
        },
        {
            "id": "chunk_4_show_phase_response_5",
            "code": "    fft_out = np.angle(np.fft.fft(outputs))\n"
        },
        {
            "id": "chunk_4_show_phase_response_6",
            "code": "    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n"
        },
        {
            "id": "chunk_4_show_phase_response_7",
            "code": "    plt.ylim(-2 * pi, 2 * pi)\n    plt.ylabel(\"Phase shift (Radians)\")\n    plt.plot(np.unwrap(fft_out, -2 * pi))\n"
        },
        {
            "id": "chunk_4_show_phase_response_8",
            "code": "    plt.show()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_0_GlobalBlock_5",
            "to": "chunk_0_GlobalBlock_6"
        },
        {
            "from": "chunk_1_FilterType_1",
            "to": "chunk_1_FilterType_2"
        },
        {
            "from": "chunk_1_FilterType_2",
            "to": "chunk_1_FilterType_3"
        },
        {
            "from": "chunk_2_get_bounds_1",
            "to": "chunk_2_get_bounds_2"
        },
        {
            "from": "chunk_2_get_bounds_2",
            "to": "chunk_2_get_bounds_3"
        },
        {
            "from": "chunk_2_get_bounds_3",
            "to": "chunk_2_get_bounds_4"
        },
        {
            "from": "chunk_3_show_frequency_response_1",
            "to": "chunk_3_show_frequency_response_2"
        },
        {
            "from": "chunk_3_show_frequency_response_2",
            "to": "chunk_3_show_frequency_response_3"
        },
        {
            "from": "chunk_3_show_frequency_response_3",
            "to": "chunk_3_show_frequency_response_4"
        },
        {
            "from": "chunk_3_show_frequency_response_4",
            "to": "chunk_3_show_frequency_response_5"
        },
        {
            "from": "chunk_3_show_frequency_response_5",
            "to": "chunk_3_show_frequency_response_6"
        },
        {
            "from": "chunk_3_show_frequency_response_6",
            "to": "chunk_3_show_frequency_response_7"
        },
        {
            "from": "chunk_4_show_phase_response_1",
            "to": "chunk_4_show_phase_response_2"
        },
        {
            "from": "chunk_4_show_phase_response_2",
            "to": "chunk_4_show_phase_response_3"
        },
        {
            "from": "chunk_4_show_phase_response_3",
            "to": "chunk_4_show_phase_response_4"
        },
        {
            "from": "chunk_4_show_phase_response_4",
            "to": "chunk_4_show_phase_response_5"
        },
        {
            "from": "chunk_4_show_phase_response_5",
            "to": "chunk_4_show_phase_response_6"
        },
        {
            "from": "chunk_4_show_phase_response_6",
            "to": "chunk_4_show_phase_response_7"
        },
        {
            "from": "chunk_4_show_phase_response_7",
            "to": "chunk_4_show_phase_response_8"
        }
    ]
}