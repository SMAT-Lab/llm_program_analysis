{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import json\nimport logging\nfrom pathlib import Path\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from pydantic import BaseModel\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import (\n    Block,\n    BlockCategory,\n    BlockOutput,\n    BlockSchema,\n    BlockWebhookConfig,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from backend.data.model import SchemaField\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "from ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_6",
            "code": "logger = logging.getLogger(__name__)\n"
        },
        {
            "id": "chunk_1_GitHubTriggerBase_1",
            "code": "class GitHubTriggerBase:\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_1_GitHubTriggerBase_2",
            "code": "        repo: str = SchemaField(\n            description=(\n                \"Repository to subscribe to.\\n\\n\"\n                \"**Note:** Make sure your GitHub credentials have permissions \"\n                \"to create webhooks on this repo.\"\n            ),\n            placeholder=\"{owner}/{repo}\",\n        )\n"
        },
        {
            "id": "chunk_1_GitHubTriggerBase_3",
            "code": "        # --8<-- [start:example-payload-field]\n        payload: dict = SchemaField(hidden=True, default={})\n        # --8<-- [end:example-payload-field]\n"
        },
        {
            "id": "chunk_1_GitHubTriggerBase_4",
            "code": "\n"
        },
        {
            "id": "chunk_1_GitHubTriggerBase_5",
            "code": "    class Output(BlockSchema):\n        payload: dict = SchemaField(\n"
        },
        {
            "id": "chunk_1_GitHubTriggerBase_6",
            "code": "            description=\"The complete webhook payload that was received from GitHub. \"\n            \"Includes information about the affected resource (e.g. pull request), \"\n            \"the event, and the user who triggered the event.\"\n        )\n"
        },
        {
            "id": "chunk_1_GitHubTriggerBase_7",
            "code": "        triggered_by_user: dict = SchemaField(\n            description=\"Object representing the GitHub user who triggered the event\"\n        )\n"
        },
        {
            "id": "chunk_1_GitHubTriggerBase_8",
            "code": "        error: str = SchemaField(\n            description=\"Error message if the payload could not be processed\"\n        )\n"
        },
        {
            "id": "chunk_1_GitHubTriggerBase_9",
            "code": "\n"
        },
        {
            "id": "chunk_1_GitHubTriggerBase_10",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n"
        },
        {
            "id": "chunk_1_GitHubTriggerBase_11",
            "code": "        yield \"payload\", input_data.payload\n        yield \"triggered_by_user\", input_data.payload[\"sender\"]\n"
        },
        {
            "id": "chunk_1_GitHubTriggerBase_12",
            "code": "\n\n"
        },
        {
            "id": "chunk_2_GitHubTriggerBase.Input_1",
            "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
        },
        {
            "id": "chunk_2_GitHubTriggerBase.Input_2",
            "code": "        repo: str = SchemaField(\n            description=(\n                \"Repository to subscribe to.\\n\\n\"\n                \"**Note:** Make sure your GitHub credentials have permissions \"\n                \"to create webhooks on this repo.\"\n            ),\n            placeholder=\"{owner}/{repo}\",\n        )\n"
        },
        {
            "id": "chunk_2_GitHubTriggerBase.Input_3",
            "code": "        # --8<-- [start:example-payload-field]\n        payload: dict = SchemaField(hidden=True, default={})\n"
        },
        {
            "id": "chunk_2_GitHubTriggerBase.Input_4",
            "code": "        # --8<-- [end:example-payload-field]\n"
        },
        {
            "id": "chunk_3_GitHubTriggerBase.Output_1",
            "code": "    class Output(BlockSchema):\n"
        },
        {
            "id": "chunk_3_GitHubTriggerBase.Output_2",
            "code": "        payload: dict = SchemaField(\n            description=\"The complete webhook payload that was received from GitHub. \"\n            \"Includes information about the affected resource (e.g. pull request), \"\n            \"the event, and the user who triggered the event.\"\n        )\n"
        },
        {
            "id": "chunk_3_GitHubTriggerBase.Output_3",
            "code": "        triggered_by_user: dict = SchemaField(\n            description=\"Object representing the GitHub user who triggered the event\"\n        )\n"
        },
        {
            "id": "chunk_3_GitHubTriggerBase.Output_4",
            "code": "        error: str = SchemaField(\n            description=\"Error message if the payload could not be processed\"\n        )\n"
        },
        {
            "id": "chunk_4_GitHubTriggerBase.run_1",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n"
        },
        {
            "id": "chunk_4_GitHubTriggerBase.run_2",
            "code": "        yield \"payload\", input_data.payload\n        yield \"triggered_by_user\", input_data.payload[\"sender\"]\n"
        },
        {
            "id": "chunk_5_GithubPullRequestTriggerBlock_1",
            "code": "class GithubPullRequestTriggerBlock(GitHubTriggerBase, Block):\n    EXAMPLE_PAYLOAD_FILE = (\n        Path(__file__).parent / \"example_payloads\" / \"pull_request.synchronize.json\"\n    )\n"
        },
        {
            "id": "chunk_5_GithubPullRequestTriggerBlock_2",
            "code": "    # --8<-- [start:example-event-filter]\n    class Input(GitHubTriggerBase.Input):\n        class EventsFilter(BaseModel):\n            \"\"\"\n            https://docs.github.com/en/webhooks/webhook-events-and-payloads#pull_request\n            \"\"\"\n\n            opened: bool = False\n            edited: bool = False\n            closed: bool = False\n            reopened: bool = False\n            synchronize: bool = False\n            assigned: bool = False\n            unassigned: bool = False\n            labeled: bool = False\n            unlabeled: bool = False\n            converted_to_draft: bool = False\n            locked: bool = False\n            unlocked: bool = False\n            enqueued: bool = False\n            dequeued: bool = False\n            milestoned: bool = False\n            demilestoned: bool = False\n            ready_for_review: bool = False\n            review_requested: bool = False\n            review_request_removed: bool = False\n            auto_merge_enabled: bool = False\n            auto_merge_disabled: bool = False\n\n        events: EventsFilter = SchemaField(\n            title=\"Events\", description=\"The events to subscribe to\"\n        )\n        # --8<-- [end:example-event-filter]\n"
        },
        {
            "id": "chunk_5_GithubPullRequestTriggerBlock_3",
            "code": "    class Output(GitHubTriggerBase.Output):\n        event: str = SchemaField(\n            description=\"The PR event that triggered the webhook (e.g. 'opened')\"\n        )\n        number: int = SchemaField(description=\"The number of the affected pull request\")\n        pull_request: dict = SchemaField(\n            description=\"Object representing the affected pull request\"\n        )\n        pull_request_url: str = SchemaField(\n            description=\"The URL of the affected pull request\"\n        )\n"
        },
        {
            "id": "chunk_5_GithubPullRequestTriggerBlock_4",
            "code": "    def __init__(self):\n        from backend.integrations.webhooks.github import GithubWebhookType\n\n        example_payload = json.loads(\n            self.EXAMPLE_PAYLOAD_FILE.read_text(encoding=\"utf-8\")\n        )\n\n        super().__init__(\n            id=\"6c60ec01-8128-419e-988f-96a063ee2fea\",\n            description=\"This block triggers on pull request events and outputs the event type and payload.\",\n            categories={BlockCategory.DEVELOPER_TOOLS, BlockCategory.INPUT},\n            input_schema=GithubPullRequestTriggerBlock.Input,\n            output_schema=GithubPullRequestTriggerBlock.Output,\n            # --8<-- [start:example-webhook_config]\n            webhook_config=BlockWebhookConfig(\n                provider=\"github\",\n                webhook_type=GithubWebhookType.REPO,\n                resource_format=\"{repo}\",\n                event_filter_input=\"events\",\n                event_format=\"pull_request.{event}\",\n            ),\n            # --8<-- [end:example-webhook_config]\n            test_input={\n                \"repo\": \"Significant-Gravitas/AutoGPT\",\n                \"events\": {\"opened\": True, \"synchronize\": True},\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"payload\": example_payload,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"payload\", example_payload),\n                (\"triggered_by_user\", example_payload[\"sender\"]),\n                (\"event\", example_payload[\"action\"]),\n                (\"number\", example_payload[\"number\"]),\n                (\"pull_request\", example_payload[\"pull_request\"]),\n                (\"pull_request_url\", example_payload[\"pull_request\"][\"html_url\"]),\n            ],\n        )\n"
        },
        {
            "id": "chunk_5_GithubPullRequestTriggerBlock_5",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:  # type: ignore\n        yield from super().run(input_data, **kwargs)\n        yield \"event\", input_data.payload[\"action\"]\n        yield \"number\", input_data.payload[\"number\"]\n        yield \"pull_request\", input_data.payload[\"pull_request\"]\n        yield \"pull_request_url\", input_data.payload[\"pull_request\"][\"html_url\"]\n"
        },
        {
            "id": "chunk_6_GithubPullRequestTriggerBlock.Input_1",
            "code": "    class Input(GitHubTriggerBase.Input):\n"
        },
        {
            "id": "chunk_6_GithubPullRequestTriggerBlock.Input_2",
            "code": "        class EventsFilter(BaseModel):\n"
        },
        {
            "id": "chunk_6_GithubPullRequestTriggerBlock.Input_3",
            "code": "            \"\"\"\n            https://docs.github.com/en/webhooks/webhook-events-and-payloads#pull_request\n            \"\"\"\n"
        },
        {
            "id": "chunk_6_GithubPullRequestTriggerBlock.Input_4",
            "code": "\n"
        },
        {
            "id": "chunk_6_GithubPullRequestTriggerBlock.Input_5",
            "code": "            opened: bool = False\n            edited: bool = False\n            closed: bool = False\n            reopened: bool = False\n            synchronize: bool = False\n            assigned: bool = False\n            unassigned: bool = False\n            labeled: bool = False\n            unlabeled: bool = False\n            converted_to_draft: bool = False\n            locked: bool = False\n            unlocked: bool = False\n            enqueued: bool = False\n            dequeued: bool = False\n            milestoned: bool = False\n            demilestoned: bool = False\n            ready_for_review: bool = False\n            review_requested: bool = False\n            review_request_removed: bool = False\n            auto_merge_enabled: bool = False\n            auto_merge_disabled: bool = False\n"
        },
        {
            "id": "chunk_6_GithubPullRequestTriggerBlock.Input_6",
            "code": "\n"
        },
        {
            "id": "chunk_6_GithubPullRequestTriggerBlock.Input_7",
            "code": "        events: EventsFilter = SchemaField(\n            title=\"Events\", description=\"The events to subscribe to\"\n        )\n"
        },
        {
            "id": "chunk_6_GithubPullRequestTriggerBlock.Input_8",
            "code": "        # --8<-- [end:example-event-filter]\n"
        },
        {
            "id": "chunk_6_GithubPullRequestTriggerBlock.Input_9",
            "code": "\n"
        },
        {
            "id": "chunk_7_GithubPullRequestTriggerBlock.Input.EventsFilter_1",
            "code": "        class EventsFilter(BaseModel):\n            \"\"\"\n            https://docs.github.com/en/webhooks/webhook-events-and-payloads#pull_request\n            \"\"\"\n\n            opened: bool = False\n            edited: bool = False\n            closed: bool = False\n            reopened: bool = False\n            synchronize: bool = False\n            assigned: bool = False\n            unassigned: bool = False\n            labeled: bool = False\n            unlabeled: bool = False\n            converted_to_draft: bool = False\n            locked: bool = False\n            unlocked: bool = False\n            enqueued: bool = False\n            dequeued: bool = False\n            milestoned: bool = False\n            demilestoned: bool = False\n            ready_for_review: bool = False\n            review_requested: bool = False\n            review_request_removed: bool = False\n            auto_merge_enabled: bool = False\n            auto_merge_disabled: bool = False\n\n"
        },
        {
            "id": "chunk_8_GithubPullRequestTriggerBlock.Output_1",
            "code": "    class Output(GitHubTriggerBase.Output):\n        event: str = SchemaField(\n            description=\"The PR event that triggered the webhook (e.g. 'opened')\"\n        )\n        number: int = SchemaField(description=\"The number of the affected pull request\")\n        pull_request: dict = SchemaField(\n            description=\"Object representing the affected pull request\"\n        )\n        pull_request_url: str = SchemaField(\n            description=\"The URL of the affected pull request\"\n        )\n"
        },
        {
            "id": "chunk_9_GithubPullRequestTriggerBlock.__init___1",
            "code": "    def __init__(self):\n        from backend.integrations.webhooks.github import GithubWebhookType\n"
        },
        {
            "id": "chunk_9_GithubPullRequestTriggerBlock.__init___2",
            "code": "        example_payload = json.loads(\n            self.EXAMPLE_PAYLOAD_FILE.read_text(encoding=\"utf-8\")\n        )\n"
        },
        {
            "id": "chunk_9_GithubPullRequestTriggerBlock.__init___3",
            "code": "        super().__init__(\n            id=\"6c60ec01-8128-419e-988f-96a063ee2fea\",\n            description=\"This block triggers on pull request events and outputs the event type and payload.\",\n            categories={BlockCategory.DEVELOPER_TOOLS, BlockCategory.INPUT},\n            input_schema=GithubPullRequestTriggerBlock.Input,\n            output_schema=GithubPullRequestTriggerBlock.Output,\n            # --8<-- [start:example-webhook_config]\n            webhook_config=BlockWebhookConfig(\n                provider=\"github\",\n                webhook_type=GithubWebhookType.REPO,\n                resource_format=\"{repo}\",\n                event_filter_input=\"events\",\n                event_format=\"pull_request.{event}\",\n            ),\n            # --8<-- [end:example-webhook_config]\n            test_input={\n                \"repo\": \"Significant-Gravitas/AutoGPT\",\n                \"events\": {\"opened\": True, \"synchronize\": True},\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"payload\": example_payload,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"payload\", example_payload),\n                (\"triggered_by_user\", example_payload[\"sender\"]),\n                (\"event\", example_payload[\"action\"]),\n                (\"number\", example_payload[\"number\"]),\n                (\"pull_request\", example_payload[\"pull_request\"]),\n                (\"pull_request_url\", example_payload[\"pull_request\"][\"html_url\"]),\n            ],\n        )\n"
        },
        {
            "id": "chunk_10_GithubPullRequestTriggerBlock.run_1",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:  # type: ignore\n        yield from super().run(input_data, **kwargs)\n"
        },
        {
            "id": "chunk_10_GithubPullRequestTriggerBlock.run_2",
            "code": "        yield \"event\", input_data.payload[\"action\"]\n"
        },
        {
            "id": "chunk_10_GithubPullRequestTriggerBlock.run_3",
            "code": "        yield \"number\", input_data.payload[\"number\"]\n"
        },
        {
            "id": "chunk_10_GithubPullRequestTriggerBlock.run_4",
            "code": "        yield \"pull_request\", input_data.payload[\"pull_request\"]\n"
        },
        {
            "id": "chunk_10_GithubPullRequestTriggerBlock.run_5",
            "code": "        yield \"pull_request_url\", input_data.payload[\"pull_request\"][\"html_url\"]\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_0_GlobalBlock_5",
            "to": "chunk_0_GlobalBlock_6"
        },
        {
            "from": "chunk_1_GitHubTriggerBase_1",
            "to": "chunk_1_GitHubTriggerBase_2"
        },
        {
            "from": "chunk_1_GitHubTriggerBase_2",
            "to": "chunk_1_GitHubTriggerBase_3"
        },
        {
            "from": "chunk_1_GitHubTriggerBase_3",
            "to": "chunk_1_GitHubTriggerBase_4"
        },
        {
            "from": "chunk_1_GitHubTriggerBase_4",
            "to": "chunk_1_GitHubTriggerBase_5"
        },
        {
            "from": "chunk_1_GitHubTriggerBase_5",
            "to": "chunk_1_GitHubTriggerBase_6"
        },
        {
            "from": "chunk_1_GitHubTriggerBase_6",
            "to": "chunk_1_GitHubTriggerBase_7"
        },
        {
            "from": "chunk_1_GitHubTriggerBase_7",
            "to": "chunk_1_GitHubTriggerBase_8"
        },
        {
            "from": "chunk_1_GitHubTriggerBase_8",
            "to": "chunk_1_GitHubTriggerBase_9"
        },
        {
            "from": "chunk_1_GitHubTriggerBase_9",
            "to": "chunk_1_GitHubTriggerBase_10"
        },
        {
            "from": "chunk_1_GitHubTriggerBase_10",
            "to": "chunk_1_GitHubTriggerBase_11"
        },
        {
            "from": "chunk_1_GitHubTriggerBase_11",
            "to": "chunk_1_GitHubTriggerBase_12"
        },
        {
            "from": "chunk_2_GitHubTriggerBase.Input_1",
            "to": "chunk_2_GitHubTriggerBase.Input_2"
        },
        {
            "from": "chunk_2_GitHubTriggerBase.Input_2",
            "to": "chunk_2_GitHubTriggerBase.Input_3"
        },
        {
            "from": "chunk_2_GitHubTriggerBase.Input_3",
            "to": "chunk_2_GitHubTriggerBase.Input_4"
        },
        {
            "from": "chunk_3_GitHubTriggerBase.Output_1",
            "to": "chunk_3_GitHubTriggerBase.Output_2"
        },
        {
            "from": "chunk_3_GitHubTriggerBase.Output_2",
            "to": "chunk_3_GitHubTriggerBase.Output_3"
        },
        {
            "from": "chunk_3_GitHubTriggerBase.Output_3",
            "to": "chunk_3_GitHubTriggerBase.Output_4"
        },
        {
            "from": "chunk_4_GitHubTriggerBase.run_1",
            "to": "chunk_4_GitHubTriggerBase.run_2"
        },
        {
            "from": "chunk_5_GithubPullRequestTriggerBlock_1",
            "to": "chunk_5_GithubPullRequestTriggerBlock_2"
        },
        {
            "from": "chunk_5_GithubPullRequestTriggerBlock_2",
            "to": "chunk_5_GithubPullRequestTriggerBlock_3"
        },
        {
            "from": "chunk_5_GithubPullRequestTriggerBlock_3",
            "to": "chunk_5_GithubPullRequestTriggerBlock_4"
        },
        {
            "from": "chunk_5_GithubPullRequestTriggerBlock_4",
            "to": "chunk_5_GithubPullRequestTriggerBlock_5"
        },
        {
            "from": "chunk_6_GithubPullRequestTriggerBlock.Input_1",
            "to": "chunk_6_GithubPullRequestTriggerBlock.Input_2"
        },
        {
            "from": "chunk_6_GithubPullRequestTriggerBlock.Input_2",
            "to": "chunk_6_GithubPullRequestTriggerBlock.Input_3"
        },
        {
            "from": "chunk_6_GithubPullRequestTriggerBlock.Input_3",
            "to": "chunk_6_GithubPullRequestTriggerBlock.Input_4"
        },
        {
            "from": "chunk_6_GithubPullRequestTriggerBlock.Input_4",
            "to": "chunk_6_GithubPullRequestTriggerBlock.Input_5"
        },
        {
            "from": "chunk_6_GithubPullRequestTriggerBlock.Input_5",
            "to": "chunk_6_GithubPullRequestTriggerBlock.Input_6"
        },
        {
            "from": "chunk_6_GithubPullRequestTriggerBlock.Input_6",
            "to": "chunk_6_GithubPullRequestTriggerBlock.Input_7"
        },
        {
            "from": "chunk_6_GithubPullRequestTriggerBlock.Input_7",
            "to": "chunk_6_GithubPullRequestTriggerBlock.Input_8"
        },
        {
            "from": "chunk_6_GithubPullRequestTriggerBlock.Input_8",
            "to": "chunk_6_GithubPullRequestTriggerBlock.Input_9"
        },
        {
            "from": "chunk_9_GithubPullRequestTriggerBlock.__init___1",
            "to": "chunk_9_GithubPullRequestTriggerBlock.__init___2"
        },
        {
            "from": "chunk_9_GithubPullRequestTriggerBlock.__init___2",
            "to": "chunk_9_GithubPullRequestTriggerBlock.__init___3"
        },
        {
            "from": "chunk_10_GithubPullRequestTriggerBlock.run_1",
            "to": "chunk_10_GithubPullRequestTriggerBlock.run_2"
        },
        {
            "from": "chunk_10_GithubPullRequestTriggerBlock.run_2",
            "to": "chunk_10_GithubPullRequestTriggerBlock.run_3"
        },
        {
            "from": "chunk_10_GithubPullRequestTriggerBlock.run_3",
            "to": "chunk_10_GithubPullRequestTriggerBlock.run_4"
        },
        {
            "from": "chunk_10_GithubPullRequestTriggerBlock.run_4",
            "to": "chunk_10_GithubPullRequestTriggerBlock.run_5"
        }
    ]
}