{
    "nodes": [
        {
            "id": "chunk_0_get_highest_set_bit_position_1",
            "code": "def get_highest_set_bit_position(number: int) -> int:\n    \"\"\"\n    Returns position of the highest set bit of a number.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious\n    >>> get_highest_set_bit_position(25)\n    5\n    >>> get_highest_set_bit_position(37)\n    6\n    >>> get_highest_set_bit_position(1)\n    1\n    >>> get_highest_set_bit_position(4)\n    3\n    >>> get_highest_set_bit_position(0)\n    0\n    >>> get_highest_set_bit_position(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be an 'int' type\n    \"\"\"\n"
        },
        {
            "id": "chunk_0_get_highest_set_bit_position_2",
            "code": "    if not isinstance(number, int):\n        raise TypeError(\"Input value must be an 'int' type\")\n"
        },
        {
            "id": "chunk_0_get_highest_set_bit_position_3",
            "code": "    position = 0\n"
        },
        {
            "id": "chunk_0_get_highest_set_bit_position_4",
            "code": "    while number:\n        position += 1\n        number >>= 1\n"
        },
        {
            "id": "chunk_0_get_highest_set_bit_position_5",
            "code": "    return position\n"
        },
        {
            "id": "chunk_1_GlobalBlock_1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_1_GlobalBlock_2",
            "code": "    import doctest\n\n    doctest.testmod()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_get_highest_set_bit_position_1",
            "to": "chunk_0_get_highest_set_bit_position_2"
        },
        {
            "from": "chunk_0_get_highest_set_bit_position_2",
            "to": "chunk_0_get_highest_set_bit_position_3"
        },
        {
            "from": "chunk_0_get_highest_set_bit_position_3",
            "to": "chunk_0_get_highest_set_bit_position_4"
        },
        {
            "from": "chunk_0_get_highest_set_bit_position_4",
            "to": "chunk_0_get_highest_set_bit_position_4"
        },
        {
            "from": "chunk_0_get_highest_set_bit_position_4",
            "to": "chunk_0_get_highest_set_bit_position_5"
        },
        {
            "from": "chunk_1_GlobalBlock_1",
            "to": "chunk_1_GlobalBlock_2"
        }
    ]
}