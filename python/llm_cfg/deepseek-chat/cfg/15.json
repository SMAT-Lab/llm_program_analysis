{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from __future__ import annotations\n"
        },
        {
            "id": "chunk_1_IIRFilter_1",
            "code": "class IIRFilter:\n    r\"\"\"\n    N-Order IIR filter\n    Assumes working with float samples normalized on [-1, 1]\n\n    ---\n\n    Implementation details:\n    Based on the 2nd-order function from\n    https://en.wikipedia.org/wiki/Digital_biquad_filter,\n    this generalized N-order function was made.\n\n    Using the following transfer function\n        .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}}\n                  {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}}\n\n    we can rewrite this to\n        .. math:: y[n]={\\frac{1}{a_{0}}}\n                  \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)-\n                  \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right)\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_IIRFilter_2",
            "code": "    def __init__(self, order: int) -> None:\n        self.order = order\n\n        # a_{0} ... a_{k}\n        self.a_coeffs = [1.0] + [0.0] * order\n        # b_{0} ... b_{k}\n        self.b_coeffs = [1.0] + [0.0] * order\n\n        # x[n-1] ... x[n-k]\n        self.input_history = [0.0] * self.order\n        # y[n-1] ... y[n-k]\n        self.output_history = [0.0] * self.order\n\n"
        },
        {
            "id": "chunk_1_IIRFilter_3",
            "code": "    def set_coefficients(self, a_coeffs: list[float], b_coeffs: list[float]) -> None:\n        \"\"\"\n        Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n\n        This method works well with scipy's filter design functions\n\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        ...                                          btype='lowpass',\n        ...                                          fs=48000)\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"\n"
        },
        {
            "id": "chunk_1_IIRFilter_4",
            "code": "        if len(a_coeffs) < self.order:\n            a_coeffs = [1.0, *a_coeffs]\n"
        },
        {
            "id": "chunk_1_IIRFilter_5",
            "code": "        if len(a_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n"
        },
        {
            "id": "chunk_1_IIRFilter_6",
            "code": "        if len(b_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n"
        },
        {
            "id": "chunk_1_IIRFilter_7",
            "code": "        self.a_coeffs = a_coeffs\n        self.b_coeffs = b_coeffs\n"
        },
        {
            "id": "chunk_1_IIRFilter_8",
            "code": "    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate :math:`y[n]`\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"\n"
        },
        {
            "id": "chunk_1_IIRFilter_9",
            "code": "        result = 0.0\n"
        },
        {
            "id": "chunk_1_IIRFilter_10",
            "code": "        # Start at index 1 and do index 0 at the end.\n        for i in range(1, self.order + 1):\n            result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )\n"
        },
        {
            "id": "chunk_1_IIRFilter_11",
            "code": "        result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]\n"
        },
        {
            "id": "chunk_1_IIRFilter_12",
            "code": "        self.input_history[1:] = self.input_history[:-1]\n        self.output_history[1:] = self.output_history[:-1]\n"
        },
        {
            "id": "chunk_1_IIRFilter_13",
            "code": "        self.input_history[0] = sample\n        self.output_history[0] = result\n"
        },
        {
            "id": "chunk_1_IIRFilter_14",
            "code": "        return result\n"
        },
        {
            "id": "chunk_2___init___1",
            "code": "    def __init__(self, order: int) -> None:\n        self.order = order\n"
        },
        {
            "id": "chunk_2___init___2",
            "code": "        # a_{0} ... a_{k}\n        self.a_coeffs = [1.0] + [0.0] * order\n"
        },
        {
            "id": "chunk_2___init___3",
            "code": "        # b_{0} ... b_{k}\n        self.b_coeffs = [1.0] + [0.0] * order\n"
        },
        {
            "id": "chunk_2___init___4",
            "code": "        # x[n-1] ... x[n-k]\n        self.input_history = [0.0] * self.order\n"
        },
        {
            "id": "chunk_2___init___5",
            "code": "        # y[n-1] ... y[n-k]\n        self.output_history = [0.0] * self.order\n"
        },
        {
            "id": "chunk_3_set_coefficients_1",
            "code": "    def set_coefficients(self, a_coeffs: list[float], b_coeffs: list[float]) -> None:\n        \"\"\"\n        Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n\n        This method works well with scipy's filter design functions\n\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        ...                                          btype='lowpass',\n        ...                                          fs=48000)\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"\n"
        },
        {
            "id": "chunk_3_set_coefficients_2",
            "code": "        if len(a_coeffs) < self.order:\n            a_coeffs = [1.0, *a_coeffs]\n"
        },
        {
            "id": "chunk_3_set_coefficients_3",
            "code": "        if len(a_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n"
        },
        {
            "id": "chunk_3_set_coefficients_4",
            "code": "        if len(b_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n"
        },
        {
            "id": "chunk_3_set_coefficients_5",
            "code": "        self.a_coeffs = a_coeffs\n        self.b_coeffs = b_coeffs\n"
        },
        {
            "id": "chunk_4_process_1",
            "code": "    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate :math:`y[n]`\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"\n"
        },
        {
            "id": "chunk_4_process_2",
            "code": "        result = 0.0\n"
        },
        {
            "id": "chunk_4_process_3",
            "code": "        # Start at index 1 and do index 0 at the end.\n        for i in range(1, self.order + 1):\n            result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )\n"
        },
        {
            "id": "chunk_4_process_4",
            "code": "        result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]\n"
        },
        {
            "id": "chunk_4_process_5",
            "code": "        self.input_history[1:] = self.input_history[:-1]\n        self.output_history[1:] = self.output_history[:-1]\n"
        },
        {
            "id": "chunk_4_process_6",
            "code": "        self.input_history[0] = sample\n        self.output_history[0] = result\n"
        },
        {
            "id": "chunk_4_process_7",
            "code": "        return result\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_1_IIRFilter_3",
            "to": "chunk_1_IIRFilter_4"
        },
        {
            "from": "chunk_1_IIRFilter_4",
            "to": "chunk_1_IIRFilter_5"
        },
        {
            "from": "chunk_1_IIRFilter_5",
            "to": "chunk_1_IIRFilter_6"
        },
        {
            "from": "chunk_1_IIRFilter_6",
            "to": "chunk_1_IIRFilter_7"
        },
        {
            "from": "chunk_1_IIRFilter_8",
            "to": "chunk_1_IIRFilter_9"
        },
        {
            "from": "chunk_1_IIRFilter_9",
            "to": "chunk_1_IIRFilter_10"
        },
        {
            "from": "chunk_1_IIRFilter_10",
            "to": "chunk_1_IIRFilter_11"
        },
        {
            "from": "chunk_1_IIRFilter_11",
            "to": "chunk_1_IIRFilter_12"
        },
        {
            "from": "chunk_1_IIRFilter_12",
            "to": "chunk_1_IIRFilter_13"
        },
        {
            "from": "chunk_1_IIRFilter_13",
            "to": "chunk_1_IIRFilter_14"
        },
        {
            "from": "chunk_2___init___1",
            "to": "chunk_2___init___2"
        },
        {
            "from": "chunk_2___init___2",
            "to": "chunk_2___init___3"
        },
        {
            "from": "chunk_2___init___3",
            "to": "chunk_2___init___4"
        },
        {
            "from": "chunk_2___init___4",
            "to": "chunk_2___init___5"
        },
        {
            "from": "chunk_3_set_coefficients_1",
            "to": "chunk_3_set_coefficients_2"
        },
        {
            "from": "chunk_3_set_coefficients_2",
            "to": "chunk_3_set_coefficients_3"
        },
        {
            "from": "chunk_3_set_coefficients_3",
            "to": "chunk_3_set_coefficients_4"
        },
        {
            "from": "chunk_3_set_coefficients_4",
            "to": "chunk_3_set_coefficients_5"
        },
        {
            "from": "chunk_4_process_1",
            "to": "chunk_4_process_2"
        },
        {
            "from": "chunk_4_process_2",
            "to": "chunk_4_process_3"
        },
        {
            "from": "chunk_4_process_3",
            "to": "chunk_4_process_4"
        },
        {
            "from": "chunk_4_process_4",
            "to": "chunk_4_process_5"
        },
        {
            "from": "chunk_4_process_5",
            "to": "chunk_4_process_6"
        },
        {
            "from": "chunk_4_process_6",
            "to": "chunk_4_process_7"
        }
    ]
}