{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "# -*- coding: utf-8 -*-\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_QueryApi_1",
            "code": "class QueryApi(object):\n\n"
        },
        {
            "id": "chunk_1_QueryApi_2",
            "code": "    def __init__(self, memory_cache, reverse_index_cluster):\n        self.memory_cache = memory_cache\n        self.reverse_index_cluster = reverse_index_cluster\n\n"
        },
        {
            "id": "chunk_1_QueryApi_3",
            "code": "    def parse_query(self, query):\n        \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n        ...\n\n"
        },
        {
            "id": "chunk_1_QueryApi_4",
            "code": "    def process_query(self, query):\n        query = self.parse_query(query)\n        results = self.memory_cache.get(query)\n"
        },
        {
            "id": "chunk_1_QueryApi_5",
            "code": "        if results is None:\n            results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)\n"
        },
        {
            "id": "chunk_1_QueryApi_6",
            "code": "        return results\n"
        },
        {
            "id": "chunk_2_QueryApi.__init___1",
            "code": "    def __init__(self, memory_cache, reverse_index_cluster):\n        self.memory_cache = memory_cache\n        self.reverse_index_cluster = reverse_index_cluster\n"
        },
        {
            "id": "chunk_3_QueryApi.parse_query_1",
            "code": "    def parse_query(self, query):\n        \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n"
        },
        {
            "id": "chunk_3_QueryApi.parse_query_2",
            "code": "        ...\n"
        },
        {
            "id": "chunk_4_QueryApi.process_query_1",
            "code": "    def process_query(self, query):\n        query = self.parse_query(query)\n        results = self.memory_cache.get(query)\n"
        },
        {
            "id": "chunk_4_QueryApi.process_query_2",
            "code": "        if results is None:\n            results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)\n"
        },
        {
            "id": "chunk_4_QueryApi.process_query_3",
            "code": "        return results\n"
        },
        {
            "id": "chunk_5_Node_1",
            "code": "class Node(object):\n\n"
        },
        {
            "id": "chunk_5_Node_2",
            "code": "    def __init__(self, query, results):\n        self.query = query\n        self.results = results\n"
        },
        {
            "id": "chunk_5_Node_3",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_6_Node.__init___1",
            "code": "    def __init__(self, query, results):\n        self.query = query\n        self.results = results\n"
        },
        {
            "id": "chunk_7_LinkedList_1",
            "code": "class LinkedList(object):\n\n"
        },
        {
            "id": "chunk_7_LinkedList_2",
            "code": "    def __init__(self):\n        self.head = None\n        self.tail = None\n\n"
        },
        {
            "id": "chunk_7_LinkedList_3",
            "code": "    def move_to_front(self, node):\n        ...\n"
        },
        {
            "id": "chunk_7_LinkedList_4",
            "code": "    def append_to_front(self, node):\n        ...\n"
        },
        {
            "id": "chunk_7_LinkedList_5",
            "code": "    def remove_from_tail(self):\n        ...\n"
        },
        {
            "id": "chunk_8_LinkedList.__init___1",
            "code": "    def __init__(self):\n        self.head = None\n        self.tail = None\n"
        },
        {
            "id": "chunk_9_LinkedList.move_to_front_1",
            "code": "    def move_to_front(self, node):\n        ...\n"
        },
        {
            "id": "chunk_10_LinkedList.append_to_front_1",
            "code": "    def append_to_front(self, node):\n        ...\n"
        },
        {
            "id": "chunk_11_LinkedList.remove_from_tail_1",
            "code": "    def remove_from_tail(self):\n        ...\n"
        },
        {
            "id": "chunk_12_Cache_1",
            "code": "class Cache(object):\n\n"
        },
        {
            "id": "chunk_12_Cache_2",
            "code": "    def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}\n        self.linked_list = LinkedList()\n\n"
        },
        {
            "id": "chunk_12_Cache_3",
            "code": "    def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n"
        },
        {
            "id": "chunk_12_Cache_4",
            "code": "        node = self.lookup[query]\n        if node is None:\n"
        },
        {
            "id": "chunk_12_Cache_5",
            "code": "            return None\n"
        },
        {
            "id": "chunk_12_Cache_6",
            "code": "        self.linked_list.move_to_front(node)\n        return node.results\n"
        },
        {
            "id": "chunk_12_Cache_7",
            "code": "    def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n"
        },
        {
            "id": "chunk_12_Cache_8",
            "code": "        node = self.map[query]\n        if node is not None:\n"
        },
        {
            "id": "chunk_12_Cache_9",
            "code": "            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)\n"
        },
        {
            "id": "chunk_12_Cache_10",
            "code": "        else:\n            # Key does not exist in cache\n"
        },
        {
            "id": "chunk_12_Cache_11",
            "code": "            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n"
        },
        {
            "id": "chunk_12_Cache_12",
            "code": "                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n"
        },
        {
            "id": "chunk_12_Cache_13",
            "code": "            else:\n                self.size += 1\n"
        },
        {
            "id": "chunk_12_Cache_14",
            "code": "            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node\n"
        },
        {
            "id": "chunk_13_Cache.__init___1",
            "code": "    def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}\n        self.linked_list = LinkedList()\n"
        },
        {
            "id": "chunk_14_Cache.get_1",
            "code": "    def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n"
        },
        {
            "id": "chunk_14_Cache.get_2",
            "code": "        node = self.lookup[query]\n"
        },
        {
            "id": "chunk_14_Cache.get_3",
            "code": "        if node is None:\n            return None\n"
        },
        {
            "id": "chunk_14_Cache.get_4",
            "code": "        self.linked_list.move_to_front(node)\n"
        },
        {
            "id": "chunk_14_Cache.get_5",
            "code": "        return node.results\n"
        },
        {
            "id": "chunk_15_Cache.set_1",
            "code": "    def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n"
        },
        {
            "id": "chunk_15_Cache.set_2",
            "code": "        node = self.map[query]\n"
        },
        {
            "id": "chunk_15_Cache.set_3",
            "code": "        if node is not None:\n            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)\n"
        },
        {
            "id": "chunk_15_Cache.set_4",
            "code": "        else:\n            # Key does not exist in cache\n"
        },
        {
            "id": "chunk_15_Cache.set_5",
            "code": "            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n"
        },
        {
            "id": "chunk_15_Cache.set_6",
            "code": "            else:\n                self.size += 1\n"
        },
        {
            "id": "chunk_15_Cache.set_7",
            "code": "            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_QueryApi_1",
            "to": "chunk_1_QueryApi_2"
        },
        {
            "from": "chunk_1_QueryApi_4",
            "to": "chunk_1_QueryApi_5"
        },
        {
            "from": "chunk_1_QueryApi_4",
            "to": "chunk_1_QueryApi_6"
        },
        {
            "from": "chunk_1_QueryApi_5",
            "to": "chunk_1_QueryApi_6"
        },
        {
            "from": "chunk_3_QueryApi.parse_query_1",
            "to": "chunk_3_QueryApi.parse_query_2"
        },
        {
            "from": "chunk_4_QueryApi.process_query_1",
            "to": "chunk_4_QueryApi.process_query_2"
        },
        {
            "from": "chunk_4_QueryApi.process_query_1",
            "to": "chunk_4_QueryApi.process_query_3"
        },
        {
            "from": "chunk_4_QueryApi.process_query_2",
            "to": "chunk_4_QueryApi.process_query_3"
        },
        {
            "from": "chunk_5_Node_1",
            "to": "chunk_5_Node_2"
        },
        {
            "from": "chunk_5_Node_2",
            "to": "chunk_5_Node_3"
        },
        {
            "from": "chunk_12_Cache_1",
            "to": "chunk_12_Cache_2"
        },
        {
            "from": "chunk_12_Cache_3",
            "to": "chunk_12_Cache_4"
        },
        {
            "from": "chunk_12_Cache_4",
            "to": "chunk_12_Cache_5"
        },
        {
            "from": "chunk_12_Cache_4",
            "to": "chunk_12_Cache_6"
        },
        {
            "from": "chunk_12_Cache_7",
            "to": "chunk_12_Cache_8"
        },
        {
            "from": "chunk_12_Cache_8",
            "to": "chunk_12_Cache_9"
        },
        {
            "from": "chunk_12_Cache_8",
            "to": "chunk_12_Cache_10"
        },
        {
            "from": "chunk_12_Cache_10",
            "to": "chunk_12_Cache_11"
        },
        {
            "from": "chunk_12_Cache_11",
            "to": "chunk_12_Cache_12"
        },
        {
            "from": "chunk_12_Cache_11",
            "to": "chunk_12_Cache_13"
        },
        {
            "from": "chunk_12_Cache_12",
            "to": "chunk_12_Cache_14"
        },
        {
            "from": "chunk_12_Cache_13",
            "to": "chunk_12_Cache_14"
        },
        {
            "from": "chunk_14_Cache.get_1",
            "to": "chunk_14_Cache.get_2"
        },
        {
            "from": "chunk_14_Cache.get_2",
            "to": "chunk_14_Cache.get_3"
        },
        {
            "from": "chunk_14_Cache.get_3",
            "to": "chunk_14_Cache.get_4"
        },
        {
            "from": "chunk_14_Cache.get_3",
            "to": "chunk_14_Cache.get_5"
        },
        {
            "from": "chunk_14_Cache.get_4",
            "to": "chunk_14_Cache.get_5"
        },
        {
            "from": "chunk_15_Cache.set_1",
            "to": "chunk_15_Cache.set_2"
        },
        {
            "from": "chunk_15_Cache.set_2",
            "to": "chunk_15_Cache.set_3"
        },
        {
            "from": "chunk_15_Cache.set_2",
            "to": "chunk_15_Cache.set_4"
        },
        {
            "from": "chunk_15_Cache.set_4",
            "to": "chunk_15_Cache.set_5"
        },
        {
            "from": "chunk_15_Cache.set_4",
            "to": "chunk_15_Cache.set_6"
        },
        {
            "from": "chunk_15_Cache.set_5",
            "to": "chunk_15_Cache.set_7"
        },
        {
            "from": "chunk_15_Cache.set_6",
            "to": "chunk_15_Cache.set_7"
        }
    ]
}