{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "# -*- coding: utf-8 -*-\n\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import unittest\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from validate.links import find_links_in_text\nfrom validate.links import check_duplicate_links\nfrom validate.links import fake_user_agent\nfrom validate.links import get_host_from_link\nfrom validate.links import has_cloudflare_protection\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_FakeResponse_1",
            "code": "class FakeResponse():\n"
        },
        {
            "id": "chunk_1_FakeResponse_2",
            "code": "    def __init__(self, code: int, headers: dict, text: str) -> None:\n        self.status_code = code\n        self.headers = headers\n        self.text = text\n"
        },
        {
            "id": "chunk_2_TestValidateLinks_1",
            "code": "class TestValidateLinks(unittest.TestCase):\n\n"
        },
        {
            "id": "chunk_2_TestValidateLinks_2",
            "code": "    def setUp(self):\n        self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]\n        self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]\n\n        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n\n        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n\n        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'\n\n"
        },
        {
            "id": "chunk_2_TestValidateLinks_3",
            "code": "    def test_find_link_in_text(self):\n        text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\n"
        },
        {
            "id": "chunk_2_TestValidateLinks_4",
            "code": "        links = find_links_in_text(text)\n\n        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)\n\n"
        },
        {
            "id": "chunk_2_TestValidateLinks_5",
            "code": "        for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)\n\n"
        },
        {
            "id": "chunk_2_TestValidateLinks_6",
            "code": "    def test_find_link_in_text_with_invalid_argument(self):\n        with self.assertRaises(TypeError):\n            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)\n\n"
        },
        {
            "id": "chunk_2_TestValidateLinks_7",
            "code": "    def test_if_check_duplicate_links_has_the_correct_return(self):\n        result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n\n        self.assertIsInstance(result_1, tuple)\n        self.assertIsInstance(result_2, tuple)\n\n        has_duplicate_links, links = result_1\n        no_duplicate_links, no_links = result_2\n\n        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)\n\n        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)\n\n        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)\n\n"
        },
        {
            "id": "chunk_2_TestValidateLinks_8",
            "code": "    def test_if_fake_user_agent_has_a_str_as_return(self):\n        user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)\n\n"
        },
        {
            "id": "chunk_2_TestValidateLinks_9",
            "code": "    def test_get_host_from_link(self):\n        links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]\n\n        for link in links:\n            host = get_host_from_link(link)\n\n            with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)\n\n"
        },
        {
            "id": "chunk_2_TestValidateLinks_10",
            "code": "        with self.assertRaises(TypeError):\n            get_host_from_link()\n\n"
        },
        {
            "id": "chunk_2_TestValidateLinks_11",
            "code": "    def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n        resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n\n        self.assertTrue(result1)\n        self.assertTrue(result2)\n\n"
        },
        {
            "id": "chunk_2_TestValidateLinks_12",
            "code": "    def test_has_cloudflare_protection_when_there_is_no_protection(self):\n        resp_without_cloudflare_protection1 = FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection2 = FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        resp_without_cloudflare_protection3 = FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n\n        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n\n        self.assertFalse(result1)\n        self.assertFalse(result2)\n        self.assertFalse(result3)\n\n"
        },
        {
            "id": "chunk_3_setUp_1",
            "code": "    def setUp(self):\n"
        },
        {
            "id": "chunk_3_setUp_2",
            "code": "        self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]\n"
        },
        {
            "id": "chunk_3_setUp_3",
            "code": "        self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]\n"
        },
        {
            "id": "chunk_3_setUp_4",
            "code": "        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n"
        },
        {
            "id": "chunk_3_setUp_5",
            "code": "        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n"
        },
        {
            "id": "chunk_3_setUp_6",
            "code": "        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'\n"
        },
        {
            "id": "chunk_4_test_find_link_in_text_1",
            "code": "    def test_find_link_in_text(self):\n"
        },
        {
            "id": "chunk_4_test_find_link_in_text_2",
            "code": "        text = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\n"
        },
        {
            "id": "chunk_4_test_find_link_in_text_3",
            "code": "        links = find_links_in_text(text)\n"
        },
        {
            "id": "chunk_4_test_find_link_in_text_4",
            "code": "        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)\n"
        },
        {
            "id": "chunk_4_test_find_link_in_text_5",
            "code": "        for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)\n"
        },
        {
            "id": "chunk_5_test_find_link_in_text_with_invalid_argument_1",
            "code": "    def test_find_link_in_text_with_invalid_argument(self):\n"
        },
        {
            "id": "chunk_5_test_find_link_in_text_with_invalid_argument_2",
            "code": "        with self.assertRaises(TypeError):\n            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)\n"
        },
        {
            "id": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_1",
            "code": "    def test_if_check_duplicate_links_has_the_correct_return(self):\n"
        },
        {
            "id": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_2",
            "code": "        result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n"
        },
        {
            "id": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_3",
            "code": "        self.assertIsInstance(result_1, tuple)\n        self.assertIsInstance(result_2, tuple)\n"
        },
        {
            "id": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_4",
            "code": "        has_duplicate_links, links = result_1\n        no_duplicate_links, no_links = result_2\n"
        },
        {
            "id": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_5",
            "code": "        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)\n"
        },
        {
            "id": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_6",
            "code": "        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)\n"
        },
        {
            "id": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_7",
            "code": "        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)\n"
        },
        {
            "id": "chunk_7_test_if_fake_user_agent_has_a_str_as_return_1",
            "code": "    def test_if_fake_user_agent_has_a_str_as_return(self):\n        user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)\n"
        },
        {
            "id": "chunk_8_test_get_host_from_link_1",
            "code": "    def test_get_host_from_link(self):\n"
        },
        {
            "id": "chunk_8_test_get_host_from_link_2",
            "code": "        links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]\n"
        },
        {
            "id": "chunk_8_test_get_host_from_link_3",
            "code": "        for link in links:\n            host = get_host_from_link(link)\n"
        },
        {
            "id": "chunk_8_test_get_host_from_link_4",
            "code": "            with self.subTest():\n                self.assertIsInstance(host, str)\n\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)\n"
        },
        {
            "id": "chunk_8_test_get_host_from_link_5",
            "code": "        with self.assertRaises(TypeError):\n            get_host_from_link()\n"
        },
        {
            "id": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_1",
            "code": "    def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n"
        },
        {
            "id": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_2",
            "code": "        resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n"
        },
        {
            "id": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_3",
            "code": "        resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )\n"
        },
        {
            "id": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_4",
            "code": "        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n"
        },
        {
            "id": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_5",
            "code": "        self.assertTrue(result1)\n        self.assertTrue(result2)\n"
        },
        {
            "id": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_1",
            "code": "    def test_has_cloudflare_protection_when_there_is_no_protection(self):\n"
        },
        {
            "id": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_2",
            "code": "        resp_without_cloudflare_protection1 = FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n"
        },
        {
            "id": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_3",
            "code": "        resp_without_cloudflare_protection2 = FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n"
        },
        {
            "id": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_4",
            "code": "        resp_without_cloudflare_protection3 = FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n"
        },
        {
            "id": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_5",
            "code": "        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n"
        },
        {
            "id": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_6",
            "code": "        self.assertFalse(result1)\n        self.assertFalse(result2)\n        self.assertFalse(result3)\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_2_TestValidateLinks_1",
            "to": "chunk_2_TestValidateLinks_2"
        },
        {
            "from": "chunk_2_TestValidateLinks_2",
            "to": "chunk_2_TestValidateLinks_3"
        },
        {
            "from": "chunk_2_TestValidateLinks_2",
            "to": "chunk_2_TestValidateLinks_6"
        },
        {
            "from": "chunk_2_TestValidateLinks_2",
            "to": "chunk_2_TestValidateLinks_7"
        },
        {
            "from": "chunk_2_TestValidateLinks_2",
            "to": "chunk_2_TestValidateLinks_8"
        },
        {
            "from": "chunk_2_TestValidateLinks_2",
            "to": "chunk_2_TestValidateLinks_9"
        },
        {
            "from": "chunk_2_TestValidateLinks_2",
            "to": "chunk_2_TestValidateLinks_11"
        },
        {
            "from": "chunk_2_TestValidateLinks_2",
            "to": "chunk_2_TestValidateLinks_12"
        },
        {
            "from": "chunk_2_TestValidateLinks_3",
            "to": "chunk_2_TestValidateLinks_4"
        },
        {
            "from": "chunk_2_TestValidateLinks_4",
            "to": "chunk_2_TestValidateLinks_5"
        },
        {
            "from": "chunk_2_TestValidateLinks_9",
            "to": "chunk_2_TestValidateLinks_10"
        },
        {
            "from": "chunk_3_setUp_1",
            "to": "chunk_3_setUp_2"
        },
        {
            "from": "chunk_3_setUp_2",
            "to": "chunk_3_setUp_3"
        },
        {
            "from": "chunk_3_setUp_3",
            "to": "chunk_3_setUp_4"
        },
        {
            "from": "chunk_3_setUp_4",
            "to": "chunk_3_setUp_5"
        },
        {
            "from": "chunk_3_setUp_5",
            "to": "chunk_3_setUp_6"
        },
        {
            "from": "chunk_4_test_find_link_in_text_1",
            "to": "chunk_4_test_find_link_in_text_2"
        },
        {
            "from": "chunk_4_test_find_link_in_text_2",
            "to": "chunk_4_test_find_link_in_text_3"
        },
        {
            "from": "chunk_4_test_find_link_in_text_3",
            "to": "chunk_4_test_find_link_in_text_4"
        },
        {
            "from": "chunk_4_test_find_link_in_text_4",
            "to": "chunk_4_test_find_link_in_text_5"
        },
        {
            "from": "chunk_5_test_find_link_in_text_with_invalid_argument_1",
            "to": "chunk_5_test_find_link_in_text_with_invalid_argument_2"
        },
        {
            "from": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_1",
            "to": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_2"
        },
        {
            "from": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_2",
            "to": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_3"
        },
        {
            "from": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_3",
            "to": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_4"
        },
        {
            "from": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_4",
            "to": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_5"
        },
        {
            "from": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_5",
            "to": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_6"
        },
        {
            "from": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_6",
            "to": "chunk_6_test_if_check_duplicate_links_has_the_correct_return_7"
        },
        {
            "from": "chunk_8_test_get_host_from_link_1",
            "to": "chunk_8_test_get_host_from_link_2"
        },
        {
            "from": "chunk_8_test_get_host_from_link_2",
            "to": "chunk_8_test_get_host_from_link_3"
        },
        {
            "from": "chunk_8_test_get_host_from_link_3",
            "to": "chunk_8_test_get_host_from_link_4"
        },
        {
            "from": "chunk_8_test_get_host_from_link_4",
            "to": "chunk_8_test_get_host_from_link_3"
        },
        {
            "from": "chunk_8_test_get_host_from_link_4",
            "to": "chunk_8_test_get_host_from_link_5"
        },
        {
            "from": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_1",
            "to": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_2"
        },
        {
            "from": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_2",
            "to": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_3"
        },
        {
            "from": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_3",
            "to": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_4"
        },
        {
            "from": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_4",
            "to": "chunk_9_test_has_cloudflare_protection_with_code_403_and_503_in_response_5"
        },
        {
            "from": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_1",
            "to": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_2"
        },
        {
            "from": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_2",
            "to": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_3"
        },
        {
            "from": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_3",
            "to": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_4"
        },
        {
            "from": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_4",
            "to": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_5"
        },
        {
            "from": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_5",
            "to": "chunk_10_test_has_cloudflare_protection_when_there_is_no_protection_6"
        }
    ]
}