{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import logging\nimport os\nimport uuid\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import fastapi\nfrom google.cloud import storage\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "import backend.server.v2.store.exceptions\nfrom backend.util.settings import Settings\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "logger = logging.getLogger(__name__)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "ALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}\nALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\"}\nMAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB\n"
        },
        {
            "id": "chunk_1_check_media_exists_1",
            "code": "async def check_media_exists(user_id: str, filename: str) -> str | None:\n    \"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_check_media_exists_2",
            "code": "    try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n"
        },
        {
            "id": "chunk_1_check_media_exists_3",
            "code": "        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n"
        },
        {
            "id": "chunk_1_check_media_exists_4",
            "code": "        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n"
        },
        {
            "id": "chunk_1_check_media_exists_5",
            "code": "        return None\n"
        },
        {
            "id": "chunk_1_check_media_exists_6",
            "code": "    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None\n"
        },
        {
            "id": "chunk_2_upload_media_1",
            "code": "async def upload_media(\n    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False\n) -> str:\n"
        },
        {
            "id": "chunk_2_upload_media_2",
            "code": "    # Get file content for deeper validation\n"
        },
        {
            "id": "chunk_2_upload_media_3",
            "code": "    try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n"
        },
        {
            "id": "chunk_2_upload_media_4",
            "code": "    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n"
        },
        {
            "id": "chunk_2_upload_media_5",
            "code": "    # Validate file signature/magic bytes\n"
        },
        {
            "id": "chunk_2_upload_media_6",
            "code": "    if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )\n"
        },
        {
            "id": "chunk_2_upload_media_7",
            "code": "    elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )\n"
        },
        {
            "id": "chunk_2_upload_media_8",
            "code": "    settings = Settings()\n"
        },
        {
            "id": "chunk_2_upload_media_9",
            "code": "    # Check required settings first before doing any file processing\n    if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )\n"
        },
        {
            "id": "chunk_2_upload_media_10",
            "code": "    try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n"
        },
        {
            "id": "chunk_2_upload_media_11",
            "code": "        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n"
        },
        {
            "id": "chunk_2_upload_media_12",
            "code": "        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n"
        },
        {
            "id": "chunk_2_upload_media_13",
            "code": "        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n"
        },
        {
            "id": "chunk_2_upload_media_14",
            "code": "        # Reset file pointer\n        await file.seek(0)\n"
        },
        {
            "id": "chunk_2_upload_media_15",
            "code": "        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n"
        },
        {
            "id": "chunk_2_upload_media_16",
            "code": "        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n"
        },
        {
            "id": "chunk_2_upload_media_17",
            "code": "        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n"
        },
        {
            "id": "chunk_2_upload_media_18",
            "code": "        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n"
        },
        {
            "id": "chunk_2_upload_media_19",
            "code": "    except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n"
        },
        {
            "id": "chunk_2_upload_media_20",
            "code": "    except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_1_check_media_exists_1",
            "to": "chunk_1_check_media_exists_2"
        },
        {
            "from": "chunk_1_check_media_exists_2",
            "to": "chunk_1_check_media_exists_3"
        },
        {
            "from": "chunk_1_check_media_exists_3",
            "to": "chunk_1_check_media_exists_4"
        },
        {
            "from": "chunk_1_check_media_exists_3",
            "to": "chunk_1_check_media_exists_5"
        },
        {
            "from": "chunk_1_check_media_exists_4",
            "to": "chunk_1_check_media_exists_5"
        },
        {
            "from": "chunk_2_upload_media_1",
            "to": "chunk_2_upload_media_2"
        },
        {
            "from": "chunk_2_upload_media_2",
            "to": "chunk_2_upload_media_3"
        },
        {
            "from": "chunk_2_upload_media_3",
            "to": "chunk_2_upload_media_4"
        },
        {
            "from": "chunk_2_upload_media_3",
            "to": "chunk_2_upload_media_5"
        },
        {
            "from": "chunk_2_upload_media_5",
            "to": "chunk_2_upload_media_6"
        },
        {
            "from": "chunk_2_upload_media_5",
            "to": "chunk_2_upload_media_7"
        },
        {
            "from": "chunk_2_upload_media_6",
            "to": "chunk_2_upload_media_8"
        },
        {
            "from": "chunk_2_upload_media_7",
            "to": "chunk_2_upload_media_8"
        },
        {
            "from": "chunk_2_upload_media_8",
            "to": "chunk_2_upload_media_9"
        },
        {
            "from": "chunk_2_upload_media_9",
            "to": "chunk_2_upload_media_10"
        },
        {
            "from": "chunk_2_upload_media_10",
            "to": "chunk_2_upload_media_11"
        },
        {
            "from": "chunk_2_upload_media_11",
            "to": "chunk_2_upload_media_12"
        },
        {
            "from": "chunk_2_upload_media_11",
            "to": "chunk_2_upload_media_13"
        },
        {
            "from": "chunk_2_upload_media_14",
            "to": "chunk_2_upload_media_15"
        },
        {
            "from": "chunk_2_upload_media_15",
            "to": "chunk_2_upload_media_16"
        },
        {
            "from": "chunk_2_upload_media_16",
            "to": "chunk_2_upload_media_17"
        },
        {
            "from": "chunk_2_upload_media_17",
            "to": "chunk_2_upload_media_18"
        }
    ]
}