{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import re\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_1",
            "code": "class CodeExtractionBlock(Block):\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_2",
            "code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_3",
            "code": "\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_4",
            "code": "    class Output(BlockSchema):\n        html: str = SchemaField(description=\"Extracted HTML code\")\n        css: str = SchemaField(description=\"Extracted CSS code\")\n        javascript: str = SchemaField(description=\"Extracted JavaScript code\")\n        python: str = SchemaField(description=\"Extracted Python code\")\n        sql: str = SchemaField(description=\"Extracted SQL code\")\n        java: str = SchemaField(description=\"Extracted Java code\")\n        cpp: str = SchemaField(description=\"Extracted C++ code\")\n        csharp: str = SchemaField(description=\"Extracted C# code\")\n        json_code: str = SchemaField(description=\"Extracted JSON code\")\n        bash: str = SchemaField(description=\"Extracted Bash code\")\n        php: str = SchemaField(description=\"Extracted PHP code\")\n        ruby: str = SchemaField(description=\"Extracted Ruby code\")\n        yaml: str = SchemaField(description=\"Extracted YAML code\")\n        markdown: str = SchemaField(description=\"Extracted Markdown code\")\n        typescript: str = SchemaField(description=\"Extracted TypeScript code\")\n        xml: str = SchemaField(description=\"Extracted XML code\")\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_5",
            "code": "        remaining_text: str = SchemaField(\n            description=\"Remaining text after code extraction\"\n        )\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_6",
            "code": "\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_7",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\n            description=\"Extracts code blocks from text and identifies their programming languages\",\n            categories={BlockCategory.TEXT},\n            input_schema=CodeExtractionBlock.Input,\n            output_schema=CodeExtractionBlock.Output,\n            test_input={\n                \"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"\n            },\n            test_output=[\n                (\"html\", \"<h1>Title</h1>\"),\n                (\"python\", \"print('Hello World')\"),\n                (\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\"),\n            ],\n        )\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_8",
            "code": "\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_9",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        # List of supported programming languages with mapped aliases\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_10",
            "code": "        language_aliases = {\n            \"html\": [\"html\", \"htm\"],\n            \"css\": [\"css\"],\n            \"javascript\": [\"javascript\", \"js\"],\n            \"python\": [\"python\", \"py\"],\n            \"sql\": [\"sql\"],\n            \"java\": [\"java\"],\n            \"cpp\": [\"cpp\", \"c++\"],\n            \"csharp\": [\"csharp\", \"c#\", \"cs\"],\n            \"json_code\": [\"json\"],\n            \"bash\": [\"bash\", \"shell\", \"sh\"],\n            \"php\": [\"php\"],\n            \"ruby\": [\"ruby\", \"rb\"],\n            \"yaml\": [\"yaml\", \"yml\"],\n            \"markdown\": [\"markdown\", \"md\"],\n            \"typescript\": [\"typescript\", \"ts\"],\n            \"xml\": [\"xml\"],\n        }\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_11",
            "code": "\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_12",
            "code": "        # Extract code for each language\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_13",
            "code": "        for canonical_name, aliases in language_aliases.items():\n            code = \"\"\n            # Try each alias for the language\n            for alias in aliases:\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if code_for_alias:\n                    code = code + \"\\n\\n\" + code_for_alias if code else code_for_alias\n\n            if code:  # Only yield if there's actual code content\n                yield canonical_name, code\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_14",
            "code": "\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_15",
            "code": "        # Remove all code blocks from the text to get remaining text\n        pattern = (\n            r\"```(?:\"\n            + \"|\".join(\n                re.escape(alias)\n                for aliases in language_aliases.values()\n                for alias in aliases\n            )\n            + r\")\\s+[\\s\\S]*?```\"\n        )\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_16",
            "code": "\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_17",
            "code": "        remaining_text = re.sub(pattern, \"\", input_data.text).strip()\n        remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_18",
            "code": "\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_19",
            "code": "        if remaining_text:  # Only yield if there's remaining text\n            yield \"remaining_text\", remaining_text\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_20",
            "code": "\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_21",
            "code": "    def extract_code(self, text: str, language: str) -> str:\n        # Escape special regex characters in the language string\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_22",
            "code": "        language = re.escape(language)\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_23",
            "code": "        # Extract all code blocks enclosed in ```language``` blocks\n        pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\n        matches = pattern.finditer(text)\n        # Combine all code blocks for this language with newlines between them\n        code_blocks = [match.group(1).strip() for match in matches]\n        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"\n"
        },
        {
            "id": "chunk_1_CodeExtractionBlock_24",
            "code": "\n\n"
        },
        {
            "id": "chunk_2_CodeExtractionBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )\n"
        },
        {
            "id": "chunk_3_CodeExtractionBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        html: str = SchemaField(description=\"Extracted HTML code\")\n        css: str = SchemaField(description=\"Extracted CSS code\")\n        javascript: str = SchemaField(description=\"Extracted JavaScript code\")\n        python: str = SchemaField(description=\"Extracted Python code\")\n        sql: str = SchemaField(description=\"Extracted SQL code\")\n        java: str = SchemaField(description=\"Extracted Java code\")\n        cpp: str = SchemaField(description=\"Extracted C++ code\")\n        csharp: str = SchemaField(description=\"Extracted C# code\")\n        json_code: str = SchemaField(description=\"Extracted JSON code\")\n        bash: str = SchemaField(description=\"Extracted Bash code\")\n        php: str = SchemaField(description=\"Extracted PHP code\")\n        ruby: str = SchemaField(description=\"Extracted Ruby code\")\n        yaml: str = SchemaField(description=\"Extracted YAML code\")\n        markdown: str = SchemaField(description=\"Extracted Markdown code\")\n        typescript: str = SchemaField(description=\"Extracted TypeScript code\")\n        xml: str = SchemaField(description=\"Extracted XML code\")\n        remaining_text: str = SchemaField(\n            description=\"Remaining text after code extraction\"\n        )\n"
        },
        {
            "id": "chunk_4_CodeExtractionBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\n            description=\"Extracts code blocks from text and identifies their programming languages\",\n            categories={BlockCategory.TEXT},\n            input_schema=CodeExtractionBlock.Input,\n            output_schema=CodeExtractionBlock.Output,\n            test_input={\n                \"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"\n            },\n            test_output=[\n                (\"html\", \"<h1>Title</h1>\"),\n                (\"python\", \"print('Hello World')\"),\n                (\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\"),\n            ],\n        )\n"
        },
        {
            "id": "chunk_5_CodeExtractionBlock.run_1",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        # List of supported programming languages with mapped aliases\n"
        },
        {
            "id": "chunk_5_CodeExtractionBlock.run_2",
            "code": "        language_aliases = {\n            \"html\": [\"html\", \"htm\"],\n            \"css\": [\"css\"],\n            \"javascript\": [\"javascript\", \"js\"],\n            \"python\": [\"python\", \"py\"],\n            \"sql\": [\"sql\"],\n            \"java\": [\"java\"],\n            \"cpp\": [\"cpp\", \"c++\"],\n            \"csharp\": [\"csharp\", \"c#\", \"cs\"],\n            \"json_code\": [\"json\"],\n            \"bash\": [\"bash\", \"shell\", \"sh\"],\n            \"php\": [\"php\"],\n            \"ruby\": [\"ruby\", \"rb\"],\n            \"yaml\": [\"yaml\", \"yml\"],\n            \"markdown\": [\"markdown\", \"md\"],\n            \"typescript\": [\"typescript\", \"ts\"],\n            \"xml\": [\"xml\"],\n        }\n"
        },
        {
            "id": "chunk_5_CodeExtractionBlock.run_3",
            "code": "        # Extract code for each language\n        for canonical_name, aliases in language_aliases.items():\n"
        },
        {
            "id": "chunk_5_CodeExtractionBlock.run_4",
            "code": "            code = \"\"\n            # Try each alias for the language\n"
        },
        {
            "id": "chunk_5_CodeExtractionBlock.run_5",
            "code": "            for alias in aliases:\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if code_for_alias:\n                    code = code + \"\\n\\n\" + code_for_alias if code else code_for_alias\n"
        },
        {
            "id": "chunk_5_CodeExtractionBlock.run_6",
            "code": "            if code:  # Only yield if there's actual code content\n                yield canonical_name, code\n"
        },
        {
            "id": "chunk_5_CodeExtractionBlock.run_7",
            "code": "        # Remove all code blocks from the text to get remaining text\n        pattern = (\n            r\"```(?:\"\n            + \"|\".join(\n                re.escape(alias)\n                for aliases in language_aliases.values()\n                for alias in aliases\n            )\n            + r\")\\s+[\\s\\S]*?```\"\n        )\n"
        },
        {
            "id": "chunk_5_CodeExtractionBlock.run_8",
            "code": "        remaining_text = re.sub(pattern, \"\", input_data.text).strip()\n        remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)\n"
        },
        {
            "id": "chunk_5_CodeExtractionBlock.run_9",
            "code": "        if remaining_text:  # Only yield if there's remaining text\n            yield \"remaining_text\", remaining_text\n"
        },
        {
            "id": "chunk_6_CodeExtractionBlock.extract_code_1",
            "code": "    def extract_code(self, text: str, language: str) -> str:\n"
        },
        {
            "id": "chunk_6_CodeExtractionBlock.extract_code_2",
            "code": "        # Escape special regex characters in the language string\n        language = re.escape(language)\n"
        },
        {
            "id": "chunk_6_CodeExtractionBlock.extract_code_3",
            "code": "        # Extract all code blocks enclosed in ```language``` blocks\n        pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\n        matches = pattern.finditer(text)\n"
        },
        {
            "id": "chunk_6_CodeExtractionBlock.extract_code_4",
            "code": "        # Combine all code blocks for this language with newlines between them\n        code_blocks = [match.group(1).strip() for match in matches]\n"
        },
        {
            "id": "chunk_6_CodeExtractionBlock.extract_code_5",
            "code": "        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_1",
            "to": "chunk_1_CodeExtractionBlock_2"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_2",
            "to": "chunk_1_CodeExtractionBlock_3"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_3",
            "to": "chunk_1_CodeExtractionBlock_4"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_4",
            "to": "chunk_1_CodeExtractionBlock_5"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_5",
            "to": "chunk_1_CodeExtractionBlock_6"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_6",
            "to": "chunk_1_CodeExtractionBlock_7"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_7",
            "to": "chunk_1_CodeExtractionBlock_8"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_8",
            "to": "chunk_1_CodeExtractionBlock_9"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_9",
            "to": "chunk_1_CodeExtractionBlock_10"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_10",
            "to": "chunk_1_CodeExtractionBlock_11"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_11",
            "to": "chunk_1_CodeExtractionBlock_12"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_12",
            "to": "chunk_1_CodeExtractionBlock_13"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_13",
            "to": "chunk_1_CodeExtractionBlock_14"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_14",
            "to": "chunk_1_CodeExtractionBlock_15"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_15",
            "to": "chunk_1_CodeExtractionBlock_16"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_16",
            "to": "chunk_1_CodeExtractionBlock_17"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_17",
            "to": "chunk_1_CodeExtractionBlock_18"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_18",
            "to": "chunk_1_CodeExtractionBlock_19"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_19",
            "to": "chunk_1_CodeExtractionBlock_20"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_20",
            "to": "chunk_1_CodeExtractionBlock_21"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_21",
            "to": "chunk_1_CodeExtractionBlock_22"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_22",
            "to": "chunk_1_CodeExtractionBlock_23"
        },
        {
            "from": "chunk_1_CodeExtractionBlock_23",
            "to": "chunk_1_CodeExtractionBlock_24"
        },
        {
            "from": "chunk_5_CodeExtractionBlock.run_1",
            "to": "chunk_5_CodeExtractionBlock.run_2"
        },
        {
            "from": "chunk_5_CodeExtractionBlock.run_2",
            "to": "chunk_5_CodeExtractionBlock.run_3"
        },
        {
            "from": "chunk_5_CodeExtractionBlock.run_3",
            "to": "chunk_5_CodeExtractionBlock.run_4"
        },
        {
            "from": "chunk_5_CodeExtractionBlock.run_4",
            "to": "chunk_5_CodeExtractionBlock.run_5"
        },
        {
            "from": "chunk_5_CodeExtractionBlock.run_5",
            "to": "chunk_5_CodeExtractionBlock.run_6"
        },
        {
            "from": "chunk_5_CodeExtractionBlock.run_6",
            "to": "chunk_5_CodeExtractionBlock.run_3"
        },
        {
            "from": "chunk_5_CodeExtractionBlock.run_6",
            "to": "chunk_5_CodeExtractionBlock.run_7"
        },
        {
            "from": "chunk_5_CodeExtractionBlock.run_7",
            "to": "chunk_5_CodeExtractionBlock.run_8"
        },
        {
            "from": "chunk_5_CodeExtractionBlock.run_8",
            "to": "chunk_5_CodeExtractionBlock.run_9"
        },
        {
            "from": "chunk_6_CodeExtractionBlock.extract_code_1",
            "to": "chunk_6_CodeExtractionBlock.extract_code_2"
        },
        {
            "from": "chunk_6_CodeExtractionBlock.extract_code_2",
            "to": "chunk_6_CodeExtractionBlock.extract_code_3"
        },
        {
            "from": "chunk_6_CodeExtractionBlock.extract_code_3",
            "to": "chunk_6_CodeExtractionBlock.extract_code_4"
        },
        {
            "from": "chunk_6_CodeExtractionBlock.extract_code_4",
            "to": "chunk_6_CodeExtractionBlock.extract_code_5"
        }
    ]
}