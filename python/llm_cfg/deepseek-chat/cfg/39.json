{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import asyncio\nfrom typing import Literal\n\nimport aiohttp\nimport discord\nfrom pydantic import SecretStr\n\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "DiscordCredentials = CredentialsMetaInput[\n    Literal[ProviderName.DISCORD], Literal[\"api_key\"]\n]\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "def DiscordCredentialsField() -> DiscordCredentials:\n    return CredentialsField(description=\"Discord bot token\")\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"discord\",\n    api_key=SecretStr(\"test_api_key\"),\n    title=\"Mock Discord API key\",\n    expires_at=None,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_6",
            "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n"
        },
        {
            "id": "chunk_1_DiscordCredentialsField_1",
            "code": "def DiscordCredentialsField() -> DiscordCredentials:\n    return CredentialsField(description=\"Discord bot token\")\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_1",
            "code": "class ReadDiscordMessagesBlock(Block):\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_3",
            "code": "    class Output(BlockSchema):\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n        username: str = SchemaField(\n            description=\"The username of the user who sent the message\"\n        )\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_5",
            "code": "    async def run_bot(self, token: SecretStr):\n        intents = discord.Intents.default()\n        intents.message_content = True\n\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_6",
            "code": "        client = discord.Client(intents=intents)\n\n        self.output_data = None\n        self.channel_name = None\n        self.username = None\n\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_7",
            "code": "        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_8",
            "code": "        @client.event\n        async def on_message(message):\n            if message.author == client.user:\n                return\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_9",
            "code": "            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_10",
            "code": "            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_11",
            "code": "            await client.close()\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_12",
            "code": "        await client.start(token.get_secret_value())\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_13",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        while True:\n            for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value\n            break\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_14",
            "code": "    def __run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_15",
            "code": "            if isinstance(future, asyncio.Future):\n                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_16",
            "code": "            result = loop.run_until_complete(future)\n\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_17",
            "code": "            if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_18",
            "code": "            if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n                raise ValueError(\"No message, channel name, or username received.\")\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_19",
            "code": "            yield \"message_content\", self.output_data\n            yield \"channel_name\", self.channel_name\n            yield \"username\", self.username\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_20",
            "code": "        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n"
        },
        {
            "id": "chunk_2_ReadDiscordMessagesBlock_21",
            "code": "        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")\n"
        },
        {
            "id": "chunk_3_ReadDiscordMessagesBlock__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_1",
            "code": "    async def run_bot(self, token: SecretStr):\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_2",
            "code": "        intents = discord.Intents.default()\n        intents.message_content = True\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_3",
            "code": "        client = discord.Client(intents=intents)\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_4",
            "code": "        self.output_data = None\n        self.channel_name = None\n        self.username = None\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_5",
            "code": "        @client.event\n        async def on_ready():\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_6",
            "code": "            print(f\"Logged in as {client.user}\")\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_7",
            "code": "        @client.event\n        async def on_message(message):\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_8",
            "code": "            if message.author == client.user:\n                return\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_9",
            "code": "            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_10",
            "code": "            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_11",
            "code": "                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_12",
            "code": "            await client.close()\n"
        },
        {
            "id": "chunk_4_ReadDiscordMessagesBlock_run_bot_13",
            "code": "        await client.start(token.get_secret_value())\n"
        },
        {
            "id": "chunk_5_ReadDiscordMessagesBlock_run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_5_ReadDiscordMessagesBlock_run_2",
            "code": "        while True:\n            for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value\n            break\n"
        },
        {
            "id": "chunk_6_ReadDiscordMessagesBlock__run_1",
            "code": "    def __run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        try:\n"
        },
        {
            "id": "chunk_6_ReadDiscordMessagesBlock__run_2",
            "code": "            loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n\n"
        },
        {
            "id": "chunk_6_ReadDiscordMessagesBlock__run_3",
            "code": "            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n"
        },
        {
            "id": "chunk_6_ReadDiscordMessagesBlock__run_4",
            "code": "                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n"
        },
        {
            "id": "chunk_6_ReadDiscordMessagesBlock__run_5",
            "code": "\n            result = loop.run_until_complete(future)\n"
        },
        {
            "id": "chunk_6_ReadDiscordMessagesBlock__run_6",
            "code": "\n            # For testing purposes, use the mocked result\n"
        },
        {
            "id": "chunk_6_ReadDiscordMessagesBlock__run_7",
            "code": "            if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")\n"
        },
        {
            "id": "chunk_6_ReadDiscordMessagesBlock__run_8",
            "code": "\n            if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n"
        },
        {
            "id": "chunk_6_ReadDiscordMessagesBlock__run_9",
            "code": "                raise ValueError(\"No message, channel name, or username received.\")\n"
        },
        {
            "id": "chunk_6_ReadDiscordMessagesBlock__run_10",
            "code": "\n            yield \"message_content\", self.output_data\n            yield \"channel_name\", self.channel_name\n            yield \"username\", self.username\n\n"
        },
        {
            "id": "chunk_6_ReadDiscordMessagesBlock__run_11",
            "code": "        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n"
        },
        {
            "id": "chunk_6_ReadDiscordMessagesBlock__run_12",
            "code": "        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")\n"
        },
        {
            "id": "chunk_7_on_ready_1",
            "code": "        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n"
        },
        {
            "id": "chunk_8_on_message_1",
            "code": "        async def on_message(message):\n            if message.author == client.user:\n                return\n"
        },
        {
            "id": "chunk_8_on_message_2",
            "code": "            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n"
        },
        {
            "id": "chunk_8_on_message_3",
            "code": "            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n"
        },
        {
            "id": "chunk_8_on_message_4",
            "code": "                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n"
        },
        {
            "id": "chunk_8_on_message_5",
            "code": "            await client.close()\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_1",
            "code": "class SendDiscordMessageBlock(Block):\n    class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_2",
            "code": "        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_3",
            "code": "        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_4",
            "code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_5",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_6",
            "code": "    async def send_message(self, token: str, channel_name: str, message_content: str):\n        intents = discord.Intents.default()\n        intents.guilds = True  # Required for fetching guild/channel information\n        client = discord.Client(intents=intents)\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_7",
            "code": "        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_8",
            "code": "            for guild in client.guilds:\n                for channel in guild.text_channels:\n                    if channel.name == channel_name:\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_9",
            "code": "                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_10",
            "code": "            self.output_data = \"Channel not found\"\n            await client.close()\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_11",
            "code": "        await client.start(token)\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_12",
            "code": "    def chunk_message(self, message: str, limit: int = 2000) -> list:\n        \"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"\n        return [message[i : i + limit] for i in range(0, len(message), limit)]\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_13",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_14",
            "code": "            loop = asyncio.get_event_loop()\n            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_15",
            "code": "            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\"Message sent\")\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_16",
            "code": "            result = loop.run_until_complete(future)\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_17",
            "code": "            # For testing purposes, use the mocked result\n            if isinstance(result, str):\n                self.output_data = result\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_18",
            "code": "            if self.output_data is None:\n                raise ValueError(\"No status message received.\")\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_19",
            "code": "            yield \"status\", self.output_data\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_20",
            "code": "        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n"
        },
        {
            "id": "chunk_9_SendDiscordMessageBlock_21",
            "code": "        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")\n"
        },
        {
            "id": "chunk_10_SendDiscordMessageBlock__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n"
        },
        {
            "id": "chunk_11_SendDiscordMessageBlock_send_message_1",
            "code": "    async def send_message(self, token: str, channel_name: str, message_content: str):\n        intents = discord.Intents.default()\n        intents.guilds = True  # Required for fetching guild/channel information\n        client = discord.Client(intents=intents)\n"
        },
        {
            "id": "chunk_11_SendDiscordMessageBlock_send_message_2",
            "code": "        @client.event\n        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n"
        },
        {
            "id": "chunk_11_SendDiscordMessageBlock_send_message_3",
            "code": "            for guild in client.guilds:\n                for channel in guild.text_channels:\n"
        },
        {
            "id": "chunk_11_SendDiscordMessageBlock_send_message_4",
            "code": "                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n"
        },
        {
            "id": "chunk_11_SendDiscordMessageBlock_send_message_5",
            "code": "            self.output_data = \"Channel not found\"\n            await client.close()\n"
        },
        {
            "id": "chunk_11_SendDiscordMessageBlock_send_message_6",
            "code": "        await client.start(token)\n"
        },
        {
            "id": "chunk_12_SendDiscordMessageBlock_chunk_message_1",
            "code": "    def chunk_message(self, message: str, limit: int = 2000) -> list:\n        \"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"\n        return [message[i : i + limit] for i in range(0, len(message), limit)]\n"
        },
        {
            "id": "chunk_13_SendDiscordMessageBlock_run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_13_SendDiscordMessageBlock_run_2",
            "code": "        try:\n            loop = asyncio.get_event_loop()\n"
        },
        {
            "id": "chunk_13_SendDiscordMessageBlock_run_3",
            "code": "            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n"
        },
        {
            "id": "chunk_13_SendDiscordMessageBlock_run_4",
            "code": "            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n"
        },
        {
            "id": "chunk_13_SendDiscordMessageBlock_run_5",
            "code": "                future.set_result(\"Message sent\")\n"
        },
        {
            "id": "chunk_13_SendDiscordMessageBlock_run_6",
            "code": "            result = loop.run_until_complete(future)\n"
        },
        {
            "id": "chunk_13_SendDiscordMessageBlock_run_7",
            "code": "            # For testing purposes, use the mocked result\n            if isinstance(result, str):\n"
        },
        {
            "id": "chunk_13_SendDiscordMessageBlock_run_8",
            "code": "                self.output_data = result\n"
        },
        {
            "id": "chunk_13_SendDiscordMessageBlock_run_9",
            "code": "            if self.output_data is None:\n                raise ValueError(\"No status message received.\")\n"
        },
        {
            "id": "chunk_13_SendDiscordMessageBlock_run_10",
            "code": "            yield \"status\", self.output_data\n"
        },
        {
            "id": "chunk_13_SendDiscordMessageBlock_run_11",
            "code": "        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n"
        },
        {
            "id": "chunk_13_SendDiscordMessageBlock_run_12",
            "code": "        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")\n"
        },
        {
            "id": "chunk_14_on_ready_1",
            "code": "        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n"
        },
        {
            "id": "chunk_14_on_ready_2",
            "code": "            for guild in client.guilds:\n                for channel in guild.text_channels:\n"
        },
        {
            "id": "chunk_14_on_ready_3",
            "code": "                    if channel.name == channel_name:\n"
        },
        {
            "id": "chunk_14_on_ready_4",
            "code": "                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n"
        },
        {
            "id": "chunk_14_on_ready_5",
            "code": "                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n"
        },
        {
            "id": "chunk_14_on_ready_6",
            "code": "            self.output_data = \"Channel not found\"\n            await client.close()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_0_GlobalBlock_5",
            "to": "chunk_0_GlobalBlock_6"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_1",
            "to": "chunk_2_ReadDiscordMessagesBlock_2"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_2",
            "to": "chunk_2_ReadDiscordMessagesBlock_3"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_3",
            "to": "chunk_2_ReadDiscordMessagesBlock_4"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_4",
            "to": "chunk_2_ReadDiscordMessagesBlock_5"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_5",
            "to": "chunk_2_ReadDiscordMessagesBlock_6"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_6",
            "to": "chunk_2_ReadDiscordMessagesBlock_7"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_7",
            "to": "chunk_2_ReadDiscordMessagesBlock_8"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_8",
            "to": "chunk_2_ReadDiscordMessagesBlock_9"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_9",
            "to": "chunk_2_ReadDiscordMessagesBlock_10"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_10",
            "to": "chunk_2_ReadDiscordMessagesBlock_11"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_11",
            "to": "chunk_2_ReadDiscordMessagesBlock_12"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_13",
            "to": "chunk_2_ReadDiscordMessagesBlock_14"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_14",
            "to": "chunk_2_ReadDiscordMessagesBlock_15"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_15",
            "to": "chunk_2_ReadDiscordMessagesBlock_16"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_16",
            "to": "chunk_2_ReadDiscordMessagesBlock_17"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_17",
            "to": "chunk_2_ReadDiscordMessagesBlock_18"
        },
        {
            "from": "chunk_2_ReadDiscordMessagesBlock_18",
            "to": "chunk_2_ReadDiscordMessagesBlock_19"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_1",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_2"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_2",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_3"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_3",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_4"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_4",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_5"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_4",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_7"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_5",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_6"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_7",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_8"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_8",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_9"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_8",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_12"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_9",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_10"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_10",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_11"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_10",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_12"
        },
        {
            "from": "chunk_4_ReadDiscordMessagesBlock_run_bot_11",
            "to": "chunk_4_ReadDiscordMessagesBlock_run_bot_12"
        },
        {
            "from": "chunk_5_ReadDiscordMessagesBlock_run_1",
            "to": "chunk_5_ReadDiscordMessagesBlock_run_2"
        },
        {
            "from": "chunk_6_ReadDiscordMessagesBlock__run_1",
            "to": "chunk_6_ReadDiscordMessagesBlock__run_2"
        },
        {
            "from": "chunk_6_ReadDiscordMessagesBlock__run_2",
            "to": "chunk_6_ReadDiscordMessagesBlock__run_3"
        },
        {
            "from": "chunk_6_ReadDiscordMessagesBlock__run_3",
            "to": "chunk_6_ReadDiscordMessagesBlock__run_4"
        },
        {
            "from": "chunk_6_ReadDiscordMessagesBlock__run_3",
            "to": "chunk_6_ReadDiscordMessagesBlock__run_5"
        },
        {
            "from": "chunk_6_ReadDiscordMessagesBlock__run_4",
            "to": "chunk_6_ReadDiscordMessagesBlock__run_5"
        },
        {
            "from": "chunk_6_ReadDiscordMessagesBlock__run_5",
            "to": "chunk_6_ReadDiscordMessagesBlock__run_6"
        },
        {
            "from": "chunk_6_ReadDiscordMessagesBlock__run_6",
            "to": "chunk_6_ReadDiscordMessagesBlock__run_7"
        },
        {
            "from": "chunk_6_ReadDiscordMessagesBlock__run_7",
            "to": "chunk_6_ReadDiscordMessagesBlock__run_8"
        },
        {
            "from": "chunk_6_ReadDiscordMessagesBlock__run_8",
            "to": "chunk_6_ReadDiscordMessagesBlock__run_9"
        },
        {
            "from": "chunk_6_ReadDiscordMessagesBlock__run_8",
            "to": "chunk_6_ReadDiscordMessagesBlock__run_10"
        },
        {
            "from": "chunk_8_on_message_1",
            "to": "chunk_8_on_message_2"
        },
        {
            "from": "chunk_8_on_message_2",
            "to": "chunk_8_on_message_3"
        },
        {
            "from": "chunk_8_on_message_2",
            "to": "chunk_8_on_message_5"
        },
        {
            "from": "chunk_8_on_message_3",
            "to": "chunk_8_on_message_4"
        },
        {
            "from": "chunk_8_on_message_3",
            "to": "chunk_8_on_message_5"
        },
        {
            "from": "chunk_8_on_message_4",
            "to": "chunk_8_on_message_5"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_1",
            "to": "chunk_9_SendDiscordMessageBlock_2"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_2",
            "to": "chunk_9_SendDiscordMessageBlock_3"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_3",
            "to": "chunk_9_SendDiscordMessageBlock_4"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_4",
            "to": "chunk_9_SendDiscordMessageBlock_5"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_5",
            "to": "chunk_9_SendDiscordMessageBlock_6"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_5",
            "to": "chunk_9_SendDiscordMessageBlock_12"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_5",
            "to": "chunk_9_SendDiscordMessageBlock_13"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_6",
            "to": "chunk_9_SendDiscordMessageBlock_7"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_7",
            "to": "chunk_9_SendDiscordMessageBlock_8"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_8",
            "to": "chunk_9_SendDiscordMessageBlock_9"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_8",
            "to": "chunk_9_SendDiscordMessageBlock_10"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_9",
            "to": "chunk_9_SendDiscordMessageBlock_11"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_10",
            "to": "chunk_9_SendDiscordMessageBlock_11"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_13",
            "to": "chunk_9_SendDiscordMessageBlock_14"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_14",
            "to": "chunk_9_SendDiscordMessageBlock_15"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_15",
            "to": "chunk_9_SendDiscordMessageBlock_16"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_16",
            "to": "chunk_9_SendDiscordMessageBlock_17"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_17",
            "to": "chunk_9_SendDiscordMessageBlock_18"
        },
        {
            "from": "chunk_9_SendDiscordMessageBlock_18",
            "to": "chunk_9_SendDiscordMessageBlock_19"
        },
        {
            "from": "chunk_11_SendDiscordMessageBlock_send_message_1",
            "to": "chunk_11_SendDiscordMessageBlock_send_message_6"
        },
        {
            "from": "chunk_11_SendDiscordMessageBlock_send_message_3",
            "to": "chunk_11_SendDiscordMessageBlock_send_message_4"
        },
        {
            "from": "chunk_11_SendDiscordMessageBlock_send_message_3",
            "to": "chunk_11_SendDiscordMessageBlock_send_message_5"
        },
        {
            "from": "chunk_13_SendDiscordMessageBlock_run_1",
            "to": "chunk_13_SendDiscordMessageBlock_run_2"
        },
        {
            "from": "chunk_13_SendDiscordMessageBlock_run_2",
            "to": "chunk_13_SendDiscordMessageBlock_run_3"
        },
        {
            "from": "chunk_13_SendDiscordMessageBlock_run_3",
            "to": "chunk_13_SendDiscordMessageBlock_run_4"
        },
        {
            "from": "chunk_13_SendDiscordMessageBlock_run_4",
            "to": "chunk_13_SendDiscordMessageBlock_run_5"
        },
        {
            "from": "chunk_13_SendDiscordMessageBlock_run_4",
            "to": "chunk_13_SendDiscordMessageBlock_run_6"
        },
        {
            "from": "chunk_13_SendDiscordMessageBlock_run_5",
            "to": "chunk_13_SendDiscordMessageBlock_run_6"
        },
        {
            "from": "chunk_13_SendDiscordMessageBlock_run_6",
            "to": "chunk_13_SendDiscordMessageBlock_run_7"
        },
        {
            "from": "chunk_13_SendDiscordMessageBlock_run_7",
            "to": "chunk_13_SendDiscordMessageBlock_run_8"
        },
        {
            "from": "chunk_13_SendDiscordMessageBlock_run_7",
            "to": "chunk_13_SendDiscordMessageBlock_run_9"
        },
        {
            "from": "chunk_13_SendDiscordMessageBlock_run_8",
            "to": "chunk_13_SendDiscordMessageBlock_run_9"
        },
        {
            "from": "chunk_13_SendDiscordMessageBlock_run_9",
            "to": "chunk_13_SendDiscordMessageBlock_run_10"
        },
        {
            "from": "chunk_13_SendDiscordMessageBlock_run_9",
            "to": "chunk_13_SendDiscordMessageBlock_run_11"
        },
        {
            "from": "chunk_14_on_ready_1",
            "to": "chunk_14_on_ready_2"
        },
        {
            "from": "chunk_14_on_ready_2",
            "to": "chunk_14_on_ready_3"
        },
        {
            "from": "chunk_14_on_ready_2",
            "to": "chunk_14_on_ready_6"
        },
        {
            "from": "chunk_14_on_ready_3",
            "to": "chunk_14_on_ready_4"
        },
        {
            "from": "chunk_14_on_ready_3",
            "to": "chunk_14_on_ready_6"
        },
        {
            "from": "chunk_14_on_ready_4",
            "to": "chunk_14_on_ready_5"
        }
    ]
}